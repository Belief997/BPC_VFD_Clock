

Microchip Technology PIC LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Thu Mar 28 00:52:30 2019

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1                           	processor	16F1786
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	stringtext1,global,class=STRCODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	intentry,global,class=CODE,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2,group=1
    22                           	dabs	1,0x7E,2
    23  0000                     
    24                           ; Version 2.00
    25                           ; Generated 27/05/2018 GMT
    26                           ; 
    27                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    28                           ; All rights reserved.
    29                           ; 
    30                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    31                           ; 
    32                           ; Redistribution and use in source and binary forms, with or without modification, are
    33                           ; permitted provided that the following conditions are met:
    34                           ; 
    35                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    36                           ;        conditions and the following disclaimer.
    37                           ; 
    38                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    39                           ;        of conditions and the following disclaimer in the documentation and/or other
    40                           ;        materials provided with the distribution.
    41                           ; 
    42                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    43                           ;        software without specific prior written permission.
    44                           ; 
    45                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    46                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    47                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    48                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    49                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    50                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    51                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    52                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    53                           ; 
    54                           ; 
    55                           ; Code-generator required, PIC16F1786 Definitions
    56                           ; 
    57                           ; SFR Addresses
    58  0000                     	;# 
    59  0001                     	;# 
    60  0002                     	;# 
    61  0003                     	;# 
    62  0004                     	;# 
    63  0005                     	;# 
    64  0006                     	;# 
    65  0007                     	;# 
    66  0008                     	;# 
    67  0009                     	;# 
    68  000A                     	;# 
    69  000B                     	;# 
    70  000C                     	;# 
    71  000D                     	;# 
    72  000E                     	;# 
    73  0010                     	;# 
    74  0011                     	;# 
    75  0012                     	;# 
    76  0013                     	;# 
    77  0014                     	;# 
    78  0015                     	;# 
    79  0016                     	;# 
    80  0016                     	;# 
    81  0017                     	;# 
    82  0018                     	;# 
    83  0019                     	;# 
    84  001A                     	;# 
    85  001B                     	;# 
    86  001C                     	;# 
    87  008C                     	;# 
    88  008D                     	;# 
    89  008E                     	;# 
    90  0090                     	;# 
    91  0091                     	;# 
    92  0092                     	;# 
    93  0093                     	;# 
    94  0094                     	;# 
    95  0095                     	;# 
    96  0096                     	;# 
    97  0097                     	;# 
    98  0098                     	;# 
    99  0099                     	;# 
   100  009A                     	;# 
   101  009B                     	;# 
   102  009B                     	;# 
   103  009C                     	;# 
   104  009D                     	;# 
   105  009E                     	;# 
   106  009F                     	;# 
   107  010C                     	;# 
   108  010D                     	;# 
   109  010E                     	;# 
   110  0111                     	;# 
   111  0112                     	;# 
   112  0113                     	;# 
   113  0114                     	;# 
   114  0115                     	;# 
   115  0116                     	;# 
   116  0117                     	;# 
   117  0118                     	;# 
   118  0119                     	;# 
   119  011A                     	;# 
   120  011B                     	;# 
   121  011C                     	;# 
   122  011D                     	;# 
   123  011D                     	;# 
   124  011D                     	;# 
   125  011E                     	;# 
   126  011F                     	;# 
   127  018C                     	;# 
   128  018D                     	;# 
   129  0191                     	;# 
   130  0191                     	;# 
   131  0192                     	;# 
   132  0193                     	;# 
   133  0193                     	;# 
   134  0193                     	;# 
   135  0194                     	;# 
   136  0195                     	;# 
   137  0196                     	;# 
   138  0197                     	;# 
   139  0199                     	;# 
   140  0199                     	;# 
   141  0199                     	;# 
   142  019A                     	;# 
   143  019A                     	;# 
   144  019A                     	;# 
   145  019B                     	;# 
   146  019B                     	;# 
   147  019B                     	;# 
   148  019B                     	;# 
   149  019B                     	;# 
   150  019C                     	;# 
   151  019C                     	;# 
   152  019C                     	;# 
   153  019D                     	;# 
   154  019D                     	;# 
   155  019D                     	;# 
   156  019E                     	;# 
   157  019E                     	;# 
   158  019E                     	;# 
   159  019F                     	;# 
   160  019F                     	;# 
   161  019F                     	;# 
   162  019F                     	;# 
   163  019F                     	;# 
   164  020C                     	;# 
   165  020D                     	;# 
   166  020E                     	;# 
   167  0210                     	;# 
   168  0211                     	;# 
   169  0211                     	;# 
   170  0212                     	;# 
   171  0212                     	;# 
   172  0213                     	;# 
   173  0213                     	;# 
   174  0214                     	;# 
   175  0214                     	;# 
   176  0215                     	;# 
   177  0215                     	;# 
   178  0215                     	;# 
   179  0215                     	;# 
   180  0216                     	;# 
   181  0216                     	;# 
   182  0217                     	;# 
   183  0217                     	;# 
   184  028C                     	;# 
   185  028D                     	;# 
   186  028E                     	;# 
   187  0291                     	;# 
   188  0291                     	;# 
   189  0292                     	;# 
   190  0293                     	;# 
   191  0298                     	;# 
   192  0298                     	;# 
   193  0299                     	;# 
   194  029A                     	;# 
   195  030C                     	;# 
   196  030D                     	;# 
   197  030E                     	;# 
   198  0311                     	;# 
   199  0311                     	;# 
   200  0312                     	;# 
   201  0313                     	;# 
   202  038C                     	;# 
   203  038D                     	;# 
   204  038E                     	;# 
   205  0390                     	;# 
   206  0391                     	;# 
   207  0392                     	;# 
   208  0393                     	;# 
   209  0394                     	;# 
   210  0395                     	;# 
   211  0396                     	;# 
   212  0397                     	;# 
   213  0398                     	;# 
   214  0399                     	;# 
   215  039D                     	;# 
   216  039E                     	;# 
   217  039F                     	;# 
   218  0511                     	;# 
   219  0513                     	;# 
   220  051A                     	;# 
   221  0811                     	;# 
   222  0812                     	;# 
   223  0813                     	;# 
   224  0814                     	;# 
   225  0815                     	;# 
   226  0816                     	;# 
   227  0817                     	;# 
   228  0818                     	;# 
   229  0819                     	;# 
   230  081A                     	;# 
   231  081B                     	;# 
   232  081C                     	;# 
   233  081D                     	;# 
   234  081E                     	;# 
   235  081F                     	;# 
   236  0820                     	;# 
   237  0821                     	;# 
   238  0821                     	;# 
   239  0822                     	;# 
   240  0823                     	;# 
   241  0823                     	;# 
   242  0824                     	;# 
   243  0825                     	;# 
   244  0825                     	;# 
   245  0826                     	;# 
   246  0827                     	;# 
   247  0827                     	;# 
   248  0828                     	;# 
   249  0829                     	;# 
   250  082A                     	;# 
   251  082B                     	;# 
   252  082C                     	;# 
   253  082D                     	;# 
   254  082E                     	;# 
   255  082F                     	;# 
   256  0831                     	;# 
   257  0832                     	;# 
   258  0833                     	;# 
   259  0834                     	;# 
   260  0835                     	;# 
   261  0836                     	;# 
   262  0837                     	;# 
   263  0838                     	;# 
   264  0839                     	;# 
   265  083A                     	;# 
   266  083B                     	;# 
   267  083C                     	;# 
   268  083D                     	;# 
   269  083E                     	;# 
   270  083F                     	;# 
   271  0840                     	;# 
   272  0841                     	;# 
   273  0841                     	;# 
   274  0842                     	;# 
   275  0843                     	;# 
   276  0843                     	;# 
   277  0844                     	;# 
   278  0845                     	;# 
   279  0845                     	;# 
   280  0846                     	;# 
   281  0847                     	;# 
   282  0847                     	;# 
   283  0848                     	;# 
   284  0849                     	;# 
   285  084A                     	;# 
   286  084B                     	;# 
   287  084C                     	;# 
   288  084D                     	;# 
   289  084E                     	;# 
   290  084F                     	;# 
   291  0851                     	;# 
   292  0852                     	;# 
   293  0853                     	;# 
   294  0854                     	;# 
   295  0855                     	;# 
   296  0856                     	;# 
   297  0857                     	;# 
   298  0858                     	;# 
   299  0859                     	;# 
   300  085A                     	;# 
   301  085B                     	;# 
   302  085C                     	;# 
   303  085D                     	;# 
   304  085E                     	;# 
   305  085F                     	;# 
   306  0860                     	;# 
   307  0861                     	;# 
   308  0861                     	;# 
   309  0862                     	;# 
   310  0863                     	;# 
   311  0863                     	;# 
   312  0864                     	;# 
   313  0865                     	;# 
   314  0865                     	;# 
   315  0866                     	;# 
   316  0867                     	;# 
   317  0867                     	;# 
   318  0868                     	;# 
   319  0869                     	;# 
   320  086A                     	;# 
   321  086B                     	;# 
   322  086C                     	;# 
   323  086D                     	;# 
   324  086E                     	;# 
   325  086F                     	;# 
   326  0FE4                     	;# 
   327  0FE5                     	;# 
   328  0FE6                     	;# 
   329  0FE7                     	;# 
   330  0FE8                     	;# 
   331  0FE9                     	;# 
   332  0FEA                     	;# 
   333  0FEB                     	;# 
   334  0FED                     	;# 
   335  0FEE                     	;# 
   336  0FEF                     	;# 
   337  0000                     	;# 
   338  0001                     	;# 
   339  0002                     	;# 
   340  0003                     	;# 
   341  0004                     	;# 
   342  0005                     	;# 
   343  0006                     	;# 
   344  0007                     	;# 
   345  0008                     	;# 
   346  0009                     	;# 
   347  000A                     	;# 
   348  000B                     	;# 
   349  000C                     	;# 
   350  000D                     	;# 
   351  000E                     	;# 
   352  0010                     	;# 
   353  0011                     	;# 
   354  0012                     	;# 
   355  0013                     	;# 
   356  0014                     	;# 
   357  0015                     	;# 
   358  0016                     	;# 
   359  0016                     	;# 
   360  0017                     	;# 
   361  0018                     	;# 
   362  0019                     	;# 
   363  001A                     	;# 
   364  001B                     	;# 
   365  001C                     	;# 
   366  008C                     	;# 
   367  008D                     	;# 
   368  008E                     	;# 
   369  0090                     	;# 
   370  0091                     	;# 
   371  0092                     	;# 
   372  0093                     	;# 
   373  0094                     	;# 
   374  0095                     	;# 
   375  0096                     	;# 
   376  0097                     	;# 
   377  0098                     	;# 
   378  0099                     	;# 
   379  009A                     	;# 
   380  009B                     	;# 
   381  009B                     	;# 
   382  009C                     	;# 
   383  009D                     	;# 
   384  009E                     	;# 
   385  009F                     	;# 
   386  010C                     	;# 
   387  010D                     	;# 
   388  010E                     	;# 
   389  0111                     	;# 
   390  0112                     	;# 
   391  0113                     	;# 
   392  0114                     	;# 
   393  0115                     	;# 
   394  0116                     	;# 
   395  0117                     	;# 
   396  0118                     	;# 
   397  0119                     	;# 
   398  011A                     	;# 
   399  011B                     	;# 
   400  011C                     	;# 
   401  011D                     	;# 
   402  011D                     	;# 
   403  011D                     	;# 
   404  011E                     	;# 
   405  011F                     	;# 
   406  018C                     	;# 
   407  018D                     	;# 
   408  0191                     	;# 
   409  0191                     	;# 
   410  0192                     	;# 
   411  0193                     	;# 
   412  0193                     	;# 
   413  0193                     	;# 
   414  0194                     	;# 
   415  0195                     	;# 
   416  0196                     	;# 
   417  0197                     	;# 
   418  0199                     	;# 
   419  0199                     	;# 
   420  0199                     	;# 
   421  019A                     	;# 
   422  019A                     	;# 
   423  019A                     	;# 
   424  019B                     	;# 
   425  019B                     	;# 
   426  019B                     	;# 
   427  019B                     	;# 
   428  019B                     	;# 
   429  019C                     	;# 
   430  019C                     	;# 
   431  019C                     	;# 
   432  019D                     	;# 
   433  019D                     	;# 
   434  019D                     	;# 
   435  019E                     	;# 
   436  019E                     	;# 
   437  019E                     	;# 
   438  019F                     	;# 
   439  019F                     	;# 
   440  019F                     	;# 
   441  019F                     	;# 
   442  019F                     	;# 
   443  020C                     	;# 
   444  020D                     	;# 
   445  020E                     	;# 
   446  0210                     	;# 
   447  0211                     	;# 
   448  0211                     	;# 
   449  0212                     	;# 
   450  0212                     	;# 
   451  0213                     	;# 
   452  0213                     	;# 
   453  0214                     	;# 
   454  0214                     	;# 
   455  0215                     	;# 
   456  0215                     	;# 
   457  0215                     	;# 
   458  0215                     	;# 
   459  0216                     	;# 
   460  0216                     	;# 
   461  0217                     	;# 
   462  0217                     	;# 
   463  028C                     	;# 
   464  028D                     	;# 
   465  028E                     	;# 
   466  0291                     	;# 
   467  0291                     	;# 
   468  0292                     	;# 
   469  0293                     	;# 
   470  0298                     	;# 
   471  0298                     	;# 
   472  0299                     	;# 
   473  029A                     	;# 
   474  030C                     	;# 
   475  030D                     	;# 
   476  030E                     	;# 
   477  0311                     	;# 
   478  0311                     	;# 
   479  0312                     	;# 
   480  0313                     	;# 
   481  038C                     	;# 
   482  038D                     	;# 
   483  038E                     	;# 
   484  0390                     	;# 
   485  0391                     	;# 
   486  0392                     	;# 
   487  0393                     	;# 
   488  0394                     	;# 
   489  0395                     	;# 
   490  0396                     	;# 
   491  0397                     	;# 
   492  0398                     	;# 
   493  0399                     	;# 
   494  039D                     	;# 
   495  039E                     	;# 
   496  039F                     	;# 
   497  0511                     	;# 
   498  0513                     	;# 
   499  051A                     	;# 
   500  0811                     	;# 
   501  0812                     	;# 
   502  0813                     	;# 
   503  0814                     	;# 
   504  0815                     	;# 
   505  0816                     	;# 
   506  0817                     	;# 
   507  0818                     	;# 
   508  0819                     	;# 
   509  081A                     	;# 
   510  081B                     	;# 
   511  081C                     	;# 
   512  081D                     	;# 
   513  081E                     	;# 
   514  081F                     	;# 
   515  0820                     	;# 
   516  0821                     	;# 
   517  0821                     	;# 
   518  0822                     	;# 
   519  0823                     	;# 
   520  0823                     	;# 
   521  0824                     	;# 
   522  0825                     	;# 
   523  0825                     	;# 
   524  0826                     	;# 
   525  0827                     	;# 
   526  0827                     	;# 
   527  0828                     	;# 
   528  0829                     	;# 
   529  082A                     	;# 
   530  082B                     	;# 
   531  082C                     	;# 
   532  082D                     	;# 
   533  082E                     	;# 
   534  082F                     	;# 
   535  0831                     	;# 
   536  0832                     	;# 
   537  0833                     	;# 
   538  0834                     	;# 
   539  0835                     	;# 
   540  0836                     	;# 
   541  0837                     	;# 
   542  0838                     	;# 
   543  0839                     	;# 
   544  083A                     	;# 
   545  083B                     	;# 
   546  083C                     	;# 
   547  083D                     	;# 
   548  083E                     	;# 
   549  083F                     	;# 
   550  0840                     	;# 
   551  0841                     	;# 
   552  0841                     	;# 
   553  0842                     	;# 
   554  0843                     	;# 
   555  0843                     	;# 
   556  0844                     	;# 
   557  0845                     	;# 
   558  0845                     	;# 
   559  0846                     	;# 
   560  0847                     	;# 
   561  0847                     	;# 
   562  0848                     	;# 
   563  0849                     	;# 
   564  084A                     	;# 
   565  084B                     	;# 
   566  084C                     	;# 
   567  084D                     	;# 
   568  084E                     	;# 
   569  084F                     	;# 
   570  0851                     	;# 
   571  0852                     	;# 
   572  0853                     	;# 
   573  0854                     	;# 
   574  0855                     	;# 
   575  0856                     	;# 
   576  0857                     	;# 
   577  0858                     	;# 
   578  0859                     	;# 
   579  085A                     	;# 
   580  085B                     	;# 
   581  085C                     	;# 
   582  085D                     	;# 
   583  085E                     	;# 
   584  085F                     	;# 
   585  0860                     	;# 
   586  0861                     	;# 
   587  0861                     	;# 
   588  0862                     	;# 
   589  0863                     	;# 
   590  0863                     	;# 
   591  0864                     	;# 
   592  0865                     	;# 
   593  0865                     	;# 
   594  0866                     	;# 
   595  0867                     	;# 
   596  0867                     	;# 
   597  0868                     	;# 
   598  0869                     	;# 
   599  086A                     	;# 
   600  086B                     	;# 
   601  086C                     	;# 
   602  086D                     	;# 
   603  086E                     	;# 
   604  086F                     	;# 
   605  0FE4                     	;# 
   606  0FE5                     	;# 
   607  0FE6                     	;# 
   608  0FE7                     	;# 
   609  0FE8                     	;# 
   610  0FE9                     	;# 
   611  0FEA                     	;# 
   612  0FEB                     	;# 
   613  0FED                     	;# 
   614  0FEE                     	;# 
   615  0FEF                     	;# 
   616  0000                     	;# 
   617  0001                     	;# 
   618  0002                     	;# 
   619  0003                     	;# 
   620  0004                     	;# 
   621  0005                     	;# 
   622  0006                     	;# 
   623  0007                     	;# 
   624  0008                     	;# 
   625  0009                     	;# 
   626  000A                     	;# 
   627  000B                     	;# 
   628  000C                     	;# 
   629  000D                     	;# 
   630  000E                     	;# 
   631  0010                     	;# 
   632  0011                     	;# 
   633  0012                     	;# 
   634  0013                     	;# 
   635  0014                     	;# 
   636  0015                     	;# 
   637  0016                     	;# 
   638  0016                     	;# 
   639  0017                     	;# 
   640  0018                     	;# 
   641  0019                     	;# 
   642  001A                     	;# 
   643  001B                     	;# 
   644  001C                     	;# 
   645  008C                     	;# 
   646  008D                     	;# 
   647  008E                     	;# 
   648  0090                     	;# 
   649  0091                     	;# 
   650  0092                     	;# 
   651  0093                     	;# 
   652  0094                     	;# 
   653  0095                     	;# 
   654  0096                     	;# 
   655  0097                     	;# 
   656  0098                     	;# 
   657  0099                     	;# 
   658  009A                     	;# 
   659  009B                     	;# 
   660  009B                     	;# 
   661  009C                     	;# 
   662  009D                     	;# 
   663  009E                     	;# 
   664  009F                     	;# 
   665  010C                     	;# 
   666  010D                     	;# 
   667  010E                     	;# 
   668  0111                     	;# 
   669  0112                     	;# 
   670  0113                     	;# 
   671  0114                     	;# 
   672  0115                     	;# 
   673  0116                     	;# 
   674  0117                     	;# 
   675  0118                     	;# 
   676  0119                     	;# 
   677  011A                     	;# 
   678  011B                     	;# 
   679  011C                     	;# 
   680  011D                     	;# 
   681  011D                     	;# 
   682  011D                     	;# 
   683  011E                     	;# 
   684  011F                     	;# 
   685  018C                     	;# 
   686  018D                     	;# 
   687  0191                     	;# 
   688  0191                     	;# 
   689  0192                     	;# 
   690  0193                     	;# 
   691  0193                     	;# 
   692  0193                     	;# 
   693  0194                     	;# 
   694  0195                     	;# 
   695  0196                     	;# 
   696  0197                     	;# 
   697  0199                     	;# 
   698  0199                     	;# 
   699  0199                     	;# 
   700  019A                     	;# 
   701  019A                     	;# 
   702  019A                     	;# 
   703  019B                     	;# 
   704  019B                     	;# 
   705  019B                     	;# 
   706  019B                     	;# 
   707  019B                     	;# 
   708  019C                     	;# 
   709  019C                     	;# 
   710  019C                     	;# 
   711  019D                     	;# 
   712  019D                     	;# 
   713  019D                     	;# 
   714  019E                     	;# 
   715  019E                     	;# 
   716  019E                     	;# 
   717  019F                     	;# 
   718  019F                     	;# 
   719  019F                     	;# 
   720  019F                     	;# 
   721  019F                     	;# 
   722  020C                     	;# 
   723  020D                     	;# 
   724  020E                     	;# 
   725  0210                     	;# 
   726  0211                     	;# 
   727  0211                     	;# 
   728  0212                     	;# 
   729  0212                     	;# 
   730  0213                     	;# 
   731  0213                     	;# 
   732  0214                     	;# 
   733  0214                     	;# 
   734  0215                     	;# 
   735  0215                     	;# 
   736  0215                     	;# 
   737  0215                     	;# 
   738  0216                     	;# 
   739  0216                     	;# 
   740  0217                     	;# 
   741  0217                     	;# 
   742  028C                     	;# 
   743  028D                     	;# 
   744  028E                     	;# 
   745  0291                     	;# 
   746  0291                     	;# 
   747  0292                     	;# 
   748  0293                     	;# 
   749  0298                     	;# 
   750  0298                     	;# 
   751  0299                     	;# 
   752  029A                     	;# 
   753  030C                     	;# 
   754  030D                     	;# 
   755  030E                     	;# 
   756  0311                     	;# 
   757  0311                     	;# 
   758  0312                     	;# 
   759  0313                     	;# 
   760  038C                     	;# 
   761  038D                     	;# 
   762  038E                     	;# 
   763  0390                     	;# 
   764  0391                     	;# 
   765  0392                     	;# 
   766  0393                     	;# 
   767  0394                     	;# 
   768  0395                     	;# 
   769  0396                     	;# 
   770  0397                     	;# 
   771  0398                     	;# 
   772  0399                     	;# 
   773  039D                     	;# 
   774  039E                     	;# 
   775  039F                     	;# 
   776  0511                     	;# 
   777  0513                     	;# 
   778  051A                     	;# 
   779  0811                     	;# 
   780  0812                     	;# 
   781  0813                     	;# 
   782  0814                     	;# 
   783  0815                     	;# 
   784  0816                     	;# 
   785  0817                     	;# 
   786  0818                     	;# 
   787  0819                     	;# 
   788  081A                     	;# 
   789  081B                     	;# 
   790  081C                     	;# 
   791  081D                     	;# 
   792  081E                     	;# 
   793  081F                     	;# 
   794  0820                     	;# 
   795  0821                     	;# 
   796  0821                     	;# 
   797  0822                     	;# 
   798  0823                     	;# 
   799  0823                     	;# 
   800  0824                     	;# 
   801  0825                     	;# 
   802  0825                     	;# 
   803  0826                     	;# 
   804  0827                     	;# 
   805  0827                     	;# 
   806  0828                     	;# 
   807  0829                     	;# 
   808  082A                     	;# 
   809  082B                     	;# 
   810  082C                     	;# 
   811  082D                     	;# 
   812  082E                     	;# 
   813  082F                     	;# 
   814  0831                     	;# 
   815  0832                     	;# 
   816  0833                     	;# 
   817  0834                     	;# 
   818  0835                     	;# 
   819  0836                     	;# 
   820  0837                     	;# 
   821  0838                     	;# 
   822  0839                     	;# 
   823  083A                     	;# 
   824  083B                     	;# 
   825  083C                     	;# 
   826  083D                     	;# 
   827  083E                     	;# 
   828  083F                     	;# 
   829  0840                     	;# 
   830  0841                     	;# 
   831  0841                     	;# 
   832  0842                     	;# 
   833  0843                     	;# 
   834  0843                     	;# 
   835  0844                     	;# 
   836  0845                     	;# 
   837  0845                     	;# 
   838  0846                     	;# 
   839  0847                     	;# 
   840  0847                     	;# 
   841  0848                     	;# 
   842  0849                     	;# 
   843  084A                     	;# 
   844  084B                     	;# 
   845  084C                     	;# 
   846  084D                     	;# 
   847  084E                     	;# 
   848  084F                     	;# 
   849  0851                     	;# 
   850  0852                     	;# 
   851  0853                     	;# 
   852  0854                     	;# 
   853  0855                     	;# 
   854  0856                     	;# 
   855  0857                     	;# 
   856  0858                     	;# 
   857  0859                     	;# 
   858  085A                     	;# 
   859  085B                     	;# 
   860  085C                     	;# 
   861  085D                     	;# 
   862  085E                     	;# 
   863  085F                     	;# 
   864  0860                     	;# 
   865  0861                     	;# 
   866  0861                     	;# 
   867  0862                     	;# 
   868  0863                     	;# 
   869  0863                     	;# 
   870  0864                     	;# 
   871  0865                     	;# 
   872  0865                     	;# 
   873  0866                     	;# 
   874  0867                     	;# 
   875  0867                     	;# 
   876  0868                     	;# 
   877  0869                     	;# 
   878  086A                     	;# 
   879  086B                     	;# 
   880  086C                     	;# 
   881  086D                     	;# 
   882  086E                     	;# 
   883  086F                     	;# 
   884  0FE4                     	;# 
   885  0FE5                     	;# 
   886  0FE6                     	;# 
   887  0FE7                     	;# 
   888  0FE8                     	;# 
   889  0FE9                     	;# 
   890  0FEA                     	;# 
   891  0FEB                     	;# 
   892  0FED                     	;# 
   893  0FEE                     	;# 
   894  0FEF                     	;# 
   895  0000                     	;# 
   896  0001                     	;# 
   897  0002                     	;# 
   898  0003                     	;# 
   899  0004                     	;# 
   900  0005                     	;# 
   901  0006                     	;# 
   902  0007                     	;# 
   903  0008                     	;# 
   904  0009                     	;# 
   905  000A                     	;# 
   906  000B                     	;# 
   907  000C                     	;# 
   908  000D                     	;# 
   909  000E                     	;# 
   910  0010                     	;# 
   911  0011                     	;# 
   912  0012                     	;# 
   913  0013                     	;# 
   914  0014                     	;# 
   915  0015                     	;# 
   916  0016                     	;# 
   917  0016                     	;# 
   918  0017                     	;# 
   919  0018                     	;# 
   920  0019                     	;# 
   921  001A                     	;# 
   922  001B                     	;# 
   923  001C                     	;# 
   924  008C                     	;# 
   925  008D                     	;# 
   926  008E                     	;# 
   927  0090                     	;# 
   928  0091                     	;# 
   929  0092                     	;# 
   930  0093                     	;# 
   931  0094                     	;# 
   932  0095                     	;# 
   933  0096                     	;# 
   934  0097                     	;# 
   935  0098                     	;# 
   936  0099                     	;# 
   937  009A                     	;# 
   938  009B                     	;# 
   939  009B                     	;# 
   940  009C                     	;# 
   941  009D                     	;# 
   942  009E                     	;# 
   943  009F                     	;# 
   944  010C                     	;# 
   945  010D                     	;# 
   946  010E                     	;# 
   947  0111                     	;# 
   948  0112                     	;# 
   949  0113                     	;# 
   950  0114                     	;# 
   951  0115                     	;# 
   952  0116                     	;# 
   953  0117                     	;# 
   954  0118                     	;# 
   955  0119                     	;# 
   956  011A                     	;# 
   957  011B                     	;# 
   958  011C                     	;# 
   959  011D                     	;# 
   960  011D                     	;# 
   961  011D                     	;# 
   962  011E                     	;# 
   963  011F                     	;# 
   964  018C                     	;# 
   965  018D                     	;# 
   966  0191                     	;# 
   967  0191                     	;# 
   968  0192                     	;# 
   969  0193                     	;# 
   970  0193                     	;# 
   971  0193                     	;# 
   972  0194                     	;# 
   973  0195                     	;# 
   974  0196                     	;# 
   975  0197                     	;# 
   976  0199                     	;# 
   977  0199                     	;# 
   978  0199                     	;# 
   979  019A                     	;# 
   980  019A                     	;# 
   981  019A                     	;# 
   982  019B                     	;# 
   983  019B                     	;# 
   984  019B                     	;# 
   985  019B                     	;# 
   986  019B                     	;# 
   987  019C                     	;# 
   988  019C                     	;# 
   989  019C                     	;# 
   990  019D                     	;# 
   991  019D                     	;# 
   992  019D                     	;# 
   993  019E                     	;# 
   994  019E                     	;# 
   995  019E                     	;# 
   996  019F                     	;# 
   997  019F                     	;# 
   998  019F                     	;# 
   999  019F                     	;# 
  1000  019F                     	;# 
  1001  020C                     	;# 
  1002  020D                     	;# 
  1003  020E                     	;# 
  1004  0210                     	;# 
  1005  0211                     	;# 
  1006  0211                     	;# 
  1007  0212                     	;# 
  1008  0212                     	;# 
  1009  0213                     	;# 
  1010  0213                     	;# 
  1011  0214                     	;# 
  1012  0214                     	;# 
  1013  0215                     	;# 
  1014  0215                     	;# 
  1015  0215                     	;# 
  1016  0215                     	;# 
  1017  0216                     	;# 
  1018  0216                     	;# 
  1019  0217                     	;# 
  1020  0217                     	;# 
  1021  028C                     	;# 
  1022  028D                     	;# 
  1023  028E                     	;# 
  1024  0291                     	;# 
  1025  0291                     	;# 
  1026  0292                     	;# 
  1027  0293                     	;# 
  1028  0298                     	;# 
  1029  0298                     	;# 
  1030  0299                     	;# 
  1031  029A                     	;# 
  1032  030C                     	;# 
  1033  030D                     	;# 
  1034  030E                     	;# 
  1035  0311                     	;# 
  1036  0311                     	;# 
  1037  0312                     	;# 
  1038  0313                     	;# 
  1039  038C                     	;# 
  1040  038D                     	;# 
  1041  038E                     	;# 
  1042  0390                     	;# 
  1043  0391                     	;# 
  1044  0392                     	;# 
  1045  0393                     	;# 
  1046  0394                     	;# 
  1047  0395                     	;# 
  1048  0396                     	;# 
  1049  0397                     	;# 
  1050  0398                     	;# 
  1051  0399                     	;# 
  1052  039D                     	;# 
  1053  039E                     	;# 
  1054  039F                     	;# 
  1055  0511                     	;# 
  1056  0513                     	;# 
  1057  051A                     	;# 
  1058  0811                     	;# 
  1059  0812                     	;# 
  1060  0813                     	;# 
  1061  0814                     	;# 
  1062  0815                     	;# 
  1063  0816                     	;# 
  1064  0817                     	;# 
  1065  0818                     	;# 
  1066  0819                     	;# 
  1067  081A                     	;# 
  1068  081B                     	;# 
  1069  081C                     	;# 
  1070  081D                     	;# 
  1071  081E                     	;# 
  1072  081F                     	;# 
  1073  0820                     	;# 
  1074  0821                     	;# 
  1075  0821                     	;# 
  1076  0822                     	;# 
  1077  0823                     	;# 
  1078  0823                     	;# 
  1079  0824                     	;# 
  1080  0825                     	;# 
  1081  0825                     	;# 
  1082  0826                     	;# 
  1083  0827                     	;# 
  1084  0827                     	;# 
  1085  0828                     	;# 
  1086  0829                     	;# 
  1087  082A                     	;# 
  1088  082B                     	;# 
  1089  082C                     	;# 
  1090  082D                     	;# 
  1091  082E                     	;# 
  1092  082F                     	;# 
  1093  0831                     	;# 
  1094  0832                     	;# 
  1095  0833                     	;# 
  1096  0834                     	;# 
  1097  0835                     	;# 
  1098  0836                     	;# 
  1099  0837                     	;# 
  1100  0838                     	;# 
  1101  0839                     	;# 
  1102  083A                     	;# 
  1103  083B                     	;# 
  1104  083C                     	;# 
  1105  083D                     	;# 
  1106  083E                     	;# 
  1107  083F                     	;# 
  1108  0840                     	;# 
  1109  0841                     	;# 
  1110  0841                     	;# 
  1111  0842                     	;# 
  1112  0843                     	;# 
  1113  0843                     	;# 
  1114  0844                     	;# 
  1115  0845                     	;# 
  1116  0845                     	;# 
  1117  0846                     	;# 
  1118  0847                     	;# 
  1119  0847                     	;# 
  1120  0848                     	;# 
  1121  0849                     	;# 
  1122  084A                     	;# 
  1123  084B                     	;# 
  1124  084C                     	;# 
  1125  084D                     	;# 
  1126  084E                     	;# 
  1127  084F                     	;# 
  1128  0851                     	;# 
  1129  0852                     	;# 
  1130  0853                     	;# 
  1131  0854                     	;# 
  1132  0855                     	;# 
  1133  0856                     	;# 
  1134  0857                     	;# 
  1135  0858                     	;# 
  1136  0859                     	;# 
  1137  085A                     	;# 
  1138  085B                     	;# 
  1139  085C                     	;# 
  1140  085D                     	;# 
  1141  085E                     	;# 
  1142  085F                     	;# 
  1143  0860                     	;# 
  1144  0861                     	;# 
  1145  0861                     	;# 
  1146  0862                     	;# 
  1147  0863                     	;# 
  1148  0863                     	;# 
  1149  0864                     	;# 
  1150  0865                     	;# 
  1151  0865                     	;# 
  1152  0866                     	;# 
  1153  0867                     	;# 
  1154  0867                     	;# 
  1155  0868                     	;# 
  1156  0869                     	;# 
  1157  086A                     	;# 
  1158  086B                     	;# 
  1159  086C                     	;# 
  1160  086D                     	;# 
  1161  086E                     	;# 
  1162  086F                     	;# 
  1163  0FE4                     	;# 
  1164  0FE5                     	;# 
  1165  0FE6                     	;# 
  1166  0FE7                     	;# 
  1167  0FE8                     	;# 
  1168  0FE9                     	;# 
  1169  0FEA                     	;# 
  1170  0FEB                     	;# 
  1171  0FED                     	;# 
  1172  0FEE                     	;# 
  1173  0FEF                     	;# 
  1174  0000                     	;# 
  1175  0001                     	;# 
  1176  0002                     	;# 
  1177  0003                     	;# 
  1178  0004                     	;# 
  1179  0005                     	;# 
  1180  0006                     	;# 
  1181  0007                     	;# 
  1182  0008                     	;# 
  1183  0009                     	;# 
  1184  000A                     	;# 
  1185  000B                     	;# 
  1186  000C                     	;# 
  1187  000D                     	;# 
  1188  000E                     	;# 
  1189  0010                     	;# 
  1190  0011                     	;# 
  1191  0012                     	;# 
  1192  0013                     	;# 
  1193  0014                     	;# 
  1194  0015                     	;# 
  1195  0016                     	;# 
  1196  0016                     	;# 
  1197  0017                     	;# 
  1198  0018                     	;# 
  1199  0019                     	;# 
  1200  001A                     	;# 
  1201  001B                     	;# 
  1202  001C                     	;# 
  1203  008C                     	;# 
  1204  008D                     	;# 
  1205  008E                     	;# 
  1206  0090                     	;# 
  1207  0091                     	;# 
  1208  0092                     	;# 
  1209  0093                     	;# 
  1210  0094                     	;# 
  1211  0095                     	;# 
  1212  0096                     	;# 
  1213  0097                     	;# 
  1214  0098                     	;# 
  1215  0099                     	;# 
  1216  009A                     	;# 
  1217  009B                     	;# 
  1218  009B                     	;# 
  1219  009C                     	;# 
  1220  009D                     	;# 
  1221  009E                     	;# 
  1222  009F                     	;# 
  1223  010C                     	;# 
  1224  010D                     	;# 
  1225  010E                     	;# 
  1226  0111                     	;# 
  1227  0112                     	;# 
  1228  0113                     	;# 
  1229  0114                     	;# 
  1230  0115                     	;# 
  1231  0116                     	;# 
  1232  0117                     	;# 
  1233  0118                     	;# 
  1234  0119                     	;# 
  1235  011A                     	;# 
  1236  011B                     	;# 
  1237  011C                     	;# 
  1238  011D                     	;# 
  1239  011D                     	;# 
  1240  011D                     	;# 
  1241  011E                     	;# 
  1242  011F                     	;# 
  1243  018C                     	;# 
  1244  018D                     	;# 
  1245  0191                     	;# 
  1246  0191                     	;# 
  1247  0192                     	;# 
  1248  0193                     	;# 
  1249  0193                     	;# 
  1250  0193                     	;# 
  1251  0194                     	;# 
  1252  0195                     	;# 
  1253  0196                     	;# 
  1254  0197                     	;# 
  1255  0199                     	;# 
  1256  0199                     	;# 
  1257  0199                     	;# 
  1258  019A                     	;# 
  1259  019A                     	;# 
  1260  019A                     	;# 
  1261  019B                     	;# 
  1262  019B                     	;# 
  1263  019B                     	;# 
  1264  019B                     	;# 
  1265  019B                     	;# 
  1266  019C                     	;# 
  1267  019C                     	;# 
  1268  019C                     	;# 
  1269  019D                     	;# 
  1270  019D                     	;# 
  1271  019D                     	;# 
  1272  019E                     	;# 
  1273  019E                     	;# 
  1274  019E                     	;# 
  1275  019F                     	;# 
  1276  019F                     	;# 
  1277  019F                     	;# 
  1278  019F                     	;# 
  1279  019F                     	;# 
  1280  020C                     	;# 
  1281  020D                     	;# 
  1282  020E                     	;# 
  1283  0210                     	;# 
  1284  0211                     	;# 
  1285  0211                     	;# 
  1286  0212                     	;# 
  1287  0212                     	;# 
  1288  0213                     	;# 
  1289  0213                     	;# 
  1290  0214                     	;# 
  1291  0214                     	;# 
  1292  0215                     	;# 
  1293  0215                     	;# 
  1294  0215                     	;# 
  1295  0215                     	;# 
  1296  0216                     	;# 
  1297  0216                     	;# 
  1298  0217                     	;# 
  1299  0217                     	;# 
  1300  028C                     	;# 
  1301  028D                     	;# 
  1302  028E                     	;# 
  1303  0291                     	;# 
  1304  0291                     	;# 
  1305  0292                     	;# 
  1306  0293                     	;# 
  1307  0298                     	;# 
  1308  0298                     	;# 
  1309  0299                     	;# 
  1310  029A                     	;# 
  1311  030C                     	;# 
  1312  030D                     	;# 
  1313  030E                     	;# 
  1314  0311                     	;# 
  1315  0311                     	;# 
  1316  0312                     	;# 
  1317  0313                     	;# 
  1318  038C                     	;# 
  1319  038D                     	;# 
  1320  038E                     	;# 
  1321  0390                     	;# 
  1322  0391                     	;# 
  1323  0392                     	;# 
  1324  0393                     	;# 
  1325  0394                     	;# 
  1326  0395                     	;# 
  1327  0396                     	;# 
  1328  0397                     	;# 
  1329  0398                     	;# 
  1330  0399                     	;# 
  1331  039D                     	;# 
  1332  039E                     	;# 
  1333  039F                     	;# 
  1334  0511                     	;# 
  1335  0513                     	;# 
  1336  051A                     	;# 
  1337  0811                     	;# 
  1338  0812                     	;# 
  1339  0813                     	;# 
  1340  0814                     	;# 
  1341  0815                     	;# 
  1342  0816                     	;# 
  1343  0817                     	;# 
  1344  0818                     	;# 
  1345  0819                     	;# 
  1346  081A                     	;# 
  1347  081B                     	;# 
  1348  081C                     	;# 
  1349  081D                     	;# 
  1350  081E                     	;# 
  1351  081F                     	;# 
  1352  0820                     	;# 
  1353  0821                     	;# 
  1354  0821                     	;# 
  1355  0822                     	;# 
  1356  0823                     	;# 
  1357  0823                     	;# 
  1358  0824                     	;# 
  1359  0825                     	;# 
  1360  0825                     	;# 
  1361  0826                     	;# 
  1362  0827                     	;# 
  1363  0827                     	;# 
  1364  0828                     	;# 
  1365  0829                     	;# 
  1366  082A                     	;# 
  1367  082B                     	;# 
  1368  082C                     	;# 
  1369  082D                     	;# 
  1370  082E                     	;# 
  1371  082F                     	;# 
  1372  0831                     	;# 
  1373  0832                     	;# 
  1374  0833                     	;# 
  1375  0834                     	;# 
  1376  0835                     	;# 
  1377  0836                     	;# 
  1378  0837                     	;# 
  1379  0838                     	;# 
  1380  0839                     	;# 
  1381  083A                     	;# 
  1382  083B                     	;# 
  1383  083C                     	;# 
  1384  083D                     	;# 
  1385  083E                     	;# 
  1386  083F                     	;# 
  1387  0840                     	;# 
  1388  0841                     	;# 
  1389  0841                     	;# 
  1390  0842                     	;# 
  1391  0843                     	;# 
  1392  0843                     	;# 
  1393  0844                     	;# 
  1394  0845                     	;# 
  1395  0845                     	;# 
  1396  0846                     	;# 
  1397  0847                     	;# 
  1398  0847                     	;# 
  1399  0848                     	;# 
  1400  0849                     	;# 
  1401  084A                     	;# 
  1402  084B                     	;# 
  1403  084C                     	;# 
  1404  084D                     	;# 
  1405  084E                     	;# 
  1406  084F                     	;# 
  1407  0851                     	;# 
  1408  0852                     	;# 
  1409  0853                     	;# 
  1410  0854                     	;# 
  1411  0855                     	;# 
  1412  0856                     	;# 
  1413  0857                     	;# 
  1414  0858                     	;# 
  1415  0859                     	;# 
  1416  085A                     	;# 
  1417  085B                     	;# 
  1418  085C                     	;# 
  1419  085D                     	;# 
  1420  085E                     	;# 
  1421  085F                     	;# 
  1422  0860                     	;# 
  1423  0861                     	;# 
  1424  0861                     	;# 
  1425  0862                     	;# 
  1426  0863                     	;# 
  1427  0863                     	;# 
  1428  0864                     	;# 
  1429  0865                     	;# 
  1430  0865                     	;# 
  1431  0866                     	;# 
  1432  0867                     	;# 
  1433  0867                     	;# 
  1434  0868                     	;# 
  1435  0869                     	;# 
  1436  086A                     	;# 
  1437  086B                     	;# 
  1438  086C                     	;# 
  1439  086D                     	;# 
  1440  086E                     	;# 
  1441  086F                     	;# 
  1442  0FE4                     	;# 
  1443  0FE5                     	;# 
  1444  0FE6                     	;# 
  1445  0FE7                     	;# 
  1446  0FE8                     	;# 
  1447  0FE9                     	;# 
  1448  0FEA                     	;# 
  1449  0FEB                     	;# 
  1450  0FED                     	;# 
  1451  0FEE                     	;# 
  1452  0FEF                     	;# 
  1453                           
  1454                           	psect	stringtext1
  1455  031E                     __pstringtext1:	
  1456  031E                     _segmcode:	
  1457  031E  343F               	retlw	63
  1458  031F  3406               	retlw	6
  1459  0320  345B               	retlw	91
  1460  0321  344F               	retlw	79
  1461  0322  3466               	retlw	102
  1462  0323  346D               	retlw	109
  1463  0324  347D               	retlw	125
  1464  0325  3407               	retlw	7
  1465  0326  347F               	retlw	127
  1466  0327  346F               	retlw	111
  1467  0328  3477               	retlw	119
  1468  0329  347C               	retlw	124
  1469  032A  3439               	retlw	57
  1470  032B  345E               	retlw	94
  1471  032C  3479               	retlw	121
  1472  032D  3471               	retlw	113
  1473  032E                     __end_of_segmcode:	
  1474  000E                     _PORTCbits	set	14
  1475  000D                     _PORTBbits	set	13
  1476  0015                     _TMR0	set	21
  1477  000B                     _INTCONbits	set	11
  1478  008E                     _TRISCbits	set	142
  1479  008E                     _TRISC	set	142
  1480  008D                     _TRISB	set	141
  1481  008C                     _TRISA	set	140
  1482  0095                     _OPTION_REGbits	set	149
  1483  0099                     _OSCCONbits	set	153
  1484  010E                     _LATC	set	270
  1485  010D                     _LATB	set	269
  1486  010C                     _LATA	set	268
  1487  020E                     _WPUCbits	set	526
  1488  020E                     _WPUC	set	526
  1489  020D                     _WPUB	set	525
  1490  020C                     _WPUA	set	524
  1491  0399                     _IOCCFbits	set	921
  1492  0397                     _IOCCPbits	set	919
  1493  0398                     _IOCCN	set	920
  1494  0397                     _IOCCP	set	919
  1495  0395                     _IOCBN	set	917
  1496  0394                     _IOCBP	set	916
  1497  0392                     _IOCAN	set	914
  1498  0391                     _IOCAP	set	913
  1499                           
  1500                           ; #config settings
  1501  0000                     
  1502                           	psect	cinit
  1503  0061                     start_initialization:	
  1504  0061                     __initialization:	
  1505                           
  1506                           ; Clear objects allocated to COMMON
  1507  0061  01FD               	clrf	__pbssCOMMON& (0+127)
  1508                           
  1509                           ; Clear objects allocated to BANK0
  1510  0062  3020               	movlw	low __pbssBANK0
  1511  0063  0084               	movwf	4
  1512  0064  3000               	movlw	high __pbssBANK0
  1513  0065  0085               	movwf	5
  1514  0066  3024               	movlw	36
  1515  0067  3183  2346         	fcall	clear_ram0
  1516  0069                     end_of_initialization:	
  1517                           ;End of C runtime variable initialization code
  1518                           
  1519  0069                     __end_of__initialization:	
  1520  0069  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1521  006A  0020               	movlb	0
  1522  006B  3183  2B4C         	ljmp	_main	;jump to C main() function
  1523                           
  1524                           	psect	bssCOMMON
  1525  007D                     __pbssCOMMON:	
  1526  007D                     _ENUM:	
  1527  007D                     	ds	1
  1528                           
  1529                           	psect	bssBANK0
  1530  0020                     __pbssBANK0:	
  1531  0020                     _g_data:	
  1532  0020                     	ds	33
  1533  0041                     ISR@key_time_cnt:	
  1534  0041                     	ds	2
  1535  0043                     ISR@history_key:	
  1536  0043                     	ds	1
  1537                           
  1538                           	psect	clrtext
  1539  0346                     clear_ram0:	
  1540                           ;	Called with FSR0 containing the base address, and
  1541                           ;	WREG with the size to clear
  1542                           
  1543  0346  0064               	clrwdt	;clear the watchdog before getting into this loop
  1544  0347                     clrloop0:	
  1545  0347  0180               	clrf	0	;clear RAM location pointed to by FSR
  1546  0348  3101               	addfsr 0,1
  1547  0349  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1548  034A  2B47               	goto	clrloop0	;have we reached the end yet?
  1549  034B  3400               	retlw	0	;all done for this memory range, return
  1550                           
  1551                           	psect	cstackCOMMON
  1552  0070                     __pcstackCOMMON:	
  1553  0070                     ?_update_time:	
  1554  0070                     ?_receive_decode:	
  1555                           ; 1 bytes @ 0x0
  1556                           
  1557  0070                     ?_update_display:	
  1558                           ; 1 bytes @ 0x0
  1559                           
  1560  0070                     ?_init_env:	
  1561                           ; 1 bytes @ 0x0
  1562                           
  1563  0070                     ?_ISR:	
  1564                           ; 1 bytes @ 0x0
  1565                           
  1566  0070                     ?_main:	
  1567                           ; 1 bytes @ 0x0
  1568                           
  1569  0070                     ?_times2number:	
  1570                           ; 1 bytes @ 0x0
  1571                           
  1572  0070                     ?_control595_delay:	
  1573                           ; 1 bytes @ 0x0
  1574                           
  1575  0070                     ??_control595_delay:	
  1576                           ; 1 bytes @ 0x0
  1577                           
  1578  0070                     ?_write_byte:	
  1579                           ; 1 bytes @ 0x0
  1580                           
  1581  0070                     ?___lwmod:	
  1582                           ; 1 bytes @ 0x0
  1583                           
  1584  0070                     times2number@high_level_times:	
  1585                           ; 2 bytes @ 0x0
  1586                           
  1587  0070                     ___lwmod@divisor:	
  1588                           ; 2 bytes @ 0x0
  1589                           
  1590                           
  1591                           ; 2 bytes @ 0x0
  1592  0070                     	ds	1
  1593  0071                     control595_delay@times:	
  1594                           
  1595                           ; 1 bytes @ 0x1
  1596  0071                     	ds	1
  1597  0072                     ??_times2number:	
  1598  0072                     ??_write_byte:	
  1599                           ; 1 bytes @ 0x2
  1600                           
  1601  0072                     ___lwmod@dividend:	
  1602                           ; 1 bytes @ 0x2
  1603                           
  1604                           
  1605                           ; 2 bytes @ 0x2
  1606  0072                     	ds	2
  1607  0074                     ??___lwmod:	
  1608  0074                     write_byte@data:	
  1609                           ; 1 bytes @ 0x4
  1610                           
  1611                           
  1612                           ; 1 bytes @ 0x4
  1613  0074                     	ds	1
  1614  0075                     write_byte@i:	
  1615  0075                     ___lwmod@counter:	
  1616                           ; 1 bytes @ 0x5
  1617                           
  1618                           
  1619                           ; 1 bytes @ 0x5
  1620  0075                     	ds	1
  1621  0076                     ?_write_once:	
  1622  0076                     write_once@HR:	
  1623                           ; 1 bytes @ 0x6
  1624                           
  1625                           
  1626                           ; 1 bytes @ 0x6
  1627  0076                     	ds	1
  1628  0077                     write_once@ML:	
  1629                           
  1630                           ; 1 bytes @ 0x7
  1631  0077                     	ds	1
  1632  0078                     write_once@MR:	
  1633                           
  1634                           ; 1 bytes @ 0x8
  1635  0078                     	ds	1
  1636  0079                     ??_write_once:	
  1637  0079                     write_once@HL:	
  1638                           ; 1 bytes @ 0x9
  1639                           
  1640                           
  1641                           ; 1 bytes @ 0x9
  1642  0079                     	ds	1
  1643  007A                     ??_update_display:	
  1644                           
  1645                           ; 1 bytes @ 0xA
  1646  007A                     	ds	2
  1647  007C                     ??_update_time:	
  1648                           
  1649                           ; 1 bytes @ 0xC
  1650  007C                     	ds	1
  1651                           
  1652                           	psect	cstackBANK0
  1653  0044                     __pcstackBANK0:	
  1654  0044                     ??_receive_decode:	
  1655                           
  1656                           ; 1 bytes @ 0x0
  1657  0044                     	ds	5
  1658  0049                     receive_decode@last_time_h:	
  1659                           
  1660                           ; 2 bytes @ 0x5
  1661  0049                     	ds	2
  1662  004B                     receive_decode@last_time_m:	
  1663                           
  1664                           ; 2 bytes @ 0x7
  1665  004B                     	ds	2
  1666  004D                     _receive_decode$516:	
  1667                           
  1668                           ; 2 bytes @ 0x9
  1669  004D                     	ds	2
  1670  004F                     _receive_decode$517:	
  1671                           
  1672                           ; 2 bytes @ 0xB
  1673  004F                     	ds	2
  1674  0051                     receive_decode@i_518:	
  1675                           
  1676                           ; 2 bytes @ 0xD
  1677  0051                     	ds	2
  1678  0053                     receive_decode@read_value:	
  1679                           
  1680                           ; 1 bytes @ 0xF
  1681  0053                     	ds	1
  1682  0054                     receive_decode@i:	
  1683                           
  1684                           ; 1 bytes @ 0x10
  1685  0054                     	ds	1
  1686  0055                     receive_decode@check:	
  1687                           
  1688                           ; 1 bytes @ 0x11
  1689  0055                     	ds	1
  1690  0056                     ??_ISR:	
  1691                           
  1692                           ; 1 bytes @ 0x12
  1693  0056                     	ds	2
  1694  0058                     ??_init_env:	
  1695                           
  1696                           ; 1 bytes @ 0x14
  1697  0058                     	ds	1
  1698  0059                     init_env@i:	
  1699                           
  1700                           ; 2 bytes @ 0x15
  1701  0059                     	ds	2
  1702  005B                     ??_main:	
  1703                           
  1704                           	psect	maintext
  1705  034C                     __pmaintext:	
  1706                           ; 1 bytes @ 0x17
  1707 ;;
  1708 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1709 ;;
  1710 ;; *************** function _main *****************
  1711 ;; Defined at:
  1712 ;;		line 204 in file "main.c"
  1713 ;; Parameters:    Size  Location     Type
  1714 ;;		None
  1715 ;; Auto vars:     Size  Location     Type
  1716 ;;		None
  1717 ;; Return value:  Size  Location     Type
  1718 ;;                  1    wreg      void 
  1719 ;; Registers used:
  1720 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1721 ;; Tracked objects:
  1722 ;;		On entry : B1F/0
  1723 ;;		On exit  : 0/0
  1724 ;;		Unchanged: 0/0
  1725 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1726 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1727 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1728 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1729 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1730 ;;Total ram usage:        0 bytes
  1731 ;; Hardware stack levels required when called:    7
  1732 ;; This function calls:
  1733 ;;		_init_env
  1734 ;; This function is called by:
  1735 ;;		Startup code after reset
  1736 ;; This function uses a non-reentrant model
  1737 ;;
  1738                           
  1739                           
  1740                           ;psect for function _main
  1741  034C                     _main:	
  1742                           
  1743                           ;main.c: 206:     init_env();
  1744                           
  1745                           ;incstack = 0
  1746                           ; Regs used in _main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  1747  034C  3181  21C3  3183   	fcall	_init_env
  1748  034F                     l86:	
  1749                           ;main.c: 208:     while(1);
  1750                           
  1751  034F  2B4F               	goto	l86
  1752  0350                     __end_of_main:	
  1753                           ;main.c: 209:     return;
  1754                           
  1755                           
  1756                           	psect	text1
  1757  01C3                     __ptext1:	
  1758 ;; *************** function _init_env *****************
  1759 ;; Defined at:
  1760 ;;		line 37 in file "main.c"
  1761 ;; Parameters:    Size  Location     Type
  1762 ;;		None
  1763 ;; Auto vars:     Size  Location     Type
  1764 ;;  i               2   21[BANK0 ] int 
  1765 ;; Return value:  Size  Location     Type
  1766 ;;                  1    wreg      void 
  1767 ;; Registers used:
  1768 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  1769 ;; Tracked objects:
  1770 ;;		On entry : 0/0
  1771 ;;		On exit  : 0/0
  1772 ;;		Unchanged: 0/0
  1773 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1774 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1775 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1776 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1777 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1778 ;;Total ram usage:        3 bytes
  1779 ;; Hardware stack levels used:    1
  1780 ;; Hardware stack levels required when called:    6
  1781 ;; This function calls:
  1782 ;;		Nothing
  1783 ;; This function is called by:
  1784 ;;		_main
  1785 ;; This function uses a non-reentrant model
  1786 ;;
  1787                           
  1788                           
  1789                           ;psect for function _init_env
  1790  01C3                     _init_env:	
  1791                           
  1792                           ;main.c: 42:     TRISA = 0;
  1793                           
  1794                           ;incstack = 0
  1795                           ; Regs used in _init_env: [wreg+fsr1l+fsr1h+status,2+status,0]
  1796  01C3  178B               	bsf	11,7	;volatile
  1797                           
  1798                           ;main.c: 44:     WPUA = 0;
  1799  01C4  158B               	bsf	11,3	;volatile
  1800                           
  1801                           ;main.c: 48:     TRISB = 0;
  1802  01C5  168B               	bsf	11,5	;volatile
  1803                           
  1804                           ;main.c: 54:     TRISC = 0;
  1805  01C6  0021               	movlb	1	; select bank1
  1806  01C7  0819               	movf	25,w	;volatile
  1807  01C8  39FC               	andlw	-4
  1808  01C9  3802               	iorlw	2
  1809  01CA  0099               	movwf	25	;volatile
  1810                           
  1811                           ;main.c: 55:     LATC = 0;
  1812  01CB  0819               	movf	25,w	;volatile
  1813  01CC  3987               	andlw	-121
  1814  01CD  3850               	iorlw	80
  1815  01CE  0099               	movwf	25	;volatile
  1816                           
  1817                           ;main.c: 63:     TRISCbits.TRISC5 = 1;
  1818  01CF  1195               	bcf	21,3	;volatile
  1819                           
  1820                           ;main.c: 64:     WPUCbits.WPUC5 = 1;
  1821  01D0  1295               	bcf	21,5	;volatile
  1822                           
  1823                           ;main.c: 65: 
  1824  01D1  0815               	movf	21,w	;volatile
  1825  01D2  39F8               	andlw	-8
  1826  01D3  3804               	iorlw	4
  1827  01D4  0095               	movwf	21	;volatile
  1828                           
  1829                           ;main.c: 66:     TRISCbits.TRISC1 = 1;
  1830  01D5  30E7               	movlw	231
  1831  01D6  0020               	movlb	0	; select bank0
  1832  01D7  0095               	movwf	21	;volatile
  1833                           
  1834                           ;main.c: 74:     g_data.g_time_m = 0;
  1835  01D8  0021               	movlb	1	; select bank1
  1836  01D9  1395               	bcf	21,7	;volatile
  1837                           
  1838                           ;main.c: 76:     g_data.g_time_10ms = 0;
  1839  01DA  018C               	clrf	12	;volatile
  1840                           
  1841                           ;main.c: 77: 
  1842  01DB  0022               	movlb	2	; select bank2
  1843  01DC  018C               	clrf	12	;volatile
  1844                           
  1845                           ;main.c: 78: 
  1846  01DD  0024               	movlb	4	; select bank4
  1847  01DE  018C               	clrf	12	;volatile
  1848                           
  1849                           ;main.c: 79:     g_data.g_flg_switch = FALSE;
  1850  01DF  0027               	movlb	7	; select bank7
  1851  01E0  0191               	clrf	17	;volatile
  1852                           
  1853                           ;main.c: 80:     g_data.g_start_read_data = FALSE;
  1854  01E1  0192               	clrf	18	;volatile
  1855                           
  1856                           ;main.c: 82: 
  1857  01E2  0021               	movlb	1	; select bank1
  1858  01E3  018D               	clrf	13	;volatile
  1859                           
  1860                           ;main.c: 83: 
  1861  01E4  0022               	movlb	2	; select bank2
  1862  01E5  018D               	clrf	13	;volatile
  1863                           
  1864                           ;main.c: 84:     g_data.g_high_level_times = 0;
  1865  01E6  0024               	movlb	4	; select bank4
  1866  01E7  018D               	clrf	13	;volatile
  1867                           
  1868                           ;main.c: 85:     g_data.g_all_level_times = 0;
  1869  01E8  0027               	movlb	7	; select bank7
  1870  01E9  0194               	clrf	20	;volatile
  1871                           
  1872                           ;main.c: 86:     g_data.g_recv_count = 0;
  1873  01EA  0195               	clrf	21	;volatile
  1874                           
  1875                           ;main.c: 88:         g_data.g_recv_buf[i] = 5;
  1876  01EB  0021               	movlb	1	; select bank1
  1877  01EC  018E               	clrf	14	;volatile
  1878                           
  1879                           ;main.c: 89:     }
  1880  01ED  0022               	movlb	2	; select bank2
  1881  01EE  018E               	clrf	14	;volatile
  1882                           
  1883                           ;main.c: 90: 
  1884  01EF  0024               	movlb	4	; select bank4
  1885  01F0  018E               	clrf	14	;volatile
  1886                           
  1887                           ;main.c: 91: 
  1888  01F1  0027               	movlb	7	; select bank7
  1889  01F2  0197               	clrf	23	;volatile
  1890                           
  1891                           ;main.c: 92: 
  1892  01F3  0198               	clrf	24	;volatile
  1893                           
  1894                           ;main.c: 97:     PORTCbits.RC2 = BPC_PWR_ON;
  1895  01F4  0021               	movlb	1	; select bank1
  1896  01F5  168E               	bsf	14,5	;volatile
  1897                           
  1898                           ;main.c: 98: 
  1899  01F6  0024               	movlb	4	; select bank4
  1900  01F7  168E               	bsf	14,5	;volatile
  1901                           
  1902                           ;main.c: 100:     TRISCbits.TRISC0 = 1;
  1903  01F8  0021               	movlb	1	; select bank1
  1904  01F9  148E               	bsf	14,1	;volatile
  1905                           
  1906                           ;main.c: 101:     WPUCbits.WPUC0 = 1;
  1907  01FA  0024               	movlb	4	; select bank4
  1908  01FB  148E               	bsf	14,1	;volatile
  1909  01FC  0027               	movlb	7	; select bank7
  1910  01FD  1497               	bsf	23,1	;volatile
  1911  01FE  0020               	movlb	0	; select bank0
  1912  01FF  01A3               	clrf	_g_data+3	;volatile
  1913  0200  01A4               	clrf	_g_data+4	;volatile
  1914  0201  01A5               	clrf	_g_data+5	;volatile
  1915  0202  01A6               	clrf	_g_data+6	;volatile
  1916  0203  01A0               	clrf	_g_data	;volatile
  1917  0204  01A1               	clrf	_g_data+1	;volatile
  1918  0205  01A2               	clrf	_g_data+2	;volatile
  1919  0206  01A7               	clrf	_g_data+7	;volatile
  1920  0207  01A8               	clrf	_g_data+8	;volatile
  1921  0208  01A9               	clrf	_g_data+9	;volatile
  1922  0209  01AA               	clrf	_g_data+10	;volatile
  1923  020A  01AB               	clrf	_g_data+11	;volatile
  1924  020B  01AC               	clrf	_g_data+12	;volatile
  1925  020C  01D9               	clrf	init_env@i
  1926  020D  01DA               	clrf	init_env@i+1
  1927  020E  085A               	movf	init_env@i+1,w
  1928  020F  3A80               	xorlw	128
  1929  0210  00D8               	movwf	??_init_env
  1930  0211  3080               	movlw	128
  1931  0212  0258               	subwf	??_init_env,w
  1932  0213  1D03               	skipz
  1933  0214  2A17               	goto	u745
  1934  0215  3014               	movlw	20
  1935  0216  0259               	subwf	init_env@i,w
  1936  0217                     u745:	
  1937  0217  1803               	btfsc	3,0
  1938  0218  2A31               	goto	l62
  1939  0219                     l1245:	
  1940  0219  3005               	movlw	5
  1941  021A  0020               	movlb	0	; select bank0
  1942  021B  00D8               	movwf	??_init_env
  1943  021C  0859               	movf	init_env@i,w
  1944  021D  3E2D               	addlw	(low ((_g_data| 0+13)))& (0+255)
  1945  021E  0086               	movwf	6
  1946  021F  0187               	clrf	7
  1947  0220  0858               	movf	??_init_env,w
  1948  0221  0081               	movwf	1
  1949  0222  3001               	movlw	1
  1950  0223  07D9               	addwf	init_env@i,f
  1951  0224  3000               	movlw	0
  1952  0225  3DDA               	addwfc	init_env@i+1,f
  1953  0226  085A               	movf	init_env@i+1,w
  1954  0227  3A80               	xorlw	128
  1955  0228  00D8               	movwf	??_init_env
  1956  0229  3080               	movlw	128
  1957  022A  0258               	subwf	??_init_env,w
  1958  022B  1D03               	skipz
  1959  022C  2A2F               	goto	u755
  1960  022D  3014               	movlw	20
  1961  022E  0259               	subwf	init_env@i,w
  1962  022F                     u755:	
  1963  022F  1C03               	skipc
  1964  0230  2A19               	goto	l1245
  1965  0231                     l62:	
  1966  0231  0020               	movlb	0	; select bank0
  1967  0232  158D               	bsf	13,3	;volatile
  1968  0233  110E               	bcf	14,2	;volatile
  1969  0234  0021               	movlb	1	; select bank1
  1970  0235  140E               	bsf	14,0	;volatile
  1971  0236  0024               	movlb	4	; select bank4
  1972  0237  140E               	bsf	14,0	;volatile
  1973  0238  0008               	return
  1974  0239                     __end_of_init_env:	
  1975                           
  1976                           	psect	intentry
  1977  0004                     __pintentry:	
  1978 ;; *************** function _ISR *****************
  1979 ;; Defined at:
  1980 ;;		line 156 in file "main.c"
  1981 ;; Parameters:    Size  Location     Type
  1982 ;;		None
  1983 ;; Auto vars:     Size  Location     Type
  1984 ;;		None
  1985 ;; Return value:  Size  Location     Type
  1986 ;;                  1    wreg      void 
  1987 ;; Registers used:
  1988 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1989 ;; Tracked objects:
  1990 ;;		On entry : 0/0
  1991 ;;		On exit  : 0/0
  1992 ;;		Unchanged: 0/0
  1993 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1994 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1995 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1996 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1997 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1998 ;;Total ram usage:        2 bytes
  1999 ;; Hardware stack levels used:    1
  2000 ;; Hardware stack levels required when called:    5
  2001 ;; This function calls:
  2002 ;;		___lwmod
  2003 ;;		_receive_decode
  2004 ;;		_update_time
  2005 ;; This function is called by:
  2006 ;;		Interrupt level 1
  2007 ;; This function uses a non-reentrant model
  2008 ;;
  2009                           
  2010  0004                     _ISR:	
  2011                           
  2012                           ;incstack = 0
  2013  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  2014                           
  2015                           ; Regs used in _ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2016  0005  3180               	pagesel	$
  2017                           
  2018                           ;main.c: 157:     static u8 history_key = 0;;main.c: 158:     static u16 key_time_cnt = 
      +                          0;;main.c: 161:     if(IOCCFbits.IOCCF1 == TRUE && g_data.g_start_read_data == FALSE && 
      +                          g_data.g_flg_switch == TRUE){
  2019  0006  0027               	movlb	7	; select bank7
  2020  0007  1C99               	btfss	25,1	;volatile
  2021  0008  281A               	goto	i1l72
  2022  0009  0020               	movlb	0	; select bank0
  2023  000A  0821               	movf	_g_data+1,w	;volatile
  2024  000B  1D03               	btfss	3,2
  2025  000C  281A               	goto	i1l72
  2026  000D  0320               	decf	_g_data,w	;volatile
  2027  000E  1D03               	btfss	3,2
  2028  000F  281A               	goto	i1l72
  2029                           
  2030                           ;main.c: 163: ;main.c: 166:         g_data.g_start_read_data = TRUE;
  2031  0010  3001               	movlw	1
  2032  0011  00D6               	movwf	??_ISR
  2033  0012  0856               	movf	??_ISR,w
  2034  0013  00A1               	movwf	_g_data+1	;volatile
  2035                           
  2036                           ;main.c: 167:         g_data.g_flg_switch = FALSE;
  2037  0014  01A0               	clrf	_g_data	;volatile
  2038                           
  2039                           ;main.c: 168:         PORTCbits.RC2 = BPC_PWR_ON;
  2040  0015  110E               	bcf	14,2	;volatile
  2041                           
  2042                           ;main.c: 170:         INTCONbits.IOCIF = FALSE;
  2043  0016  100B               	bcf	11,0	;volatile
  2044                           
  2045                           ;main.c: 171:         IOCCFbits.IOCCF1 = FALSE;
  2046  0017  0027               	movlb	7	; select bank7
  2047  0018  1099               	bcf	25,1	;volatile
  2048                           
  2049                           ;main.c: 172:         return;
  2050  0019  285D               	goto	i1l73
  2051  001A                     i1l72:	
  2052                           ;main.c: 173:     }else if(INTCONbits.IOCIF || IOCCFbits.IOCCF1){
  2053                           
  2054  001A  180B               	btfsc	11,0	;volatile
  2055  001B  281F               	goto	i1l77
  2056  001C  0027               	movlb	7	; select bank7
  2057  001D  1C99               	btfss	25,1	;volatile
  2058  001E  2822               	goto	i1l74
  2059  001F                     i1l77:	
  2060                           
  2061                           ;main.c: 174:         INTCONbits.IOCIF = FALSE;
  2062  001F  100B               	bcf	11,0	;volatile
  2063                           
  2064                           ;main.c: 175:         IOCCFbits.IOCCF1 = FALSE;
  2065  0020  0027               	movlb	7	; select bank7
  2066  0021  1099               	bcf	25,1	;volatile
  2067  0022                     i1l74:	
  2068                           ;main.c: 176:     }
  2069                           
  2070                           
  2071                           ;main.c: 179:     if(INTCONbits.TMR0IF){
  2072  0022  1D0B               	btfss	11,2	;volatile
  2073  0023  285D               	goto	i1l73
  2074                           
  2075                           ;main.c: 180:         update_time();
  2076  0024  3182  2284  3180   	fcall	_update_time
  2077                           
  2078                           ;main.c: 182:         if(g_data.g_start_read_data == TRUE ){
  2079  0027  0020               	movlb	0	; select bank0
  2080  0028  0321               	decf	_g_data+1,w	;volatile
  2081  0029  1D03               	btfss	3,2
  2082  002A  282E               	goto	i1l1437
  2083                           
  2084                           ;main.c: 183:             receive_decode();
  2085  002B  3180  206D  3180   	fcall	_receive_decode
  2086  002E                     i1l1437:	
  2087                           ;main.c: 184:         }
  2088                           
  2089                           
  2090                           ;main.c: 187:         if(key_time_cnt++ % 10 == 0)
  2091  002E  300A               	movlw	10
  2092  002F  00F0               	movwf	___lwmod@divisor
  2093  0030  3000               	movlw	0
  2094  0031  00F1               	movwf	___lwmod@divisor+1
  2095  0032  0020               	movlb	0	; select bank0
  2096  0033  0842               	movf	ISR@key_time_cnt+1,w
  2097  0034  00D7               	movwf	??_ISR+1
  2098  0035  0841               	movf	ISR@key_time_cnt,w
  2099  0036  00D6               	movwf	??_ISR
  2100  0037  0AC1               	incf	ISR@key_time_cnt,f
  2101  0038  1903               	skipnz
  2102  0039  0AC2               	incf	ISR@key_time_cnt+1,f
  2103  003A  0856               	movf	??_ISR,w
  2104  003B  00F2               	movwf	___lwmod@dividend
  2105  003C  0857               	movf	??_ISR+1,w
  2106  003D  00F3               	movwf	___lwmod@dividend+1
  2107  003E  3182  22B3  3180   	fcall	___lwmod
  2108  0041  0870               	movf	?___lwmod,w
  2109  0042  0471               	iorwf	?___lwmod+1,w
  2110  0043  1D03               	btfss	3,2
  2111  0044  2859               	goto	i1l1447
  2112                           
  2113                           ;main.c: 188:         {;main.c: 189:             history_key <<= 1;
  2114  0045  1003               	clrc
  2115  0046  0020               	movlb	0	; select bank0
  2116  0047  0DC3               	rlf	ISR@history_key,f
  2117                           
  2118                           ;main.c: 190:             history_key |= (PORTCbits.RC5 == PIN_HIGH)? 0x01 : 0x00;
  2119  0048  0E0E               	swapf	14,w	;volatile
  2120  0049  0C89               	rrf	9,f
  2121  004A  3901               	andlw	1
  2122  004B  00D6               	movwf	??_ISR
  2123  004C  0856               	movf	??_ISR,w
  2124  004D  04C3               	iorwf	ISR@history_key,f
  2125                           
  2126                           ;main.c: 191:             if((0x03) == (history_key & (0x0f)) )
  2127  004E  300F               	movlw	15
  2128  004F  0543               	andwf	ISR@history_key,w
  2129  0050  00D6               	movwf	??_ISR
  2130  0051  3003               	movlw	3
  2131  0052  0656               	xorwf	??_ISR,w
  2132  0053  1D03               	btfss	3,2
  2133  0054  2859               	goto	i1l1447
  2134                           
  2135                           ;main.c: 192:             {;main.c: 193:                 g_data.g_flg_switch = TRUE;
  2136  0055  3001               	movlw	1
  2137  0056  00D6               	movwf	??_ISR
  2138  0057  0856               	movf	??_ISR,w
  2139  0058  00A0               	movwf	_g_data	;volatile
  2140  0059                     i1l1447:	
  2141                           ;main.c: 195:         }
  2142                           
  2143                           ;main.c: 194:             }
  2144                           
  2145                           
  2146                           ;main.c: 197:         INTCONbits.TMR0IF = 0;
  2147  0059  110B               	bcf	11,2	;volatile
  2148                           
  2149                           ;main.c: 198:         TMR0 = (217 + 14);
  2150  005A  30E7               	movlw	231
  2151  005B  0020               	movlb	0	; select bank0
  2152  005C  0095               	movwf	21	;volatile
  2153  005D                     i1l73:	
  2154                           ;main.c: 201:     return;
  2155                           
  2156                           ;main.c: 200:     }
  2157                           
  2158                           ;main.c: 199:         return;
  2159                           
  2160  005D  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  2161  005E  0009               	retfie
  2162  005F                     __end_of_ISR:	
  2163                           
  2164                           	psect	text3
  2165  0284                     __ptext3:	
  2166 ;; *************** function _update_time *****************
  2167 ;; Defined at:
  2168 ;;		line 14 in file "update_time.c"
  2169 ;; Parameters:    Size  Location     Type
  2170 ;;		None
  2171 ;; Auto vars:     Size  Location     Type
  2172 ;;		None
  2173 ;; Return value:  Size  Location     Type
  2174 ;;                  1    wreg      void 
  2175 ;; Registers used:
  2176 ;;		wreg, status,2, status,0, pclath, cstack
  2177 ;; Tracked objects:
  2178 ;;		On entry : 0/0
  2179 ;;		On exit  : 0/0
  2180 ;;		Unchanged: 0/0
  2181 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2182 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2183 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2184 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2185 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2186 ;;Total ram usage:        1 bytes
  2187 ;; Hardware stack levels used:    1
  2188 ;; Hardware stack levels required when called:    4
  2189 ;; This function calls:
  2190 ;;		_update_display
  2191 ;; This function is called by:
  2192 ;;		_ISR
  2193 ;; This function uses a non-reentrant model
  2194 ;;
  2195                           
  2196                           
  2197                           ;psect for function _update_time
  2198  0284                     _update_time:	
  2199                           
  2200                           ;update_time.c: 15:     g_data.g_time_10ms++;
  2201                           
  2202                           ;incstack = 0
  2203                           ; Regs used in _update_time: [wreg+status,2+status,0+pclath+cstack]
  2204  0284  3001               	movlw	1
  2205  0285  00FC               	movwf	??_update_time
  2206  0286  087C               	movf	??_update_time,w
  2207  0287  0020               	banksel	_g_data
  2208  0288  07A6               	addwf	(_g_data& (0+127)+6),f	;volatile
  2209                           
  2210                           ;update_time.c: 16:     if(g_data.g_time_10ms == 100){
  2211  0289  3064               	movlw	100
  2212  028A  0626               	xorwf	(_g_data& (0+127)+6),w	;volatile
  2213  028B  1D03               	btfss	3,2
  2214  028C  0008               	return
  2215                           
  2216                           ;update_time.c: 18:         g_data.g_time_10ms = 0;
  2217  028D  3000               	movlw	0
  2218  028E  00A6               	movwf	(_g_data& (0+127)+6)	;volatile
  2219                           
  2220                           ;update_time.c: 19:         g_data.g_time_s++;
  2221  028F  3001               	movlw	1
  2222  0290  00FC               	movwf	??_update_time
  2223  0291  087C               	movf	??_update_time,w
  2224  0292  0020               	banksel	_g_data
  2225  0293  07A5               	addwf	(_g_data& (0+127)+5),f	;volatile
  2226                           
  2227                           ;update_time.c: 21:         if(g_data.g_time_s == 60){
  2228  0294  303C               	movlw	60
  2229  0295  0625               	xorwf	(_g_data& (0+127)+5),w	;volatile
  2230  0296  1D03               	btfss	3,2
  2231  0297  0008               	return
  2232                           
  2233                           ;update_time.c: 22:             g_data.g_time_m++;
  2234  0298  3001               	movlw	1
  2235  0299  00FC               	movwf	??_update_time
  2236  029A  087C               	movf	??_update_time,w
  2237  029B  0020               	banksel	_g_data
  2238  029C  07A4               	addwf	(_g_data& (0+127)+4),f	;volatile
  2239                           
  2240                           ;update_time.c: 23:             g_data.g_time_s = 0;
  2241  029D  3000               	movlw	0
  2242  029E  00A5               	movwf	(_g_data& (0+127)+5)	;volatile
  2243                           
  2244                           ;update_time.c: 25:             if(g_data.g_time_m == 60){
  2245  029F  303C               	movlw	60
  2246  02A0  0624               	xorwf	(_g_data& (0+127)+4),w	;volatile
  2247  02A1  1D03               	btfss	3,2
  2248  02A2  2AB0               	goto	i1l1267
  2249                           
  2250                           ;update_time.c: 26:                 g_data.g_time_h++;
  2251  02A3  3001               	movlw	1
  2252  02A4  00FC               	movwf	??_update_time
  2253  02A5  087C               	movf	??_update_time,w
  2254  02A6  0020               	banksel	_g_data
  2255  02A7  07A3               	addwf	(_g_data& (0+127)+3),f	;volatile
  2256                           
  2257                           ;update_time.c: 27:                 g_data.g_time_m = 0;
  2258  02A8  3000               	movlw	0
  2259  02A9  00A4               	movwf	(_g_data& (0+127)+4)	;volatile
  2260                           
  2261                           ;update_time.c: 29:                 if(g_data.g_time_h == 24){
  2262  02AA  3018               	movlw	24
  2263  02AB  0623               	xorwf	(_g_data& (0+127)+3),w	;volatile
  2264  02AC  1D03               	btfss	3,2
  2265  02AD  2AB0               	goto	i1l1267
  2266                           
  2267                           ;update_time.c: 30:                     g_data.g_time_h = 0;
  2268  02AE  3000               	movlw	0
  2269  02AF  00A3               	movwf	(_g_data& (0+127)+3)	;volatile
  2270  02B0                     i1l1267:	
  2271                           ;update_time.c: 32:             }
  2272                           
  2273                           ;update_time.c: 31:                 }
  2274                           
  2275                           
  2276                           ;update_time.c: 34:             update_display();
  2277  02B0  3183  232E         	fcall	_update_display
  2278                           
  2279                           ;update_time.c: 37:     }
  2280                           
  2281                           ;update_time.c: 35:         }
  2282  02B2  0008               	return
  2283  02B3                     __end_of_update_time:	
  2284                           ;update_time.c: 38:     return;
  2285                           
  2286                           
  2287                           	psect	text4
  2288  006D                     __ptext4:	
  2289 ;; *************** function _receive_decode *****************
  2290 ;; Defined at:
  2291 ;;		line 36 in file "receive_decode.c"
  2292 ;; Parameters:    Size  Location     Type
  2293 ;;		None
  2294 ;; Auto vars:     Size  Location     Type
  2295 ;;  i               2   13[BANK0 ] int 
  2296 ;;  i               1   16[BANK0 ] unsigned char 
  2297 ;;  last_time_m     2    7[BANK0 ] unsigned short 
  2298 ;;  last_time_h     2    5[BANK0 ] unsigned short 
  2299 ;;  check           1   17[BANK0 ] unsigned char 
  2300 ;;  read_value      1   15[BANK0 ] unsigned char 
  2301 ;; Return value:  Size  Location     Type
  2302 ;;                  1    wreg      void 
  2303 ;; Registers used:
  2304 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2305 ;; Tracked objects:
  2306 ;;		On entry : 0/0
  2307 ;;		On exit  : 0/0
  2308 ;;		Unchanged: 0/0
  2309 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2310 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2311 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2312 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2313 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2314 ;;Total ram usage:       18 bytes
  2315 ;; Hardware stack levels used:    1
  2316 ;; Hardware stack levels required when called:    4
  2317 ;; This function calls:
  2318 ;;		_times2number
  2319 ;;		_update_display
  2320 ;; This function is called by:
  2321 ;;		_ISR
  2322 ;; This function uses a non-reentrant model
  2323 ;;
  2324                           
  2325                           
  2326                           ;psect for function _receive_decode
  2327  006D                     _receive_decode:	
  2328                           
  2329                           ;receive_decode.c: 38:     if(PORTCbits.RC1 == PIN_HIGH){
  2330                           
  2331                           ;incstack = 0
  2332                           ; Regs used in _receive_decode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2333  006D  0020               	movlb	0	; select bank0
  2334  006E  1C8E               	btfss	14,1	;volatile
  2335  006F  2875               	goto	i1l113
  2336                           
  2337                           ;receive_decode.c: 39:         g_data.g_high_level_times++;
  2338  0070  3001               	movlw	1
  2339  0071  0020               	banksel	_g_data
  2340  0072  07A7               	addwf	(_g_data& (0+127)+7),f	;volatile
  2341  0073  3000               	movlw	0
  2342  0074  3DA8               	addwfc	((_g_data+1)& (0+127)+7),f	;volatile
  2343  0075                     i1l113:	
  2344                           ;receive_decode.c: 40:     }
  2345                           
  2346                           
  2347                           ;receive_decode.c: 42:     g_data.g_all_level_times++;
  2348  0075  3001               	movlw	1
  2349  0076  0020               	banksel	_g_data
  2350  0077  07A9               	addwf	(_g_data& (0+127)+9),f	;volatile
  2351  0078  3000               	movlw	0
  2352  0079  3DAA               	addwfc	((_g_data+1)& (0+127)+9),f	;volatile
  2353                           
  2354                           ;receive_decode.c: 46:     if(g_data.g_all_level_times < 100){
  2355  007A  3000               	movlw	0
  2356  007B  022A               	subwf	((_g_data+1)& (0+127)+9),w	;volatile
  2357  007C  3064               	movlw	100
  2358  007D  1903               	skipnz
  2359  007E  0229               	subwf	(_g_data& (0+127)+9),w	;volatile
  2360  007F  1C03               	btfss	3,0
  2361  0080  0008               	return
  2362                           
  2363                           ;receive_decode.c: 50:     u8 read_value = times2number(g_data.g_high_level_times);
  2364                           
  2365                           ;receive_decode.c: 48:     }
  2366                           
  2367                           ;receive_decode.c: 47:         return;
  2368  0081  0828               	movf	((_g_data+1)& (0+127)+7),w	;volatile
  2369  0082  00F1               	movwf	times2number@high_level_times+1
  2370  0083  0020               	banksel	_g_data
  2371  0084  0827               	movf	(_g_data& (0+127)+7),w	;volatile
  2372  0085  00F0               	movwf	times2number@high_level_times
  2373  0086  3182  2239  3180   	fcall	_times2number
  2374  0089  0020               	movlb	0	; select bank0
  2375  008A  00C4               	movwf	??_receive_decode
  2376  008B  0844               	movf	??_receive_decode,w
  2377  008C  00D3               	movwf	receive_decode@read_value
  2378                           
  2379                           ;receive_decode.c: 51:     g_data.g_all_level_times = 0;
  2380  008D  0020               	banksel	_g_data
  2381  008E  01A9               	clrf	(_g_data& (0+127)+9)	;volatile
  2382  008F  01AA               	clrf	((_g_data+1)& (0+127)+9)	;volatile
  2383                           
  2384                           ;receive_decode.c: 52:     g_data.g_high_level_times = 0;
  2385  0090  01A7               	clrf	(_g_data& (0+127)+7)	;volatile
  2386  0091  01A8               	clrf	((_g_data+1)& (0+127)+7)	;volatile
  2387                           
  2388                           ;receive_decode.c: 54:     if(read_value == 5){
  2389  0092  3005               	movlw	5
  2390  0093  0020               	movlb	0	; select bank0
  2391  0094  0653               	xorwf	receive_decode@read_value,w
  2392  0095  1D03               	btfss	3,2
  2393  0096  28A1               	goto	i1l1287
  2394                           
  2395                           ;receive_decode.c: 56:         g_data.g_find_recv_start = TRUE;
  2396  0097  3001               	movlw	1
  2397  0098  0020               	banksel	_g_data
  2398  0099  00A2               	movwf	(_g_data& (0+127)+2)	;volatile
  2399                           
  2400                           ;receive_decode.c: 57:         g_data.g_recv_buf[CODE_P0] = 0;
  2401  009A  3000               	movlw	0
  2402  009B  00AD               	movwf	(_g_data& (0+127)+13)	;volatile
  2403                           
  2404                           ;receive_decode.c: 58:         g_data.g_recv_count = CODE_P1;
  2405  009C  3000               	movlw	0
  2406  009D  00AC               	movwf	((_g_data+1)& (0+127)+11)	;volatile
  2407  009E  3001               	movlw	1
  2408  009F  00AB               	movwf	(_g_data& (0+127)+11)	;volatile
  2409                           
  2410                           ;receive_decode.c: 59:         return;
  2411  00A0  0008               	return
  2412  00A1                     i1l1287:	
  2413                           ;receive_decode.c: 60:     }
  2414                           
  2415                           
  2416                           ;receive_decode.c: 62:     if(g_data.g_find_recv_start == FALSE || (read_value == 4)){
  2417  00A1  0020               	banksel	_g_data
  2418  00A2  0822               	movf	(_g_data& (0+127)+2),w	;volatile
  2419  00A3  1903               	btfsc	3,2
  2420  00A4  0008               	return
  2421  00A5  3004               	movlw	4
  2422  00A6  0020               	movlb	0	; select bank0
  2423  00A7  0653               	xorwf	receive_decode@read_value,w
  2424  00A8  1903               	btfsc	3,2
  2425  00A9  0008               	return
  2426                           
  2427                           ;receive_decode.c: 68:     g_data.g_recv_buf[g_data.g_recv_count++] = read_value;
  2428                           
  2429                           ;receive_decode.c: 66:     }
  2430                           
  2431                           ;receive_decode.c: 65:         return;
  2432  00AA  3020               	movlw	low _g_data
  2433  00AB  0086               	movwf	6
  2434  00AC  3000               	movlw	high _g_data
  2435  00AD  0087               	movwf	7
  2436  00AE  314B               	addfsr 1,11
  2437  00AF  302D               	movlw	low (_g_data+13)
  2438  00B0  00C4               	movwf	??_receive_decode
  2439  00B1  3000               	movlw	high (_g_data+13)
  2440  00B2  00C5               	movwf	??_receive_decode+1
  2441  00B3  3F40               	moviw [0]fsr1
  2442  00B4  0744               	addwf	??_receive_decode,w
  2443  00B5  00C6               	movwf	??_receive_decode+2
  2444  00B6  3F41               	moviw [1]fsr1
  2445  00B7  3D45               	addwfc	??_receive_decode+1,w
  2446  00B8  00C7               	movwf	??_receive_decode+3
  2447  00B9  0846               	movf	??_receive_decode+2,w
  2448  00BA  0086               	movwf	6
  2449  00BB  0847               	movf	??_receive_decode+3,w
  2450  00BC  0087               	movwf	7
  2451  00BD  0853               	movf	receive_decode@read_value,w
  2452  00BE  0081               	movwf	1
  2453  00BF  3001               	movlw	1
  2454  00C0  0020               	banksel	_g_data
  2455  00C1  07AB               	addwf	(_g_data& (0+127)+11),f	;volatile
  2456  00C2  3000               	movlw	0
  2457  00C3  3DAC               	addwfc	((_g_data+1)& (0+127)+11),f	;volatile
  2458                           
  2459                           ;receive_decode.c: 69:     if(g_data.g_recv_count <= CODE_P3){
  2460  00C4  3000               	movlw	0
  2461  00C5  022C               	subwf	((_g_data+1)& (0+127)+11),w	;volatile
  2462  00C6  300B               	movlw	11
  2463  00C7  1903               	skipnz
  2464  00C8  022B               	subwf	(_g_data& (0+127)+11),w	;volatile
  2465  00C9  1C03               	btfss	3,0
  2466  00CA  0008               	return
  2467                           
  2468                           ;receive_decode.c: 73:     if(g_data.g_recv_buf[CODE_P1] != 0 && g_data.g_recv_buf[CODE_
      +                          P2] != 0){
  2469                           
  2470                           ;receive_decode.c: 71:     }
  2471                           
  2472                           ;receive_decode.c: 70:         return;
  2473  00CB  082E               	movf	(_g_data& (0+127)+14),w	;volatile
  2474  00CC  1903               	btfsc	3,2
  2475  00CD  28D8               	goto	i1l1309
  2476  00CE  082F               	movf	(_g_data& (0+127)+15),w	;volatile
  2477  00CF  1903               	btfsc	3,2
  2478  00D0  28D8               	goto	i1l1309
  2479                           
  2480                           ;receive_decode.c: 74:         g_data.g_find_recv_start = FALSE;
  2481  00D1  3000               	movlw	0
  2482  00D2  00A2               	movwf	(_g_data& (0+127)+2)	;volatile
  2483                           
  2484                           ;receive_decode.c: 75:         g_data.g_start_read_data = 0;
  2485  00D3  3000               	movlw	0
  2486  00D4  00A1               	movwf	(_g_data& (0+127)+1)	;volatile
  2487                           
  2488                           ;receive_decode.c: 76:         g_data.g_recv_count = 0;
  2489  00D5  01AB               	clrf	(_g_data& (0+127)+11)	;volatile
  2490  00D6  01AC               	clrf	((_g_data+1)& (0+127)+11)	;volatile
  2491                           
  2492                           ;receive_decode.c: 77:         return;
  2493  00D7  0008               	return
  2494  00D8                     i1l1309:	
  2495                           ;receive_decode.c: 78:     }
  2496                           
  2497                           
  2498                           ;receive_decode.c: 80:     u16 last_time_h = g_data.g_time_h;
  2499  00D8  0823               	movf	(_g_data& (0+127)+3),w	;volatile
  2500  00D9  0020               	movlb	0	; select bank0
  2501  00DA  00C4               	movwf	??_receive_decode
  2502  00DB  01C5               	clrf	??_receive_decode+1
  2503  00DC  0844               	movf	??_receive_decode,w
  2504  00DD  00C9               	movwf	receive_decode@last_time_h
  2505  00DE  0845               	movf	??_receive_decode+1,w
  2506  00DF  00CA               	movwf	receive_decode@last_time_h+1
  2507                           
  2508                           ;receive_decode.c: 81:     u16 last_time_m = g_data.g_time_m;
  2509  00E0  0020               	banksel	_g_data
  2510  00E1  0824               	movf	(_g_data& (0+127)+4),w	;volatile
  2511  00E2  0020               	movlb	0	; select bank0
  2512  00E3  00C4               	movwf	??_receive_decode
  2513  00E4  01C5               	clrf	??_receive_decode+1
  2514  00E5  0844               	movf	??_receive_decode,w
  2515  00E6  00CB               	movwf	receive_decode@last_time_m
  2516  00E7  0845               	movf	??_receive_decode+1,w
  2517  00E8  00CC               	movwf	receive_decode@last_time_m+1
  2518                           
  2519                           ;receive_decode.c: 82:     g_data.g_time_h = g_data.g_recv_buf[CODE_H_1] * 4 + g_data.g_
      +                          recv_buf[CODE_H_2];
  2520  00E9  0020               	banksel	_g_data
  2521  00EA  0830               	movf	(_g_data& (0+127)+16),w	;volatile
  2522  00EB  0020               	movlb	0	; select bank0
  2523  00EC  00C4               	movwf	??_receive_decode
  2524  00ED  3002               	movlw	2
  2525  00EE                     u88_25:	
  2526  00EE  35C4               	lslf	??_receive_decode,f
  2527  00EF  0B89               	decfsz	9,f
  2528  00F0  28EE               	goto	u88_25
  2529  00F1  0020               	banksel	_g_data
  2530  00F2  0831               	movf	(_g_data& (0+127)+17),w	;volatile
  2531  00F3  0020               	movlb	0	; select bank0
  2532  00F4  0744               	addwf	??_receive_decode,w
  2533  00F5  00C5               	movwf	??_receive_decode+1
  2534  00F6  0845               	movf	??_receive_decode+1,w
  2535  00F7  0020               	banksel	_g_data
  2536  00F8  00A3               	movwf	(_g_data& (0+127)+3)	;volatile
  2537                           
  2538                           ;receive_decode.c: 83:     g_data.g_time_m = g_data.g_recv_buf[CODE_M_1] * 16 + g_data.g
      +                          _recv_buf[CODE_M_2] * 4 + g_data.g_recv_buf[CODE_M_3];
  2539  00F9  0832               	movf	(_g_data& (0+127)+18),w	;volatile
  2540  00FA  0020               	movlb	0	; select bank0
  2541  00FB  00C4               	movwf	??_receive_decode
  2542  00FC  3004               	movlw	4
  2543  00FD                     u89_25:	
  2544  00FD  35C4               	lslf	??_receive_decode,f
  2545  00FE  0B89               	decfsz	9,f
  2546  00FF  28FD               	goto	u89_25
  2547  0100  0020               	banksel	_g_data
  2548  0101  0833               	movf	(_g_data& (0+127)+19),w	;volatile
  2549  0102  0020               	movlb	0	; select bank0
  2550  0103  00C5               	movwf	??_receive_decode+1
  2551  0104  3001               	movlw	1
  2552  0105                     u90_25:	
  2553  0105  35C5               	lslf	??_receive_decode+1,f
  2554  0106  3EFF               	addlw	-1
  2555  0107  1D03               	skipz
  2556  0108  2905               	goto	u90_25
  2557  0109  3545               	lslf	??_receive_decode+1,w
  2558  010A  0744               	addwf	??_receive_decode,w
  2559  010B  00C6               	movwf	??_receive_decode+2
  2560  010C  0020               	banksel	_g_data
  2561  010D  0834               	movf	(_g_data& (0+127)+20),w	;volatile
  2562  010E  0020               	movlb	0	; select bank0
  2563  010F  0746               	addwf	??_receive_decode+2,w
  2564  0110  00C7               	movwf	??_receive_decode+3
  2565  0111  0847               	movf	??_receive_decode+3,w
  2566  0112  0020               	banksel	_g_data
  2567  0113  00A4               	movwf	(_g_data& (0+127)+4)	;volatile
  2568                           
  2569                           ;receive_decode.c: 84:     u8 check = 0;
  2570  0114  0020               	movlb	0	; select bank0
  2571  0115  01D5               	clrf	receive_decode@check
  2572                           
  2573                           ;receive_decode.c: 85:     for(u8 i = CODE_P1; i < CODE_P3; i++)
  2574  0116  01D4               	clrf	receive_decode@i
  2575  0117  0AD4               	incf	receive_decode@i,f
  2576  0118  300A               	movlw	10
  2577  0119  0254               	subwf	receive_decode@i,w
  2578  011A  1803               	btfsc	3,0
  2579  011B  2935               	goto	i1l1329
  2580  011C                     i1l1323:	
  2581                           
  2582                           ;receive_decode.c: 86:     {;receive_decode.c: 87:         check ^= g_data.g_recv_buf[i]
      +                          ;
  2583  011C  0854               	movf	receive_decode@i,w
  2584  011D  00C4               	movwf	??_receive_decode
  2585  011E  01C5               	clrf	??_receive_decode+1
  2586  011F  302D               	movlw	low (_g_data+13)
  2587  0120  00C6               	movwf	??_receive_decode+2
  2588  0121  3000               	movlw	high (_g_data+13)
  2589  0122  00C7               	movwf	??_receive_decode+3
  2590  0123  0844               	movf	??_receive_decode,w
  2591  0124  0746               	addwf	??_receive_decode+2,w
  2592  0125  0086               	movwf	6
  2593  0126  0845               	movf	??_receive_decode+1,w
  2594  0127  3D47               	addwfc	??_receive_decode+3,w
  2595  0128  0087               	movwf	7
  2596  0129  0801               	movf	1,w
  2597  012A  00C8               	movwf	??_receive_decode+4
  2598  012B  0848               	movf	??_receive_decode+4,w
  2599  012C  06D5               	xorwf	receive_decode@check,f
  2600                           
  2601                           ;receive_decode.c: 88:     }
  2602  012D  3001               	movlw	1
  2603  012E  00C4               	movwf	??_receive_decode
  2604  012F  0844               	movf	??_receive_decode,w
  2605  0130  07D4               	addwf	receive_decode@i,f
  2606  0131  300A               	movlw	10
  2607  0132  0254               	subwf	receive_decode@i,w
  2608  0133  1C03               	skipc
  2609  0134  291C               	goto	i1l1323
  2610  0135                     i1l1329:	
  2611                           
  2612                           ;receive_decode.c: 89:     if( (((0 == check) || (3 == check))) && (g_data.g_recv_buf[CO
      +                          DE_P3] % 2 == 0) )
  2613  0135  0855               	movf	receive_decode@check,w
  2614  0136  1903               	btfsc	3,2
  2615  0137  293C               	goto	i1l126
  2616  0138  3003               	movlw	3
  2617  0139  0655               	xorwf	receive_decode@check,w
  2618  013A  1D03               	btfss	3,2
  2619  013B  294E               	goto	i1l1341
  2620  013C                     i1l126:	
  2621  013C  0020               	banksel	_g_data
  2622  013D  1837               	btfsc	(_g_data& (0+127)+23),0	;volatile
  2623  013E  294E               	goto	i1l1341
  2624                           
  2625                           ;receive_decode.c: 90:     {;receive_decode.c: 91:         g_data.g_time_h += (2 ==g_dat
      +                          a.g_recv_buf[CODE_P3])? 12 : 0;
  2626  013F  3002               	movlw	2
  2627  0140  0637               	xorwf	(_g_data& (0+127)+23),w	;volatile
  2628  0141  1903               	btfsc	3,2
  2629  0142  2947               	goto	i1l1337
  2630  0143  0020               	movlb	0	; select bank0
  2631  0144  01CD               	clrf	_receive_decode$516
  2632  0145  01CE               	clrf	_receive_decode$516+1
  2633  0146  294C               	goto	i1l1339
  2634  0147                     i1l1337:	
  2635  0147  300C               	movlw	12
  2636  0148  0020               	movlb	0	; select bank0
  2637  0149  00CD               	movwf	_receive_decode$516
  2638  014A  3000               	movlw	0
  2639  014B  00CE               	movwf	_receive_decode$516+1
  2640  014C                     i1l1339:	
  2641  014C  084D               	movf	_receive_decode$516,w
  2642  014D  296C               	goto	L1
  2643  014E                     i1l1341:	
  2644                           ;receive_decode.c: 92:     }else if( (((1 == check) || (2 == check))) && ((g_data.g_recv
      +                          _buf[CODE_P3] == 1) || (g_data.g_recv_buf[CODE_P3] == 3)) )
  2645                           
  2646  014E  0020               	movlb	0	; select bank0
  2647  014F  0355               	decf	receive_decode@check,w
  2648  0150  1903               	btfsc	3,2
  2649  0151  2956               	goto	i1l1345
  2650  0152  3002               	movlw	2
  2651  0153  0655               	xorwf	receive_decode@check,w
  2652  0154  1D03               	btfss	3,2
  2653  0155  2971               	goto	i1l132
  2654  0156                     i1l1345:	
  2655  0156  0020               	banksel	_g_data
  2656  0157  0337               	decf	(_g_data& (0+127)+23),w	;volatile
  2657  0158  1903               	btfsc	3,2
  2658  0159  295E               	goto	i1l1349
  2659  015A  3003               	movlw	3
  2660  015B  0637               	xorwf	(_g_data& (0+127)+23),w	;volatile
  2661  015C  1D03               	btfss	3,2
  2662  015D  2971               	goto	i1l132
  2663  015E                     i1l1349:	
  2664                           
  2665                           ;receive_decode.c: 94:     {;receive_decode.c: 95:         g_data.g_time_h += (3 ==g_dat
      +                          a.g_recv_buf[CODE_P3])? 12 : 0;
  2666  015E  3003               	movlw	3
  2667  015F  0637               	xorwf	(_g_data& (0+127)+23),w	;volatile
  2668  0160  1903               	btfsc	3,2
  2669  0161  2966               	goto	i1l1353
  2670  0162  0020               	movlb	0	; select bank0
  2671  0163  01CF               	clrf	_receive_decode$517
  2672  0164  01D0               	clrf	_receive_decode$517+1
  2673  0165  296B               	goto	i1l1355
  2674  0166                     i1l1353:	
  2675  0166  300C               	movlw	12
  2676  0167  0020               	movlb	0	; select bank0
  2677  0168  00CF               	movwf	_receive_decode$517
  2678  0169  3000               	movlw	0
  2679  016A  00D0               	movwf	_receive_decode$517+1
  2680  016B                     i1l1355:	
  2681  016B  084F               	movf	_receive_decode$517,w
  2682  016C                     L1:	
  2683  016C  00C4               	movwf	??_receive_decode
  2684  016D  0844               	movf	??_receive_decode,w
  2685  016E  0020               	banksel	_g_data
  2686  016F  07A3               	addwf	(_g_data& (0+127)+3),f	;volatile
  2687                           
  2688                           ;receive_decode.c: 96:     }else{
  2689  0170  2979               	goto	i1l1361
  2690  0171                     i1l132:	
  2691                           
  2692                           ;receive_decode.c: 97:         g_data.g_find_recv_start = FALSE;
  2693  0171  3000               	movlw	0
  2694  0172  0020               	banksel	_g_data
  2695  0173  00A2               	movwf	(_g_data& (0+127)+2)	;volatile
  2696                           
  2697                           ;receive_decode.c: 98:         g_data.g_start_read_data = 0;
  2698  0174  3000               	movlw	0
  2699  0175  00A1               	movwf	(_g_data& (0+127)+1)	;volatile
  2700                           
  2701                           ;receive_decode.c: 99:         g_data.g_recv_count = 0;
  2702  0176  01AB               	clrf	(_g_data& (0+127)+11)	;volatile
  2703  0177  01AC               	clrf	((_g_data+1)& (0+127)+11)	;volatile
  2704                           
  2705                           ;receive_decode.c: 100:         return;
  2706  0178  0008               	return
  2707  0179                     i1l1361:	
  2708                           ;receive_decode.c: 101:     }
  2709                           
  2710                           
  2711                           ;receive_decode.c: 103:     if(last_time_h != g_data.g_time_h || last_time_m != g_data.g
      +                          _time_m){
  2712  0179  0823               	movf	(_g_data& (0+127)+3),w	;volatile
  2713  017A  0020               	movlb	0	; select bank0
  2714  017B  00C4               	movwf	??_receive_decode
  2715  017C  01C5               	clrf	??_receive_decode+1
  2716  017D  084A               	movf	receive_decode@last_time_h+1,w
  2717  017E  0645               	xorwf	??_receive_decode+1,w
  2718  017F  1D03               	skipz
  2719  0180  2983               	goto	u102_25
  2720  0181  0849               	movf	receive_decode@last_time_h,w
  2721  0182  0644               	xorwf	??_receive_decode,w
  2722  0183                     u102_25:	
  2723  0183  1D03               	skipz
  2724  0184  2992               	goto	i1l1365
  2725  0185  0020               	banksel	_g_data
  2726  0186  0824               	movf	(_g_data& (0+127)+4),w	;volatile
  2727  0187  0020               	movlb	0	; select bank0
  2728  0188  00C4               	movwf	??_receive_decode
  2729  0189  01C5               	clrf	??_receive_decode+1
  2730  018A  084C               	movf	receive_decode@last_time_m+1,w
  2731  018B  0645               	xorwf	??_receive_decode+1,w
  2732  018C  1D03               	skipz
  2733  018D  2990               	goto	u103_25
  2734  018E  084B               	movf	receive_decode@last_time_m,w
  2735  018F  0644               	xorwf	??_receive_decode,w
  2736  0190                     u103_25:	
  2737  0190  1903               	skipnz
  2738  0191  2995               	goto	i1l1367
  2739  0192                     i1l1365:	
  2740                           
  2741                           ;receive_decode.c: 104:         update_display();
  2742  0192  3183  232E  3180   	fcall	_update_display
  2743  0195                     i1l1367:	
  2744                           ;receive_decode.c: 105:     }
  2745                           
  2746                           
  2747                           ;receive_decode.c: 108:     g_data.g_find_recv_start = FALSE;
  2748  0195  3000               	movlw	0
  2749  0196  0020               	banksel	_g_data
  2750  0197  00A2               	movwf	(_g_data& (0+127)+2)	;volatile
  2751                           
  2752                           ;receive_decode.c: 109:     PORTCbits.RC2 = BPC_PWR_OFF;
  2753  0198  0020               	movlb	0	; select bank0
  2754  0199  150E               	bsf	14,2	;volatile
  2755                           
  2756                           ;receive_decode.c: 110:     g_data.g_start_read_data = 0;
  2757  019A  3000               	movlw	0
  2758  019B  0020               	banksel	_g_data
  2759  019C  00A1               	movwf	(_g_data& (0+127)+1)	;volatile
  2760                           
  2761                           ;receive_decode.c: 111:     g_data.g_recv_count = 0;
  2762  019D  01AB               	clrf	(_g_data& (0+127)+11)	;volatile
  2763  019E  01AC               	clrf	((_g_data+1)& (0+127)+11)	;volatile
  2764                           
  2765                           ;receive_decode.c: 112:     for(int i = 0;i < 20; i++){
  2766  019F  0020               	movlb	0	; select bank0
  2767  01A0  01D1               	clrf	receive_decode@i_518
  2768  01A1  01D2               	clrf	receive_decode@i_518+1
  2769  01A2                     L2:	
  2770  01A2  0852               	movf	receive_decode@i_518+1,w
  2771  01A3  3A80               	xorlw	128
  2772  01A4  00C4               	movwf	??_receive_decode
  2773  01A5  3080               	movlw	128
  2774  01A6  0244               	subwf	??_receive_decode,w
  2775  01A7  1D03               	skipz
  2776  01A8  29AB               	goto	u104_25
  2777  01A9  3014               	movlw	20
  2778  01AA  0251               	subwf	receive_decode@i_518,w
  2779  01AB                     u104_25:	
  2780  01AB  1803               	btfsc	3,0
  2781  01AC  0008               	return
  2782                           
  2783                           ;receive_decode.c: 113:         g_data.g_recv_buf[i] = 5;
  2784  01AD  302D               	movlw	low (_g_data+13)
  2785  01AE  0020               	movlb	0	; select bank0
  2786  01AF  00C4               	movwf	??_receive_decode
  2787  01B0  3000               	movlw	high (_g_data+13)
  2788  01B1  00C5               	movwf	??_receive_decode+1
  2789  01B2  0851               	movf	receive_decode@i_518,w
  2790  01B3  0744               	addwf	??_receive_decode,w
  2791  01B4  00C6               	movwf	??_receive_decode+2
  2792  01B5  0852               	movf	receive_decode@i_518+1,w
  2793  01B6  3D45               	addwfc	??_receive_decode+1,w
  2794  01B7  00C7               	movwf	??_receive_decode+3
  2795  01B8  0846               	movf	??_receive_decode+2,w
  2796  01B9  0086               	movwf	6
  2797  01BA  0847               	movf	??_receive_decode+3,w
  2798  01BB  0087               	movwf	7
  2799  01BC  3005               	movlw	5
  2800  01BD  0081               	movwf	1
  2801                           
  2802                           ;receive_decode.c: 114:     }
  2803  01BE  3001               	movlw	1
  2804  01BF  07D1               	addwf	receive_decode@i_518,f
  2805  01C0  3000               	movlw	0
  2806  01C1  3DD2               	addwfc	receive_decode@i_518+1,f
  2807  01C2  29A2               	goto	L2
  2808  01C3                     __end_of_receive_decode:	
  2809                           ;receive_decode.c: 115:     return;
  2810                           
  2811                           
  2812                           	psect	text5
  2813  032E                     __ptext5:	
  2814 ;; *************** function _update_display *****************
  2815 ;; Defined at:
  2816 ;;		line 63 in file "update_display.c"
  2817 ;; Parameters:    Size  Location     Type
  2818 ;;		None
  2819 ;; Auto vars:     Size  Location     Type
  2820 ;;		None
  2821 ;; Return value:  Size  Location     Type
  2822 ;;                  1    wreg      void 
  2823 ;; Registers used:
  2824 ;;		wreg, status,2, status,0, pclath, cstack
  2825 ;; Tracked objects:
  2826 ;;		On entry : 0/0
  2827 ;;		On exit  : 0/0
  2828 ;;		Unchanged: 0/0
  2829 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2830 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2831 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2832 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2833 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2834 ;;Total ram usage:        2 bytes
  2835 ;; Hardware stack levels used:    1
  2836 ;; Hardware stack levels required when called:    3
  2837 ;; This function calls:
  2838 ;;		_write_once
  2839 ;; This function is called by:
  2840 ;;		_receive_decode
  2841 ;;		_update_time
  2842 ;; This function uses a non-reentrant model
  2843 ;;
  2844                           
  2845                           
  2846                           ;psect for function _update_display
  2847  032E                     _update_display:	
  2848                           
  2849                           ;update_display.c: 74:     write_once(0xff, 0x00, 0xf0, 0x0f);
  2850                           
  2851                           ;incstack = 0
  2852                           ; Regs used in _update_display: [wreg+status,2+status,0+pclath+cstack]
  2853  032E  01F6               	clrf	write_once@HR
  2854  032F  30F0               	movlw	240
  2855  0330  00FA               	movwf	??_update_display
  2856  0331  087A               	movf	??_update_display,w
  2857  0332  00F7               	movwf	write_once@ML
  2858  0333  300F               	movlw	15
  2859  0334  00FB               	movwf	??_update_display+1
  2860  0335  087B               	movf	??_update_display+1,w
  2861  0336  00F8               	movwf	write_once@MR
  2862  0337  30FF               	movlw	255
  2863  0338  3183  2306         	fcall	_write_once
  2864  033A  0008               	return
  2865  033B                     __end_of_update_display:	
  2866                           ;update_display.c: 75:     return;
  2867                           
  2868                           
  2869                           	psect	text6
  2870  0306                     __ptext6:	
  2871 ;; *************** function _write_once *****************
  2872 ;; Defined at:
  2873 ;;		line 51 in file "update_display.c"
  2874 ;; Parameters:    Size  Location     Type
  2875 ;;  HL              1    wreg     unsigned char 
  2876 ;;  HR              1    6[COMMON] unsigned char 
  2877 ;;  ML              1    7[COMMON] unsigned char 
  2878 ;;  MR              1    8[COMMON] unsigned char 
  2879 ;; Auto vars:     Size  Location     Type
  2880 ;;  HL              1    9[COMMON] unsigned char 
  2881 ;; Return value:  Size  Location     Type
  2882 ;;                  1    wreg      void 
  2883 ;; Registers used:
  2884 ;;		wreg, status,2, status,0, pclath, cstack
  2885 ;; Tracked objects:
  2886 ;;		On entry : 0/0
  2887 ;;		On exit  : 0/0
  2888 ;;		Unchanged: 0/0
  2889 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2890 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2891 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2892 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2893 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2894 ;;Total ram usage:        4 bytes
  2895 ;; Hardware stack levels used:    1
  2896 ;; Hardware stack levels required when called:    2
  2897 ;; This function calls:
  2898 ;;		_control595_delay
  2899 ;;		_write_byte
  2900 ;; This function is called by:
  2901 ;;		_update_display
  2902 ;; This function uses a non-reentrant model
  2903 ;;
  2904                           
  2905                           
  2906                           ;psect for function _write_once
  2907  0306                     _write_once:	
  2908                           
  2909                           ;incstack = 0
  2910                           ; Regs used in _write_once: [wreg+status,2+status,0+pclath+cstack]
  2911                           ;write_once@HL stored from wreg
  2912  0306  00F9               	movwf	write_once@HL
  2913                           
  2914                           ;update_display.c: 53:     write_byte(HL);
  2915  0307  0879               	movf	write_once@HL,w
  2916  0308  3182  22DF  3183   	fcall	_write_byte
  2917                           
  2918                           ;update_display.c: 54:     write_byte(HR);
  2919  030B  0876               	movf	write_once@HR,w
  2920  030C  3182  22DF  3183   	fcall	_write_byte
  2921                           
  2922                           ;update_display.c: 55:     write_byte(ML);
  2923  030F  0877               	movf	write_once@ML,w
  2924  0310  3182  22DF  3183   	fcall	_write_byte
  2925                           
  2926                           ;update_display.c: 56:     write_byte(MR);
  2927  0313  0878               	movf	write_once@MR,w
  2928  0314  3182  22DF  3183   	fcall	_write_byte
  2929                           
  2930                           ;update_display.c: 58:     PORTBbits.RB1 = PIN_HIGH;
  2931  0317  0020               	movlb	0	; select bank0
  2932  0318  148D               	bsf	13,1	;volatile
  2933                           
  2934                           ;update_display.c: 59:  control595_delay();
  2935  0319  3183  233B         	fcall	_control595_delay
  2936                           
  2937                           ;update_display.c: 60:     PORTBbits.RB1 = PIN_LOW;
  2938  031B  0020               	movlb	0	; select bank0
  2939  031C  108D               	bcf	13,1	;volatile
  2940  031D  0008               	return
  2941  031E                     __end_of_write_once:	
  2942                           
  2943                           	psect	text7
  2944  02DF                     __ptext7:	
  2945 ;; *************** function _write_byte *****************
  2946 ;; Defined at:
  2947 ;;		line 38 in file "update_display.c"
  2948 ;; Parameters:    Size  Location     Type
  2949 ;;  data            1    wreg     unsigned char 
  2950 ;; Auto vars:     Size  Location     Type
  2951 ;;  data            1    4[COMMON] unsigned char 
  2952 ;;  i               1    5[COMMON] unsigned char 
  2953 ;; Return value:  Size  Location     Type
  2954 ;;                  1    wreg      void 
  2955 ;; Registers used:
  2956 ;;		wreg, status,2, status,0, pclath, cstack
  2957 ;; Tracked objects:
  2958 ;;		On entry : 0/0
  2959 ;;		On exit  : 0/0
  2960 ;;		Unchanged: 0/0
  2961 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2962 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2963 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2964 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2965 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2966 ;;Total ram usage:        4 bytes
  2967 ;; Hardware stack levels used:    1
  2968 ;; Hardware stack levels required when called:    1
  2969 ;; This function calls:
  2970 ;;		_control595_delay
  2971 ;; This function is called by:
  2972 ;;		_write_once
  2973 ;; This function uses a non-reentrant model
  2974 ;;
  2975                           
  2976                           
  2977                           ;psect for function _write_byte
  2978  02DF                     _write_byte:	
  2979                           
  2980                           ;incstack = 0
  2981                           ; Regs used in _write_byte: [wreg+status,2+status,0+pclath+cstack]
  2982                           ;write_byte@data stored from wreg
  2983  02DF  00F4               	movwf	write_byte@data
  2984                           
  2985                           ;update_display.c: 39:     u8 i;;update_display.c: 40:     for(i = 0; i < 8; i++){
  2986  02E0  01F5               	clrf	write_byte@i
  2987  02E1                     L3:	
  2988  02E1  3008               	movlw	8
  2989  02E2  0275               	subwf	write_byte@i,w
  2990  02E3  1803               	btfsc	3,0
  2991  02E4  0008               	return
  2992                           
  2993                           ;update_display.c: 41:   PORTBbits.RB5 = (data & 0x80) >> 7;
  2994  02E5  0874               	movf	write_byte@data,w
  2995  02E6  00F2               	movwf	??_write_byte
  2996  02E7  3007               	movlw	7
  2997  02E8                     u63_25:	
  2998  02E8  36F2               	lsrf	??_write_byte,f
  2999  02E9  0B89               	decfsz	9,f
  3000  02EA  2AE8               	goto	u63_25
  3001  02EB  0872               	movf	??_write_byte,w
  3002  02EC  3901               	andlw	1
  3003  02ED  00F3               	movwf	??_write_byte+1
  3004  02EE  0EF3               	swapf	??_write_byte+1,f
  3005  02EF  0DF3               	rlf	??_write_byte+1,f
  3006  02F0  0020               	movlb	0	; select bank0
  3007  02F1  080D               	movf	13,w	;volatile
  3008  02F2  0673               	xorwf	??_write_byte+1,w
  3009  02F3  39DF               	andlw	-33
  3010  02F4  0673               	xorwf	??_write_byte+1,w
  3011  02F5  008D               	movwf	13	;volatile
  3012                           
  3013                           ;update_display.c: 42:         PORTBbits.RB0 = PIN_LOW;
  3014  02F6  100D               	bcf	13,0	;volatile
  3015                           
  3016                           ;update_display.c: 43:   control595_delay();
  3017  02F7  3183  233B  3182   	fcall	_control595_delay
  3018                           
  3019                           ;update_display.c: 44:         PORTBbits.RB0 = PIN_HIGH;
  3020  02FA  0020               	movlb	0	; select bank0
  3021  02FB  140D               	bsf	13,0	;volatile
  3022                           
  3023                           ;update_display.c: 45:   control595_delay();
  3024  02FC  3183  233B  3182   	fcall	_control595_delay
  3025                           
  3026                           ;update_display.c: 47:         data <<= 1;
  3027  02FF  1003               	clrc
  3028  0300  0DF4               	rlf	write_byte@data,f
  3029                           
  3030                           ;update_display.c: 48:     }
  3031  0301  3001               	movlw	1
  3032  0302  00F2               	movwf	??_write_byte
  3033  0303  0872               	movf	??_write_byte,w
  3034  0304  07F5               	addwf	write_byte@i,f
  3035  0305  2AE1               	goto	L3
  3036  0306                     __end_of_write_byte:	
  3037                           
  3038                           	psect	text8
  3039  033B                     __ptext8:	
  3040 ;; *************** function _control595_delay *****************
  3041 ;; Defined at:
  3042 ;;		line 21 in file "update_display.c"
  3043 ;; Parameters:    Size  Location     Type
  3044 ;;		None
  3045 ;; Auto vars:     Size  Location     Type
  3046 ;;  times           1    1[COMMON] unsigned char 
  3047 ;; Return value:  Size  Location     Type
  3048 ;;                  1    wreg      void 
  3049 ;; Registers used:
  3050 ;;		wreg, status,2, status,0
  3051 ;; Tracked objects:
  3052 ;;		On entry : 0/0
  3053 ;;		On exit  : 0/0
  3054 ;;		Unchanged: 0/0
  3055 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3056 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3057 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3058 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3059 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3060 ;;Total ram usage:        2 bytes
  3061 ;; Hardware stack levels used:    1
  3062 ;; This function calls:
  3063 ;;		Nothing
  3064 ;; This function is called by:
  3065 ;;		_write_byte
  3066 ;;		_write_once
  3067 ;; This function uses a non-reentrant model
  3068 ;;
  3069                           
  3070                           
  3071                           ;psect for function _control595_delay
  3072  033B                     _control595_delay:	
  3073                           
  3074                           ;update_display.c: 22:    u8 times = 10;
  3075                           
  3076                           ;incstack = 0
  3077                           ; Regs used in _control595_delay: [wreg+status,2+status,0]
  3078  033B  300A               	movlw	10
  3079  033C  00F0               	movwf	??_control595_delay
  3080  033D  0870               	movf	??_control595_delay,w
  3081  033E  00F1               	movwf	control595_delay@times
  3082  033F                     i1l170:	
  3083                           ;update_display.c: 26:    }
  3084                           
  3085                           ;update_display.c: 23:    while(times > 0){
  3086                           
  3087                           
  3088                           ;update_display.c: 23:    while(times > 0){
  3089  033F  0871               	movf	control595_delay@times,w
  3090  0340  1903               	btfsc	3,2
  3091  0341  0008               	return
  3092                           
  3093                           ;update_display.c: 24:     __nop();
  3094  0342  0000               	nop
  3095                           
  3096                           ;update_display.c: 25:        times--;
  3097  0343  3001               	movlw	1
  3098  0344  02F1               	subwf	control595_delay@times,f
  3099  0345  2B3F               	goto	i1l170
  3100  0346                     __end_of_control595_delay:	
  3101                           
  3102                           	psect	text9
  3103  0239                     __ptext9:	
  3104 ;; *************** function _times2number *****************
  3105 ;; Defined at:
  3106 ;;		line 14 in file "receive_decode.c"
  3107 ;; Parameters:    Size  Location     Type
  3108 ;;  high_level_t    2    0[COMMON] unsigned short 
  3109 ;; Auto vars:     Size  Location     Type
  3110 ;;		None
  3111 ;; Return value:  Size  Location     Type
  3112 ;;                  1    wreg      unsigned char 
  3113 ;; Registers used:
  3114 ;;		wreg
  3115 ;; Tracked objects:
  3116 ;;		On entry : 0/0
  3117 ;;		On exit  : 0/0
  3118 ;;		Unchanged: 0/0
  3119 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3120 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3121 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3122 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3123 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3124 ;;Total ram usage:        2 bytes
  3125 ;; Hardware stack levels used:    1
  3126 ;; This function calls:
  3127 ;;		Nothing
  3128 ;; This function is called by:
  3129 ;;		_receive_decode
  3130 ;; This function uses a non-reentrant model
  3131 ;;
  3132                           
  3133                           
  3134                           ;psect for function _times2number
  3135  0239                     _times2number:	
  3136                           
  3137                           ;receive_decode.c: 15:     if(high_level_times >= 10 - 5 && high_level_times < 10 + 5){
  3138                           
  3139                           ;incstack = 0
  3140                           ; Regs used in _times2number: [wreg]
  3141  0239  3000               	movlw	0
  3142  023A  0271               	subwf	times2number@high_level_times+1,w
  3143  023B  3005               	movlw	5
  3144  023C  1903               	skipnz
  3145  023D  0270               	subwf	times2number@high_level_times,w
  3146  023E  1C03               	skipc
  3147  023F  2A49               	goto	i1l1121
  3148  0240  3000               	movlw	0
  3149  0241  0271               	subwf	times2number@high_level_times+1,w
  3150  0242  300F               	movlw	15
  3151  0243  1903               	skipnz
  3152  0244  0270               	subwf	times2number@high_level_times,w
  3153  0245  1803               	skipnc
  3154  0246  2A49               	goto	i1l1121
  3155                           
  3156                           ;receive_decode.c: 17:         return 0;
  3157  0247  3000               	movlw	0
  3158                           
  3159                           ;receive_decode.c: 18:     }else if(high_level_times >= 20 - 5 && high_level_times < 20 
      +                          + 5){
  3160  0248  0008               	return
  3161  0249                     i1l1121:	
  3162  0249  3000               	movlw	0
  3163  024A  0271               	subwf	times2number@high_level_times+1,w
  3164  024B  300F               	movlw	15
  3165  024C  1903               	skipnz
  3166  024D  0270               	subwf	times2number@high_level_times,w
  3167  024E  1C03               	skipc
  3168  024F  2A59               	goto	i1l1131
  3169  0250  3000               	movlw	0
  3170  0251  0271               	subwf	times2number@high_level_times+1,w
  3171  0252  3019               	movlw	25
  3172  0253  1903               	skipnz
  3173  0254  0270               	subwf	times2number@high_level_times,w
  3174  0255  1803               	skipnc
  3175  0256  2A59               	goto	i1l1131
  3176                           
  3177                           ;receive_decode.c: 20:         return 1;
  3178  0257  3001               	movlw	1
  3179                           
  3180                           ;receive_decode.c: 21:     }else if(high_level_times >= 30 - 5 && high_level_times < 30 
      +                          + 5){
  3181  0258  0008               	return
  3182  0259                     i1l1131:	
  3183  0259  3000               	movlw	0
  3184  025A  0271               	subwf	times2number@high_level_times+1,w
  3185  025B  3019               	movlw	25
  3186  025C  1903               	skipnz
  3187  025D  0270               	subwf	times2number@high_level_times,w
  3188  025E  1C03               	skipc
  3189  025F  2A69               	goto	i1l1141
  3190  0260  3000               	movlw	0
  3191  0261  0271               	subwf	times2number@high_level_times+1,w
  3192  0262  3023               	movlw	35
  3193  0263  1903               	skipnz
  3194  0264  0270               	subwf	times2number@high_level_times,w
  3195  0265  1803               	skipnc
  3196  0266  2A69               	goto	i1l1141
  3197                           
  3198                           ;receive_decode.c: 23:         return 2;
  3199  0267  3002               	movlw	2
  3200                           
  3201                           ;receive_decode.c: 24:     }else if(high_level_times >= 40 - 5 && high_level_times < 40 
      +                          + 5){
  3202  0268  0008               	return
  3203  0269                     i1l1141:	
  3204  0269  3000               	movlw	0
  3205  026A  0271               	subwf	times2number@high_level_times+1,w
  3206  026B  3023               	movlw	35
  3207  026C  1903               	skipnz
  3208  026D  0270               	subwf	times2number@high_level_times,w
  3209  026E  1C03               	skipc
  3210  026F  2A79               	goto	i1l1151
  3211  0270  3000               	movlw	0
  3212  0271  0271               	subwf	times2number@high_level_times+1,w
  3213  0272  302D               	movlw	45
  3214  0273  1903               	skipnz
  3215  0274  0270               	subwf	times2number@high_level_times,w
  3216  0275  1803               	skipnc
  3217  0276  2A79               	goto	i1l1151
  3218                           
  3219                           ;receive_decode.c: 26:         return 3;
  3220  0277  3003               	movlw	3
  3221                           
  3222                           ;receive_decode.c: 27:     }else if(high_level_times >= 40 + 5){
  3223  0278  0008               	return
  3224  0279                     i1l1151:	
  3225  0279  3000               	movlw	0
  3226  027A  0271               	subwf	times2number@high_level_times+1,w
  3227  027B  302D               	movlw	45
  3228  027C  1903               	skipnz
  3229  027D  0270               	subwf	times2number@high_level_times,w
  3230  027E  1C03               	skipc
  3231  027F  2A82               	goto	i1l1159
  3232                           
  3233                           ;receive_decode.c: 29:         return 4;
  3234  0280  3004               	movlw	4
  3235                           
  3236                           ;receive_decode.c: 30:     }else{
  3237  0281  0008               	return
  3238  0282                     i1l1159:	
  3239                           
  3240                           ;receive_decode.c: 32:         return 5;
  3241  0282  3005               	movlw	5
  3242                           
  3243                           ;receive_decode.c: 33:     }
  3244  0283  0008               	return
  3245  0284                     __end_of_times2number:	
  3246                           
  3247                           	psect	text10
  3248  02B3                     __ptext10:	
  3249 ;; *************** function ___lwmod *****************
  3250 ;; Defined at:
  3251 ;;		line 5 in file "F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\lwmod.c"
  3252 ;; Parameters:    Size  Location     Type
  3253 ;;  divisor         2    0[COMMON] unsigned int 
  3254 ;;  dividend        2    2[COMMON] unsigned int 
  3255 ;; Auto vars:     Size  Location     Type
  3256 ;;  counter         1    5[COMMON] unsigned char 
  3257 ;; Return value:  Size  Location     Type
  3258 ;;                  2    0[COMMON] unsigned int 
  3259 ;; Registers used:
  3260 ;;		wreg, status,2, status,0
  3261 ;; Tracked objects:
  3262 ;;		On entry : 0/0
  3263 ;;		On exit  : 0/0
  3264 ;;		Unchanged: 0/0
  3265 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3266 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3267 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3268 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3269 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3270 ;;Total ram usage:        6 bytes
  3271 ;; Hardware stack levels used:    1
  3272 ;; This function calls:
  3273 ;;		Nothing
  3274 ;; This function is called by:
  3275 ;;		_ISR
  3276 ;; This function uses a non-reentrant model
  3277 ;;
  3278                           
  3279                           
  3280                           ;psect for function ___lwmod
  3281  02B3                     ___lwmod:	
  3282                           
  3283                           ;incstack = 0
  3284                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  3285  02B3  0870               	movf	___lwmod@divisor,w
  3286  02B4  0471               	iorwf	___lwmod@divisor+1,w
  3287  02B5  1903               	btfsc	3,2
  3288  02B6  2ADA               	goto	i1l1405
  3289  02B7  01F5               	clrf	___lwmod@counter
  3290  02B8  0AF5               	incf	___lwmod@counter,f
  3291  02B9                     i1l1395:	
  3292  02B9  1BF1               	btfsc	___lwmod@divisor+1,7
  3293  02BA  2AC5               	goto	i1l1397
  3294  02BB  3001               	movlw	1
  3295  02BC                     u107_25:	
  3296  02BC  35F0               	lslf	___lwmod@divisor,f
  3297  02BD  0DF1               	rlf	___lwmod@divisor+1,f
  3298  02BE  0B89               	decfsz	9,f
  3299  02BF  2ABC               	goto	u107_25
  3300  02C0  3001               	movlw	1
  3301  02C1  00F4               	movwf	??___lwmod
  3302  02C2  0874               	movf	??___lwmod,w
  3303  02C3  07F5               	addwf	___lwmod@counter,f
  3304  02C4  2AB9               	goto	i1l1395
  3305  02C5                     i1l1397:	
  3306  02C5  0871               	movf	___lwmod@divisor+1,w
  3307  02C6  0273               	subwf	___lwmod@dividend+1,w
  3308  02C7  1D03               	skipz
  3309  02C8  2ACB               	goto	u109_25
  3310  02C9  0870               	movf	___lwmod@divisor,w
  3311  02CA  0272               	subwf	___lwmod@dividend,w
  3312  02CB                     u109_25:	
  3313  02CB  1C03               	skipc
  3314  02CC  2AD1               	goto	i1l1401
  3315  02CD  0870               	movf	___lwmod@divisor,w
  3316  02CE  02F2               	subwf	___lwmod@dividend,f
  3317  02CF  0871               	movf	___lwmod@divisor+1,w
  3318  02D0  3BF3               	subwfb	___lwmod@dividend+1,f
  3319  02D1                     i1l1401:	
  3320  02D1  3001               	movlw	1
  3321  02D2                     u110_25:	
  3322  02D2  36F1               	lsrf	___lwmod@divisor+1,f
  3323  02D3  0CF0               	rrf	___lwmod@divisor,f
  3324  02D4  0B89               	decfsz	9,f
  3325  02D5  2AD2               	goto	u110_25
  3326  02D6  3001               	movlw	1
  3327  02D7  02F5               	subwf	___lwmod@counter,f
  3328  02D8  1D03               	btfss	3,2
  3329  02D9  2AC5               	goto	i1l1397
  3330  02DA                     i1l1405:	
  3331  02DA  0873               	movf	___lwmod@dividend+1,w
  3332  02DB  00F1               	movwf	?___lwmod+1
  3333  02DC  0872               	movf	___lwmod@dividend,w
  3334  02DD  00F0               	movwf	?___lwmod
  3335  02DE  0008               	return
  3336  02DF                     __end_of___lwmod:	
  3337  007E                     btemp	set	126	;btemp
  3338  007E                     int$flags	set	126
  3339  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    16
    Data        0
    BSS         70
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      14
    BANK0            80     23      59
    BANK1            80      0       0
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_update_time
    _update_time->_update_display
    _receive_decode->_update_display
    _update_display->_write_once
    _write_once->_write_byte
    _write_byte->_control595_delay

Critical Paths under _main in BANK0

    _main->_init_env

Critical Paths under _ISR in BANK0

    _ISR->_receive_decode

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0      68
                           _init_env
 ---------------------------------------------------------------------------------
 (1) _init_env                                             3     3      0      68
                                             20 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _ISR                                                  2     2      0    1838
                                             18 BANK0      2     2      0
                            ___lwmod
                     _receive_decode
                        _update_time
 ---------------------------------------------------------------------------------
 (3) _update_time                                          1     1      0     433
                                             12 COMMON     1     1      0
                     _update_display
 ---------------------------------------------------------------------------------
 (3) _receive_decode                                      18    18      0    1094
                                              0 BANK0     18    18      0
                       _times2number
                     _update_display
 ---------------------------------------------------------------------------------
 (4) _update_display                                       2     2      0     433
                                             10 COMMON     2     2      0
                         _write_once
 ---------------------------------------------------------------------------------
 (5) _write_once                                           4     1      3     433
                                              6 COMMON     4     1      3
                   _control595_delay
                         _write_byte
 ---------------------------------------------------------------------------------
 (6) _write_byte                                           4     4      0      93
                                              2 COMMON     4     4      0
                   _control595_delay
 ---------------------------------------------------------------------------------
 (7) _control595_delay                                     2     2      0      24
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) _times2number                                         2     0      2     274
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     311
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _init_env

 _ISR (ROOT)
   ___lwmod
   _receive_decode
     _times2number
     _update_display
       _write_once
         _control595_delay
         _write_byte
           _control595_delay
   _update_time
     _update_display
       _write_once
         _control595_delay
         _write_byte
           _control595_delay

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      D       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     17      3B       5       73.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      49      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      49      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Thu Mar 28 00:52:30 2019

             ?_receive_decode 0070                   _update_time 0284                   __CFG_CP$OFF 0000  
                          l62 0231                            l86 034F                _update_display 032E  
          _receive_decode$516 004D            _receive_decode$517 004F                   __CFG_LVP$ON 0000  
           ?_control595_delay 0070                  __CFG_CPD$OFF 0000                           _ISR 0004  
                         u745 0217                           u755 022F                  __CFG_BORV$LO 0000  
          ??_control595_delay 0070                           wreg 0009                  __CFG_IESO$ON 0000  
                __CFG_FOSC$HS 0000                          ?_ISR 0070                          l1245 0219  
                        _LATA 010C                          _LATB 010D                          _LATC 010E  
                        _ENUM 007D                          i1l72 001A                          i1l73 005D  
                        i1l74 0022                          i1l77 001F                          _TMR0 0015  
                        _WPUA 020C                          _WPUB 020D                          _WPUC 020E  
                __CFG_WRT$OFF 0000                 __CFG_FCMEN$ON 0000                          _main 034C  
                        fsr0h 0005                          fsr1h 0007                          indf0 0000  
                        fsr0l 0004                          indf1 0001                          fsr1l 0006  
                        btemp 007E                 __CFG_BOREN$ON 0000                          start 005F  
               __CFG_MCLRE$ON 0000                         ??_ISR 0056        __end_of_update_display 033B  
               __CFG_PLLEN$ON 0000                         ?_main 0070                 __CFG_WDTE$OFF 0000  
                       _IOCAN 0392                         _IOCAP 0391                         _IOCBN 0395  
                       _IOCBP 0394                         _IOCCN 0398                         _IOCCP 0397  
                       i1l113 0075                         i1l132 0171                         i1l126 013C  
                       i1l170 033F               __end_of___lwmod 02DF                         u63_25 02E8  
                       _TRISA 008C                         _TRISB 008D                         _TRISC 008E  
                       u90_25 0105                         u88_25 00EE                         u89_25 00FD  
              write_byte@data 0074                         status 0003                         wtemp0 007E  
             __initialization 0061                  __end_of_main 0350               ?_update_display 0070  
              __CFG_LPBOR$OFF 0000                        ??_main 005B                        i1l1121 0249  
                      i1l1131 0259                        u110_25 02D2                        i1l1141 0269  
                      u102_25 0183                        i1l1151 0279                        i1l1401 02D1  
                      i1l1323 011C                        i1l1405 02DA                        u103_25 0190  
                      i1l1341 014E                        i1l1309 00D8                        i1l1159 0282  
                      i1l1353 0166                        i1l1345 0156                        i1l1361 0179  
                      i1l1337 0147                        i1l1329 0135                        i1l1355 016B  
                      i1l1339 014C                        i1l1267 02B0                        u104_25 01AB  
                      i1l1365 0192                        i1l1349 015E                        i1l1437 002E  
                      i1l1367 0195                        i1l1287 00A1                        i1l1447 0059  
                      i1l1395 02B9                        i1l1397 02C5                        u107_25 02BC  
                      u109_25 02CB                __CFG_PWRTE$OFF 0000                        _g_data 0020  
              __CFG_STVREN$ON 0000                     ??___lwmod 0074              __end_of_init_env 0239  
            __end_of_segmcode 032E  times2number@high_level_times 0070       __end_of__initialization 0069  
            ??_receive_decode 0044                __pcstackCOMMON 0070                  ?_update_time 0070  
       control595_delay@times 0071                _OPTION_REGbits 0095                    __pbssBANK0 0020  
   __size_of_control595_delay 000B               __CFG_VCAPEN$OFF 0000                    __pmaintext 034C  
                  __pintentry 0004                ISR@history_key 0043           receive_decode@i_518 0051  
                   ?_init_env 0070           receive_decode@check 0055              ??_update_display 007A  
                     ___lwmod 02B3                       __ptext1 01C3                       __ptext3 0284  
                     __ptext4 006D                       __ptext5 032E                       __ptext6 0306  
                     __ptext7 02DF                       __ptext8 033B                       __ptext9 0239  
                __size_of_ISR 005B                 ?_times2number 0070                     _IOCCFbits 0399  
                   _IOCCPbits 0397                       clrloop0 0347          end_of_initialization 0069  
                  ??_init_env 0058          __size_of_update_time 002F                     _PORTBbits 000D  
                   _PORTCbits 000E                ??_times2number 0072                     _TRISCbits 008E  
            _control595_delay 033B                  write_once@HL 0079                  write_once@HR 0076  
                write_once@ML 0077                  write_once@MR 0078                    _write_byte 02DF  
                  _write_once 0306      receive_decode@read_value 0053           start_initialization 0061  
                 __end_of_ISR 005F               receive_decode@i 0054                   __pbssCOMMON 007D  
                   ___latbits 0002                 __pcstackBANK0 0044             __size_of_init_env 0076  
   receive_decode@last_time_h 0049     receive_decode@last_time_m 004B          __end_of_times2number 0284  
                    ?___lwmod 0070       __size_of_receive_decode 0156                   ?_write_byte 0070  
                 ?_write_once 0076               ISR@key_time_cnt 0041                     clear_ram0 0346  
    __end_of_control595_delay 0346                      _WPUCbits 020E                   write_byte@i 0075  
         __size_of_write_byte 0027           __size_of_write_once 0018                 ??_update_time 007C  
                   init_env@i 0059              __size_of___lwmod 002C       __size_of_update_display 000D  
                    __ptext10 02B3         __size_of_times2number 004B                      _init_env 01C3  
               __size_of_main 0004                      _segmcode 031E                      int$flags 007E  
              _receive_decode 006D           __end_of_update_time 02B3                    _INTCONbits 000B  
                _times2number 0239                      intlevel1 0000              ___lwmod@dividend 0072  
           __CFG_CLKOUTEN$OFF 0000                    _OSCCONbits 0099        __end_of_receive_decode 01C3  
                ??_write_byte 0072                  ??_write_once 0079                 __pstringtext1 031E  
             ___lwmod@divisor 0070               ___lwmod@counter 0075            __end_of_write_byte 0306  
          __end_of_write_once 031E  
