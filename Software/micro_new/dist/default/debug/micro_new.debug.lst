

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Tue Jun 18 17:10:46 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F1786
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK3,global,class=CODE,delta=2
     5                           	psect	stringtext1,global,class=STRCODE,delta=2
     6                           	psect	stringtext2,global,class=STRCODE,delta=2
     7                           	psect	stringtext3,global,class=STRCODE,delta=2
     8                           	psect	stringtext4,global,class=STRCODE,delta=2
     9                           	psect	cinit,global,class=CODE,merge=1,delta=2
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
    16                           	psect	bssBANK6,global,class=BANK6,space=1,delta=1
    17                           	psect	inittext,global,class=CODE,delta=2
    18                           	psect	clrtext,global,class=CODE,delta=2
    19                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    20                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    21                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    22                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    23                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    24                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    25                           	psect	text1,local,class=CODE,merge=1,delta=2
    26                           	psect	text2,local,class=CODE,merge=1,delta=2
    27                           	psect	text3,local,class=CODE,merge=1,delta=2
    28                           	psect	text4,local,class=CODE,merge=1,delta=2
    29                           	psect	text5,local,class=CODE,merge=1,delta=2
    30                           	psect	text6,local,class=CODE,merge=1,delta=2
    31                           	psect	text7,local,class=CODE,merge=1,delta=2
    32                           	psect	text8,local,class=CODE,merge=1,delta=2
    33                           	psect	text9,local,class=CODE,merge=1,delta=2
    34                           	psect	text10,local,class=CODE,merge=1,delta=2
    35                           	psect	text11,local,class=CODE,merge=1,delta=2
    36                           	psect	text12,local,class=CODE,merge=1,delta=2
    37                           	psect	text13,local,class=CODE,merge=1,delta=2
    38                           	psect	text14,local,class=CODE,merge=1,delta=2,group=1
    39                           	psect	text15,local,class=CODE,merge=1,delta=2,group=1
    40                           	psect	text16,local,class=CODE,merge=1,delta=2
    41                           	psect	text17,local,class=CODE,merge=1,delta=2
    42                           	psect	text18,local,class=CODE,merge=1,delta=2
    43                           	psect	text19,local,class=CODE,merge=1,delta=2
    44                           	psect	intentry,global,class=CODE,delta=2
    45                           	psect	text21,local,class=CODE,merge=1,delta=2
    46                           	psect	text22,local,class=CODE,merge=1,delta=2
    47                           	psect	text23,local,class=CODE,merge=1,delta=2
    48                           	psect	text24,local,class=CODE,merge=1,delta=2
    49                           	psect	text25,local,class=CODE,merge=1,delta=2
    50                           	psect	text26,local,class=CODE,merge=1,delta=2
    51                           	psect	text27,local,class=CODE,merge=1,delta=2
    52                           	psect	text28,local,class=CODE,merge=1,delta=2
    53                           	psect	text29,local,class=CODE,merge=1,delta=2,group=2
    54                           	psect	text30,local,class=CODE,merge=1,delta=2,group=2
    55                           	psect	text31,local,class=CODE,merge=1,delta=2
    56                           	psect	text32,local,class=CODE,merge=1,delta=2
    57                           	psect	text33,local,class=CODE,merge=1,delta=2
    58                           	psect	text34,local,class=CODE,merge=1,delta=2
    59                           	psect	text35,local,class=CODE,merge=1,delta=2
    60                           	psect	text36,local,class=CODE,merge=1,delta=2,group=2
    61                           	psect	text37,local,class=CODE,merge=1,delta=2,group=2
    62                           	psect	text38,local,class=CODE,merge=1,delta=2,group=2
    63                           	psect	text39,local,class=CODE,merge=1,delta=2,group=2
    64                           	psect	text40,local,class=CODE,merge=1,delta=2,group=2
    65                           	psect	text41,local,class=CODE,merge=1,delta=2,group=1
    66                           	psect	text42,local,class=CODE,merge=1,delta=2,group=1
    67                           	psect	text43,local,class=CODE,merge=1,delta=2
    68                           	psect	text44,local,class=CODE,merge=1,delta=2
    69                           	psect	text45,local,class=CODE,merge=1,delta=2
    70                           	psect	text46,local,class=CODE,merge=1,delta=2
    71                           	psect	text47,local,class=CODE,merge=1,delta=2
    72                           	psect	text48,local,class=CODE,merge=1,delta=2
    73                           	psect	text49,local,class=CODE,merge=1,delta=2
    74                           	psect	text50,local,class=CODE,merge=1,delta=2
    75                           	psect	text51,local,class=CODE,merge=1,delta=2
    76                           	psect	text52,local,class=CODE,merge=1,delta=2
    77                           	psect	text53,local,class=CODE,merge=1,delta=2
    78                           	psect	text54,local,class=CODE,merge=1,delta=2
    79                           	psect	text55,local,class=CODE,merge=1,delta=2
    80                           	psect	text56,local,class=CODE,merge=1,delta=2
    81                           	psect	text57,local,class=CODE,merge=1,delta=2
    82                           	psect	text58,local,class=CODE,merge=1,delta=2
    83                           	psect	text59,local,class=CODE,merge=1,delta=2
    84                           	psect	text60,local,class=CODE,merge=1,delta=2
    85                           	psect	text61,local,class=CODE,merge=1,delta=2
    86                           	psect	text62,local,class=CODE,merge=1,delta=2
    87                           	dabs	1,0x7E,2
    88  0000                     
    89                           ; Version 2.05
    90                           ; Generated 20/12/2018 GMT
    91                           ; 
    92                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    93                           ; All rights reserved.
    94                           ; 
    95                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    96                           ; 
    97                           ; Redistribution and use in source and binary forms, with or without modification, are
    98                           ; permitted provided that the following conditions are met:
    99                           ; 
   100                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   101                           ;        conditions and the following disclaimer.
   102                           ; 
   103                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   104                           ;        of conditions and the following disclaimer in the documentation and/or other
   105                           ;        materials provided with the distribution.
   106                           ; 
   107                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   108                           ;        software without specific prior written permission.
   109                           ; 
   110                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   111                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   112                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   113                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   114                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   115                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   116                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   117                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   118                           ; 
   119                           ; 
   120                           ; Code-generator required, PIC16F1786 Definitions
   121                           ; 
   122                           ; SFR Addresses
   123  0000                     	;# 
   124  0001                     	;# 
   125  0002                     	;# 
   126  0003                     	;# 
   127  0004                     	;# 
   128  0005                     	;# 
   129  0006                     	;# 
   130  0007                     	;# 
   131  0008                     	;# 
   132  0009                     	;# 
   133  000A                     	;# 
   134  000B                     	;# 
   135  000C                     	;# 
   136  000D                     	;# 
   137  000E                     	;# 
   138  0010                     	;# 
   139  0011                     	;# 
   140  0012                     	;# 
   141  0013                     	;# 
   142  0014                     	;# 
   143  0015                     	;# 
   144  0016                     	;# 
   145  0016                     	;# 
   146  0017                     	;# 
   147  0018                     	;# 
   148  0019                     	;# 
   149  001A                     	;# 
   150  001B                     	;# 
   151  001C                     	;# 
   152  008C                     	;# 
   153  008D                     	;# 
   154  008E                     	;# 
   155  0090                     	;# 
   156  0091                     	;# 
   157  0092                     	;# 
   158  0093                     	;# 
   159  0094                     	;# 
   160  0095                     	;# 
   161  0096                     	;# 
   162  0097                     	;# 
   163  0098                     	;# 
   164  0099                     	;# 
   165  009A                     	;# 
   166  009B                     	;# 
   167  009B                     	;# 
   168  009C                     	;# 
   169  009D                     	;# 
   170  009E                     	;# 
   171  009F                     	;# 
   172  010C                     	;# 
   173  010D                     	;# 
   174  010E                     	;# 
   175  0111                     	;# 
   176  0112                     	;# 
   177  0113                     	;# 
   178  0114                     	;# 
   179  0115                     	;# 
   180  0116                     	;# 
   181  0117                     	;# 
   182  0118                     	;# 
   183  0119                     	;# 
   184  011A                     	;# 
   185  011B                     	;# 
   186  011C                     	;# 
   187  011D                     	;# 
   188  011D                     	;# 
   189  011D                     	;# 
   190  011E                     	;# 
   191  011F                     	;# 
   192  018C                     	;# 
   193  018D                     	;# 
   194  0191                     	;# 
   195  0191                     	;# 
   196  0192                     	;# 
   197  0193                     	;# 
   198  0193                     	;# 
   199  0193                     	;# 
   200  0194                     	;# 
   201  0195                     	;# 
   202  0196                     	;# 
   203  0197                     	;# 
   204  0199                     	;# 
   205  0199                     	;# 
   206  0199                     	;# 
   207  019A                     	;# 
   208  019A                     	;# 
   209  019A                     	;# 
   210  019B                     	;# 
   211  019B                     	;# 
   212  019B                     	;# 
   213  019B                     	;# 
   214  019B                     	;# 
   215  019C                     	;# 
   216  019C                     	;# 
   217  019C                     	;# 
   218  019D                     	;# 
   219  019D                     	;# 
   220  019D                     	;# 
   221  019E                     	;# 
   222  019E                     	;# 
   223  019E                     	;# 
   224  019F                     	;# 
   225  019F                     	;# 
   226  019F                     	;# 
   227  019F                     	;# 
   228  019F                     	;# 
   229  020C                     	;# 
   230  020D                     	;# 
   231  020E                     	;# 
   232  0210                     	;# 
   233  0211                     	;# 
   234  0211                     	;# 
   235  0212                     	;# 
   236  0212                     	;# 
   237  0213                     	;# 
   238  0213                     	;# 
   239  0214                     	;# 
   240  0214                     	;# 
   241  0215                     	;# 
   242  0215                     	;# 
   243  0215                     	;# 
   244  0215                     	;# 
   245  0216                     	;# 
   246  0216                     	;# 
   247  0217                     	;# 
   248  0217                     	;# 
   249  028C                     	;# 
   250  028D                     	;# 
   251  028E                     	;# 
   252  0291                     	;# 
   253  0291                     	;# 
   254  0292                     	;# 
   255  0293                     	;# 
   256  0298                     	;# 
   257  0298                     	;# 
   258  0299                     	;# 
   259  029A                     	;# 
   260  030C                     	;# 
   261  030D                     	;# 
   262  030E                     	;# 
   263  0311                     	;# 
   264  0311                     	;# 
   265  0312                     	;# 
   266  0313                     	;# 
   267  038C                     	;# 
   268  038D                     	;# 
   269  038E                     	;# 
   270  0390                     	;# 
   271  0391                     	;# 
   272  0392                     	;# 
   273  0393                     	;# 
   274  0394                     	;# 
   275  0395                     	;# 
   276  0396                     	;# 
   277  0397                     	;# 
   278  0398                     	;# 
   279  0399                     	;# 
   280  039D                     	;# 
   281  039E                     	;# 
   282  039F                     	;# 
   283  0511                     	;# 
   284  0513                     	;# 
   285  051A                     	;# 
   286  0811                     	;# 
   287  0812                     	;# 
   288  0813                     	;# 
   289  0814                     	;# 
   290  0815                     	;# 
   291  0816                     	;# 
   292  0817                     	;# 
   293  0818                     	;# 
   294  0819                     	;# 
   295  081A                     	;# 
   296  081B                     	;# 
   297  081C                     	;# 
   298  081D                     	;# 
   299  081E                     	;# 
   300  081F                     	;# 
   301  0820                     	;# 
   302  0821                     	;# 
   303  0821                     	;# 
   304  0822                     	;# 
   305  0823                     	;# 
   306  0823                     	;# 
   307  0824                     	;# 
   308  0825                     	;# 
   309  0825                     	;# 
   310  0826                     	;# 
   311  0827                     	;# 
   312  0827                     	;# 
   313  0828                     	;# 
   314  0829                     	;# 
   315  082A                     	;# 
   316  082B                     	;# 
   317  082C                     	;# 
   318  082D                     	;# 
   319  082E                     	;# 
   320  082F                     	;# 
   321  0831                     	;# 
   322  0832                     	;# 
   323  0833                     	;# 
   324  0834                     	;# 
   325  0835                     	;# 
   326  0836                     	;# 
   327  0837                     	;# 
   328  0838                     	;# 
   329  0839                     	;# 
   330  083A                     	;# 
   331  083B                     	;# 
   332  083C                     	;# 
   333  083D                     	;# 
   334  083E                     	;# 
   335  083F                     	;# 
   336  0840                     	;# 
   337  0841                     	;# 
   338  0841                     	;# 
   339  0842                     	;# 
   340  0843                     	;# 
   341  0843                     	;# 
   342  0844                     	;# 
   343  0845                     	;# 
   344  0845                     	;# 
   345  0846                     	;# 
   346  0847                     	;# 
   347  0847                     	;# 
   348  0848                     	;# 
   349  0849                     	;# 
   350  084A                     	;# 
   351  084B                     	;# 
   352  084C                     	;# 
   353  084D                     	;# 
   354  084E                     	;# 
   355  084F                     	;# 
   356  0851                     	;# 
   357  0852                     	;# 
   358  0853                     	;# 
   359  0854                     	;# 
   360  0855                     	;# 
   361  0856                     	;# 
   362  0857                     	;# 
   363  0858                     	;# 
   364  0859                     	;# 
   365  085A                     	;# 
   366  085B                     	;# 
   367  085C                     	;# 
   368  085D                     	;# 
   369  085E                     	;# 
   370  085F                     	;# 
   371  0860                     	;# 
   372  0861                     	;# 
   373  0861                     	;# 
   374  0862                     	;# 
   375  0863                     	;# 
   376  0863                     	;# 
   377  0864                     	;# 
   378  0865                     	;# 
   379  0865                     	;# 
   380  0866                     	;# 
   381  0867                     	;# 
   382  0867                     	;# 
   383  0868                     	;# 
   384  0869                     	;# 
   385  086A                     	;# 
   386  086B                     	;# 
   387  086C                     	;# 
   388  086D                     	;# 
   389  086E                     	;# 
   390  086F                     	;# 
   391  0FE4                     	;# 
   392  0FE5                     	;# 
   393  0FE6                     	;# 
   394  0FE7                     	;# 
   395  0FE8                     	;# 
   396  0FE9                     	;# 
   397  0FEA                     	;# 
   398  0FEB                     	;# 
   399  0FED                     	;# 
   400  0FEE                     	;# 
   401  0FEF                     	;# 
   402  0000                     	;# 
   403  0001                     	;# 
   404  0002                     	;# 
   405  0003                     	;# 
   406  0004                     	;# 
   407  0005                     	;# 
   408  0006                     	;# 
   409  0007                     	;# 
   410  0008                     	;# 
   411  0009                     	;# 
   412  000A                     	;# 
   413  000B                     	;# 
   414  000C                     	;# 
   415  000D                     	;# 
   416  000E                     	;# 
   417  0010                     	;# 
   418  0011                     	;# 
   419  0012                     	;# 
   420  0013                     	;# 
   421  0014                     	;# 
   422  0015                     	;# 
   423  0016                     	;# 
   424  0016                     	;# 
   425  0017                     	;# 
   426  0018                     	;# 
   427  0019                     	;# 
   428  001A                     	;# 
   429  001B                     	;# 
   430  001C                     	;# 
   431  008C                     	;# 
   432  008D                     	;# 
   433  008E                     	;# 
   434  0090                     	;# 
   435  0091                     	;# 
   436  0092                     	;# 
   437  0093                     	;# 
   438  0094                     	;# 
   439  0095                     	;# 
   440  0096                     	;# 
   441  0097                     	;# 
   442  0098                     	;# 
   443  0099                     	;# 
   444  009A                     	;# 
   445  009B                     	;# 
   446  009B                     	;# 
   447  009C                     	;# 
   448  009D                     	;# 
   449  009E                     	;# 
   450  009F                     	;# 
   451  010C                     	;# 
   452  010D                     	;# 
   453  010E                     	;# 
   454  0111                     	;# 
   455  0112                     	;# 
   456  0113                     	;# 
   457  0114                     	;# 
   458  0115                     	;# 
   459  0116                     	;# 
   460  0117                     	;# 
   461  0118                     	;# 
   462  0119                     	;# 
   463  011A                     	;# 
   464  011B                     	;# 
   465  011C                     	;# 
   466  011D                     	;# 
   467  011D                     	;# 
   468  011D                     	;# 
   469  011E                     	;# 
   470  011F                     	;# 
   471  018C                     	;# 
   472  018D                     	;# 
   473  0191                     	;# 
   474  0191                     	;# 
   475  0192                     	;# 
   476  0193                     	;# 
   477  0193                     	;# 
   478  0193                     	;# 
   479  0194                     	;# 
   480  0195                     	;# 
   481  0196                     	;# 
   482  0197                     	;# 
   483  0199                     	;# 
   484  0199                     	;# 
   485  0199                     	;# 
   486  019A                     	;# 
   487  019A                     	;# 
   488  019A                     	;# 
   489  019B                     	;# 
   490  019B                     	;# 
   491  019B                     	;# 
   492  019B                     	;# 
   493  019B                     	;# 
   494  019C                     	;# 
   495  019C                     	;# 
   496  019C                     	;# 
   497  019D                     	;# 
   498  019D                     	;# 
   499  019D                     	;# 
   500  019E                     	;# 
   501  019E                     	;# 
   502  019E                     	;# 
   503  019F                     	;# 
   504  019F                     	;# 
   505  019F                     	;# 
   506  019F                     	;# 
   507  019F                     	;# 
   508  020C                     	;# 
   509  020D                     	;# 
   510  020E                     	;# 
   511  0210                     	;# 
   512  0211                     	;# 
   513  0211                     	;# 
   514  0212                     	;# 
   515  0212                     	;# 
   516  0213                     	;# 
   517  0213                     	;# 
   518  0214                     	;# 
   519  0214                     	;# 
   520  0215                     	;# 
   521  0215                     	;# 
   522  0215                     	;# 
   523  0215                     	;# 
   524  0216                     	;# 
   525  0216                     	;# 
   526  0217                     	;# 
   527  0217                     	;# 
   528  028C                     	;# 
   529  028D                     	;# 
   530  028E                     	;# 
   531  0291                     	;# 
   532  0291                     	;# 
   533  0292                     	;# 
   534  0293                     	;# 
   535  0298                     	;# 
   536  0298                     	;# 
   537  0299                     	;# 
   538  029A                     	;# 
   539  030C                     	;# 
   540  030D                     	;# 
   541  030E                     	;# 
   542  0311                     	;# 
   543  0311                     	;# 
   544  0312                     	;# 
   545  0313                     	;# 
   546  038C                     	;# 
   547  038D                     	;# 
   548  038E                     	;# 
   549  0390                     	;# 
   550  0391                     	;# 
   551  0392                     	;# 
   552  0393                     	;# 
   553  0394                     	;# 
   554  0395                     	;# 
   555  0396                     	;# 
   556  0397                     	;# 
   557  0398                     	;# 
   558  0399                     	;# 
   559  039D                     	;# 
   560  039E                     	;# 
   561  039F                     	;# 
   562  0511                     	;# 
   563  0513                     	;# 
   564  051A                     	;# 
   565  0811                     	;# 
   566  0812                     	;# 
   567  0813                     	;# 
   568  0814                     	;# 
   569  0815                     	;# 
   570  0816                     	;# 
   571  0817                     	;# 
   572  0818                     	;# 
   573  0819                     	;# 
   574  081A                     	;# 
   575  081B                     	;# 
   576  081C                     	;# 
   577  081D                     	;# 
   578  081E                     	;# 
   579  081F                     	;# 
   580  0820                     	;# 
   581  0821                     	;# 
   582  0821                     	;# 
   583  0822                     	;# 
   584  0823                     	;# 
   585  0823                     	;# 
   586  0824                     	;# 
   587  0825                     	;# 
   588  0825                     	;# 
   589  0826                     	;# 
   590  0827                     	;# 
   591  0827                     	;# 
   592  0828                     	;# 
   593  0829                     	;# 
   594  082A                     	;# 
   595  082B                     	;# 
   596  082C                     	;# 
   597  082D                     	;# 
   598  082E                     	;# 
   599  082F                     	;# 
   600  0831                     	;# 
   601  0832                     	;# 
   602  0833                     	;# 
   603  0834                     	;# 
   604  0835                     	;# 
   605  0836                     	;# 
   606  0837                     	;# 
   607  0838                     	;# 
   608  0839                     	;# 
   609  083A                     	;# 
   610  083B                     	;# 
   611  083C                     	;# 
   612  083D                     	;# 
   613  083E                     	;# 
   614  083F                     	;# 
   615  0840                     	;# 
   616  0841                     	;# 
   617  0841                     	;# 
   618  0842                     	;# 
   619  0843                     	;# 
   620  0843                     	;# 
   621  0844                     	;# 
   622  0845                     	;# 
   623  0845                     	;# 
   624  0846                     	;# 
   625  0847                     	;# 
   626  0847                     	;# 
   627  0848                     	;# 
   628  0849                     	;# 
   629  084A                     	;# 
   630  084B                     	;# 
   631  084C                     	;# 
   632  084D                     	;# 
   633  084E                     	;# 
   634  084F                     	;# 
   635  0851                     	;# 
   636  0852                     	;# 
   637  0853                     	;# 
   638  0854                     	;# 
   639  0855                     	;# 
   640  0856                     	;# 
   641  0857                     	;# 
   642  0858                     	;# 
   643  0859                     	;# 
   644  085A                     	;# 
   645  085B                     	;# 
   646  085C                     	;# 
   647  085D                     	;# 
   648  085E                     	;# 
   649  085F                     	;# 
   650  0860                     	;# 
   651  0861                     	;# 
   652  0861                     	;# 
   653  0862                     	;# 
   654  0863                     	;# 
   655  0863                     	;# 
   656  0864                     	;# 
   657  0865                     	;# 
   658  0865                     	;# 
   659  0866                     	;# 
   660  0867                     	;# 
   661  0867                     	;# 
   662  0868                     	;# 
   663  0869                     	;# 
   664  086A                     	;# 
   665  086B                     	;# 
   666  086C                     	;# 
   667  086D                     	;# 
   668  086E                     	;# 
   669  086F                     	;# 
   670  0FE4                     	;# 
   671  0FE5                     	;# 
   672  0FE6                     	;# 
   673  0FE7                     	;# 
   674  0FE8                     	;# 
   675  0FE9                     	;# 
   676  0FEA                     	;# 
   677  0FEB                     	;# 
   678  0FED                     	;# 
   679  0FEE                     	;# 
   680  0FEF                     	;# 
   681  0000                     	;# 
   682  0001                     	;# 
   683  0002                     	;# 
   684  0003                     	;# 
   685  0004                     	;# 
   686  0005                     	;# 
   687  0006                     	;# 
   688  0007                     	;# 
   689  0008                     	;# 
   690  0009                     	;# 
   691  000A                     	;# 
   692  000B                     	;# 
   693  000C                     	;# 
   694  000D                     	;# 
   695  000E                     	;# 
   696  0010                     	;# 
   697  0011                     	;# 
   698  0012                     	;# 
   699  0013                     	;# 
   700  0014                     	;# 
   701  0015                     	;# 
   702  0016                     	;# 
   703  0016                     	;# 
   704  0017                     	;# 
   705  0018                     	;# 
   706  0019                     	;# 
   707  001A                     	;# 
   708  001B                     	;# 
   709  001C                     	;# 
   710  008C                     	;# 
   711  008D                     	;# 
   712  008E                     	;# 
   713  0090                     	;# 
   714  0091                     	;# 
   715  0092                     	;# 
   716  0093                     	;# 
   717  0094                     	;# 
   718  0095                     	;# 
   719  0096                     	;# 
   720  0097                     	;# 
   721  0098                     	;# 
   722  0099                     	;# 
   723  009A                     	;# 
   724  009B                     	;# 
   725  009B                     	;# 
   726  009C                     	;# 
   727  009D                     	;# 
   728  009E                     	;# 
   729  009F                     	;# 
   730  010C                     	;# 
   731  010D                     	;# 
   732  010E                     	;# 
   733  0111                     	;# 
   734  0112                     	;# 
   735  0113                     	;# 
   736  0114                     	;# 
   737  0115                     	;# 
   738  0116                     	;# 
   739  0117                     	;# 
   740  0118                     	;# 
   741  0119                     	;# 
   742  011A                     	;# 
   743  011B                     	;# 
   744  011C                     	;# 
   745  011D                     	;# 
   746  011D                     	;# 
   747  011D                     	;# 
   748  011E                     	;# 
   749  011F                     	;# 
   750  018C                     	;# 
   751  018D                     	;# 
   752  0191                     	;# 
   753  0191                     	;# 
   754  0192                     	;# 
   755  0193                     	;# 
   756  0193                     	;# 
   757  0193                     	;# 
   758  0194                     	;# 
   759  0195                     	;# 
   760  0196                     	;# 
   761  0197                     	;# 
   762  0199                     	;# 
   763  0199                     	;# 
   764  0199                     	;# 
   765  019A                     	;# 
   766  019A                     	;# 
   767  019A                     	;# 
   768  019B                     	;# 
   769  019B                     	;# 
   770  019B                     	;# 
   771  019B                     	;# 
   772  019B                     	;# 
   773  019C                     	;# 
   774  019C                     	;# 
   775  019C                     	;# 
   776  019D                     	;# 
   777  019D                     	;# 
   778  019D                     	;# 
   779  019E                     	;# 
   780  019E                     	;# 
   781  019E                     	;# 
   782  019F                     	;# 
   783  019F                     	;# 
   784  019F                     	;# 
   785  019F                     	;# 
   786  019F                     	;# 
   787  020C                     	;# 
   788  020D                     	;# 
   789  020E                     	;# 
   790  0210                     	;# 
   791  0211                     	;# 
   792  0211                     	;# 
   793  0212                     	;# 
   794  0212                     	;# 
   795  0213                     	;# 
   796  0213                     	;# 
   797  0214                     	;# 
   798  0214                     	;# 
   799  0215                     	;# 
   800  0215                     	;# 
   801  0215                     	;# 
   802  0215                     	;# 
   803  0216                     	;# 
   804  0216                     	;# 
   805  0217                     	;# 
   806  0217                     	;# 
   807  028C                     	;# 
   808  028D                     	;# 
   809  028E                     	;# 
   810  0291                     	;# 
   811  0291                     	;# 
   812  0292                     	;# 
   813  0293                     	;# 
   814  0298                     	;# 
   815  0298                     	;# 
   816  0299                     	;# 
   817  029A                     	;# 
   818  030C                     	;# 
   819  030D                     	;# 
   820  030E                     	;# 
   821  0311                     	;# 
   822  0311                     	;# 
   823  0312                     	;# 
   824  0313                     	;# 
   825  038C                     	;# 
   826  038D                     	;# 
   827  038E                     	;# 
   828  0390                     	;# 
   829  0391                     	;# 
   830  0392                     	;# 
   831  0393                     	;# 
   832  0394                     	;# 
   833  0395                     	;# 
   834  0396                     	;# 
   835  0397                     	;# 
   836  0398                     	;# 
   837  0399                     	;# 
   838  039D                     	;# 
   839  039E                     	;# 
   840  039F                     	;# 
   841  0511                     	;# 
   842  0513                     	;# 
   843  051A                     	;# 
   844  0811                     	;# 
   845  0812                     	;# 
   846  0813                     	;# 
   847  0814                     	;# 
   848  0815                     	;# 
   849  0816                     	;# 
   850  0817                     	;# 
   851  0818                     	;# 
   852  0819                     	;# 
   853  081A                     	;# 
   854  081B                     	;# 
   855  081C                     	;# 
   856  081D                     	;# 
   857  081E                     	;# 
   858  081F                     	;# 
   859  0820                     	;# 
   860  0821                     	;# 
   861  0821                     	;# 
   862  0822                     	;# 
   863  0823                     	;# 
   864  0823                     	;# 
   865  0824                     	;# 
   866  0825                     	;# 
   867  0825                     	;# 
   868  0826                     	;# 
   869  0827                     	;# 
   870  0827                     	;# 
   871  0828                     	;# 
   872  0829                     	;# 
   873  082A                     	;# 
   874  082B                     	;# 
   875  082C                     	;# 
   876  082D                     	;# 
   877  082E                     	;# 
   878  082F                     	;# 
   879  0831                     	;# 
   880  0832                     	;# 
   881  0833                     	;# 
   882  0834                     	;# 
   883  0835                     	;# 
   884  0836                     	;# 
   885  0837                     	;# 
   886  0838                     	;# 
   887  0839                     	;# 
   888  083A                     	;# 
   889  083B                     	;# 
   890  083C                     	;# 
   891  083D                     	;# 
   892  083E                     	;# 
   893  083F                     	;# 
   894  0840                     	;# 
   895  0841                     	;# 
   896  0841                     	;# 
   897  0842                     	;# 
   898  0843                     	;# 
   899  0843                     	;# 
   900  0844                     	;# 
   901  0845                     	;# 
   902  0845                     	;# 
   903  0846                     	;# 
   904  0847                     	;# 
   905  0847                     	;# 
   906  0848                     	;# 
   907  0849                     	;# 
   908  084A                     	;# 
   909  084B                     	;# 
   910  084C                     	;# 
   911  084D                     	;# 
   912  084E                     	;# 
   913  084F                     	;# 
   914  0851                     	;# 
   915  0852                     	;# 
   916  0853                     	;# 
   917  0854                     	;# 
   918  0855                     	;# 
   919  0856                     	;# 
   920  0857                     	;# 
   921  0858                     	;# 
   922  0859                     	;# 
   923  085A                     	;# 
   924  085B                     	;# 
   925  085C                     	;# 
   926  085D                     	;# 
   927  085E                     	;# 
   928  085F                     	;# 
   929  0860                     	;# 
   930  0861                     	;# 
   931  0861                     	;# 
   932  0862                     	;# 
   933  0863                     	;# 
   934  0863                     	;# 
   935  0864                     	;# 
   936  0865                     	;# 
   937  0865                     	;# 
   938  0866                     	;# 
   939  0867                     	;# 
   940  0867                     	;# 
   941  0868                     	;# 
   942  0869                     	;# 
   943  086A                     	;# 
   944  086B                     	;# 
   945  086C                     	;# 
   946  086D                     	;# 
   947  086E                     	;# 
   948  086F                     	;# 
   949  0FE4                     	;# 
   950  0FE5                     	;# 
   951  0FE6                     	;# 
   952  0FE7                     	;# 
   953  0FE8                     	;# 
   954  0FE9                     	;# 
   955  0FEA                     	;# 
   956  0FEB                     	;# 
   957  0FED                     	;# 
   958  0FEE                     	;# 
   959  0FEF                     	;# 
   960  0000                     	;# 
   961  0001                     	;# 
   962  0002                     	;# 
   963  0003                     	;# 
   964  0004                     	;# 
   965  0005                     	;# 
   966  0006                     	;# 
   967  0007                     	;# 
   968  0008                     	;# 
   969  0009                     	;# 
   970  000A                     	;# 
   971  000B                     	;# 
   972  000C                     	;# 
   973  000D                     	;# 
   974  000E                     	;# 
   975  0010                     	;# 
   976  0011                     	;# 
   977  0012                     	;# 
   978  0013                     	;# 
   979  0014                     	;# 
   980  0015                     	;# 
   981  0016                     	;# 
   982  0016                     	;# 
   983  0017                     	;# 
   984  0018                     	;# 
   985  0019                     	;# 
   986  001A                     	;# 
   987  001B                     	;# 
   988  001C                     	;# 
   989  008C                     	;# 
   990  008D                     	;# 
   991  008E                     	;# 
   992  0090                     	;# 
   993  0091                     	;# 
   994  0092                     	;# 
   995  0093                     	;# 
   996  0094                     	;# 
   997  0095                     	;# 
   998  0096                     	;# 
   999  0097                     	;# 
  1000  0098                     	;# 
  1001  0099                     	;# 
  1002  009A                     	;# 
  1003  009B                     	;# 
  1004  009B                     	;# 
  1005  009C                     	;# 
  1006  009D                     	;# 
  1007  009E                     	;# 
  1008  009F                     	;# 
  1009  010C                     	;# 
  1010  010D                     	;# 
  1011  010E                     	;# 
  1012  0111                     	;# 
  1013  0112                     	;# 
  1014  0113                     	;# 
  1015  0114                     	;# 
  1016  0115                     	;# 
  1017  0116                     	;# 
  1018  0117                     	;# 
  1019  0118                     	;# 
  1020  0119                     	;# 
  1021  011A                     	;# 
  1022  011B                     	;# 
  1023  011C                     	;# 
  1024  011D                     	;# 
  1025  011D                     	;# 
  1026  011D                     	;# 
  1027  011E                     	;# 
  1028  011F                     	;# 
  1029  018C                     	;# 
  1030  018D                     	;# 
  1031  0191                     	;# 
  1032  0191                     	;# 
  1033  0192                     	;# 
  1034  0193                     	;# 
  1035  0193                     	;# 
  1036  0193                     	;# 
  1037  0194                     	;# 
  1038  0195                     	;# 
  1039  0196                     	;# 
  1040  0197                     	;# 
  1041  0199                     	;# 
  1042  0199                     	;# 
  1043  0199                     	;# 
  1044  019A                     	;# 
  1045  019A                     	;# 
  1046  019A                     	;# 
  1047  019B                     	;# 
  1048  019B                     	;# 
  1049  019B                     	;# 
  1050  019B                     	;# 
  1051  019B                     	;# 
  1052  019C                     	;# 
  1053  019C                     	;# 
  1054  019C                     	;# 
  1055  019D                     	;# 
  1056  019D                     	;# 
  1057  019D                     	;# 
  1058  019E                     	;# 
  1059  019E                     	;# 
  1060  019E                     	;# 
  1061  019F                     	;# 
  1062  019F                     	;# 
  1063  019F                     	;# 
  1064  019F                     	;# 
  1065  019F                     	;# 
  1066  020C                     	;# 
  1067  020D                     	;# 
  1068  020E                     	;# 
  1069  0210                     	;# 
  1070  0211                     	;# 
  1071  0211                     	;# 
  1072  0212                     	;# 
  1073  0212                     	;# 
  1074  0213                     	;# 
  1075  0213                     	;# 
  1076  0214                     	;# 
  1077  0214                     	;# 
  1078  0215                     	;# 
  1079  0215                     	;# 
  1080  0215                     	;# 
  1081  0215                     	;# 
  1082  0216                     	;# 
  1083  0216                     	;# 
  1084  0217                     	;# 
  1085  0217                     	;# 
  1086  028C                     	;# 
  1087  028D                     	;# 
  1088  028E                     	;# 
  1089  0291                     	;# 
  1090  0291                     	;# 
  1091  0292                     	;# 
  1092  0293                     	;# 
  1093  0298                     	;# 
  1094  0298                     	;# 
  1095  0299                     	;# 
  1096  029A                     	;# 
  1097  030C                     	;# 
  1098  030D                     	;# 
  1099  030E                     	;# 
  1100  0311                     	;# 
  1101  0311                     	;# 
  1102  0312                     	;# 
  1103  0313                     	;# 
  1104  038C                     	;# 
  1105  038D                     	;# 
  1106  038E                     	;# 
  1107  0390                     	;# 
  1108  0391                     	;# 
  1109  0392                     	;# 
  1110  0393                     	;# 
  1111  0394                     	;# 
  1112  0395                     	;# 
  1113  0396                     	;# 
  1114  0397                     	;# 
  1115  0398                     	;# 
  1116  0399                     	;# 
  1117  039D                     	;# 
  1118  039E                     	;# 
  1119  039F                     	;# 
  1120  0511                     	;# 
  1121  0513                     	;# 
  1122  051A                     	;# 
  1123  0811                     	;# 
  1124  0812                     	;# 
  1125  0813                     	;# 
  1126  0814                     	;# 
  1127  0815                     	;# 
  1128  0816                     	;# 
  1129  0817                     	;# 
  1130  0818                     	;# 
  1131  0819                     	;# 
  1132  081A                     	;# 
  1133  081B                     	;# 
  1134  081C                     	;# 
  1135  081D                     	;# 
  1136  081E                     	;# 
  1137  081F                     	;# 
  1138  0820                     	;# 
  1139  0821                     	;# 
  1140  0821                     	;# 
  1141  0822                     	;# 
  1142  0823                     	;# 
  1143  0823                     	;# 
  1144  0824                     	;# 
  1145  0825                     	;# 
  1146  0825                     	;# 
  1147  0826                     	;# 
  1148  0827                     	;# 
  1149  0827                     	;# 
  1150  0828                     	;# 
  1151  0829                     	;# 
  1152  082A                     	;# 
  1153  082B                     	;# 
  1154  082C                     	;# 
  1155  082D                     	;# 
  1156  082E                     	;# 
  1157  082F                     	;# 
  1158  0831                     	;# 
  1159  0832                     	;# 
  1160  0833                     	;# 
  1161  0834                     	;# 
  1162  0835                     	;# 
  1163  0836                     	;# 
  1164  0837                     	;# 
  1165  0838                     	;# 
  1166  0839                     	;# 
  1167  083A                     	;# 
  1168  083B                     	;# 
  1169  083C                     	;# 
  1170  083D                     	;# 
  1171  083E                     	;# 
  1172  083F                     	;# 
  1173  0840                     	;# 
  1174  0841                     	;# 
  1175  0841                     	;# 
  1176  0842                     	;# 
  1177  0843                     	;# 
  1178  0843                     	;# 
  1179  0844                     	;# 
  1180  0845                     	;# 
  1181  0845                     	;# 
  1182  0846                     	;# 
  1183  0847                     	;# 
  1184  0847                     	;# 
  1185  0848                     	;# 
  1186  0849                     	;# 
  1187  084A                     	;# 
  1188  084B                     	;# 
  1189  084C                     	;# 
  1190  084D                     	;# 
  1191  084E                     	;# 
  1192  084F                     	;# 
  1193  0851                     	;# 
  1194  0852                     	;# 
  1195  0853                     	;# 
  1196  0854                     	;# 
  1197  0855                     	;# 
  1198  0856                     	;# 
  1199  0857                     	;# 
  1200  0858                     	;# 
  1201  0859                     	;# 
  1202  085A                     	;# 
  1203  085B                     	;# 
  1204  085C                     	;# 
  1205  085D                     	;# 
  1206  085E                     	;# 
  1207  085F                     	;# 
  1208  0860                     	;# 
  1209  0861                     	;# 
  1210  0861                     	;# 
  1211  0862                     	;# 
  1212  0863                     	;# 
  1213  0863                     	;# 
  1214  0864                     	;# 
  1215  0865                     	;# 
  1216  0865                     	;# 
  1217  0866                     	;# 
  1218  0867                     	;# 
  1219  0867                     	;# 
  1220  0868                     	;# 
  1221  0869                     	;# 
  1222  086A                     	;# 
  1223  086B                     	;# 
  1224  086C                     	;# 
  1225  086D                     	;# 
  1226  086E                     	;# 
  1227  086F                     	;# 
  1228  0FE4                     	;# 
  1229  0FE5                     	;# 
  1230  0FE6                     	;# 
  1231  0FE7                     	;# 
  1232  0FE8                     	;# 
  1233  0FE9                     	;# 
  1234  0FEA                     	;# 
  1235  0FEB                     	;# 
  1236  0FED                     	;# 
  1237  0FEE                     	;# 
  1238  0FEF                     	;# 
  1239  0000                     	;# 
  1240  0001                     	;# 
  1241  0002                     	;# 
  1242  0003                     	;# 
  1243  0004                     	;# 
  1244  0005                     	;# 
  1245  0006                     	;# 
  1246  0007                     	;# 
  1247  0008                     	;# 
  1248  0009                     	;# 
  1249  000A                     	;# 
  1250  000B                     	;# 
  1251  000C                     	;# 
  1252  000D                     	;# 
  1253  000E                     	;# 
  1254  0010                     	;# 
  1255  0011                     	;# 
  1256  0012                     	;# 
  1257  0013                     	;# 
  1258  0014                     	;# 
  1259  0015                     	;# 
  1260  0016                     	;# 
  1261  0016                     	;# 
  1262  0017                     	;# 
  1263  0018                     	;# 
  1264  0019                     	;# 
  1265  001A                     	;# 
  1266  001B                     	;# 
  1267  001C                     	;# 
  1268  008C                     	;# 
  1269  008D                     	;# 
  1270  008E                     	;# 
  1271  0090                     	;# 
  1272  0091                     	;# 
  1273  0092                     	;# 
  1274  0093                     	;# 
  1275  0094                     	;# 
  1276  0095                     	;# 
  1277  0096                     	;# 
  1278  0097                     	;# 
  1279  0098                     	;# 
  1280  0099                     	;# 
  1281  009A                     	;# 
  1282  009B                     	;# 
  1283  009B                     	;# 
  1284  009C                     	;# 
  1285  009D                     	;# 
  1286  009E                     	;# 
  1287  009F                     	;# 
  1288  010C                     	;# 
  1289  010D                     	;# 
  1290  010E                     	;# 
  1291  0111                     	;# 
  1292  0112                     	;# 
  1293  0113                     	;# 
  1294  0114                     	;# 
  1295  0115                     	;# 
  1296  0116                     	;# 
  1297  0117                     	;# 
  1298  0118                     	;# 
  1299  0119                     	;# 
  1300  011A                     	;# 
  1301  011B                     	;# 
  1302  011C                     	;# 
  1303  011D                     	;# 
  1304  011D                     	;# 
  1305  011D                     	;# 
  1306  011E                     	;# 
  1307  011F                     	;# 
  1308  018C                     	;# 
  1309  018D                     	;# 
  1310  0191                     	;# 
  1311  0191                     	;# 
  1312  0192                     	;# 
  1313  0193                     	;# 
  1314  0193                     	;# 
  1315  0193                     	;# 
  1316  0194                     	;# 
  1317  0195                     	;# 
  1318  0196                     	;# 
  1319  0197                     	;# 
  1320  0199                     	;# 
  1321  0199                     	;# 
  1322  0199                     	;# 
  1323  019A                     	;# 
  1324  019A                     	;# 
  1325  019A                     	;# 
  1326  019B                     	;# 
  1327  019B                     	;# 
  1328  019B                     	;# 
  1329  019B                     	;# 
  1330  019B                     	;# 
  1331  019C                     	;# 
  1332  019C                     	;# 
  1333  019C                     	;# 
  1334  019D                     	;# 
  1335  019D                     	;# 
  1336  019D                     	;# 
  1337  019E                     	;# 
  1338  019E                     	;# 
  1339  019E                     	;# 
  1340  019F                     	;# 
  1341  019F                     	;# 
  1342  019F                     	;# 
  1343  019F                     	;# 
  1344  019F                     	;# 
  1345  020C                     	;# 
  1346  020D                     	;# 
  1347  020E                     	;# 
  1348  0210                     	;# 
  1349  0211                     	;# 
  1350  0211                     	;# 
  1351  0212                     	;# 
  1352  0212                     	;# 
  1353  0213                     	;# 
  1354  0213                     	;# 
  1355  0214                     	;# 
  1356  0214                     	;# 
  1357  0215                     	;# 
  1358  0215                     	;# 
  1359  0215                     	;# 
  1360  0215                     	;# 
  1361  0216                     	;# 
  1362  0216                     	;# 
  1363  0217                     	;# 
  1364  0217                     	;# 
  1365  028C                     	;# 
  1366  028D                     	;# 
  1367  028E                     	;# 
  1368  0291                     	;# 
  1369  0291                     	;# 
  1370  0292                     	;# 
  1371  0293                     	;# 
  1372  0298                     	;# 
  1373  0298                     	;# 
  1374  0299                     	;# 
  1375  029A                     	;# 
  1376  030C                     	;# 
  1377  030D                     	;# 
  1378  030E                     	;# 
  1379  0311                     	;# 
  1380  0311                     	;# 
  1381  0312                     	;# 
  1382  0313                     	;# 
  1383  038C                     	;# 
  1384  038D                     	;# 
  1385  038E                     	;# 
  1386  0390                     	;# 
  1387  0391                     	;# 
  1388  0392                     	;# 
  1389  0393                     	;# 
  1390  0394                     	;# 
  1391  0395                     	;# 
  1392  0396                     	;# 
  1393  0397                     	;# 
  1394  0398                     	;# 
  1395  0399                     	;# 
  1396  039D                     	;# 
  1397  039E                     	;# 
  1398  039F                     	;# 
  1399  0511                     	;# 
  1400  0513                     	;# 
  1401  051A                     	;# 
  1402  0811                     	;# 
  1403  0812                     	;# 
  1404  0813                     	;# 
  1405  0814                     	;# 
  1406  0815                     	;# 
  1407  0816                     	;# 
  1408  0817                     	;# 
  1409  0818                     	;# 
  1410  0819                     	;# 
  1411  081A                     	;# 
  1412  081B                     	;# 
  1413  081C                     	;# 
  1414  081D                     	;# 
  1415  081E                     	;# 
  1416  081F                     	;# 
  1417  0820                     	;# 
  1418  0821                     	;# 
  1419  0821                     	;# 
  1420  0822                     	;# 
  1421  0823                     	;# 
  1422  0823                     	;# 
  1423  0824                     	;# 
  1424  0825                     	;# 
  1425  0825                     	;# 
  1426  0826                     	;# 
  1427  0827                     	;# 
  1428  0827                     	;# 
  1429  0828                     	;# 
  1430  0829                     	;# 
  1431  082A                     	;# 
  1432  082B                     	;# 
  1433  082C                     	;# 
  1434  082D                     	;# 
  1435  082E                     	;# 
  1436  082F                     	;# 
  1437  0831                     	;# 
  1438  0832                     	;# 
  1439  0833                     	;# 
  1440  0834                     	;# 
  1441  0835                     	;# 
  1442  0836                     	;# 
  1443  0837                     	;# 
  1444  0838                     	;# 
  1445  0839                     	;# 
  1446  083A                     	;# 
  1447  083B                     	;# 
  1448  083C                     	;# 
  1449  083D                     	;# 
  1450  083E                     	;# 
  1451  083F                     	;# 
  1452  0840                     	;# 
  1453  0841                     	;# 
  1454  0841                     	;# 
  1455  0842                     	;# 
  1456  0843                     	;# 
  1457  0843                     	;# 
  1458  0844                     	;# 
  1459  0845                     	;# 
  1460  0845                     	;# 
  1461  0846                     	;# 
  1462  0847                     	;# 
  1463  0847                     	;# 
  1464  0848                     	;# 
  1465  0849                     	;# 
  1466  084A                     	;# 
  1467  084B                     	;# 
  1468  084C                     	;# 
  1469  084D                     	;# 
  1470  084E                     	;# 
  1471  084F                     	;# 
  1472  0851                     	;# 
  1473  0852                     	;# 
  1474  0853                     	;# 
  1475  0854                     	;# 
  1476  0855                     	;# 
  1477  0856                     	;# 
  1478  0857                     	;# 
  1479  0858                     	;# 
  1480  0859                     	;# 
  1481  085A                     	;# 
  1482  085B                     	;# 
  1483  085C                     	;# 
  1484  085D                     	;# 
  1485  085E                     	;# 
  1486  085F                     	;# 
  1487  0860                     	;# 
  1488  0861                     	;# 
  1489  0861                     	;# 
  1490  0862                     	;# 
  1491  0863                     	;# 
  1492  0863                     	;# 
  1493  0864                     	;# 
  1494  0865                     	;# 
  1495  0865                     	;# 
  1496  0866                     	;# 
  1497  0867                     	;# 
  1498  0867                     	;# 
  1499  0868                     	;# 
  1500  0869                     	;# 
  1501  086A                     	;# 
  1502  086B                     	;# 
  1503  086C                     	;# 
  1504  086D                     	;# 
  1505  086E                     	;# 
  1506  086F                     	;# 
  1507  0FE4                     	;# 
  1508  0FE5                     	;# 
  1509  0FE6                     	;# 
  1510  0FE7                     	;# 
  1511  0FE8                     	;# 
  1512  0FE9                     	;# 
  1513  0FEA                     	;# 
  1514  0FEB                     	;# 
  1515  0FED                     	;# 
  1516  0FEE                     	;# 
  1517  0FEF                     	;# 
  1518  0000                     	;# 
  1519  0001                     	;# 
  1520  0002                     	;# 
  1521  0003                     	;# 
  1522  0004                     	;# 
  1523  0005                     	;# 
  1524  0006                     	;# 
  1525  0007                     	;# 
  1526  0008                     	;# 
  1527  0009                     	;# 
  1528  000A                     	;# 
  1529  000B                     	;# 
  1530  000C                     	;# 
  1531  000D                     	;# 
  1532  000E                     	;# 
  1533  0010                     	;# 
  1534  0011                     	;# 
  1535  0012                     	;# 
  1536  0013                     	;# 
  1537  0014                     	;# 
  1538  0015                     	;# 
  1539  0016                     	;# 
  1540  0016                     	;# 
  1541  0017                     	;# 
  1542  0018                     	;# 
  1543  0019                     	;# 
  1544  001A                     	;# 
  1545  001B                     	;# 
  1546  001C                     	;# 
  1547  008C                     	;# 
  1548  008D                     	;# 
  1549  008E                     	;# 
  1550  0090                     	;# 
  1551  0091                     	;# 
  1552  0092                     	;# 
  1553  0093                     	;# 
  1554  0094                     	;# 
  1555  0095                     	;# 
  1556  0096                     	;# 
  1557  0097                     	;# 
  1558  0098                     	;# 
  1559  0099                     	;# 
  1560  009A                     	;# 
  1561  009B                     	;# 
  1562  009B                     	;# 
  1563  009C                     	;# 
  1564  009D                     	;# 
  1565  009E                     	;# 
  1566  009F                     	;# 
  1567  010C                     	;# 
  1568  010D                     	;# 
  1569  010E                     	;# 
  1570  0111                     	;# 
  1571  0112                     	;# 
  1572  0113                     	;# 
  1573  0114                     	;# 
  1574  0115                     	;# 
  1575  0116                     	;# 
  1576  0117                     	;# 
  1577  0118                     	;# 
  1578  0119                     	;# 
  1579  011A                     	;# 
  1580  011B                     	;# 
  1581  011C                     	;# 
  1582  011D                     	;# 
  1583  011D                     	;# 
  1584  011D                     	;# 
  1585  011E                     	;# 
  1586  011F                     	;# 
  1587  018C                     	;# 
  1588  018D                     	;# 
  1589  0191                     	;# 
  1590  0191                     	;# 
  1591  0192                     	;# 
  1592  0193                     	;# 
  1593  0193                     	;# 
  1594  0193                     	;# 
  1595  0194                     	;# 
  1596  0195                     	;# 
  1597  0196                     	;# 
  1598  0197                     	;# 
  1599  0199                     	;# 
  1600  0199                     	;# 
  1601  0199                     	;# 
  1602  019A                     	;# 
  1603  019A                     	;# 
  1604  019A                     	;# 
  1605  019B                     	;# 
  1606  019B                     	;# 
  1607  019B                     	;# 
  1608  019B                     	;# 
  1609  019B                     	;# 
  1610  019C                     	;# 
  1611  019C                     	;# 
  1612  019C                     	;# 
  1613  019D                     	;# 
  1614  019D                     	;# 
  1615  019D                     	;# 
  1616  019E                     	;# 
  1617  019E                     	;# 
  1618  019E                     	;# 
  1619  019F                     	;# 
  1620  019F                     	;# 
  1621  019F                     	;# 
  1622  019F                     	;# 
  1623  019F                     	;# 
  1624  020C                     	;# 
  1625  020D                     	;# 
  1626  020E                     	;# 
  1627  0210                     	;# 
  1628  0211                     	;# 
  1629  0211                     	;# 
  1630  0212                     	;# 
  1631  0212                     	;# 
  1632  0213                     	;# 
  1633  0213                     	;# 
  1634  0214                     	;# 
  1635  0214                     	;# 
  1636  0215                     	;# 
  1637  0215                     	;# 
  1638  0215                     	;# 
  1639  0215                     	;# 
  1640  0216                     	;# 
  1641  0216                     	;# 
  1642  0217                     	;# 
  1643  0217                     	;# 
  1644  028C                     	;# 
  1645  028D                     	;# 
  1646  028E                     	;# 
  1647  0291                     	;# 
  1648  0291                     	;# 
  1649  0292                     	;# 
  1650  0293                     	;# 
  1651  0298                     	;# 
  1652  0298                     	;# 
  1653  0299                     	;# 
  1654  029A                     	;# 
  1655  030C                     	;# 
  1656  030D                     	;# 
  1657  030E                     	;# 
  1658  0311                     	;# 
  1659  0311                     	;# 
  1660  0312                     	;# 
  1661  0313                     	;# 
  1662  038C                     	;# 
  1663  038D                     	;# 
  1664  038E                     	;# 
  1665  0390                     	;# 
  1666  0391                     	;# 
  1667  0392                     	;# 
  1668  0393                     	;# 
  1669  0394                     	;# 
  1670  0395                     	;# 
  1671  0396                     	;# 
  1672  0397                     	;# 
  1673  0398                     	;# 
  1674  0399                     	;# 
  1675  039D                     	;# 
  1676  039E                     	;# 
  1677  039F                     	;# 
  1678  0511                     	;# 
  1679  0513                     	;# 
  1680  051A                     	;# 
  1681  0811                     	;# 
  1682  0812                     	;# 
  1683  0813                     	;# 
  1684  0814                     	;# 
  1685  0815                     	;# 
  1686  0816                     	;# 
  1687  0817                     	;# 
  1688  0818                     	;# 
  1689  0819                     	;# 
  1690  081A                     	;# 
  1691  081B                     	;# 
  1692  081C                     	;# 
  1693  081D                     	;# 
  1694  081E                     	;# 
  1695  081F                     	;# 
  1696  0820                     	;# 
  1697  0821                     	;# 
  1698  0821                     	;# 
  1699  0822                     	;# 
  1700  0823                     	;# 
  1701  0823                     	;# 
  1702  0824                     	;# 
  1703  0825                     	;# 
  1704  0825                     	;# 
  1705  0826                     	;# 
  1706  0827                     	;# 
  1707  0827                     	;# 
  1708  0828                     	;# 
  1709  0829                     	;# 
  1710  082A                     	;# 
  1711  082B                     	;# 
  1712  082C                     	;# 
  1713  082D                     	;# 
  1714  082E                     	;# 
  1715  082F                     	;# 
  1716  0831                     	;# 
  1717  0832                     	;# 
  1718  0833                     	;# 
  1719  0834                     	;# 
  1720  0835                     	;# 
  1721  0836                     	;# 
  1722  0837                     	;# 
  1723  0838                     	;# 
  1724  0839                     	;# 
  1725  083A                     	;# 
  1726  083B                     	;# 
  1727  083C                     	;# 
  1728  083D                     	;# 
  1729  083E                     	;# 
  1730  083F                     	;# 
  1731  0840                     	;# 
  1732  0841                     	;# 
  1733  0841                     	;# 
  1734  0842                     	;# 
  1735  0843                     	;# 
  1736  0843                     	;# 
  1737  0844                     	;# 
  1738  0845                     	;# 
  1739  0845                     	;# 
  1740  0846                     	;# 
  1741  0847                     	;# 
  1742  0847                     	;# 
  1743  0848                     	;# 
  1744  0849                     	;# 
  1745  084A                     	;# 
  1746  084B                     	;# 
  1747  084C                     	;# 
  1748  084D                     	;# 
  1749  084E                     	;# 
  1750  084F                     	;# 
  1751  0851                     	;# 
  1752  0852                     	;# 
  1753  0853                     	;# 
  1754  0854                     	;# 
  1755  0855                     	;# 
  1756  0856                     	;# 
  1757  0857                     	;# 
  1758  0858                     	;# 
  1759  0859                     	;# 
  1760  085A                     	;# 
  1761  085B                     	;# 
  1762  085C                     	;# 
  1763  085D                     	;# 
  1764  085E                     	;# 
  1765  085F                     	;# 
  1766  0860                     	;# 
  1767  0861                     	;# 
  1768  0861                     	;# 
  1769  0862                     	;# 
  1770  0863                     	;# 
  1771  0863                     	;# 
  1772  0864                     	;# 
  1773  0865                     	;# 
  1774  0865                     	;# 
  1775  0866                     	;# 
  1776  0867                     	;# 
  1777  0867                     	;# 
  1778  0868                     	;# 
  1779  0869                     	;# 
  1780  086A                     	;# 
  1781  086B                     	;# 
  1782  086C                     	;# 
  1783  086D                     	;# 
  1784  086E                     	;# 
  1785  086F                     	;# 
  1786  0FE4                     	;# 
  1787  0FE5                     	;# 
  1788  0FE6                     	;# 
  1789  0FE7                     	;# 
  1790  0FE8                     	;# 
  1791  0FE9                     	;# 
  1792  0FEA                     	;# 
  1793  0FEB                     	;# 
  1794  0FED                     	;# 
  1795  0FEE                     	;# 
  1796  0FEF                     	;# 
  1797  0000                     	;# 
  1798  0001                     	;# 
  1799  0002                     	;# 
  1800  0003                     	;# 
  1801  0004                     	;# 
  1802  0005                     	;# 
  1803  0006                     	;# 
  1804  0007                     	;# 
  1805  0008                     	;# 
  1806  0009                     	;# 
  1807  000A                     	;# 
  1808  000B                     	;# 
  1809  000C                     	;# 
  1810  000D                     	;# 
  1811  000E                     	;# 
  1812  0010                     	;# 
  1813  0011                     	;# 
  1814  0012                     	;# 
  1815  0013                     	;# 
  1816  0014                     	;# 
  1817  0015                     	;# 
  1818  0016                     	;# 
  1819  0016                     	;# 
  1820  0017                     	;# 
  1821  0018                     	;# 
  1822  0019                     	;# 
  1823  001A                     	;# 
  1824  001B                     	;# 
  1825  001C                     	;# 
  1826  008C                     	;# 
  1827  008D                     	;# 
  1828  008E                     	;# 
  1829  0090                     	;# 
  1830  0091                     	;# 
  1831  0092                     	;# 
  1832  0093                     	;# 
  1833  0094                     	;# 
  1834  0095                     	;# 
  1835  0096                     	;# 
  1836  0097                     	;# 
  1837  0098                     	;# 
  1838  0099                     	;# 
  1839  009A                     	;# 
  1840  009B                     	;# 
  1841  009B                     	;# 
  1842  009C                     	;# 
  1843  009D                     	;# 
  1844  009E                     	;# 
  1845  009F                     	;# 
  1846  010C                     	;# 
  1847  010D                     	;# 
  1848  010E                     	;# 
  1849  0111                     	;# 
  1850  0112                     	;# 
  1851  0113                     	;# 
  1852  0114                     	;# 
  1853  0115                     	;# 
  1854  0116                     	;# 
  1855  0117                     	;# 
  1856  0118                     	;# 
  1857  0119                     	;# 
  1858  011A                     	;# 
  1859  011B                     	;# 
  1860  011C                     	;# 
  1861  011D                     	;# 
  1862  011D                     	;# 
  1863  011D                     	;# 
  1864  011E                     	;# 
  1865  011F                     	;# 
  1866  018C                     	;# 
  1867  018D                     	;# 
  1868  0191                     	;# 
  1869  0191                     	;# 
  1870  0192                     	;# 
  1871  0193                     	;# 
  1872  0193                     	;# 
  1873  0193                     	;# 
  1874  0194                     	;# 
  1875  0195                     	;# 
  1876  0196                     	;# 
  1877  0197                     	;# 
  1878  0199                     	;# 
  1879  0199                     	;# 
  1880  0199                     	;# 
  1881  019A                     	;# 
  1882  019A                     	;# 
  1883  019A                     	;# 
  1884  019B                     	;# 
  1885  019B                     	;# 
  1886  019B                     	;# 
  1887  019B                     	;# 
  1888  019B                     	;# 
  1889  019C                     	;# 
  1890  019C                     	;# 
  1891  019C                     	;# 
  1892  019D                     	;# 
  1893  019D                     	;# 
  1894  019D                     	;# 
  1895  019E                     	;# 
  1896  019E                     	;# 
  1897  019E                     	;# 
  1898  019F                     	;# 
  1899  019F                     	;# 
  1900  019F                     	;# 
  1901  019F                     	;# 
  1902  019F                     	;# 
  1903  020C                     	;# 
  1904  020D                     	;# 
  1905  020E                     	;# 
  1906  0210                     	;# 
  1907  0211                     	;# 
  1908  0211                     	;# 
  1909  0212                     	;# 
  1910  0212                     	;# 
  1911  0213                     	;# 
  1912  0213                     	;# 
  1913  0214                     	;# 
  1914  0214                     	;# 
  1915  0215                     	;# 
  1916  0215                     	;# 
  1917  0215                     	;# 
  1918  0215                     	;# 
  1919  0216                     	;# 
  1920  0216                     	;# 
  1921  0217                     	;# 
  1922  0217                     	;# 
  1923  028C                     	;# 
  1924  028D                     	;# 
  1925  028E                     	;# 
  1926  0291                     	;# 
  1927  0291                     	;# 
  1928  0292                     	;# 
  1929  0293                     	;# 
  1930  0298                     	;# 
  1931  0298                     	;# 
  1932  0299                     	;# 
  1933  029A                     	;# 
  1934  030C                     	;# 
  1935  030D                     	;# 
  1936  030E                     	;# 
  1937  0311                     	;# 
  1938  0311                     	;# 
  1939  0312                     	;# 
  1940  0313                     	;# 
  1941  038C                     	;# 
  1942  038D                     	;# 
  1943  038E                     	;# 
  1944  0390                     	;# 
  1945  0391                     	;# 
  1946  0392                     	;# 
  1947  0393                     	;# 
  1948  0394                     	;# 
  1949  0395                     	;# 
  1950  0396                     	;# 
  1951  0397                     	;# 
  1952  0398                     	;# 
  1953  0399                     	;# 
  1954  039D                     	;# 
  1955  039E                     	;# 
  1956  039F                     	;# 
  1957  0511                     	;# 
  1958  0513                     	;# 
  1959  051A                     	;# 
  1960  0811                     	;# 
  1961  0812                     	;# 
  1962  0813                     	;# 
  1963  0814                     	;# 
  1964  0815                     	;# 
  1965  0816                     	;# 
  1966  0817                     	;# 
  1967  0818                     	;# 
  1968  0819                     	;# 
  1969  081A                     	;# 
  1970  081B                     	;# 
  1971  081C                     	;# 
  1972  081D                     	;# 
  1973  081E                     	;# 
  1974  081F                     	;# 
  1975  0820                     	;# 
  1976  0821                     	;# 
  1977  0821                     	;# 
  1978  0822                     	;# 
  1979  0823                     	;# 
  1980  0823                     	;# 
  1981  0824                     	;# 
  1982  0825                     	;# 
  1983  0825                     	;# 
  1984  0826                     	;# 
  1985  0827                     	;# 
  1986  0827                     	;# 
  1987  0828                     	;# 
  1988  0829                     	;# 
  1989  082A                     	;# 
  1990  082B                     	;# 
  1991  082C                     	;# 
  1992  082D                     	;# 
  1993  082E                     	;# 
  1994  082F                     	;# 
  1995  0831                     	;# 
  1996  0832                     	;# 
  1997  0833                     	;# 
  1998  0834                     	;# 
  1999  0835                     	;# 
  2000  0836                     	;# 
  2001  0837                     	;# 
  2002  0838                     	;# 
  2003  0839                     	;# 
  2004  083A                     	;# 
  2005  083B                     	;# 
  2006  083C                     	;# 
  2007  083D                     	;# 
  2008  083E                     	;# 
  2009  083F                     	;# 
  2010  0840                     	;# 
  2011  0841                     	;# 
  2012  0841                     	;# 
  2013  0842                     	;# 
  2014  0843                     	;# 
  2015  0843                     	;# 
  2016  0844                     	;# 
  2017  0845                     	;# 
  2018  0845                     	;# 
  2019  0846                     	;# 
  2020  0847                     	;# 
  2021  0847                     	;# 
  2022  0848                     	;# 
  2023  0849                     	;# 
  2024  084A                     	;# 
  2025  084B                     	;# 
  2026  084C                     	;# 
  2027  084D                     	;# 
  2028  084E                     	;# 
  2029  084F                     	;# 
  2030  0851                     	;# 
  2031  0852                     	;# 
  2032  0853                     	;# 
  2033  0854                     	;# 
  2034  0855                     	;# 
  2035  0856                     	;# 
  2036  0857                     	;# 
  2037  0858                     	;# 
  2038  0859                     	;# 
  2039  085A                     	;# 
  2040  085B                     	;# 
  2041  085C                     	;# 
  2042  085D                     	;# 
  2043  085E                     	;# 
  2044  085F                     	;# 
  2045  0860                     	;# 
  2046  0861                     	;# 
  2047  0861                     	;# 
  2048  0862                     	;# 
  2049  0863                     	;# 
  2050  0863                     	;# 
  2051  0864                     	;# 
  2052  0865                     	;# 
  2053  0865                     	;# 
  2054  0866                     	;# 
  2055  0867                     	;# 
  2056  0867                     	;# 
  2057  0868                     	;# 
  2058  0869                     	;# 
  2059  086A                     	;# 
  2060  086B                     	;# 
  2061  086C                     	;# 
  2062  086D                     	;# 
  2063  086E                     	;# 
  2064  086F                     	;# 
  2065  0FE4                     	;# 
  2066  0FE5                     	;# 
  2067  0FE6                     	;# 
  2068  0FE7                     	;# 
  2069  0FE8                     	;# 
  2070  0FE9                     	;# 
  2071  0FEA                     	;# 
  2072  0FEB                     	;# 
  2073  0FED                     	;# 
  2074  0FEE                     	;# 
  2075  0FEF                     	;# 
  2076  0000                     	;# 
  2077  0001                     	;# 
  2078  0002                     	;# 
  2079  0003                     	;# 
  2080  0004                     	;# 
  2081  0005                     	;# 
  2082  0006                     	;# 
  2083  0007                     	;# 
  2084  0008                     	;# 
  2085  0009                     	;# 
  2086  000A                     	;# 
  2087  000B                     	;# 
  2088  000C                     	;# 
  2089  000D                     	;# 
  2090  000E                     	;# 
  2091  0010                     	;# 
  2092  0011                     	;# 
  2093  0012                     	;# 
  2094  0013                     	;# 
  2095  0014                     	;# 
  2096  0015                     	;# 
  2097  0016                     	;# 
  2098  0016                     	;# 
  2099  0017                     	;# 
  2100  0018                     	;# 
  2101  0019                     	;# 
  2102  001A                     	;# 
  2103  001B                     	;# 
  2104  001C                     	;# 
  2105  008C                     	;# 
  2106  008D                     	;# 
  2107  008E                     	;# 
  2108  0090                     	;# 
  2109  0091                     	;# 
  2110  0092                     	;# 
  2111  0093                     	;# 
  2112  0094                     	;# 
  2113  0095                     	;# 
  2114  0096                     	;# 
  2115  0097                     	;# 
  2116  0098                     	;# 
  2117  0099                     	;# 
  2118  009A                     	;# 
  2119  009B                     	;# 
  2120  009B                     	;# 
  2121  009C                     	;# 
  2122  009D                     	;# 
  2123  009E                     	;# 
  2124  009F                     	;# 
  2125  010C                     	;# 
  2126  010D                     	;# 
  2127  010E                     	;# 
  2128  0111                     	;# 
  2129  0112                     	;# 
  2130  0113                     	;# 
  2131  0114                     	;# 
  2132  0115                     	;# 
  2133  0116                     	;# 
  2134  0117                     	;# 
  2135  0118                     	;# 
  2136  0119                     	;# 
  2137  011A                     	;# 
  2138  011B                     	;# 
  2139  011C                     	;# 
  2140  011D                     	;# 
  2141  011D                     	;# 
  2142  011D                     	;# 
  2143  011E                     	;# 
  2144  011F                     	;# 
  2145  018C                     	;# 
  2146  018D                     	;# 
  2147  0191                     	;# 
  2148  0191                     	;# 
  2149  0192                     	;# 
  2150  0193                     	;# 
  2151  0193                     	;# 
  2152  0193                     	;# 
  2153  0194                     	;# 
  2154  0195                     	;# 
  2155  0196                     	;# 
  2156  0197                     	;# 
  2157  0199                     	;# 
  2158  0199                     	;# 
  2159  0199                     	;# 
  2160  019A                     	;# 
  2161  019A                     	;# 
  2162  019A                     	;# 
  2163  019B                     	;# 
  2164  019B                     	;# 
  2165  019B                     	;# 
  2166  019B                     	;# 
  2167  019B                     	;# 
  2168  019C                     	;# 
  2169  019C                     	;# 
  2170  019C                     	;# 
  2171  019D                     	;# 
  2172  019D                     	;# 
  2173  019D                     	;# 
  2174  019E                     	;# 
  2175  019E                     	;# 
  2176  019E                     	;# 
  2177  019F                     	;# 
  2178  019F                     	;# 
  2179  019F                     	;# 
  2180  019F                     	;# 
  2181  019F                     	;# 
  2182  020C                     	;# 
  2183  020D                     	;# 
  2184  020E                     	;# 
  2185  0210                     	;# 
  2186  0211                     	;# 
  2187  0211                     	;# 
  2188  0212                     	;# 
  2189  0212                     	;# 
  2190  0213                     	;# 
  2191  0213                     	;# 
  2192  0214                     	;# 
  2193  0214                     	;# 
  2194  0215                     	;# 
  2195  0215                     	;# 
  2196  0215                     	;# 
  2197  0215                     	;# 
  2198  0216                     	;# 
  2199  0216                     	;# 
  2200  0217                     	;# 
  2201  0217                     	;# 
  2202  028C                     	;# 
  2203  028D                     	;# 
  2204  028E                     	;# 
  2205  0291                     	;# 
  2206  0291                     	;# 
  2207  0292                     	;# 
  2208  0293                     	;# 
  2209  0298                     	;# 
  2210  0298                     	;# 
  2211  0299                     	;# 
  2212  029A                     	;# 
  2213  030C                     	;# 
  2214  030D                     	;# 
  2215  030E                     	;# 
  2216  0311                     	;# 
  2217  0311                     	;# 
  2218  0312                     	;# 
  2219  0313                     	;# 
  2220  038C                     	;# 
  2221  038D                     	;# 
  2222  038E                     	;# 
  2223  0390                     	;# 
  2224  0391                     	;# 
  2225  0392                     	;# 
  2226  0393                     	;# 
  2227  0394                     	;# 
  2228  0395                     	;# 
  2229  0396                     	;# 
  2230  0397                     	;# 
  2231  0398                     	;# 
  2232  0399                     	;# 
  2233  039D                     	;# 
  2234  039E                     	;# 
  2235  039F                     	;# 
  2236  0511                     	;# 
  2237  0513                     	;# 
  2238  051A                     	;# 
  2239  0811                     	;# 
  2240  0812                     	;# 
  2241  0813                     	;# 
  2242  0814                     	;# 
  2243  0815                     	;# 
  2244  0816                     	;# 
  2245  0817                     	;# 
  2246  0818                     	;# 
  2247  0819                     	;# 
  2248  081A                     	;# 
  2249  081B                     	;# 
  2250  081C                     	;# 
  2251  081D                     	;# 
  2252  081E                     	;# 
  2253  081F                     	;# 
  2254  0820                     	;# 
  2255  0821                     	;# 
  2256  0821                     	;# 
  2257  0822                     	;# 
  2258  0823                     	;# 
  2259  0823                     	;# 
  2260  0824                     	;# 
  2261  0825                     	;# 
  2262  0825                     	;# 
  2263  0826                     	;# 
  2264  0827                     	;# 
  2265  0827                     	;# 
  2266  0828                     	;# 
  2267  0829                     	;# 
  2268  082A                     	;# 
  2269  082B                     	;# 
  2270  082C                     	;# 
  2271  082D                     	;# 
  2272  082E                     	;# 
  2273  082F                     	;# 
  2274  0831                     	;# 
  2275  0832                     	;# 
  2276  0833                     	;# 
  2277  0834                     	;# 
  2278  0835                     	;# 
  2279  0836                     	;# 
  2280  0837                     	;# 
  2281  0838                     	;# 
  2282  0839                     	;# 
  2283  083A                     	;# 
  2284  083B                     	;# 
  2285  083C                     	;# 
  2286  083D                     	;# 
  2287  083E                     	;# 
  2288  083F                     	;# 
  2289  0840                     	;# 
  2290  0841                     	;# 
  2291  0841                     	;# 
  2292  0842                     	;# 
  2293  0843                     	;# 
  2294  0843                     	;# 
  2295  0844                     	;# 
  2296  0845                     	;# 
  2297  0845                     	;# 
  2298  0846                     	;# 
  2299  0847                     	;# 
  2300  0847                     	;# 
  2301  0848                     	;# 
  2302  0849                     	;# 
  2303  084A                     	;# 
  2304  084B                     	;# 
  2305  084C                     	;# 
  2306  084D                     	;# 
  2307  084E                     	;# 
  2308  084F                     	;# 
  2309  0851                     	;# 
  2310  0852                     	;# 
  2311  0853                     	;# 
  2312  0854                     	;# 
  2313  0855                     	;# 
  2314  0856                     	;# 
  2315  0857                     	;# 
  2316  0858                     	;# 
  2317  0859                     	;# 
  2318  085A                     	;# 
  2319  085B                     	;# 
  2320  085C                     	;# 
  2321  085D                     	;# 
  2322  085E                     	;# 
  2323  085F                     	;# 
  2324  0860                     	;# 
  2325  0861                     	;# 
  2326  0861                     	;# 
  2327  0862                     	;# 
  2328  0863                     	;# 
  2329  0863                     	;# 
  2330  0864                     	;# 
  2331  0865                     	;# 
  2332  0865                     	;# 
  2333  0866                     	;# 
  2334  0867                     	;# 
  2335  0867                     	;# 
  2336  0868                     	;# 
  2337  0869                     	;# 
  2338  086A                     	;# 
  2339  086B                     	;# 
  2340  086C                     	;# 
  2341  086D                     	;# 
  2342  086E                     	;# 
  2343  086F                     	;# 
  2344  0FE4                     	;# 
  2345  0FE5                     	;# 
  2346  0FE6                     	;# 
  2347  0FE7                     	;# 
  2348  0FE8                     	;# 
  2349  0FE9                     	;# 
  2350  0FEA                     	;# 
  2351  0FEB                     	;# 
  2352  0FED                     	;# 
  2353  0FEE                     	;# 
  2354  0FEF                     	;# 
  2355  0000                     	;# 
  2356  0001                     	;# 
  2357  0002                     	;# 
  2358  0003                     	;# 
  2359  0004                     	;# 
  2360  0005                     	;# 
  2361  0006                     	;# 
  2362  0007                     	;# 
  2363  0008                     	;# 
  2364  0009                     	;# 
  2365  000A                     	;# 
  2366  000B                     	;# 
  2367  000C                     	;# 
  2368  000D                     	;# 
  2369  000E                     	;# 
  2370  0010                     	;# 
  2371  0011                     	;# 
  2372  0012                     	;# 
  2373  0013                     	;# 
  2374  0014                     	;# 
  2375  0015                     	;# 
  2376  0016                     	;# 
  2377  0016                     	;# 
  2378  0017                     	;# 
  2379  0018                     	;# 
  2380  0019                     	;# 
  2381  001A                     	;# 
  2382  001B                     	;# 
  2383  001C                     	;# 
  2384  008C                     	;# 
  2385  008D                     	;# 
  2386  008E                     	;# 
  2387  0090                     	;# 
  2388  0091                     	;# 
  2389  0092                     	;# 
  2390  0093                     	;# 
  2391  0094                     	;# 
  2392  0095                     	;# 
  2393  0096                     	;# 
  2394  0097                     	;# 
  2395  0098                     	;# 
  2396  0099                     	;# 
  2397  009A                     	;# 
  2398  009B                     	;# 
  2399  009B                     	;# 
  2400  009C                     	;# 
  2401  009D                     	;# 
  2402  009E                     	;# 
  2403  009F                     	;# 
  2404  010C                     	;# 
  2405  010D                     	;# 
  2406  010E                     	;# 
  2407  0111                     	;# 
  2408  0112                     	;# 
  2409  0113                     	;# 
  2410  0114                     	;# 
  2411  0115                     	;# 
  2412  0116                     	;# 
  2413  0117                     	;# 
  2414  0118                     	;# 
  2415  0119                     	;# 
  2416  011A                     	;# 
  2417  011B                     	;# 
  2418  011C                     	;# 
  2419  011D                     	;# 
  2420  011D                     	;# 
  2421  011D                     	;# 
  2422  011E                     	;# 
  2423  011F                     	;# 
  2424  018C                     	;# 
  2425  018D                     	;# 
  2426  0191                     	;# 
  2427  0191                     	;# 
  2428  0192                     	;# 
  2429  0193                     	;# 
  2430  0193                     	;# 
  2431  0193                     	;# 
  2432  0194                     	;# 
  2433  0195                     	;# 
  2434  0196                     	;# 
  2435  0197                     	;# 
  2436  0199                     	;# 
  2437  0199                     	;# 
  2438  0199                     	;# 
  2439  019A                     	;# 
  2440  019A                     	;# 
  2441  019A                     	;# 
  2442  019B                     	;# 
  2443  019B                     	;# 
  2444  019B                     	;# 
  2445  019B                     	;# 
  2446  019B                     	;# 
  2447  019C                     	;# 
  2448  019C                     	;# 
  2449  019C                     	;# 
  2450  019D                     	;# 
  2451  019D                     	;# 
  2452  019D                     	;# 
  2453  019E                     	;# 
  2454  019E                     	;# 
  2455  019E                     	;# 
  2456  019F                     	;# 
  2457  019F                     	;# 
  2458  019F                     	;# 
  2459  019F                     	;# 
  2460  019F                     	;# 
  2461  020C                     	;# 
  2462  020D                     	;# 
  2463  020E                     	;# 
  2464  0210                     	;# 
  2465  0211                     	;# 
  2466  0211                     	;# 
  2467  0212                     	;# 
  2468  0212                     	;# 
  2469  0213                     	;# 
  2470  0213                     	;# 
  2471  0214                     	;# 
  2472  0214                     	;# 
  2473  0215                     	;# 
  2474  0215                     	;# 
  2475  0215                     	;# 
  2476  0215                     	;# 
  2477  0216                     	;# 
  2478  0216                     	;# 
  2479  0217                     	;# 
  2480  0217                     	;# 
  2481  028C                     	;# 
  2482  028D                     	;# 
  2483  028E                     	;# 
  2484  0291                     	;# 
  2485  0291                     	;# 
  2486  0292                     	;# 
  2487  0293                     	;# 
  2488  0298                     	;# 
  2489  0298                     	;# 
  2490  0299                     	;# 
  2491  029A                     	;# 
  2492  030C                     	;# 
  2493  030D                     	;# 
  2494  030E                     	;# 
  2495  0311                     	;# 
  2496  0311                     	;# 
  2497  0312                     	;# 
  2498  0313                     	;# 
  2499  038C                     	;# 
  2500  038D                     	;# 
  2501  038E                     	;# 
  2502  0390                     	;# 
  2503  0391                     	;# 
  2504  0392                     	;# 
  2505  0393                     	;# 
  2506  0394                     	;# 
  2507  0395                     	;# 
  2508  0396                     	;# 
  2509  0397                     	;# 
  2510  0398                     	;# 
  2511  0399                     	;# 
  2512  039D                     	;# 
  2513  039E                     	;# 
  2514  039F                     	;# 
  2515  0511                     	;# 
  2516  0513                     	;# 
  2517  051A                     	;# 
  2518  0811                     	;# 
  2519  0812                     	;# 
  2520  0813                     	;# 
  2521  0814                     	;# 
  2522  0815                     	;# 
  2523  0816                     	;# 
  2524  0817                     	;# 
  2525  0818                     	;# 
  2526  0819                     	;# 
  2527  081A                     	;# 
  2528  081B                     	;# 
  2529  081C                     	;# 
  2530  081D                     	;# 
  2531  081E                     	;# 
  2532  081F                     	;# 
  2533  0820                     	;# 
  2534  0821                     	;# 
  2535  0821                     	;# 
  2536  0822                     	;# 
  2537  0823                     	;# 
  2538  0823                     	;# 
  2539  0824                     	;# 
  2540  0825                     	;# 
  2541  0825                     	;# 
  2542  0826                     	;# 
  2543  0827                     	;# 
  2544  0827                     	;# 
  2545  0828                     	;# 
  2546  0829                     	;# 
  2547  082A                     	;# 
  2548  082B                     	;# 
  2549  082C                     	;# 
  2550  082D                     	;# 
  2551  082E                     	;# 
  2552  082F                     	;# 
  2553  0831                     	;# 
  2554  0832                     	;# 
  2555  0833                     	;# 
  2556  0834                     	;# 
  2557  0835                     	;# 
  2558  0836                     	;# 
  2559  0837                     	;# 
  2560  0838                     	;# 
  2561  0839                     	;# 
  2562  083A                     	;# 
  2563  083B                     	;# 
  2564  083C                     	;# 
  2565  083D                     	;# 
  2566  083E                     	;# 
  2567  083F                     	;# 
  2568  0840                     	;# 
  2569  0841                     	;# 
  2570  0841                     	;# 
  2571  0842                     	;# 
  2572  0843                     	;# 
  2573  0843                     	;# 
  2574  0844                     	;# 
  2575  0845                     	;# 
  2576  0845                     	;# 
  2577  0846                     	;# 
  2578  0847                     	;# 
  2579  0847                     	;# 
  2580  0848                     	;# 
  2581  0849                     	;# 
  2582  084A                     	;# 
  2583  084B                     	;# 
  2584  084C                     	;# 
  2585  084D                     	;# 
  2586  084E                     	;# 
  2587  084F                     	;# 
  2588  0851                     	;# 
  2589  0852                     	;# 
  2590  0853                     	;# 
  2591  0854                     	;# 
  2592  0855                     	;# 
  2593  0856                     	;# 
  2594  0857                     	;# 
  2595  0858                     	;# 
  2596  0859                     	;# 
  2597  085A                     	;# 
  2598  085B                     	;# 
  2599  085C                     	;# 
  2600  085D                     	;# 
  2601  085E                     	;# 
  2602  085F                     	;# 
  2603  0860                     	;# 
  2604  0861                     	;# 
  2605  0861                     	;# 
  2606  0862                     	;# 
  2607  0863                     	;# 
  2608  0863                     	;# 
  2609  0864                     	;# 
  2610  0865                     	;# 
  2611  0865                     	;# 
  2612  0866                     	;# 
  2613  0867                     	;# 
  2614  0867                     	;# 
  2615  0868                     	;# 
  2616  0869                     	;# 
  2617  086A                     	;# 
  2618  086B                     	;# 
  2619  086C                     	;# 
  2620  086D                     	;# 
  2621  086E                     	;# 
  2622  086F                     	;# 
  2623  0FE4                     	;# 
  2624  0FE5                     	;# 
  2625  0FE6                     	;# 
  2626  0FE7                     	;# 
  2627  0FE8                     	;# 
  2628  0FE9                     	;# 
  2629  0FEA                     	;# 
  2630  0FEB                     	;# 
  2631  0FED                     	;# 
  2632  0FEE                     	;# 
  2633  0FEF                     	;# 
  2634  0000                     	;# 
  2635  0001                     	;# 
  2636  0002                     	;# 
  2637  0003                     	;# 
  2638  0004                     	;# 
  2639  0005                     	;# 
  2640  0006                     	;# 
  2641  0007                     	;# 
  2642  0008                     	;# 
  2643  0009                     	;# 
  2644  000A                     	;# 
  2645  000B                     	;# 
  2646  000C                     	;# 
  2647  000D                     	;# 
  2648  000E                     	;# 
  2649  0010                     	;# 
  2650  0011                     	;# 
  2651  0012                     	;# 
  2652  0013                     	;# 
  2653  0014                     	;# 
  2654  0015                     	;# 
  2655  0016                     	;# 
  2656  0016                     	;# 
  2657  0017                     	;# 
  2658  0018                     	;# 
  2659  0019                     	;# 
  2660  001A                     	;# 
  2661  001B                     	;# 
  2662  001C                     	;# 
  2663  008C                     	;# 
  2664  008D                     	;# 
  2665  008E                     	;# 
  2666  0090                     	;# 
  2667  0091                     	;# 
  2668  0092                     	;# 
  2669  0093                     	;# 
  2670  0094                     	;# 
  2671  0095                     	;# 
  2672  0096                     	;# 
  2673  0097                     	;# 
  2674  0098                     	;# 
  2675  0099                     	;# 
  2676  009A                     	;# 
  2677  009B                     	;# 
  2678  009B                     	;# 
  2679  009C                     	;# 
  2680  009D                     	;# 
  2681  009E                     	;# 
  2682  009F                     	;# 
  2683  010C                     	;# 
  2684  010D                     	;# 
  2685  010E                     	;# 
  2686  0111                     	;# 
  2687  0112                     	;# 
  2688  0113                     	;# 
  2689  0114                     	;# 
  2690  0115                     	;# 
  2691  0116                     	;# 
  2692  0117                     	;# 
  2693  0118                     	;# 
  2694  0119                     	;# 
  2695  011A                     	;# 
  2696  011B                     	;# 
  2697  011C                     	;# 
  2698  011D                     	;# 
  2699  011D                     	;# 
  2700  011D                     	;# 
  2701  011E                     	;# 
  2702  011F                     	;# 
  2703  018C                     	;# 
  2704  018D                     	;# 
  2705  0191                     	;# 
  2706  0191                     	;# 
  2707  0192                     	;# 
  2708  0193                     	;# 
  2709  0193                     	;# 
  2710  0193                     	;# 
  2711  0194                     	;# 
  2712  0195                     	;# 
  2713  0196                     	;# 
  2714  0197                     	;# 
  2715  0199                     	;# 
  2716  0199                     	;# 
  2717  0199                     	;# 
  2718  019A                     	;# 
  2719  019A                     	;# 
  2720  019A                     	;# 
  2721  019B                     	;# 
  2722  019B                     	;# 
  2723  019B                     	;# 
  2724  019B                     	;# 
  2725  019B                     	;# 
  2726  019C                     	;# 
  2727  019C                     	;# 
  2728  019C                     	;# 
  2729  019D                     	;# 
  2730  019D                     	;# 
  2731  019D                     	;# 
  2732  019E                     	;# 
  2733  019E                     	;# 
  2734  019E                     	;# 
  2735  019F                     	;# 
  2736  019F                     	;# 
  2737  019F                     	;# 
  2738  019F                     	;# 
  2739  019F                     	;# 
  2740  020C                     	;# 
  2741  020D                     	;# 
  2742  020E                     	;# 
  2743  0210                     	;# 
  2744  0211                     	;# 
  2745  0211                     	;# 
  2746  0212                     	;# 
  2747  0212                     	;# 
  2748  0213                     	;# 
  2749  0213                     	;# 
  2750  0214                     	;# 
  2751  0214                     	;# 
  2752  0215                     	;# 
  2753  0215                     	;# 
  2754  0215                     	;# 
  2755  0215                     	;# 
  2756  0216                     	;# 
  2757  0216                     	;# 
  2758  0217                     	;# 
  2759  0217                     	;# 
  2760  028C                     	;# 
  2761  028D                     	;# 
  2762  028E                     	;# 
  2763  0291                     	;# 
  2764  0291                     	;# 
  2765  0292                     	;# 
  2766  0293                     	;# 
  2767  0298                     	;# 
  2768  0298                     	;# 
  2769  0299                     	;# 
  2770  029A                     	;# 
  2771  030C                     	;# 
  2772  030D                     	;# 
  2773  030E                     	;# 
  2774  0311                     	;# 
  2775  0311                     	;# 
  2776  0312                     	;# 
  2777  0313                     	;# 
  2778  038C                     	;# 
  2779  038D                     	;# 
  2780  038E                     	;# 
  2781  0390                     	;# 
  2782  0391                     	;# 
  2783  0392                     	;# 
  2784  0393                     	;# 
  2785  0394                     	;# 
  2786  0395                     	;# 
  2787  0396                     	;# 
  2788  0397                     	;# 
  2789  0398                     	;# 
  2790  0399                     	;# 
  2791  039D                     	;# 
  2792  039E                     	;# 
  2793  039F                     	;# 
  2794  0511                     	;# 
  2795  0513                     	;# 
  2796  051A                     	;# 
  2797  0811                     	;# 
  2798  0812                     	;# 
  2799  0813                     	;# 
  2800  0814                     	;# 
  2801  0815                     	;# 
  2802  0816                     	;# 
  2803  0817                     	;# 
  2804  0818                     	;# 
  2805  0819                     	;# 
  2806  081A                     	;# 
  2807  081B                     	;# 
  2808  081C                     	;# 
  2809  081D                     	;# 
  2810  081E                     	;# 
  2811  081F                     	;# 
  2812  0820                     	;# 
  2813  0821                     	;# 
  2814  0821                     	;# 
  2815  0822                     	;# 
  2816  0823                     	;# 
  2817  0823                     	;# 
  2818  0824                     	;# 
  2819  0825                     	;# 
  2820  0825                     	;# 
  2821  0826                     	;# 
  2822  0827                     	;# 
  2823  0827                     	;# 
  2824  0828                     	;# 
  2825  0829                     	;# 
  2826  082A                     	;# 
  2827  082B                     	;# 
  2828  082C                     	;# 
  2829  082D                     	;# 
  2830  082E                     	;# 
  2831  082F                     	;# 
  2832  0831                     	;# 
  2833  0832                     	;# 
  2834  0833                     	;# 
  2835  0834                     	;# 
  2836  0835                     	;# 
  2837  0836                     	;# 
  2838  0837                     	;# 
  2839  0838                     	;# 
  2840  0839                     	;# 
  2841  083A                     	;# 
  2842  083B                     	;# 
  2843  083C                     	;# 
  2844  083D                     	;# 
  2845  083E                     	;# 
  2846  083F                     	;# 
  2847  0840                     	;# 
  2848  0841                     	;# 
  2849  0841                     	;# 
  2850  0842                     	;# 
  2851  0843                     	;# 
  2852  0843                     	;# 
  2853  0844                     	;# 
  2854  0845                     	;# 
  2855  0845                     	;# 
  2856  0846                     	;# 
  2857  0847                     	;# 
  2858  0847                     	;# 
  2859  0848                     	;# 
  2860  0849                     	;# 
  2861  084A                     	;# 
  2862  084B                     	;# 
  2863  084C                     	;# 
  2864  084D                     	;# 
  2865  084E                     	;# 
  2866  084F                     	;# 
  2867  0851                     	;# 
  2868  0852                     	;# 
  2869  0853                     	;# 
  2870  0854                     	;# 
  2871  0855                     	;# 
  2872  0856                     	;# 
  2873  0857                     	;# 
  2874  0858                     	;# 
  2875  0859                     	;# 
  2876  085A                     	;# 
  2877  085B                     	;# 
  2878  085C                     	;# 
  2879  085D                     	;# 
  2880  085E                     	;# 
  2881  085F                     	;# 
  2882  0860                     	;# 
  2883  0861                     	;# 
  2884  0861                     	;# 
  2885  0862                     	;# 
  2886  0863                     	;# 
  2887  0863                     	;# 
  2888  0864                     	;# 
  2889  0865                     	;# 
  2890  0865                     	;# 
  2891  0866                     	;# 
  2892  0867                     	;# 
  2893  0867                     	;# 
  2894  0868                     	;# 
  2895  0869                     	;# 
  2896  086A                     	;# 
  2897  086B                     	;# 
  2898  086C                     	;# 
  2899  086D                     	;# 
  2900  086E                     	;# 
  2901  086F                     	;# 
  2902  0FE4                     	;# 
  2903  0FE5                     	;# 
  2904  0FE6                     	;# 
  2905  0FE7                     	;# 
  2906  0FE8                     	;# 
  2907  0FE9                     	;# 
  2908  0FEA                     	;# 
  2909  0FEB                     	;# 
  2910  0FED                     	;# 
  2911  0FEE                     	;# 
  2912  0FEF                     	;# 
  2913  0000                     	;# 
  2914  0001                     	;# 
  2915  0002                     	;# 
  2916  0003                     	;# 
  2917  0004                     	;# 
  2918  0005                     	;# 
  2919  0006                     	;# 
  2920  0007                     	;# 
  2921  0008                     	;# 
  2922  0009                     	;# 
  2923  000A                     	;# 
  2924  000B                     	;# 
  2925  000C                     	;# 
  2926  000D                     	;# 
  2927  000E                     	;# 
  2928  0010                     	;# 
  2929  0011                     	;# 
  2930  0012                     	;# 
  2931  0013                     	;# 
  2932  0014                     	;# 
  2933  0015                     	;# 
  2934  0016                     	;# 
  2935  0016                     	;# 
  2936  0017                     	;# 
  2937  0018                     	;# 
  2938  0019                     	;# 
  2939  001A                     	;# 
  2940  001B                     	;# 
  2941  001C                     	;# 
  2942  008C                     	;# 
  2943  008D                     	;# 
  2944  008E                     	;# 
  2945  0090                     	;# 
  2946  0091                     	;# 
  2947  0092                     	;# 
  2948  0093                     	;# 
  2949  0094                     	;# 
  2950  0095                     	;# 
  2951  0096                     	;# 
  2952  0097                     	;# 
  2953  0098                     	;# 
  2954  0099                     	;# 
  2955  009A                     	;# 
  2956  009B                     	;# 
  2957  009B                     	;# 
  2958  009C                     	;# 
  2959  009D                     	;# 
  2960  009E                     	;# 
  2961  009F                     	;# 
  2962  010C                     	;# 
  2963  010D                     	;# 
  2964  010E                     	;# 
  2965  0111                     	;# 
  2966  0112                     	;# 
  2967  0113                     	;# 
  2968  0114                     	;# 
  2969  0115                     	;# 
  2970  0116                     	;# 
  2971  0117                     	;# 
  2972  0118                     	;# 
  2973  0119                     	;# 
  2974  011A                     	;# 
  2975  011B                     	;# 
  2976  011C                     	;# 
  2977  011D                     	;# 
  2978  011D                     	;# 
  2979  011D                     	;# 
  2980  011E                     	;# 
  2981  011F                     	;# 
  2982  018C                     	;# 
  2983  018D                     	;# 
  2984  0191                     	;# 
  2985  0191                     	;# 
  2986  0192                     	;# 
  2987  0193                     	;# 
  2988  0193                     	;# 
  2989  0193                     	;# 
  2990  0194                     	;# 
  2991  0195                     	;# 
  2992  0196                     	;# 
  2993  0197                     	;# 
  2994  0199                     	;# 
  2995  0199                     	;# 
  2996  0199                     	;# 
  2997  019A                     	;# 
  2998  019A                     	;# 
  2999  019A                     	;# 
  3000  019B                     	;# 
  3001  019B                     	;# 
  3002  019B                     	;# 
  3003  019B                     	;# 
  3004  019B                     	;# 
  3005  019C                     	;# 
  3006  019C                     	;# 
  3007  019C                     	;# 
  3008  019D                     	;# 
  3009  019D                     	;# 
  3010  019D                     	;# 
  3011  019E                     	;# 
  3012  019E                     	;# 
  3013  019E                     	;# 
  3014  019F                     	;# 
  3015  019F                     	;# 
  3016  019F                     	;# 
  3017  019F                     	;# 
  3018  019F                     	;# 
  3019  020C                     	;# 
  3020  020D                     	;# 
  3021  020E                     	;# 
  3022  0210                     	;# 
  3023  0211                     	;# 
  3024  0211                     	;# 
  3025  0212                     	;# 
  3026  0212                     	;# 
  3027  0213                     	;# 
  3028  0213                     	;# 
  3029  0214                     	;# 
  3030  0214                     	;# 
  3031  0215                     	;# 
  3032  0215                     	;# 
  3033  0215                     	;# 
  3034  0215                     	;# 
  3035  0216                     	;# 
  3036  0216                     	;# 
  3037  0217                     	;# 
  3038  0217                     	;# 
  3039  028C                     	;# 
  3040  028D                     	;# 
  3041  028E                     	;# 
  3042  0291                     	;# 
  3043  0291                     	;# 
  3044  0292                     	;# 
  3045  0293                     	;# 
  3046  0298                     	;# 
  3047  0298                     	;# 
  3048  0299                     	;# 
  3049  029A                     	;# 
  3050  030C                     	;# 
  3051  030D                     	;# 
  3052  030E                     	;# 
  3053  0311                     	;# 
  3054  0311                     	;# 
  3055  0312                     	;# 
  3056  0313                     	;# 
  3057  038C                     	;# 
  3058  038D                     	;# 
  3059  038E                     	;# 
  3060  0390                     	;# 
  3061  0391                     	;# 
  3062  0392                     	;# 
  3063  0393                     	;# 
  3064  0394                     	;# 
  3065  0395                     	;# 
  3066  0396                     	;# 
  3067  0397                     	;# 
  3068  0398                     	;# 
  3069  0399                     	;# 
  3070  039D                     	;# 
  3071  039E                     	;# 
  3072  039F                     	;# 
  3073  0511                     	;# 
  3074  0513                     	;# 
  3075  051A                     	;# 
  3076  0811                     	;# 
  3077  0812                     	;# 
  3078  0813                     	;# 
  3079  0814                     	;# 
  3080  0815                     	;# 
  3081  0816                     	;# 
  3082  0817                     	;# 
  3083  0818                     	;# 
  3084  0819                     	;# 
  3085  081A                     	;# 
  3086  081B                     	;# 
  3087  081C                     	;# 
  3088  081D                     	;# 
  3089  081E                     	;# 
  3090  081F                     	;# 
  3091  0820                     	;# 
  3092  0821                     	;# 
  3093  0821                     	;# 
  3094  0822                     	;# 
  3095  0823                     	;# 
  3096  0823                     	;# 
  3097  0824                     	;# 
  3098  0825                     	;# 
  3099  0825                     	;# 
  3100  0826                     	;# 
  3101  0827                     	;# 
  3102  0827                     	;# 
  3103  0828                     	;# 
  3104  0829                     	;# 
  3105  082A                     	;# 
  3106  082B                     	;# 
  3107  082C                     	;# 
  3108  082D                     	;# 
  3109  082E                     	;# 
  3110  082F                     	;# 
  3111  0831                     	;# 
  3112  0832                     	;# 
  3113  0833                     	;# 
  3114  0834                     	;# 
  3115  0835                     	;# 
  3116  0836                     	;# 
  3117  0837                     	;# 
  3118  0838                     	;# 
  3119  0839                     	;# 
  3120  083A                     	;# 
  3121  083B                     	;# 
  3122  083C                     	;# 
  3123  083D                     	;# 
  3124  083E                     	;# 
  3125  083F                     	;# 
  3126  0840                     	;# 
  3127  0841                     	;# 
  3128  0841                     	;# 
  3129  0842                     	;# 
  3130  0843                     	;# 
  3131  0843                     	;# 
  3132  0844                     	;# 
  3133  0845                     	;# 
  3134  0845                     	;# 
  3135  0846                     	;# 
  3136  0847                     	;# 
  3137  0847                     	;# 
  3138  0848                     	;# 
  3139  0849                     	;# 
  3140  084A                     	;# 
  3141  084B                     	;# 
  3142  084C                     	;# 
  3143  084D                     	;# 
  3144  084E                     	;# 
  3145  084F                     	;# 
  3146  0851                     	;# 
  3147  0852                     	;# 
  3148  0853                     	;# 
  3149  0854                     	;# 
  3150  0855                     	;# 
  3151  0856                     	;# 
  3152  0857                     	;# 
  3153  0858                     	;# 
  3154  0859                     	;# 
  3155  085A                     	;# 
  3156  085B                     	;# 
  3157  085C                     	;# 
  3158  085D                     	;# 
  3159  085E                     	;# 
  3160  085F                     	;# 
  3161  0860                     	;# 
  3162  0861                     	;# 
  3163  0861                     	;# 
  3164  0862                     	;# 
  3165  0863                     	;# 
  3166  0863                     	;# 
  3167  0864                     	;# 
  3168  0865                     	;# 
  3169  0865                     	;# 
  3170  0866                     	;# 
  3171  0867                     	;# 
  3172  0867                     	;# 
  3173  0868                     	;# 
  3174  0869                     	;# 
  3175  086A                     	;# 
  3176  086B                     	;# 
  3177  086C                     	;# 
  3178  086D                     	;# 
  3179  086E                     	;# 
  3180  086F                     	;# 
  3181  0FE4                     	;# 
  3182  0FE5                     	;# 
  3183  0FE6                     	;# 
  3184  0FE7                     	;# 
  3185  0FE8                     	;# 
  3186  0FE9                     	;# 
  3187  0FEA                     	;# 
  3188  0FEB                     	;# 
  3189  0FED                     	;# 
  3190  0FEE                     	;# 
  3191  0FEF                     	;# 
  3192                           
  3193                           	psect	idataBANK3
  3194  0850                     __pidataBANK3:	
  3195                           
  3196                           ;initializer for stoa@F1139
  3197  0850  3428               	retlw	40
  3198  0851  346E               	retlw	110
  3199  0852  3475               	retlw	117
  3200  0853  346C               	retlw	108
  3201  0854  346C               	retlw	108
  3202  0855  3429               	retlw	41
  3203  0856  3400               	retlw	0
  3204                           
  3205                           	psect	stringtext1
  3206  1000                     __pstringtext1:	
  3207  1000                     _segmcode:	
  3208  1000  3408               	retlw	8
  3209  1001  347C               	retlw	124
  3210  1002  3411               	retlw	17
  3211  1003  3430               	retlw	48
  3212  1004  3464               	retlw	100
  3213  1005  3422               	retlw	34
  3214  1006  3402               	retlw	2
  3215  1007  3478               	retlw	120
  3216  1008  3400               	retlw	0
  3217  1009  3420               	retlw	32
  3218  100A  34FF               	retlw	255
  3219  100B                     __end_of_segmcode:	
  3220  000C                     _PORTAbits	set	12
  3221  0012                     _PIR2bits	set	18
  3222  0015                     _TMR0	set	21
  3223  0018                     _T1CONbits	set	24
  3224  0016                     _TMR1L	set	22
  3225  0017                     _TMR1H	set	23
  3226  0011                     _PIR1bits	set	17
  3227  000E                     _PORTCbits	set	14
  3228  000B                     _INTCONbits	set	11
  3229  005E                     _PEIE	set	94
  3230  005F                     _GIE	set	95
  3231  0074                     _RC4	set	116
  3232  0092                     _PIE2bits	set	146
  3233  0091                     _PIE1bits	set	145
  3234  008E                     _TRISCbits	set	142
  3235  008E                     _TRISC	set	142
  3236  008D                     _TRISB	set	141
  3237  008C                     _TRISA	set	140
  3238  0095                     _OPTION_REGbits	set	149
  3239  0099                     _OSCCONbits	set	153
  3240  048D                     _RCIE	set	1165
  3241  0473                     _TRISC3	set	1139
  3242  0474                     _TRISC4	set	1140
  3243  048C                     _TXIE	set	1164
  3244  010D                     _LATBbits	set	269
  3245  010E                     _LATC	set	270
  3246  010D                     _LATB	set	269
  3247  010C                     _LATA	set	268
  3248  08E9                     _RXSEL	set	2281
  3249  08EA                     _TXSEL	set	2282
  3250  0874                     _LATC4	set	2164
  3251  0873                     _LATC3	set	2163
  3252  0199                     _RCREG	set	409
  3253  019B                     _SPBRGL	set	411
  3254  019C                     _SPBRGH	set	412
  3255  019A                     _TXREG	set	410
  3256  019E                     _TXSTAbits	set	414
  3257  0CEC                     _CREN	set	3308
  3258  0CFB                     _BRG16	set	3323
  3259  0CF2                     _BRGH	set	3314
  3260  0CEF                     _SPEN	set	3311
  3261  0CF4                     _SYNC	set	3316
  3262  0CF5                     _TXEN	set	3317
  3263  020E                     _WPUCbits	set	526
  3264  020E                     _WPUC	set	526
  3265  020D                     _WPUB	set	525
  3266  020C                     _WPUA	set	524
  3267  1073                     _WPUC3	set	4211
  3268  1074                     _WPUC4	set	4212
  3269  029A                     _CCP2CONbits	set	666
  3270  0298                     _CCPR2L	set	664
  3271  0299                     _CCPR2H	set	665
  3272  1474                     _ODCONC4	set	5236
  3273  1473                     _ODCONC3	set	5235
  3274  0399                     _IOCCFbits	set	921
  3275  0397                     _IOCCPbits	set	919
  3276  0398                     _IOCCN	set	920
  3277  0397                     _IOCCP	set	919
  3278  0395                     _IOCBN	set	917
  3279  0394                     _IOCBP	set	916
  3280  0392                     _IOCAN	set	914
  3281  0391                     _IOCAP	set	913
  3282  100B                     STR_1:	
  3283  100B  345B               	retlw	91	;'['
  3284  100C  3425               	retlw	37	;'%'
  3285  100D  3473               	retlw	115	;'s'
  3286  100E  343A               	retlw	58	;':'
  3287  100F  3425               	retlw	37	;'%'
  3288  1010  3464               	retlw	100	;'d'
  3289  1011  3420               	retlw	32	;' '
  3290  1012  3425               	retlw	37	;'%'
  3291  1013  3473               	retlw	115	;'s'
  3292  1014  345D               	retlw	93	;']'
  3293  1015  3420               	retlw	32	;' '
  3294  1016  3450               	retlw	80	;'P'
  3295  1017  344B               	retlw	75	;'K'
  3296  1018  3445               	retlw	69	;'E'
  3297  1019  3459               	retlw	89	;'Y'
  3298  101A  340D               	retlw	13
  3299  101B  340A               	retlw	10
  3300  101C  340A               	retlw	10
  3301  101D  340D               	retlw	13
  3302  101E  3400               	retlw	0
  3303                           
  3304                           	psect	stringtext2
  3305  101F                     __pstringtext2:	
  3306  101F                     STR_2:	
  3307  101F  346D               	retlw	109	;'m'
  3308  1020  3461               	retlw	97	;'a'
  3309  1021  3469               	retlw	105	;'i'
  3310  1022  346E               	retlw	110	;'n'
  3311  1023  342E               	retlw	46	;'.'
  3312  1024  3463               	retlw	99	;'c'
  3313  1025  3400               	retlw	0
  3314                           
  3315                           	psect	stringtext3
  3316  1026                     __pstringtext3:	
  3317  1026                     STR_3:	
  3318  1026  3449               	retlw	73	;'I'
  3319  1027  3453               	retlw	83	;'S'
  3320  1028  3452               	retlw	82	;'R'
  3321  1029  3400               	retlw	0
  3322                           
  3323                           	psect	stringtext4
  3324  0000                     __pstringtext4:	
  3325                           
  3326                           ; #config settings
  3327  0000                     
  3328                           	psect	cinit
  3329  00A5                     start_initialization:	
  3330  00A5                     __initialization:	
  3331                           
  3332                           ; Initialize objects allocated to BANK3
  3333  00A5  3050               	movlw	low __pidataBANK3
  3334  00A6  0084               	movwf	4
  3335  00A7  3088               	movlw	(high __pidataBANK3)| (0+128)
  3336  00A8  0085               	movwf	5
  3337  00A9  30E2               	movlw	low __pdataBANK3
  3338  00AA  0086               	movwf	6
  3339  00AB  3001               	movlw	high __pdataBANK3
  3340  00AC  0087               	movwf	7
  3341  00AD  3007               	movlw	7
  3342  00AE  3188  204A  3180   	fcall	init_ram
  3343                           
  3344                           ; Clear objects allocated to BANK1
  3345  00B1  0021               	movlb	1	; select bank1
  3346  00B2  01EC               	clrf	__pbssBANK1& (0+127)
  3347  00B3  01ED               	clrf	(__pbssBANK1+1)& (0+127)
  3348  00B4  01EE               	clrf	(__pbssBANK1+2)& (0+127)
  3349  00B5  01EF               	clrf	(__pbssBANK1+3)& (0+127)
  3350                           
  3351                           ; Clear objects allocated to BANK2
  3352  00B6  3060               	movlw	low __pbssBANK2
  3353  00B7  0084               	movwf	4
  3354  00B8  3001               	movlw	high __pbssBANK2
  3355  00B9  0085               	movwf	5
  3356  00BA  300F               	movlw	15
  3357  00BB  3188  2044  3180   	fcall	clear_ram0
  3358                           
  3359                           ; Clear objects allocated to BANK3
  3360  00BE  30A0               	movlw	low __pbssBANK3
  3361  00BF  0084               	movwf	4
  3362  00C0  3001               	movlw	high __pbssBANK3
  3363  00C1  0085               	movwf	5
  3364  00C2  3024               	movlw	36
  3365  00C3  3188  2044  3180   	fcall	clear_ram0
  3366                           
  3367                           ; Clear objects allocated to BANK4
  3368  00C6  3020               	movlw	low __pbssBANK4
  3369  00C7  0084               	movwf	4
  3370  00C8  3002               	movlw	high __pbssBANK4
  3371  00C9  0085               	movwf	5
  3372  00CA  3027               	movlw	39
  3373  00CB  3188  2044  3180   	fcall	clear_ram0
  3374                           
  3375                           ; Clear objects allocated to BANK5
  3376  00CE  30A0               	movlw	low __pbssBANK5
  3377  00CF  0084               	movwf	4
  3378  00D0  3002               	movlw	high __pbssBANK5
  3379  00D1  0085               	movwf	5
  3380  00D2  3040               	movlw	64
  3381  00D3  3188  2044  3180   	fcall	clear_ram0
  3382                           
  3383                           ; Clear objects allocated to BANK6
  3384  00D6  3020               	movlw	low __pbssBANK6
  3385  00D7  0084               	movwf	4
  3386  00D8  3003               	movlw	high __pbssBANK6
  3387  00D9  0085               	movwf	5
  3388  00DA  3040               	movlw	64
  3389  00DB  3188  2044         	fcall	clear_ram0
  3390  00DD                     end_of_initialization:	
  3391                           ;End of C runtime variable initialization code
  3392                           
  3393  00DD                     __end_of__initialization:	
  3394  00DD  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  3395  00DE  0020               	movlb	0
  3396  00DF  3189  299C         	ljmp	_main	;jump to C main() function
  3397                           
  3398                           	psect	bssBANK1
  3399  00EC                     __pbssBANK1:	
  3400  00EC                     _prec:	
  3401  00EC                     	ds	2
  3402  00EE                     _flags:	
  3403  00EE                     	ds	2
  3404                           
  3405                           	psect	bssBANK2
  3406  0160                     __pbssBANK2:	
  3407  0160                     _width:	
  3408  0160                     	ds	2
  3409  0162                     capture_handdle@last_cnt:	
  3410  0162                     	ds	2
  3411  0164                     tmp_change@key_time_cnt:	
  3412  0164                     	ds	2
  3413  0166                     led_Blink@State:	
  3414  0166                     	ds	1
  3415  0167                     _flg_rc:	
  3416  0167                     	ds	1
  3417  0168                     _TX_en:	
  3418  0168                     	ds	1
  3419  0169                     _RX_data:	
  3420  0169                     	ds	1
  3421  016A                     _TX_data:	
  3422  016A                     	ds	1
  3423  016B                     _temp_l:	
  3424  016B                     	ds	1
  3425  016C                     _temp_h:	
  3426  016C                     	ds	1
  3427  016D                     tmp_change@history_key:	
  3428  016D                     	ds	1
  3429  016E                     _ENUM:	
  3430  016E                     	ds	1
  3431                           
  3432                           	psect	bssBANK3
  3433  01A0                     __pbssBANK3:	
  3434  01A0                     _nout:	
  3435  01A0                     	ds	2
  3436  01A2                     _Temp:	
  3437  01A2                     	ds	2
  3438  01A4                     _dbuf:	
  3439  01A4                     	ds	32
  3440                           
  3441                           	psect	dataBANK3
  3442  01E2                     __pdataBANK3:	
  3443  01E2                     stoa@F1139:	
  3444  01E2                     	ds	7
  3445                           
  3446                           	psect	bssBANK4
  3447  0220                     __pbssBANK4:	
  3448  0220                     _g_data:	
  3449  0220                     	ds	39
  3450                           
  3451                           	psect	bssBANK5
  3452  02A0                     __pbssBANK5:	
  3453  02A0                     ISR@F5516:	
  3454  02A0                     	ds	64
  3455                           
  3456                           	psect	bssBANK6
  3457  0320                     __pbssBANK6:	
  3458  0320                     ISR@F5519:	
  3459  0320                     	ds	64
  3460                           
  3461                           	psect	inittext
  3462  084A                     init_ram:	
  3463  084A  00FE               	movwf	126
  3464  084B                     initloop:	
  3465  084B  0012               	moviw fsr0++
  3466  084C  001E               	movwi fsr1++
  3467  084D  0BFE               	decfsz	126,f
  3468  084E  284B               	goto	initloop
  3469  084F  3400               	retlw	0
  3470                           
  3471                           	psect	clrtext
  3472  0844                     clear_ram0:	
  3473                           ;	Called with FSR0 containing the base address, and
  3474                           ;	WREG with the size to clear
  3475                           
  3476  0844  0064               	clrwdt	;clear the watchdog before getting into this loop
  3477  0845                     clrloop0:	
  3478  0845  0180               	clrf	0	;clear RAM location pointed to by FSR
  3479  0846  3101               	addfsr 0,1
  3480  0847  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  3481  0848  2845               	goto	clrloop0	;have we reached the end yet?
  3482  0849  3400               	retlw	0	;all done for this memory range, return
  3483                           
  3484                           	psect	cstackBANK3
  3485  01C4                     __pcstackBANK3:	
  3486  01C4                     ??_data_getdata:	
  3487  01C4                     ??_display_set:	
  3488                           ; 1 bytes @ 0x0
  3489                           
  3490  01C4                     ??_timer_Timer0Start:	
  3491                           ; 1 bytes @ 0x0
  3492                           
  3493  01C4                     ??_timer_Timer0Reset:	
  3494                           ; 1 bytes @ 0x0
  3495                           
  3496  01C4                     ??_capture_Set:	
  3497                           ; 1 bytes @ 0x0
  3498                           
  3499  01C4                     ??_timer_Timer0Init:	
  3500                           ; 1 bytes @ 0x0
  3501                           
  3502  01C4                     ??_timer_Timer1Init:	
  3503                           ; 1 bytes @ 0x0
  3504                           
  3505  01C4                     ??_timer_Timer1Start:	
  3506                           ; 1 bytes @ 0x0
  3507                           
  3508  01C4                     ??_uart_init:	
  3509                           ; 1 bytes @ 0x0
  3510                           
  3511  01C4                     ??_led_SetState:	
  3512                           ; 1 bytes @ 0x0
  3513                           
  3514  01C4                     ??_capture_setEdge:	
  3515                           ; 1 bytes @ 0x0
  3516                           
  3517  01C4                     ??_display_control595_delay:	
  3518                           ; 1 bytes @ 0x0
  3519                           
  3520  01C4                     ?___awdiv:	
  3521                           ; 1 bytes @ 0x0
  3522                           
  3523  01C4                     ?___awmod:	
  3524                           ; 2 bytes @ 0x0
  3525                           
  3526  01C4                     capture_setEdge@edge:	
  3527                           ; 2 bytes @ 0x0
  3528                           
  3529  01C4                     capture_Set@isON:	
  3530                           ; 1 bytes @ 0x0
  3531                           
  3532  01C4                     led_SetState@isOn:	
  3533                           ; 1 bytes @ 0x0
  3534                           
  3535  01C4                     display_set@ison:	
  3536                           ; 1 bytes @ 0x0
  3537                           
  3538  01C4                     ___awdiv@divisor:	
  3539                           ; 1 bytes @ 0x0
  3540                           
  3541  01C4                     ___awmod@divisor:	
  3542                           ; 2 bytes @ 0x0
  3543                           
  3544                           
  3545                           ; 2 bytes @ 0x0
  3546  01C4                     	ds	1
  3547  01C5                     ??_capture_init:	
  3548  01C5                     display_control595_delay@times:	
  3549                           ; 1 bytes @ 0x1
  3550                           
  3551                           
  3552                           ; 1 bytes @ 0x1
  3553  01C5                     	ds	1
  3554  01C6                     ??_display_write_byte:	
  3555  01C6                     ___awdiv@dividend:	
  3556                           ; 1 bytes @ 0x2
  3557                           
  3558  01C6                     ___awmod@dividend:	
  3559                           ; 2 bytes @ 0x2
  3560                           
  3561                           
  3562                           ; 2 bytes @ 0x2
  3563  01C6                     	ds	2
  3564  01C8                     ??___awdiv:	
  3565  01C8                     ??___awmod:	
  3566                           ; 1 bytes @ 0x4
  3567                           
  3568  01C8                     display_write_byte@data:	
  3569                           ; 1 bytes @ 0x4
  3570                           
  3571                           
  3572                           ; 1 bytes @ 0x4
  3573  01C8                     	ds	1
  3574  01C9                     display_write_byte@i:	
  3575  01C9                     ___awdiv@counter:	
  3576                           ; 1 bytes @ 0x5
  3577                           
  3578  01C9                     ___awmod@counter:	
  3579                           ; 1 bytes @ 0x5
  3580                           
  3581                           
  3582                           ; 1 bytes @ 0x5
  3583  01C9                     	ds	1
  3584  01CA                     ___awdiv@sign:	
  3585  01CA                     ___awmod@sign:	
  3586                           ; 1 bytes @ 0x6
  3587                           
  3588                           
  3589                           ; 1 bytes @ 0x6
  3590  01CA                     	ds	1
  3591  01CB                     ___awdiv@quotient:	
  3592                           
  3593                           ; 2 bytes @ 0x7
  3594  01CB                     	ds	2
  3595  01CD                     ?_display_write_once:	
  3596  01CD                     display_write_once@HR:	
  3597                           ; 1 bytes @ 0x9
  3598                           
  3599                           
  3600                           ; 1 bytes @ 0x9
  3601  01CD                     	ds	1
  3602  01CE                     display_write_once@ML:	
  3603                           
  3604                           ; 1 bytes @ 0xA
  3605  01CE                     	ds	1
  3606  01CF                     display_write_once@MR:	
  3607                           
  3608                           ; 1 bytes @ 0xB
  3609  01CF                     	ds	1
  3610  01D0                     ??_display_write_once:	
  3611  01D0                     display_write_once@HL:	
  3612                           ; 1 bytes @ 0xC
  3613                           
  3614                           
  3615                           ; 1 bytes @ 0xC
  3616  01D0                     	ds	1
  3617  01D1                     ??_display_update:	
  3618                           
  3619                           ; 1 bytes @ 0xD
  3620  01D1                     	ds	9
  3621  01DA                     _display_update$1550:	
  3622                           
  3623                           ; 2 bytes @ 0x16
  3624  01DA                     	ds	2
  3625  01DC                     display_update@pdata:	
  3626                           
  3627                           ; 1 bytes @ 0x18
  3628  01DC                     	ds	1
  3629  01DD                     ??_init_env:	
  3630                           
  3631                           ; 1 bytes @ 0x19
  3632  01DD                     	ds	2
  3633  01DF                     init_env@i:	
  3634                           
  3635                           ; 2 bytes @ 0x1B
  3636  01DF                     	ds	2
  3637  01E1                     init_env@pdata:	
  3638                           
  3639                           ; 1 bytes @ 0x1D
  3640  01E1                     	ds	1
  3641  01E2                     ??_main:	
  3642                           
  3643                           	psect	cstackBANK2
  3644  0120                     __pcstackBANK2:	
  3645                           ; 1 bytes @ 0x1E
  3646                           
  3647  0120                     ISR@send:	
  3648                           
  3649                           ; 64 bytes @ 0x0
  3650  0120                     	ds	64
  3651                           
  3652                           	psect	cstackBANK1
  3653  00A0                     __pcstackBANK1:	
  3654  00A0                     	ds	2
  3655  00A2                     sprintf@ap:	
  3656                           
  3657                           ; 1 bytes @ 0x2
  3658  00A2                     	ds	1
  3659  00A3                     sprintf@s:	
  3660                           
  3661                           ; 1 bytes @ 0x3
  3662  00A3                     	ds	1
  3663  00A4                     sprintf@f:	
  3664                           
  3665                           ; 5 bytes @ 0x4
  3666  00A4                     	ds	5
  3667  00A9                     ??_ISR:	
  3668                           
  3669                           ; 1 bytes @ 0x9
  3670  00A9                     	ds	2
  3671  00AB                     ISR@buf:	
  3672                           
  3673                           ; 64 bytes @ 0xB
  3674  00AB                     	ds	64
  3675  00EB                     ISR@i:	
  3676                           
  3677                           ; 1 bytes @ 0x4B
  3678  00EB                     	ds	1
  3679                           
  3680                           	psect	cstackCOMMON
  3681  0070                     __pcstackCOMMON:	
  3682  0070                     ?_data_getdata:	
  3683  0070                     ?_display_update:	
  3684                           ; 1 bytes @ 0x0
  3685                           
  3686  0070                     ?_display_set:	
  3687                           ; 1 bytes @ 0x0
  3688                           
  3689  0070                     ?_timer_Timer0Start:	
  3690                           ; 1 bytes @ 0x0
  3691                           
  3692  0070                     ?_timer_Timer0Reset:	
  3693                           ; 1 bytes @ 0x0
  3694                           
  3695  0070                     ?_timer_IsTimer1Itrpt:	
  3696                           ; 1 bytes @ 0x0
  3697                           
  3698  0070                     ??_timer_IsTimer1Itrpt:	
  3699                           ; 1 bytes @ 0x0
  3700                           
  3701  0070                     ?_timer_Timer1ClrIntrpt:	
  3702                           ; 1 bytes @ 0x0
  3703                           
  3704  0070                     ??_timer_Timer1ClrIntrpt:	
  3705                           ; 1 bytes @ 0x0
  3706                           
  3707  0070                     ?_timer_IsTimer0Itrpt:	
  3708                           ; 1 bytes @ 0x0
  3709                           
  3710  0070                     ??_timer_IsTimer0Itrpt:	
  3711                           ; 1 bytes @ 0x0
  3712                           
  3713  0070                     ?_key_isPressed:	
  3714                           ; 1 bytes @ 0x0
  3715                           
  3716  0070                     ??_key_isPressed:	
  3717                           ; 1 bytes @ 0x0
  3718                           
  3719  0070                     ?_strcpy:	
  3720                           ; 1 bytes @ 0x0
  3721                           
  3722  0070                     ?_capture_Set:	
  3723                           ; 1 bytes @ 0x0
  3724                           
  3725  0070                     ?_capture_IsEnable:	
  3726                           ; 1 bytes @ 0x0
  3727                           
  3728  0070                     ??_capture_IsEnable:	
  3729                           ; 1 bytes @ 0x0
  3730                           
  3731  0070                     ?_capture_IsIntrpt:	
  3732                           ; 1 bytes @ 0x0
  3733                           
  3734  0070                     ??_capture_IsIntrpt:	
  3735                           ; 1 bytes @ 0x0
  3736                           
  3737  0070                     ?_capture_clrIntrpt:	
  3738                           ; 1 bytes @ 0x0
  3739                           
  3740  0070                     ??_capture_clrIntrpt:	
  3741                           ; 1 bytes @ 0x0
  3742                           
  3743  0070                     ?_timer_Timer0Init:	
  3744                           ; 1 bytes @ 0x0
  3745                           
  3746  0070                     ?_timer_Timer1Init:	
  3747                           ; 1 bytes @ 0x0
  3748                           
  3749  0070                     ?_timer_Timer1Start:	
  3750                           ; 1 bytes @ 0x0
  3751                           
  3752  0070                     ?_capture_init:	
  3753                           ; 1 bytes @ 0x0
  3754                           
  3755  0070                     ?_uart_init:	
  3756                           ; 1 bytes @ 0x0
  3757                           
  3758  0070                     ?_led_SetState:	
  3759                           ; 1 bytes @ 0x0
  3760                           
  3761  0070                     ?_key_checkPressed:	
  3762                           ; 1 bytes @ 0x0
  3763                           
  3764  0070                     ?_update_time:	
  3765                           ; 1 bytes @ 0x0
  3766                           
  3767  0070                     ?_capture_IsNegEdge:	
  3768                           ; 1 bytes @ 0x0
  3769                           
  3770  0070                     ??_capture_IsNegEdge:	
  3771                           ; 1 bytes @ 0x0
  3772                           
  3773  0070                     ?_putch:	
  3774                           ; 1 bytes @ 0x0
  3775                           
  3776  0070                     ??_putch:	
  3777                           ; 1 bytes @ 0x0
  3778                           
  3779  0070                     ?_init_env:	
  3780                           ; 1 bytes @ 0x0
  3781                           
  3782  0070                     ?_ISR:	
  3783                           ; 1 bytes @ 0x0
  3784                           
  3785  0070                     ?_main:	
  3786                           ; 1 bytes @ 0x0
  3787                           
  3788  0070                     ?_bpc_Cnt2Qua:	
  3789                           ; 1 bytes @ 0x0
  3790                           
  3791  0070                     ?_led_Blink:	
  3792                           ; 1 bytes @ 0x0
  3793                           
  3794  0070                     ?_display_control595_delay:	
  3795                           ; 1 bytes @ 0x0
  3796                           
  3797  0070                     ?_display_write_byte:	
  3798                           ; 1 bytes @ 0x0
  3799                           
  3800  0070                     ??___aodiv:	
  3801                           ; 1 bytes @ 0x0
  3802                           
  3803  0070                     ??___aomod:	
  3804                           ; 1 bytes @ 0x0
  3805                           
  3806  0070                     ?i1_timer_Timer0Reset:	
  3807                           ; 1 bytes @ 0x0
  3808                           
  3809  0070                     ??i1_timer_Timer0Reset:	
  3810                           ; 1 bytes @ 0x0
  3811                           
  3812  0070                     ?i1_data_getdata:	
  3813                           ; 1 bytes @ 0x0
  3814                           
  3815  0070                     ??i1_data_getdata:	
  3816                           ; 1 bytes @ 0x0
  3817                           
  3818  0070                     ??i1_capture_setEdge:	
  3819                           ; 1 bytes @ 0x0
  3820                           
  3821  0070                     ?i1_capture_Set:	
  3822                           ; 1 bytes @ 0x0
  3823                           
  3824  0070                     ??i1_capture_Set:	
  3825                           ; 1 bytes @ 0x0
  3826                           
  3827  0070                     ?i1_led_SetState:	
  3828                           ; 1 bytes @ 0x0
  3829                           
  3830  0070                     ??i1_led_SetState:	
  3831                           ; 1 bytes @ 0x0
  3832                           
  3833  0070                     ?i1_display_control595_delay:	
  3834                           ; 1 bytes @ 0x0
  3835                           
  3836  0070                     ??i1_display_control595_delay:	
  3837                           ; 1 bytes @ 0x0
  3838                           
  3839  0070                     ?i1_display_write_byte:	
  3840                           ; 1 bytes @ 0x0
  3841                           
  3842  0070                     ?i1_display_update:	
  3843                           ; 1 bytes @ 0x0
  3844                           
  3845  0070                     ?_timer_Timer0Handdle:	
  3846                           ; 1 bytes @ 0x0
  3847                           
  3848  0070                     ?_strlen:	
  3849                           ; 2 bytes @ 0x0
  3850                           
  3851  0070                     ?_capture_handdle:	
  3852                           ; 2 bytes @ 0x0
  3853                           
  3854  0070                     ?_bpc_proc:	
  3855                           ; 2 bytes @ 0x0
  3856                           
  3857  0070                     ?_fputc:	
  3858                           ; 2 bytes @ 0x0
  3859                           
  3860  0070                     ?_cnt_abs:	
  3861                           ; 2 bytes @ 0x0
  3862                           
  3863  0070                     ?_check_err:	
  3864                           ; 2 bytes @ 0x0
  3865                           
  3866  0070                     ?_capture_setEdge:	
  3867                           ; 2 bytes @ 0x0
  3868                           
  3869  0070                     ?i1_capture_setEdge:	
  3870                           ; 2 bytes @ 0x0
  3871                           
  3872  0070                     ?i1___awdiv:	
  3873                           ; 2 bytes @ 0x0
  3874                           
  3875  0070                     ?i1___awmod:	
  3876                           ; 2 bytes @ 0x0
  3877                           
  3878  0070                     putch@c:	
  3879                           ; 2 bytes @ 0x0
  3880                           
  3881  0070                     strcpy@src:	
  3882                           ; 1 bytes @ 0x0
  3883                           
  3884  0070                     i1capture_setEdge@edge:	
  3885                           ; 1 bytes @ 0x0
  3886                           
  3887  0070                     i1capture_Set@isON:	
  3888                           ; 1 bytes @ 0x0
  3889                           
  3890  0070                     i1led_SetState@isOn:	
  3891                           ; 1 bytes @ 0x0
  3892                           
  3893  0070                     cnt_abs@a:	
  3894                           ; 1 bytes @ 0x0
  3895                           
  3896  0070                     fputc@c:	
  3897                           ; 2 bytes @ 0x0
  3898                           
  3899  0070                     strlen@s:	
  3900                           ; 2 bytes @ 0x0
  3901                           
  3902  0070                     i1___awdiv@divisor:	
  3903                           ; 2 bytes @ 0x0
  3904                           
  3905  0070                     i1___awmod@divisor:	
  3906                           ; 2 bytes @ 0x0
  3907                           
  3908                           
  3909                           ; 2 bytes @ 0x0
  3910  0070                     	ds	1
  3911  0071                     ??_strcpy:	
  3912  0071                     ??_capture_handdle:	
  3913                           ; 1 bytes @ 0x1
  3914                           
  3915  0071                     ??_led_Blink:	
  3916                           ; 1 bytes @ 0x1
  3917                           
  3918  0071                     key_isPressed@pdata:	
  3919                           ; 1 bytes @ 0x1
  3920                           
  3921  0071                     ___aodiv@counter:	
  3922                           ; 1 bytes @ 0x1
  3923                           
  3924  0071                     ___aomod@counter:	
  3925                           ; 1 bytes @ 0x1
  3926                           
  3927  0071                     i1display_control595_delay@times:	
  3928                           ; 1 bytes @ 0x1
  3929                           
  3930                           
  3931                           ; 1 bytes @ 0x1
  3932  0071                     	ds	1
  3933  0072                     ??_strlen:	
  3934  0072                     ??_key_checkPressed:	
  3935                           ; 1 bytes @ 0x2
  3936                           
  3937  0072                     ??_check_err:	
  3938                           ; 1 bytes @ 0x2
  3939                           
  3940  0072                     ??i1_display_write_byte:	
  3941                           ; 1 bytes @ 0x2
  3942                           
  3943  0072                     ___aodiv@sign:	
  3944                           ; 1 bytes @ 0x2
  3945                           
  3946  0072                     ___aomod@sign:	
  3947                           ; 1 bytes @ 0x2
  3948                           
  3949  0072                     fputc@fp:	
  3950                           ; 1 bytes @ 0x2
  3951                           
  3952  0072                     strcpy@s:	
  3953                           ; 1 bytes @ 0x2
  3954                           
  3955  0072                     cnt_abs@b:	
  3956                           ; 1 bytes @ 0x2
  3957                           
  3958  0072                     i1___awdiv@dividend:	
  3959                           ; 2 bytes @ 0x2
  3960                           
  3961  0072                     i1___awmod@dividend:	
  3962                           ; 2 bytes @ 0x2
  3963                           
  3964                           
  3965                           ; 2 bytes @ 0x2
  3966  0072                     	ds	1
  3967  0073                     ??_fputc:	
  3968  0073                     ?_abs:	
  3969                           ; 1 bytes @ 0x3
  3970                           
  3971  0073                     key_checkPressed@pdata:	
  3972                           ; 2 bytes @ 0x3
  3973                           
  3974  0073                     strcpy@d:	
  3975                           ; 1 bytes @ 0x3
  3976                           
  3977  0073                     abs@a:	
  3978                           ; 1 bytes @ 0x3
  3979                           
  3980  0073                     strlen@a:	
  3981                           ; 2 bytes @ 0x3
  3982                           
  3983  0073                     ___aodiv@quotient:	
  3984                           ; 2 bytes @ 0x3
  3985                           
  3986                           
  3987                           ; 8 bytes @ 0x3
  3988  0073                     	ds	1
  3989  0074                     ??_cnt_abs:	
  3990  0074                     ??_bpc_Cnt2Qua:	
  3991                           ; 1 bytes @ 0x4
  3992                           
  3993  0074                     ??i1___awdiv:	
  3994                           ; 1 bytes @ 0x4
  3995                           
  3996  0074                     ??i1___awmod:	
  3997                           ; 1 bytes @ 0x4
  3998                           
  3999  0074                     strcpy@dest:	
  4000                           ; 1 bytes @ 0x4
  4001                           
  4002  0074                     i1display_write_byte@data:	
  4003                           ; 1 bytes @ 0x4
  4004                           
  4005                           
  4006                           ; 1 bytes @ 0x4
  4007  0074                     	ds	1
  4008  0075                     ??_abs:	
  4009  0075                     i1display_write_byte@i:	
  4010                           ; 1 bytes @ 0x5
  4011                           
  4012  0075                     i1___awdiv@counter:	
  4013                           ; 1 bytes @ 0x5
  4014                           
  4015  0075                     i1___awmod@counter:	
  4016                           ; 1 bytes @ 0x5
  4017                           
  4018                           
  4019                           ; 1 bytes @ 0x5
  4020  0075                     	ds	1
  4021  0076                     bpc_Cnt2Qua@pdata:	
  4022  0076                     i1___awdiv@sign:	
  4023                           ; 1 bytes @ 0x6
  4024                           
  4025  0076                     i1___awmod@sign:	
  4026                           ; 1 bytes @ 0x6
  4027                           
  4028                           
  4029                           ; 1 bytes @ 0x6
  4030  0076                     	ds	1
  4031  0077                     _capture_handdle$1382:	
  4032  0077                     i1___awdiv@quotient:	
  4033                           ; 2 bytes @ 0x7
  4034                           
  4035                           
  4036                           ; 2 bytes @ 0x7
  4037  0077                     	ds	1
  4038  0078                     ?_fputs:	
  4039  0078                     ?_stoa:	
  4040                           ; 2 bytes @ 0x8
  4041                           
  4042  0078                     fputs@fp:	
  4043                           ; 2 bytes @ 0x8
  4044                           
  4045  0078                     stoa@s:	
  4046                           ; 1 bytes @ 0x8
  4047                           
  4048                           
  4049                           ; 2 bytes @ 0x8
  4050  0078                     	ds	1
  4051  0079                     ??_fputs:	
  4052  0079                     ?i1_display_write_once:	
  4053                           ; 1 bytes @ 0x9
  4054                           
  4055  0079                     capture_handdle@pdata:	
  4056                           ; 1 bytes @ 0x9
  4057                           
  4058  0079                     i1display_write_once@HR:	
  4059                           ; 1 bytes @ 0x9
  4060                           
  4061                           
  4062                           ; 1 bytes @ 0x9
  4063  0079                     	ds	1
  4064  007A                     ??_stoa:	
  4065  007A                     i1display_write_once@ML:	
  4066                           ; 1 bytes @ 0xA
  4067                           
  4068  007A                     capture_handdle@cnt_int:	
  4069                           ; 1 bytes @ 0xA
  4070                           
  4071                           
  4072                           ; 2 bytes @ 0xA
  4073  007A                     	ds	1
  4074  007B                     i1display_write_once@MR:	
  4075                           
  4076                           ; 1 bytes @ 0xB
  4077  007B                     	ds	1
  4078  007C                     ??_pad:	
  4079  007C                     ??i1_display_write_once:	
  4080                           ; 1 bytes @ 0xC
  4081                           
  4082  007C                     i1display_write_once@HL:	
  4083                           ; 1 bytes @ 0xC
  4084                           
  4085  007C                     capture_handdle@cnt_tmp:	
  4086                           ; 1 bytes @ 0xC
  4087                           
  4088                           
  4089                           ; 2 bytes @ 0xC
  4090  007C                     	ds	1
  4091  007D                     ??_sprintf:	
  4092  007D                     update_time@pdata:	
  4093                           ; 1 bytes @ 0xD
  4094                           
  4095                           
  4096                           ; 1 bytes @ 0xD
  4097  007D                     	ds	1
  4098  007E                     ??_timer_Timer0Handdle:	
  4099                           
  4100                           	psect	cstackBANK0
  4101  0020                     __pcstackBANK0:	
  4102                           ; 1 bytes @ 0xE
  4103                           
  4104  0020                     ??i1_display_update:	
  4105  0020                     ?___aodiv:	
  4106                           ; 1 bytes @ 0x0
  4107                           
  4108  0020                     ?___aomod:	
  4109                           ; 8 bytes @ 0x0
  4110                           
  4111  0020                     fputs@c:	
  4112                           ; 8 bytes @ 0x0
  4113                           
  4114  0020                     _check_err$1145:	
  4115                           ; 1 bytes @ 0x0
  4116                           
  4117  0020                     stoa@nuls:	
  4118                           ; 2 bytes @ 0x0
  4119                           
  4120  0020                     ___aodiv@divisor:	
  4121                           ; 7 bytes @ 0x0
  4122                           
  4123  0020                     ___aomod@divisor:	
  4124                           ; 8 bytes @ 0x0
  4125                           
  4126                           
  4127                           ; 8 bytes @ 0x0
  4128  0020                     	ds	1
  4129  0021                     fputs@i:	
  4130                           
  4131                           ; 2 bytes @ 0x1
  4132  0021                     	ds	1
  4133  0022                     _check_err$1146:	
  4134                           
  4135                           ; 2 bytes @ 0x2
  4136  0022                     	ds	1
  4137  0023                     fputs@s:	
  4138                           
  4139                           ; 1 bytes @ 0x3
  4140  0023                     	ds	1
  4141  0024                     ?_pad:	
  4142  0024                     pad@buf:	
  4143                           ; 2 bytes @ 0x4
  4144                           
  4145  0024                     _check_err$1149:	
  4146                           ; 1 bytes @ 0x4
  4147                           
  4148                           
  4149                           ; 2 bytes @ 0x4
  4150  0024                     	ds	1
  4151  0025                     pad@p:	
  4152                           
  4153                           ; 2 bytes @ 0x5
  4154  0025                     	ds	1
  4155  0026                     _check_err$1150:	
  4156                           
  4157                           ; 2 bytes @ 0x6
  4158  0026                     	ds	1
  4159  0027                     pad@i:	
  4160  0027                     stoa@i:	
  4161                           ; 2 bytes @ 0x7
  4162                           
  4163                           
  4164                           ; 2 bytes @ 0x7
  4165  0027                     	ds	1
  4166  0028                     check_err@i:	
  4167  0028                     ___aodiv@dividend:	
  4168                           ; 1 bytes @ 0x8
  4169                           
  4170  0028                     ___aomod@dividend:	
  4171                           ; 8 bytes @ 0x8
  4172                           
  4173                           
  4174                           ; 8 bytes @ 0x8
  4175  0028                     	ds	1
  4176  0029                     check_err@check:	
  4177  0029                     pad@w:	
  4178                           ; 1 bytes @ 0x9
  4179                           
  4180  0029                     stoa@w:	
  4181                           ; 2 bytes @ 0x9
  4182                           
  4183  0029                     i1_display_update$1550:	
  4184                           ; 2 bytes @ 0x9
  4185                           
  4186                           
  4187                           ; 2 bytes @ 0x9
  4188  0029                     	ds	1
  4189  002A                     check_err@pdata:	
  4190                           
  4191                           ; 1 bytes @ 0xA
  4192  002A                     	ds	1
  4193  002B                     pad@fp:	
  4194  002B                     stoa@fp:	
  4195                           ; 1 bytes @ 0xB
  4196                           
  4197  002B                     i1display_update@pdata:	
  4198                           ; 1 bytes @ 0xB
  4199                           
  4200                           
  4201                           ; 1 bytes @ 0xB
  4202  002B                     	ds	1
  4203  002C                     ??_bpc_proc:	
  4204  002C                     ??_update_time:	
  4205                           ; 1 bytes @ 0xC
  4206                           
  4207  002C                     stoa@cp:	
  4208                           ; 1 bytes @ 0xC
  4209                           
  4210                           
  4211                           ; 2 bytes @ 0xC
  4212  002C                     	ds	2
  4213  002E                     bpc_proc@last_time_s:	
  4214  002E                     stoa@p:	
  4215                           ; 2 bytes @ 0xE
  4216                           
  4217                           
  4218                           ; 2 bytes @ 0xE
  4219  002E                     	ds	2
  4220  0030                     ?_dtoa:	
  4221  0030                     bpc_proc@last_time_h:	
  4222                           ; 2 bytes @ 0x10
  4223                           
  4224  0030                     stoa@l:	
  4225                           ; 2 bytes @ 0x10
  4226                           
  4227  0030                     dtoa@d:	
  4228                           ; 2 bytes @ 0x10
  4229                           
  4230                           
  4231                           ; 8 bytes @ 0x10
  4232  0030                     	ds	2
  4233  0032                     bpc_proc@last_time_m:	
  4234                           
  4235                           ; 2 bytes @ 0x12
  4236  0032                     	ds	2
  4237  0034                     bpc_proc@i:	
  4238                           
  4239                           ; 2 bytes @ 0x14
  4240  0034                     	ds	2
  4241  0036                     bpc_proc@number:	
  4242                           
  4243                           ; 1 bytes @ 0x16
  4244  0036                     	ds	1
  4245  0037                     bpc_proc@pdata:	
  4246                           
  4247                           ; 1 bytes @ 0x17
  4248  0037                     	ds	1
  4249  0038                     ??_dtoa:	
  4250                           
  4251                           ; 1 bytes @ 0x18
  4252  0038                     	ds	3
  4253  003B                     _dtoa$1774:	
  4254                           
  4255                           ; 2 bytes @ 0x1B
  4256  003B                     	ds	2
  4257  003D                     dtoa@fp:	
  4258                           
  4259                           ; 1 bytes @ 0x1D
  4260  003D                     	ds	1
  4261  003E                     dtoa@p:	
  4262                           
  4263                           ; 2 bytes @ 0x1E
  4264  003E                     	ds	2
  4265  0040                     dtoa@w:	
  4266                           
  4267                           ; 2 bytes @ 0x20
  4268  0040                     	ds	2
  4269  0042                     dtoa@s:	
  4270                           
  4271                           ; 2 bytes @ 0x22
  4272  0042                     	ds	2
  4273  0044                     dtoa@n:	
  4274                           
  4275                           ; 8 bytes @ 0x24
  4276  0044                     	ds	8
  4277  004C                     dtoa@i:	
  4278                           
  4279                           ; 2 bytes @ 0x2C
  4280  004C                     	ds	2
  4281  004E                     ?_vfpfcnvrt:	
  4282  004E                     vfpfcnvrt@fmt:	
  4283                           ; 2 bytes @ 0x2E
  4284                           
  4285                           
  4286                           ; 1 bytes @ 0x2E
  4287  004E                     	ds	1
  4288  004F                     vfpfcnvrt@ap:	
  4289                           
  4290                           ; 1 bytes @ 0x2F
  4291  004F                     	ds	1
  4292  0050                     ??_vfpfcnvrt:	
  4293                           
  4294                           ; 1 bytes @ 0x30
  4295  0050                     	ds	5
  4296  0055                     vfpfcnvrt@ll:	
  4297                           
  4298                           ; 8 bytes @ 0x35
  4299  0055                     	ds	8
  4300  005D                     vfpfcnvrt@cp:	
  4301                           
  4302                           ; 2 bytes @ 0x3D
  4303  005D                     	ds	2
  4304  005F                     vfpfcnvrt@fp:	
  4305                           
  4306                           ; 1 bytes @ 0x3F
  4307  005F                     	ds	1
  4308  0060                     ?_vfprintf:	
  4309  0060                     vfprintf@fmt:	
  4310                           ; 2 bytes @ 0x40
  4311                           
  4312                           
  4313                           ; 2 bytes @ 0x40
  4314  0060                     	ds	2
  4315  0062                     vfprintf@ap:	
  4316                           
  4317                           ; 1 bytes @ 0x42
  4318  0062                     	ds	1
  4319  0063                     ??_vfprintf:	
  4320                           
  4321                           ; 1 bytes @ 0x43
  4322  0063                     	ds	2
  4323  0065                     vfprintf@fp:	
  4324                           
  4325                           ; 1 bytes @ 0x45
  4326  0065                     	ds	1
  4327  0066                     vfprintf@cfmt:	
  4328                           
  4329                           ; 2 bytes @ 0x46
  4330  0066                     	ds	2
  4331  0068                     ?_sprintf:	
  4332  0068                     sprintf@fmt:	
  4333                           ; 2 bytes @ 0x48
  4334                           
  4335                           
  4336                           ; 2 bytes @ 0x48
  4337  0068                     	ds	8
  4338                           
  4339                           	psect	maintext
  4340  099C                     __pmaintext:	
  4341 ;;
  4342 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  4343 ;;
  4344 ;; *************** function _main *****************
  4345 ;; Defined at:
  4346 ;;		line 241 in file "main.c"
  4347 ;; Parameters:    Size  Location     Type
  4348 ;;		None
  4349 ;; Auto vars:     Size  Location     Type
  4350 ;;		None
  4351 ;; Return value:  Size  Location     Type
  4352 ;;                  1    wreg      void 
  4353 ;; Registers used:
  4354 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4355 ;; Tracked objects:
  4356 ;;		On entry : B1F/0
  4357 ;;		On exit  : 0/0
  4358 ;;		Unchanged: 0/0
  4359 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4360 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4361 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4362 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4363 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4364 ;;Total ram usage:        0 bytes
  4365 ;; Hardware stack levels required when called:   14
  4366 ;; This function calls:
  4367 ;;		_capture_Set
  4368 ;;		_capture_init
  4369 ;;		_display_update
  4370 ;;		_init_env
  4371 ;;		_led_SetState
  4372 ;;		_timer_Timer0Init
  4373 ;;		_timer_Timer0Start
  4374 ;;		_timer_Timer1Init
  4375 ;;		_timer_Timer1Start
  4376 ;;		_uart_init
  4377 ;; This function is called by:
  4378 ;;		Startup code after reset
  4379 ;; This function uses a non-reentrant model
  4380 ;;
  4381                           
  4382                           
  4383                           ;psect for function _main
  4384  099C                     _main:	
  4385                           
  4386                           ;main.c: 248:     init_env();
  4387                           
  4388                           ;incstack = 0
  4389                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4390  099C  318C  24FE  3189   	fcall	_init_env
  4391                           
  4392                           ;main.c: 251:     timer_Timer0Init();
  4393  099F  3188  20B6  3189   	fcall	_timer_Timer0Init
  4394                           
  4395                           ;main.c: 252:     timer_Timer0Start();
  4396  09A2  3188  2030  3189   	fcall	_timer_Timer0Start
  4397                           
  4398                           ;main.c: 255:     timer_Timer1Init();
  4399  09A5  3188  20C3  3189   	fcall	_timer_Timer1Init
  4400                           
  4401                           ;main.c: 256:     timer_Timer1Start();
  4402  09A8  3188  201D  3189   	fcall	_timer_Timer1Start
  4403                           
  4404                           ;main.c: 259:     capture_init();
  4405  09AB  3188  2057  3189   	fcall	_capture_init
  4406                           
  4407                           ;main.c: 260:     capture_Set(TRUE);
  4408  09AE  3001               	movlw	1
  4409  09AF  3187  27F2  3189   	fcall	_capture_Set
  4410                           
  4411                           ;main.c: 263:     uart_init();
  4412  09B2  3189  2180  3189   	fcall	_uart_init
  4413                           
  4414                           ;main.c: 266:     display_update();
  4415  09B5  318E  2692  3189   	fcall	_display_update
  4416                           
  4417                           ;main.c: 267:     led_SetState(FALSE);
  4418  09B8  3000               	movlw	0
  4419  09B9  3188  2092  3189   	fcall	_led_SetState
  4420  09BC                     l166:	
  4421                           ;main.c: 269:     while(1)
  4422                           
  4423                           
  4424                           ;main.c: 270:     {;main.c: 279:     }
  4425  09BC  29BC               	goto	l166
  4426  09BD                     __end_of_main:	
  4427                           
  4428                           	psect	text1
  4429  0980                     __ptext1:	
  4430 ;; *************** function _uart_init *****************
  4431 ;; Defined at:
  4432 ;;		line 14 in file "uart.c"
  4433 ;; Parameters:    Size  Location     Type
  4434 ;;		None
  4435 ;; Auto vars:     Size  Location     Type
  4436 ;;		None
  4437 ;; Return value:  Size  Location     Type
  4438 ;;                  1    wreg      void 
  4439 ;; Registers used:
  4440 ;;		wreg, status,2
  4441 ;; Tracked objects:
  4442 ;;		On entry : 0/0
  4443 ;;		On exit  : 0/0
  4444 ;;		Unchanged: 0/0
  4445 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4446 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4447 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4448 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4449 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4450 ;;Total ram usage:        0 bytes
  4451 ;; Hardware stack levels used:    1
  4452 ;; Hardware stack levels required when called:    9
  4453 ;; This function calls:
  4454 ;;		Nothing
  4455 ;; This function is called by:
  4456 ;;		_main
  4457 ;; This function uses a non-reentrant model
  4458 ;;
  4459                           
  4460                           
  4461                           ;psect for function _uart_init
  4462  0980                     _uart_init:	
  4463                           
  4464                           ;uart.c: 17:     TXSEL = 0;
  4465                           
  4466                           ;incstack = 0
  4467                           ; Regs used in _uart_init: [wreg+status,2]
  4468  0980  0022               	movlb	2	; select bank2
  4469  0981  111D               	bcf	29,2	;volatile
  4470                           
  4471                           ;uart.c: 18:     RXSEL = 0;
  4472  0982  109D               	bcf	29,1	;volatile
  4473                           
  4474                           ;uart.c: 19:     TRISCbits.TRISC7 = 1;
  4475  0983  0021               	movlb	1	; select bank1
  4476  0984  178E               	bsf	14,7	;volatile
  4477                           
  4478                           ;uart.c: 20:     TRISCbits.TRISC6 = 0;
  4479  0985  130E               	bcf	14,6	;volatile
  4480                           
  4481                           ;uart.c: 21:     WPUCbits.WPUC7 = 0;
  4482  0986  0024               	movlb	4	; select bank4
  4483  0987  138E               	bcf	14,7	;volatile
  4484                           
  4485                           ;uart.c: 22:     WPUCbits.WPUC6 = 0;
  4486  0988  130E               	bcf	14,6	;volatile
  4487                           
  4488                           ;uart.c: 26:     SYNC = 0;
  4489  0989  0023               	movlb	3	; select bank3
  4490  098A  121E               	bcf	30,4	;volatile
  4491                           
  4492                           ;uart.c: 27:     BRGH = 1;
  4493  098B  151E               	bsf	30,2	;volatile
  4494                           
  4495                           ;uart.c: 28:     BRG16 = 1;
  4496  098C  159F               	bsf	31,3	;volatile
  4497                           
  4498                           ;uart.c: 32:     SPBRGH = 0x00;
  4499  098D  019C               	clrf	28	;volatile
  4500                           
  4501                           ;uart.c: 33:     SPBRGL = 23;
  4502  098E  3017               	movlw	23
  4503  098F  009B               	movwf	27	;volatile
  4504                           
  4505                           ;uart.c: 36:     TXEN = 1;
  4506  0990  169E               	bsf	30,5	;volatile
  4507                           
  4508                           ;uart.c: 37:     SYNC = 0;
  4509  0991  121E               	bcf	30,4	;volatile
  4510                           
  4511                           ;uart.c: 38:     SPEN = 1;
  4512  0992  179D               	bsf	29,7	;volatile
  4513                           
  4514                           ;uart.c: 41:     TXIE = 1;
  4515  0993  0021               	movlb	1	; select bank1
  4516  0994  1611               	bsf	17,4	;volatile
  4517                           
  4518                           ;uart.c: 42:     GIE = 1;
  4519  0995  178B               	bsf	11,7	;volatile
  4520                           
  4521                           ;uart.c: 43:     PEIE = 1;
  4522  0996  170B               	bsf	11,6	;volatile
  4523                           
  4524                           ;uart.c: 46:     CREN = 1;
  4525  0997  0023               	movlb	3	; select bank3
  4526  0998  161D               	bsf	29,4	;volatile
  4527                           
  4528                           ;uart.c: 49:     RCIE = 1;
  4529  0999  0021               	movlb	1	; select bank1
  4530  099A  1691               	bsf	17,5	;volatile
  4531  099B  0008               	return
  4532  099C                     __end_of_uart_init:	
  4533                           
  4534                           	psect	text2
  4535  081D                     __ptext2:	
  4536 ;; *************** function _timer_Timer1Start *****************
  4537 ;; Defined at:
  4538 ;;		line 40 in file "timer.c"
  4539 ;; Parameters:    Size  Location     Type
  4540 ;;		None
  4541 ;; Auto vars:     Size  Location     Type
  4542 ;;		None
  4543 ;; Return value:  Size  Location     Type
  4544 ;;                  1    wreg      void 
  4545 ;; Registers used:
  4546 ;;		None
  4547 ;; Tracked objects:
  4548 ;;		On entry : 0/0
  4549 ;;		On exit  : 0/0
  4550 ;;		Unchanged: 0/0
  4551 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4552 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4553 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4554 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4555 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4556 ;;Total ram usage:        0 bytes
  4557 ;; Hardware stack levels used:    1
  4558 ;; Hardware stack levels required when called:    9
  4559 ;; This function calls:
  4560 ;;		Nothing
  4561 ;; This function is called by:
  4562 ;;		_main
  4563 ;; This function uses a non-reentrant model
  4564 ;;
  4565                           
  4566                           
  4567                           ;psect for function _timer_Timer1Start
  4568  081D                     _timer_Timer1Start:	
  4569                           
  4570                           ;timer.c: 43:     T1CONbits.TMR1ON = 0b1;
  4571                           
  4572                           ;incstack = 0
  4573                           ; Regs used in _timer_Timer1Start: []
  4574  081D  0020               	movlb	0	; select bank0
  4575  081E  1418               	bsf	24,0	;volatile
  4576  081F  0008               	return
  4577  0820                     __end_of_timer_Timer1Start:	
  4578                           
  4579                           	psect	text3
  4580  08C3                     __ptext3:	
  4581 ;; *************** function _timer_Timer1Init *****************
  4582 ;; Defined at:
  4583 ;;		line 9 in file "timer.c"
  4584 ;; Parameters:    Size  Location     Type
  4585 ;;		None
  4586 ;; Auto vars:     Size  Location     Type
  4587 ;;		None
  4588 ;; Return value:  Size  Location     Type
  4589 ;;                  1    wreg      void 
  4590 ;; Registers used:
  4591 ;;		wreg, status,2, status,0
  4592 ;; Tracked objects:
  4593 ;;		On entry : 0/0
  4594 ;;		On exit  : 0/0
  4595 ;;		Unchanged: 0/0
  4596 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4597 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4598 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4599 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4600 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4601 ;;Total ram usage:        0 bytes
  4602 ;; Hardware stack levels used:    1
  4603 ;; Hardware stack levels required when called:    9
  4604 ;; This function calls:
  4605 ;;		Nothing
  4606 ;; This function is called by:
  4607 ;;		_main
  4608 ;; This function uses a non-reentrant model
  4609 ;;
  4610                           
  4611                           
  4612                           ;psect for function _timer_Timer1Init
  4613  08C3                     _timer_Timer1Init:	
  4614                           
  4615                           ;timer.c: 12:     INTCONbits.GIE = 0b1;
  4616                           
  4617                           ;incstack = 0
  4618                           ; Regs used in _timer_Timer1Init: [wreg+status,2+status,0]
  4619  08C3  178B               	bsf	11,7	;volatile
  4620                           
  4621                           ;timer.c: 14:     INTCONbits.PEIE = 0b1;
  4622  08C4  170B               	bsf	11,6	;volatile
  4623                           
  4624                           ;timer.c: 15:     PIE1bits.TMR1IE = 0b1;
  4625  08C5  0021               	movlb	1	; select bank1
  4626  08C6  1411               	bsf	17,0	;volatile
  4627                           
  4628                           ;timer.c: 17:     PIR1bits.TMR1IF = 0b0;
  4629  08C7  0020               	movlb	0	; select bank0
  4630  08C8  1011               	bcf	17,0	;volatile
  4631                           
  4632                           ;timer.c: 19:     TMR1H = 0b0;
  4633  08C9  0197               	clrf	23	;volatile
  4634                           
  4635                           ;timer.c: 20:     TMR1L = 0b0;
  4636  08CA  0196               	clrf	22	;volatile
  4637                           
  4638                           ;timer.c: 30:     T1CONbits.TMR1CS = 0b00;
  4639  08CB  303F               	movlw	-193
  4640  08CC  0598               	andwf	24,f	;volatile
  4641                           
  4642                           ;timer.c: 33:     T1CONbits.T1CKPS = 0b11;
  4643  08CD  3030               	movlw	48
  4644  08CE  0498               	iorwf	24,f	;volatile
  4645  08CF  0008               	return
  4646  08D0                     __end_of_timer_Timer1Init:	
  4647                           
  4648                           	psect	text4
  4649  0830                     __ptext4:	
  4650 ;; *************** function _timer_Timer0Start *****************
  4651 ;; Defined at:
  4652 ;;		line 97 in file "timer.c"
  4653 ;; Parameters:    Size  Location     Type
  4654 ;;		None
  4655 ;; Auto vars:     Size  Location     Type
  4656 ;;		None
  4657 ;; Return value:  Size  Location     Type
  4658 ;;                  1    wreg      void 
  4659 ;; Registers used:
  4660 ;;		wreg, status,2, status,0, pclath, cstack
  4661 ;; Tracked objects:
  4662 ;;		On entry : 0/0
  4663 ;;		On exit  : 0/0
  4664 ;;		Unchanged: 0/0
  4665 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4666 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4667 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4668 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4669 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4670 ;;Total ram usage:        0 bytes
  4671 ;; Hardware stack levels used:    1
  4672 ;; Hardware stack levels required when called:   10
  4673 ;; This function calls:
  4674 ;;		_timer_Timer0Reset
  4675 ;; This function is called by:
  4676 ;;		_main
  4677 ;;		_tmp_change
  4678 ;; This function uses a non-reentrant model
  4679 ;;
  4680                           
  4681                           
  4682                           ;psect for function _timer_Timer0Start
  4683  0830                     _timer_Timer0Start:	
  4684                           
  4685                           ;timer.c: 99:     timer_Timer0Reset();
  4686                           
  4687                           ;incstack = 0
  4688                           ; Regs used in _timer_Timer0Start: [wreg+status,2+status,0+pclath+cstack]
  4689  0830  3188  2039         	fcall	_timer_Timer0Reset
  4690                           
  4691                           ;timer.c: 100:     INTCONbits.TMR0IE = 0b1;
  4692  0832  168B               	bsf	11,5	;volatile
  4693  0833  0008               	return
  4694  0834                     __end_of_timer_Timer0Start:	
  4695                           
  4696                           	psect	text5
  4697  0839                     __ptext5:	
  4698 ;; *************** function _timer_Timer0Reset *****************
  4699 ;; Defined at:
  4700 ;;		line 92 in file "timer.c"
  4701 ;; Parameters:    Size  Location     Type
  4702 ;;		None
  4703 ;; Auto vars:     Size  Location     Type
  4704 ;;		None
  4705 ;; Return value:  Size  Location     Type
  4706 ;;                  1    wreg      void 
  4707 ;; Registers used:
  4708 ;;		wreg
  4709 ;; Tracked objects:
  4710 ;;		On entry : 0/0
  4711 ;;		On exit  : 0/0
  4712 ;;		Unchanged: 0/0
  4713 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4714 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4715 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4716 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4717 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4718 ;;Total ram usage:        0 bytes
  4719 ;; Hardware stack levels used:    1
  4720 ;; Hardware stack levels required when called:    9
  4721 ;; This function calls:
  4722 ;;		Nothing
  4723 ;; This function is called by:
  4724 ;;		_timer_Timer0Start
  4725 ;;		_tmp_change
  4726 ;; This function uses a non-reentrant model
  4727 ;;
  4728                           
  4729                           
  4730                           ;psect for function _timer_Timer0Reset
  4731  0839                     _timer_Timer0Reset:	
  4732                           
  4733                           ;timer.c: 94:     INTCONbits.TMR0IF = 0;
  4734                           
  4735                           ;incstack = 0
  4736                           ; Regs used in _timer_Timer0Reset: [wreg]
  4737  0839  110B               	bcf	11,2	;volatile
  4738                           
  4739                           ;timer.c: 95:     TMR0 = (159 + 0);
  4740  083A  309F               	movlw	159
  4741  083B  0020               	movlb	0	; select bank0
  4742  083C  0095               	movwf	21	;volatile
  4743  083D  0008               	return
  4744  083E                     __end_of_timer_Timer0Reset:	
  4745                           
  4746                           	psect	text6
  4747  08B6                     __ptext6:	
  4748 ;; *************** function _timer_Timer0Init *****************
  4749 ;; Defined at:
  4750 ;;		line 63 in file "timer.c"
  4751 ;; Parameters:    Size  Location     Type
  4752 ;;		None
  4753 ;; Auto vars:     Size  Location     Type
  4754 ;;		None
  4755 ;; Return value:  Size  Location     Type
  4756 ;;                  1    wreg      void 
  4757 ;; Registers used:
  4758 ;;		wreg, status,2, status,0
  4759 ;; Tracked objects:
  4760 ;;		On entry : 0/0
  4761 ;;		On exit  : 0/0
  4762 ;;		Unchanged: 0/0
  4763 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4764 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4765 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4766 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4767 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4768 ;;Total ram usage:        0 bytes
  4769 ;; Hardware stack levels used:    1
  4770 ;; Hardware stack levels required when called:    9
  4771 ;; This function calls:
  4772 ;;		Nothing
  4773 ;; This function is called by:
  4774 ;;		_main
  4775 ;; This function uses a non-reentrant model
  4776 ;;
  4777                           
  4778                           
  4779                           ;psect for function _timer_Timer0Init
  4780  08B6                     _timer_Timer0Init:	
  4781                           
  4782                           ;timer.c: 66:     INTCONbits.GIE = 0b1;
  4783                           
  4784                           ;incstack = 0
  4785                           ; Regs used in _timer_Timer0Init: [wreg+status,2+status,0]
  4786  08B6  178B               	bsf	11,7	;volatile
  4787                           
  4788                           ;timer.c: 69:     INTCONbits.TMR0IE = 0b0;
  4789  08B7  128B               	bcf	11,5	;volatile
  4790                           
  4791                           ;timer.c: 76:     OPTION_REGbits.PSA = 0;
  4792  08B8  0021               	movlb	1	; select bank1
  4793  08B9  1195               	bcf	21,3	;volatile
  4794                           
  4795                           ;timer.c: 77:     OPTION_REGbits.TMR0CS = 0;
  4796  08BA  1295               	bcf	21,5	;volatile
  4797                           
  4798                           ;timer.c: 78:     OPTION_REGbits.PS = 4;
  4799  08BB  0815               	movf	21,w	;volatile
  4800  08BC  39F8               	andlw	-8
  4801  08BD  3804               	iorlw	4
  4802  08BE  0095               	movwf	21	;volatile
  4803                           
  4804                           ;timer.c: 79:     TMR0 = (159 + 0);
  4805  08BF  309F               	movlw	159
  4806  08C0  0020               	movlb	0	; select bank0
  4807  08C1  0095               	movwf	21	;volatile
  4808  08C2  0008               	return
  4809  08C3                     __end_of_timer_Timer0Init:	
  4810                           
  4811                           	psect	text7
  4812  0892                     __ptext7:	
  4813 ;; *************** function _led_SetState *****************
  4814 ;; Defined at:
  4815 ;;		line 110 in file "hardware.c"
  4816 ;; Parameters:    Size  Location     Type
  4817 ;;  isOn            1    wreg     unsigned char 
  4818 ;; Auto vars:     Size  Location     Type
  4819 ;;  isOn            1    0[BANK3 ] unsigned char 
  4820 ;; Return value:  Size  Location     Type
  4821 ;;                  1    wreg      unsigned char 
  4822 ;; Registers used:
  4823 ;;		wreg, status,2, status,0
  4824 ;; Tracked objects:
  4825 ;;		On entry : 0/0
  4826 ;;		On exit  : 0/0
  4827 ;;		Unchanged: 0/0
  4828 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4829 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4830 ;;      Locals:         0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0
  4831 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4832 ;;      Totals:         0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0
  4833 ;;Total ram usage:        1 bytes
  4834 ;; Hardware stack levels used:    1
  4835 ;; Hardware stack levels required when called:    9
  4836 ;; This function calls:
  4837 ;;		Nothing
  4838 ;; This function is called by:
  4839 ;;		_main
  4840 ;; This function uses a non-reentrant model
  4841 ;;
  4842                           
  4843                           
  4844                           ;psect for function _led_SetState
  4845  0892                     _led_SetState:	
  4846                           
  4847                           ;incstack = 0
  4848                           ; Regs used in _led_SetState: [wreg+status,2+status,0]
  4849                           ;led_SetState@isOn stored from wreg
  4850  0892  0023               	movlb	3	; select bank3
  4851  0893  00C4               	movwf	led_SetState@isOn^(0+384)
  4852                           
  4853                           ;hardware.c: 110: u8 led_SetState(u8 isOn);hardware.c: 111: {;hardware.c: 112:     LATBb
      +                          its.LATB3 = (isOn)? LED_STATE_ON : LED_STATE_OFF;
  4854  0894  0844               	movf	led_SetState@isOn^(0+384),w
  4855  0895  1D03               	btfss	3,2
  4856  0896  289A               	goto	u3840
  4857  0897  0022               	movlb	2	; select bank2
  4858  0898  158D               	bsf	13,3	;volatile
  4859  0899  0008               	return
  4860  089A                     u3840:	
  4861  089A  0022               	movlb	2	; select bank2
  4862  089B  118D               	bcf	13,3	;volatile
  4863  089C  0008               	return
  4864  089D                     __end_of_led_SetState:	
  4865                           
  4866                           	psect	text8
  4867  0CFE                     __ptext8:	
  4868 ;; *************** function _init_env *****************
  4869 ;; Defined at:
  4870 ;;		line 44 in file "main.c"
  4871 ;; Parameters:    Size  Location     Type
  4872 ;;		None
  4873 ;; Auto vars:     Size  Location     Type
  4874 ;;  i               2   27[BANK3 ] int 
  4875 ;;  pdata           1   29[BANK3 ] PTR volatile struct .
  4876 ;;		 -> g_data(39), 
  4877 ;; Return value:  Size  Location     Type
  4878 ;;                  1    wreg      void 
  4879 ;; Registers used:
  4880 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4881 ;; Tracked objects:
  4882 ;;		On entry : 0/0
  4883 ;;		On exit  : 0/0
  4884 ;;		Unchanged: 0/0
  4885 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4886 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4887 ;;      Locals:         0       0       0       0       3       0       0       0       0       0       0       0       
      +0       0
  4888 ;;      Temps:          0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0
  4889 ;;      Totals:         0       0       0       0       5       0       0       0       0       0       0       0       
      +0       0
  4890 ;;Total ram usage:        5 bytes
  4891 ;; Hardware stack levels used:    1
  4892 ;; Hardware stack levels required when called:   13
  4893 ;; This function calls:
  4894 ;;		_data_getdata
  4895 ;;		_display_set
  4896 ;;		_display_update
  4897 ;; This function is called by:
  4898 ;;		_main
  4899 ;; This function uses a non-reentrant model
  4900 ;;
  4901                           
  4902                           
  4903                           ;psect for function _init_env
  4904  0CFE                     _init_env:	
  4905                           
  4906                           ;main.c: 45:     IOCCP = 0;
  4907                           
  4908                           ;incstack = 0
  4909                           ; Regs used in _init_env: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4910  0CFE  3180  2002  318C   	fcall	_data_getdata
  4911  0D01  0023               	movlb	3	; select bank3
  4912  0D02  00DD               	movwf	??_init_env^(0+384)
  4913  0D03  085D               	movf	??_init_env^(0+384),w
  4914  0D04  00E1               	movwf	init_env@pdata^(0+384)
  4915                           
  4916                           ;main.c: 51:     TRISCbits.TRISC5 = 1;
  4917  0D05  178B               	bsf	11,7	;volatile
  4918                           
  4919                           ;main.c: 58: 
  4920  0D06  0021               	movlb	1	; select bank1
  4921  0D07  0819               	movf	25,w	;volatile
  4922  0D08  39FC               	andlw	-4
  4923  0D09  3802               	iorlw	2
  4924  0D0A  0099               	movwf	25	;volatile
  4925                           
  4926                           ;main.c: 62:     pdata->g_time_h = 23;
  4927  0D0B  0819               	movf	25,w	;volatile
  4928  0D0C  3987               	andlw	-121
  4929  0D0D  3858               	iorlw	88
  4930  0D0E  0099               	movwf	25	;volatile
  4931                           
  4932                           ;main.c: 70:     LATBbits.LATB2 = PIN_LOW;
  4933  0D0F  1395               	bcf	21,7	;volatile
  4934                           
  4935                           ;main.c: 72: 
  4936  0D10  018C               	clrf	12	;volatile
  4937                           
  4938                           ;main.c: 73:     PORTCbits.RC2 = BPC_PWR_ON;
  4939  0D11  0022               	movlb	2	; select bank2
  4940  0D12  018C               	clrf	12	;volatile
  4941                           
  4942                           ;main.c: 74: 
  4943  0D13  0024               	movlb	4	; select bank4
  4944  0D14  018C               	clrf	12	;volatile
  4945                           
  4946                           ;main.c: 75: 
  4947  0D15  0027               	movlb	7	; select bank7
  4948  0D16  0191               	clrf	17	;volatile
  4949                           
  4950                           ;main.c: 76:     TRISCbits.TRISC0 = 1;
  4951  0D17  0192               	clrf	18	;volatile
  4952                           
  4953                           ;main.c: 78: 
  4954  0D18  0021               	movlb	1	; select bank1
  4955  0D19  018D               	clrf	13	;volatile
  4956                           
  4957                           ;main.c: 79: 
  4958  0D1A  0022               	movlb	2	; select bank2
  4959  0D1B  018D               	clrf	13	;volatile
  4960                           
  4961                           ;main.c: 80: 
  4962  0D1C  0024               	movlb	4	; select bank4
  4963  0D1D  018D               	clrf	13	;volatile
  4964                           
  4965                           ;main.c: 81: 
  4966  0D1E  0027               	movlb	7	; select bank7
  4967  0D1F  0194               	clrf	20	;volatile
  4968                           
  4969                           ;main.c: 82: 
  4970  0D20  0195               	clrf	21	;volatile
  4971                           
  4972                           ;main.c: 84:     display_set(TRUE);
  4973  0D21  0021               	movlb	1	; select bank1
  4974  0D22  018E               	clrf	14	;volatile
  4975                           
  4976                           ;main.c: 85: }
  4977  0D23  0022               	movlb	2	; select bank2
  4978  0D24  018E               	clrf	14	;volatile
  4979                           
  4980                           ;main.c: 86: 
  4981  0D25  3001               	movlw	1
  4982  0D26  0024               	movlb	4	; select bank4
  4983  0D27  008E               	movwf	14	;volatile
  4984                           
  4985                           ;main.c: 87: 
  4986  0D28  0027               	movlb	7	; select bank7
  4987  0D29  0197               	clrf	23	;volatile
  4988                           
  4989                           ;main.c: 88: void tmp_change(void)
  4990  0D2A  0198               	clrf	24	;volatile
  4991                           
  4992                           ;main.c: 93: 
  4993  0D2B  0021               	movlb	1	; select bank1
  4994  0D2C  168E               	bsf	14,5	;volatile
  4995                           
  4996                           ;main.c: 94: 
  4997  0D2D  0024               	movlb	4	; select bank4
  4998  0D2E  168E               	bsf	14,5	;volatile
  4999                           
  5000                           ;main.c: 96: 
  5001  0D2F  0021               	movlb	1	; select bank1
  5002  0D30  148E               	bsf	14,1	;volatile
  5003                           
  5004                           ;main.c: 97:     if( pdata->g_isDecoding == FALSE && ((pdata->g_flg_switch == TRUE)||(pd
      +                          ata->cnt_update >= 30)) )
  5005  0D31  0024               	movlb	4	; select bank4
  5006  0D32  108E               	bcf	14,1	;volatile
  5007                           
  5008                           ;main.c: 98: 
  5009  0D33  0027               	movlb	7	; select bank7
  5010  0D34  1497               	bsf	23,1	;volatile
  5011                           
  5012                           ;main.c: 101:         pdata->g_find_recv_start = FALSE;
  5013  0D35  0023               	movlb	3	; select bank3
  5014  0D36  01DF               	clrf	init_env@i^(0+384)
  5015  0D37  01E0               	clrf	(init_env@i+1)^(0+384)
  5016  0D38                     l3685:	
  5017                           
  5018                           ;main.c: 102:         pdata->g_isDecoding = TRUE;
  5019  0D38  3005               	movlw	5
  5020  0D39  0023               	movlb	3	; select bank3
  5021  0D3A  00DD               	movwf	??_init_env^(0+384)
  5022  0D3B  085F               	movf	init_env@i^(0+384),w
  5023  0D3C  0761               	addwf	init_env@pdata^(0+384),w
  5024  0D3D  00DE               	movwf	(??_init_env+1)^(0+384)
  5025  0D3E  085E               	movf	(??_init_env+1)^(0+384),w
  5026  0D3F  3E0D               	addlw	13
  5027  0D40  0086               	movwf	6
  5028  0D41  3002               	movlw	2	; select bank4/5
  5029  0D42  0087               	movwf	7
  5030  0D43  085D               	movf	??_init_env^(0+384),w
  5031  0D44  0081               	movwf	1
  5032                           
  5033                           ;main.c: 103:         pdata->g_flg_switch = FALSE;
  5034  0D45  3001               	movlw	1
  5035  0D46  07DF               	addwf	init_env@i^(0+384),f
  5036  0D47  3000               	movlw	0
  5037  0D48  3DE0               	addwfc	(init_env@i+1)^(0+384),f
  5038  0D49  0860               	movf	(init_env@i+1)^(0+384),w
  5039  0D4A  3A80               	xorlw	128
  5040  0D4B  00DD               	movwf	??_init_env^(0+384)
  5041  0D4C  3080               	movlw	128
  5042  0D4D  025D               	subwf	??_init_env^(0+384),w
  5043  0D4E  1D03               	skipz
  5044  0D4F  2D52               	goto	u3655
  5045  0D50  3014               	movlw	20
  5046  0D51  025F               	subwf	init_env@i^(0+384),w
  5047  0D52                     u3655:	
  5048  0D52  1C03               	skipc
  5049  0D53  2D38               	goto	l3685
  5050                           
  5051                           ;main.c: 104:         pdata->cnt_update = 0;
  5052  0D54  3017               	movlw	23
  5053  0D55  0023               	movlb	3	; select bank3
  5054  0D56  00DD               	movwf	??_init_env^(0+384)
  5055  0D57  0861               	movf	init_env@pdata^(0+384),w
  5056  0D58  3E03               	addlw	3
  5057  0D59  0086               	movwf	6
  5058  0D5A  3002               	movlw	2	; select bank4/5
  5059  0D5B  0087               	movwf	7
  5060  0D5C  085D               	movf	??_init_env^(0+384),w
  5061  0D5D  0081               	movwf	1
  5062                           
  5063                           ;main.c: 105:         pdata->g_recv_count = CODE_P0;
  5064  0D5E  3037               	movlw	55
  5065  0D5F  00DD               	movwf	??_init_env^(0+384)
  5066  0D60  0861               	movf	init_env@pdata^(0+384),w
  5067  0D61  3E04               	addlw	4
  5068  0D62  0086               	movwf	6
  5069  0D63  3002               	movlw	2	; select bank4/5
  5070  0D64  0087               	movwf	7
  5071  0D65  085D               	movf	??_init_env^(0+384),w
  5072  0D66  0081               	movwf	1
  5073                           
  5074                           ;main.c: 106:         PORTCbits.RC2 = BPC_PWR_ON;
  5075  0D67  0861               	movf	init_env@pdata^(0+384),w
  5076  0D68  3E05               	addlw	5
  5077  0D69  0086               	movwf	6
  5078  0D6A  3002               	movlw	2	; select bank4/5
  5079  0D6B  0087               	movwf	7
  5080  0D6C  0181               	clrf	1
  5081                           
  5082                           ;main.c: 108:         INTCONbits.IOCIF = FALSE;
  5083  0D6D  318E  2692  318C   	fcall	_display_update
  5084                           
  5085                           ;main.c: 112:     else if(pdata->g_isDecoding == TRUE && IOCCFbits.IOCCF1 == TRUE && TRU
      +                          E == pdata->g_find_recv_start)
  5086  0D70  0022               	movlb	2	; select bank2
  5087  0D71  110D               	bcf	13,2	;volatile
  5088                           
  5089                           ;main.c: 115:         {
  5090  0D72  0020               	movlb	0	; select bank0
  5091  0D73  110E               	bcf	14,2	;volatile
  5092                           
  5093                           ;main.c: 118:         timer_Timer0Start();
  5094  0D74  0021               	movlb	1	; select bank1
  5095  0D75  140E               	bsf	14,0	;volatile
  5096                           
  5097                           ;main.c: 119:     }
  5098  0D76  0024               	movlb	4	; select bank4
  5099  0D77  140E               	bsf	14,0	;volatile
  5100                           
  5101                           ;main.c: 126: 
  5102  0D78  3001               	movlw	1
  5103  0D79  3188  205F         	fcall	_display_set
  5104  0D7B  0008               	return
  5105  0D7C                     __end_of_init_env:	
  5106                           
  5107                           	psect	text9
  5108  0E92                     __ptext9:	
  5109 ;; *************** function _display_update *****************
  5110 ;; Defined at:
  5111 ;;		line 74 in file "display.c"
  5112 ;; Parameters:    Size  Location     Type
  5113 ;;		None
  5114 ;; Auto vars:     Size  Location     Type
  5115 ;;  pdata           1   24[BANK3 ] PTR volatile struct .
  5116 ;;		 -> g_data(39), 
  5117 ;; Return value:  Size  Location     Type
  5118 ;;                  1    wreg      void 
  5119 ;; Registers used:
  5120 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5121 ;; Tracked objects:
  5122 ;;		On entry : 0/0
  5123 ;;		On exit  : 0/0
  5124 ;;		Unchanged: 0/0
  5125 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5126 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5127 ;;      Locals:         0       0       0       0       3       0       0       0       0       0       0       0       
      +0       0
  5128 ;;      Temps:          0       0       0       0       9       0       0       0       0       0       0       0       
      +0       0
  5129 ;;      Totals:         0       0       0       0      12       0       0       0       0       0       0       0       
      +0       0
  5130 ;;Total ram usage:       12 bytes
  5131 ;; Hardware stack levels used:    1
  5132 ;; Hardware stack levels required when called:   12
  5133 ;; This function calls:
  5134 ;;		___awdiv
  5135 ;;		___awmod
  5136 ;;		_data_getdata
  5137 ;;		_display_write_once
  5138 ;; This function is called by:
  5139 ;;		_init_env
  5140 ;;		_main
  5141 ;; This function uses a non-reentrant model
  5142 ;;
  5143                           
  5144                           
  5145                           ;psect for function _display_update
  5146  0E92                     _display_update:	
  5147                           
  5148                           ;display.c: 88:     G_DATA *pdata = data_getdata();
  5149                           
  5150                           ;incstack = 0
  5151                           ; Regs used in _display_update: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5152  0E92  3180  2002  318E   	fcall	_data_getdata
  5153  0E95  0023               	movlb	3	; select bank3
  5154  0E96  00D1               	movwf	??_display_update^(0+384)
  5155  0E97  0851               	movf	??_display_update^(0+384),w
  5156  0E98  00DC               	movwf	display_update@pdata^(0+384)
  5157                           
  5158                           ;display.c: 89:     display_write_once(segmcode[(pdata->g_time_h/10 == 0? 10:pdata->g_ti
      +                          me_h/10)], segmcode[pdata->g_time_h%10], segmcode[pdata->g_time_m/10], segmcode[pdata->g
      +                          _time_m%10]);
  5159  0E99  300A               	movlw	10
  5160  0E9A  00C4               	movwf	___awdiv@divisor^(0+384)
  5161  0E9B  3000               	movlw	0
  5162  0E9C  00C5               	movwf	(___awdiv@divisor^(0+384)+1)
  5163  0E9D  085C               	movf	display_update@pdata^(0+384),w
  5164  0E9E  3E03               	addlw	3
  5165  0E9F  0086               	movwf	6
  5166  0EA0  3002               	movlw	2	; select bank4/5
  5167  0EA1  0087               	movwf	7
  5168  0EA2  0801               	movf	1,w
  5169  0EA3  00D1               	movwf	??_display_update^(0+384)
  5170  0EA4  01D2               	clrf	(??_display_update^(0+384)+1)
  5171  0EA5  0851               	movf	??_display_update^(0+384),w
  5172  0EA6  00C6               	movwf	___awdiv@dividend^(0+384)
  5173  0EA7  0852               	movf	(??_display_update+1)^(0+384),w
  5174  0EA8  00C7               	movwf	(___awdiv@dividend+1)^(0+384)
  5175  0EA9  318B  23F0  318E   	fcall	___awdiv
  5176  0EAC  0023               	movlb	3	; select bank3
  5177  0EAD  0844               	movf	?___awdiv^(0+384),w
  5178  0EAE  0445               	iorwf	(?___awdiv+1)^(0+384),w
  5179  0EAF  1903               	btfsc	3,2
  5180  0EB0  2ECA               	goto	l3333
  5181  0EB1  300A               	movlw	10
  5182  0EB2  00C4               	movwf	___awdiv@divisor^(0+384)
  5183  0EB3  3000               	movlw	0
  5184  0EB4  00C5               	movwf	(___awdiv@divisor^(0+384)+1)
  5185  0EB5  085C               	movf	display_update@pdata^(0+384),w
  5186  0EB6  3E03               	addlw	3
  5187  0EB7  0086               	movwf	6
  5188  0EB8  3002               	movlw	2	; select bank4/5
  5189  0EB9  0087               	movwf	7
  5190  0EBA  0801               	movf	1,w
  5191  0EBB  00D1               	movwf	??_display_update^(0+384)
  5192  0EBC  01D2               	clrf	(??_display_update^(0+384)+1)
  5193  0EBD  0851               	movf	??_display_update^(0+384),w
  5194  0EBE  00C6               	movwf	___awdiv@dividend^(0+384)
  5195  0EBF  0852               	movf	(??_display_update+1)^(0+384),w
  5196  0EC0  00C7               	movwf	(___awdiv@dividend+1)^(0+384)
  5197  0EC1  318B  23F0  318E   	fcall	___awdiv
  5198  0EC4  0023               	movlb	3	; select bank3
  5199  0EC5  0845               	movf	(?___awdiv+1)^(0+384),w
  5200  0EC6  00DB               	movwf	(_display_update$1550+1)^(0+384)
  5201  0EC7  0844               	movf	?___awdiv^(0+384),w
  5202  0EC8  00DA               	movwf	_display_update$1550^(0+384)
  5203  0EC9  2ECE               	goto	l3335
  5204  0ECA                     l3333:	
  5205  0ECA  300A               	movlw	10
  5206  0ECB  00DA               	movwf	_display_update$1550^(0+384)
  5207  0ECC  3000               	movlw	0
  5208  0ECD  00DB               	movwf	(_display_update$1550^(0+384)+1)
  5209  0ECE                     l3335:	
  5210  0ECE  300A               	movlw	10
  5211  0ECF  00C4               	movwf	___awmod@divisor^(0+384)
  5212  0ED0  3000               	movlw	0
  5213  0ED1  00C5               	movwf	(___awmod@divisor^(0+384)+1)
  5214  0ED2  085C               	movf	display_update@pdata^(0+384),w
  5215  0ED3  3E03               	addlw	3
  5216  0ED4  0086               	movwf	6
  5217  0ED5  3002               	movlw	2	; select bank4/5
  5218  0ED6  0087               	movwf	7
  5219  0ED7  0801               	movf	1,w
  5220  0ED8  00D1               	movwf	??_display_update^(0+384)
  5221  0ED9  01D2               	clrf	(??_display_update^(0+384)+1)
  5222  0EDA  0851               	movf	??_display_update^(0+384),w
  5223  0EDB  00C6               	movwf	___awmod@dividend^(0+384)
  5224  0EDC  0852               	movf	(??_display_update+1)^(0+384),w
  5225  0EDD  00C7               	movwf	(___awmod@dividend+1)^(0+384)
  5226  0EDE  318B  2359  318E   	fcall	___awmod
  5227  0EE1  0023               	movlb	3	; select bank3
  5228  0EE2  0845               	movf	(?___awmod+1)^(0+384),w
  5229  0EE3  0085               	movwf	5
  5230  0EE4  0844               	movf	?___awmod^(0+384),w
  5231  0EE5  0084               	movwf	4
  5232  0EE6  3000               	movlw	low (_segmcode| (0+32768))
  5233  0EE7  0784               	addwf	4,f
  5234  0EE8  3090               	movlw	high (_segmcode| (0+32768))
  5235  0EE9  3D85               	addwfc	5,f
  5236  0EEA  0800               	movf	0,w	;code access
  5237  0EEB  00D3               	movwf	(??_display_update+2)^(0+384)
  5238  0EEC  0853               	movf	(??_display_update+2)^(0+384),w
  5239  0EED  00CD               	movwf	display_write_once@HR^(0+384)
  5240  0EEE  300A               	movlw	10
  5241  0EEF  00C4               	movwf	___awdiv@divisor^(0+384)
  5242  0EF0  3000               	movlw	0
  5243  0EF1  00C5               	movwf	(___awdiv@divisor^(0+384)+1)
  5244  0EF2  085C               	movf	display_update@pdata^(0+384),w
  5245  0EF3  3E04               	addlw	4
  5246  0EF4  0086               	movwf	6
  5247  0EF5  3002               	movlw	2	; select bank4/5
  5248  0EF6  0087               	movwf	7
  5249  0EF7  0801               	movf	1,w
  5250  0EF8  00D4               	movwf	(??_display_update+3)^(0+384)
  5251  0EF9  01D5               	clrf	((??_display_update+3)^(0+384)+1)
  5252  0EFA  0854               	movf	(??_display_update+3)^(0+384),w
  5253  0EFB  00C6               	movwf	___awdiv@dividend^(0+384)
  5254  0EFC  0855               	movf	(??_display_update+4)^(0+384),w
  5255  0EFD  00C7               	movwf	(___awdiv@dividend+1)^(0+384)
  5256  0EFE  318B  23F0  318E   	fcall	___awdiv
  5257  0F01  0023               	movlb	3	; select bank3
  5258  0F02  0845               	movf	(?___awdiv+1)^(0+384),w
  5259  0F03  0085               	movwf	5
  5260  0F04  0844               	movf	?___awdiv^(0+384),w
  5261  0F05  0084               	movwf	4
  5262  0F06  3000               	movlw	low (_segmcode| (0+32768))
  5263  0F07  0784               	addwf	4,f
  5264  0F08  3090               	movlw	high (_segmcode| (0+32768))
  5265  0F09  3D85               	addwfc	5,f
  5266  0F0A  0800               	movf	0,w	;code access
  5267  0F0B  00D6               	movwf	(??_display_update+5)^(0+384)
  5268  0F0C  0856               	movf	(??_display_update+5)^(0+384),w
  5269  0F0D  00CE               	movwf	display_write_once@ML^(0+384)
  5270  0F0E  300A               	movlw	10
  5271  0F0F  00C4               	movwf	___awmod@divisor^(0+384)
  5272  0F10  3000               	movlw	0
  5273  0F11  00C5               	movwf	(___awmod@divisor^(0+384)+1)
  5274  0F12  085C               	movf	display_update@pdata^(0+384),w
  5275  0F13  3E04               	addlw	4
  5276  0F14  0086               	movwf	6
  5277  0F15  3002               	movlw	2	; select bank4/5
  5278  0F16  0087               	movwf	7
  5279  0F17  0801               	movf	1,w
  5280  0F18  00D7               	movwf	(??_display_update+6)^(0+384)
  5281  0F19  01D8               	clrf	((??_display_update+6)^(0+384)+1)
  5282  0F1A  0857               	movf	(??_display_update+6)^(0+384),w
  5283  0F1B  00C6               	movwf	___awmod@dividend^(0+384)
  5284  0F1C  0858               	movf	(??_display_update+7)^(0+384),w
  5285  0F1D  00C7               	movwf	(___awmod@dividend+1)^(0+384)
  5286  0F1E  318B  2359  318E   	fcall	___awmod
  5287  0F21  0023               	movlb	3	; select bank3
  5288  0F22  0845               	movf	(?___awmod+1)^(0+384),w
  5289  0F23  0085               	movwf	5
  5290  0F24  0844               	movf	?___awmod^(0+384),w
  5291  0F25  0084               	movwf	4
  5292  0F26  3000               	movlw	low (_segmcode| (0+32768))
  5293  0F27  0784               	addwf	4,f
  5294  0F28  3090               	movlw	high (_segmcode| (0+32768))
  5295  0F29  3D85               	addwfc	5,f
  5296  0F2A  0800               	movf	0,w	;code access
  5297  0F2B  00D9               	movwf	(??_display_update+8)^(0+384)
  5298  0F2C  0859               	movf	(??_display_update+8)^(0+384),w
  5299  0F2D  00CF               	movwf	display_write_once@MR^(0+384)
  5300  0F2E  085B               	movf	(_display_update$1550+1)^(0+384),w
  5301  0F2F  0085               	movwf	5
  5302  0F30  085A               	movf	_display_update$1550^(0+384),w
  5303  0F31  0084               	movwf	4
  5304  0F32  3000               	movlw	low (_segmcode| (0+32768))
  5305  0F33  0784               	addwf	4,f
  5306  0F34  3090               	movlw	high (_segmcode| (0+32768))
  5307  0F35  3D85               	addwfc	5,f
  5308  0F36  0800               	movf	0,w	;code access
  5309  0F37  318A  2228         	fcall	_display_write_once
  5310  0F39  0008               	return
  5311  0F3A                     __end_of_display_update:	
  5312                           
  5313                           	psect	text10
  5314  0A28                     __ptext10:	
  5315 ;; *************** function _display_write_once *****************
  5316 ;; Defined at:
  5317 ;;		line 56 in file "display.c"
  5318 ;; Parameters:    Size  Location     Type
  5319 ;;  HL              1    wreg     unsigned char 
  5320 ;;  HR              1    9[BANK3 ] unsigned char 
  5321 ;;  ML              1   10[BANK3 ] unsigned char 
  5322 ;;  MR              1   11[BANK3 ] unsigned char 
  5323 ;; Auto vars:     Size  Location     Type
  5324 ;;  HL              1   12[BANK3 ] unsigned char 
  5325 ;; Return value:  Size  Location     Type
  5326 ;;                  1    wreg      void 
  5327 ;; Registers used:
  5328 ;;		wreg, status,2, status,0, pclath, cstack
  5329 ;; Tracked objects:
  5330 ;;		On entry : 0/0
  5331 ;;		On exit  : 0/0
  5332 ;;		Unchanged: 0/0
  5333 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5334 ;;      Params:         0       0       0       0       3       0       0       0       0       0       0       0       
      +0       0
  5335 ;;      Locals:         0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0
  5336 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5337 ;;      Totals:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  5338 ;;Total ram usage:        4 bytes
  5339 ;; Hardware stack levels used:    1
  5340 ;; Hardware stack levels required when called:   11
  5341 ;; This function calls:
  5342 ;;		_display_control595_delay
  5343 ;;		_display_write_byte
  5344 ;; This function is called by:
  5345 ;;		_display_update
  5346 ;; This function uses a non-reentrant model
  5347 ;;
  5348                           
  5349                           
  5350                           ;psect for function _display_write_once
  5351  0A28                     _display_write_once:	
  5352                           
  5353                           ;incstack = 0
  5354                           ; Regs used in _display_write_once: [wreg+status,2+status,0+pclath+cstack]
  5355                           ;display_write_once@HL stored from wreg
  5356  0A28  0023               	movlb	3	; select bank3
  5357  0A29  00D0               	movwf	display_write_once@HL^(0+384)
  5358                           
  5359                           ;display.c: 58:     display_write_byte(HL);
  5360  0A2A  0850               	movf	display_write_once@HL^(0+384),w
  5361  0A2B  318A  2275  318A   	fcall	_display_write_byte
  5362                           
  5363                           ;display.c: 59:     display_write_byte(HR);
  5364  0A2E  0023               	movlb	3	; select bank3
  5365  0A2F  084D               	movf	display_write_once@HR^(0+384),w
  5366  0A30  318A  2275  318A   	fcall	_display_write_byte
  5367                           
  5368                           ;display.c: 60:     display_write_byte(ML);
  5369  0A33  0023               	movlb	3	; select bank3
  5370  0A34  084E               	movf	display_write_once@ML^(0+384),w
  5371  0A35  318A  2275  318A   	fcall	_display_write_byte
  5372                           
  5373                           ;display.c: 61:     display_write_byte(MR);
  5374  0A38  0023               	movlb	3	; select bank3
  5375  0A39  084F               	movf	display_write_once@MR^(0+384),w
  5376  0A3A  318A  2275  318A   	fcall	_display_write_byte
  5377                           
  5378                           ;display.c: 64:     LATBbits.LATB0 = PIN_LOW;
  5379  0A3D  0022               	movlb	2	; select bank2
  5380  0A3E  100D               	bcf	13,0	;volatile
  5381                           
  5382                           ;display.c: 65:     display_control595_delay();
  5383  0A3F  3188  20A9  318A   	fcall	_display_control595_delay
  5384                           
  5385                           ;display.c: 66:     LATBbits.LATB0 = PIN_HIGH;
  5386  0A42  0022               	movlb	2	; select bank2
  5387  0A43  140D               	bsf	13,0	;volatile
  5388                           
  5389                           ;display.c: 67:     display_control595_delay();
  5390  0A44  3188  20A9  318A   	fcall	_display_control595_delay
  5391                           
  5392                           ;display.c: 69:     LATBbits.LATB1 = PIN_HIGH;
  5393  0A47  0022               	movlb	2	; select bank2
  5394  0A48  148D               	bsf	13,1	;volatile
  5395                           
  5396                           ;display.c: 70:  display_control595_delay();
  5397  0A49  3188  20A9         	fcall	_display_control595_delay
  5398                           
  5399                           ;display.c: 71:     LATBbits.LATB1 = PIN_LOW;
  5400  0A4B  0022               	movlb	2	; select bank2
  5401  0A4C  108D               	bcf	13,1	;volatile
  5402  0A4D  0008               	return
  5403  0A4E                     __end_of_display_write_once:	
  5404                           
  5405                           	psect	text11
  5406  0A75                     __ptext11:	
  5407 ;; *************** function _display_write_byte *****************
  5408 ;; Defined at:
  5409 ;;		line 44 in file "display.c"
  5410 ;; Parameters:    Size  Location     Type
  5411 ;;  data            1    wreg     unsigned char 
  5412 ;; Auto vars:     Size  Location     Type
  5413 ;;  data            1    4[BANK3 ] unsigned char 
  5414 ;;  i               1    5[BANK3 ] unsigned char 
  5415 ;; Return value:  Size  Location     Type
  5416 ;;                  1    wreg      void 
  5417 ;; Registers used:
  5418 ;;		wreg, status,2, status,0, pclath, cstack
  5419 ;; Tracked objects:
  5420 ;;		On entry : 0/0
  5421 ;;		On exit  : 0/0
  5422 ;;		Unchanged: 0/0
  5423 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5424 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5425 ;;      Locals:         0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0
  5426 ;;      Temps:          0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0
  5427 ;;      Totals:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  5428 ;;Total ram usage:        4 bytes
  5429 ;; Hardware stack levels used:    1
  5430 ;; Hardware stack levels required when called:   10
  5431 ;; This function calls:
  5432 ;;		_display_control595_delay
  5433 ;; This function is called by:
  5434 ;;		_display_write_once
  5435 ;; This function uses a non-reentrant model
  5436 ;;
  5437                           
  5438                           
  5439                           ;psect for function _display_write_byte
  5440  0A75                     _display_write_byte:	
  5441                           
  5442                           ;incstack = 0
  5443                           ; Regs used in _display_write_byte: [wreg+status,2+status,0+pclath+cstack]
  5444                           ;display_write_byte@data stored from wreg
  5445  0A75  0023               	movlb	3	; select bank3
  5446  0A76  00C8               	movwf	display_write_byte@data^(0+384)
  5447                           
  5448                           ;display.c: 45:     u8 i;;display.c: 46:     for(i = 0; i < 8; i++){
  5449  0A77  01C9               	clrf	display_write_byte@i^(0+384)
  5450  0A78                     l2895:	
  5451                           
  5452                           ;display.c: 47:   LATBbits.LATB5 = (data & 0x80) >> 7;
  5453  0A78  0848               	movf	display_write_byte@data^(0+384),w
  5454  0A79  00C6               	movwf	??_display_write_byte^(0+384)
  5455  0A7A  3007               	movlw	7
  5456  0A7B                     u2445:	
  5457  0A7B  36C6               	lsrf	??_display_write_byte^(0+384),f
  5458  0A7C  0B89               	decfsz	9,f
  5459  0A7D  2A7B               	goto	u2445
  5460  0A7E  0846               	movf	??_display_write_byte^(0+384),w
  5461  0A7F  3901               	andlw	1
  5462  0A80  00C7               	movwf	(??_display_write_byte+1)^(0+384)
  5463  0A81  0EC7               	swapf	(??_display_write_byte+1)^(0+384),f
  5464  0A82  0DC7               	rlf	(??_display_write_byte+1)^(0+384),f
  5465  0A83  0022               	movlb	2	; select bank2
  5466  0A84  080D               	movf	13,w	;volatile
  5467  0A85  0023               	movlb	3	; select bank3
  5468  0A86  0647               	xorwf	(??_display_write_byte+1)^(0+384),w
  5469  0A87  39DF               	andlw	-33
  5470  0A88  0647               	xorwf	(??_display_write_byte+1)^(0+384),w
  5471  0A89  0022               	movlb	2	; select bank2
  5472  0A8A  008D               	movwf	13	;volatile
  5473                           
  5474                           ;display.c: 48:         LATBbits.LATB0 = PIN_LOW;
  5475  0A8B  100D               	bcf	13,0	;volatile
  5476                           
  5477                           ;display.c: 49:   display_control595_delay();
  5478  0A8C  3188  20A9  318A   	fcall	_display_control595_delay
  5479                           
  5480                           ;display.c: 50:         LATBbits.LATB0 = PIN_HIGH;
  5481  0A8F  0022               	movlb	2	; select bank2
  5482  0A90  140D               	bsf	13,0	;volatile
  5483                           
  5484                           ;display.c: 51:   display_control595_delay();
  5485  0A91  3188  20A9  318A   	fcall	_display_control595_delay
  5486                           
  5487                           ;display.c: 52:         data <<= 1;
  5488  0A94  1003               	clrc
  5489  0A95  0023               	movlb	3	; select bank3
  5490  0A96  0DC8               	rlf	display_write_byte@data^(0+384),f
  5491                           
  5492                           ;display.c: 53:     }
  5493  0A97  3001               	movlw	1
  5494  0A98  00C6               	movwf	??_display_write_byte^(0+384)
  5495  0A99  0846               	movf	??_display_write_byte^(0+384),w
  5496  0A9A  07C9               	addwf	display_write_byte@i^(0+384),f
  5497  0A9B  3008               	movlw	8
  5498  0A9C  0249               	subwf	display_write_byte@i^(0+384),w
  5499  0A9D  1803               	btfsc	3,0
  5500  0A9E  0008               	return
  5501  0A9F  2A78               	goto	l2895
  5502  0AA0                     __end_of_display_write_byte:	
  5503                           
  5504                           	psect	text12
  5505  08A9                     __ptext12:	
  5506 ;; *************** function _display_control595_delay *****************
  5507 ;; Defined at:
  5508 ;;		line 28 in file "display.c"
  5509 ;; Parameters:    Size  Location     Type
  5510 ;;		None
  5511 ;; Auto vars:     Size  Location     Type
  5512 ;;  times           1    1[BANK3 ] unsigned char 
  5513 ;; Return value:  Size  Location     Type
  5514 ;;                  1    wreg      void 
  5515 ;; Registers used:
  5516 ;;		wreg, status,2, status,0
  5517 ;; Tracked objects:
  5518 ;;		On entry : 0/0
  5519 ;;		On exit  : 0/0
  5520 ;;		Unchanged: 0/0
  5521 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5522 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5523 ;;      Locals:         0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0
  5524 ;;      Temps:          0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0
  5525 ;;      Totals:         0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0
  5526 ;;Total ram usage:        2 bytes
  5527 ;; Hardware stack levels used:    1
  5528 ;; Hardware stack levels required when called:    9
  5529 ;; This function calls:
  5530 ;;		Nothing
  5531 ;; This function is called by:
  5532 ;;		_display_write_byte
  5533 ;;		_display_write_once
  5534 ;; This function uses a non-reentrant model
  5535 ;;
  5536                           
  5537                           
  5538                           ;psect for function _display_control595_delay
  5539  08A9                     _display_control595_delay:	
  5540                           
  5541                           ;display.c: 29:    u8 times = 10;
  5542                           
  5543                           ;incstack = 0
  5544                           ; Regs used in _display_control595_delay: [wreg+status,2+status,0]
  5545  08A9  300A               	movlw	10
  5546  08AA  0023               	movlb	3	; select bank3
  5547  08AB  00C4               	movwf	??_display_control595_delay^(0+384)
  5548  08AC  0844               	movf	??_display_control595_delay^(0+384),w
  5549  08AD  00C5               	movwf	display_control595_delay@times^(0+384)
  5550  08AE                     l556:	
  5551                           ;display.c: 33:    }
  5552                           
  5553                           ;display.c: 30:    while(times > 0){
  5554                           
  5555                           
  5556                           ;display.c: 30:    while(times > 0){
  5557  08AE  0845               	movf	display_control595_delay@times^(0+384),w
  5558  08AF  1903               	btfsc	3,2
  5559  08B0  0008               	return
  5560                           
  5561                           ;display.c: 31:     __nop();
  5562  08B1  0000               	nop
  5563                           
  5564                           ;display.c: 32:        times--;
  5565  08B2  3001               	movlw	1
  5566  08B3  0023               	movlb	3	; select bank3
  5567  08B4  02C5               	subwf	display_control595_delay@times^(0+384),f
  5568  08B5  28AE               	goto	l556
  5569  08B6                     __end_of_display_control595_delay:	
  5570                           
  5571                           	psect	text13
  5572  0002                     __ptext13:	
  5573 ;; *************** function _data_getdata *****************
  5574 ;; Defined at:
  5575 ;;		line 9 in file "data.c"
  5576 ;; Parameters:    Size  Location     Type
  5577 ;;		None
  5578 ;; Auto vars:     Size  Location     Type
  5579 ;;		None
  5580 ;; Return value:  Size  Location     Type
  5581 ;;                  1    wreg      PTR volatile struct .
  5582 ;; Registers used:
  5583 ;;		wreg
  5584 ;; Tracked objects:
  5585 ;;		On entry : 0/0
  5586 ;;		On exit  : 0/0
  5587 ;;		Unchanged: 0/0
  5588 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5589 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5590 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5591 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5592 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5593 ;;Total ram usage:        0 bytes
  5594 ;; Hardware stack levels used:    1
  5595 ;; Hardware stack levels required when called:    9
  5596 ;; This function calls:
  5597 ;;		Nothing
  5598 ;; This function is called by:
  5599 ;;		_init_env
  5600 ;;		_display_update
  5601 ;;		_tmp_change
  5602 ;; This function uses a non-reentrant model
  5603 ;;
  5604                           
  5605                           
  5606                           ;psect for function _data_getdata
  5607  0002                     _data_getdata:	
  5608                           
  5609                           ;data.c: 11:     return &g_data;
  5610                           
  5611                           ;incstack = 0
  5612                           ; Regs used in _data_getdata: [wreg]
  5613  0002  3020               	movlw	(low (_g_data| (0+512)))& (0+255)
  5614  0003  0008               	return
  5615  0004                     __end_of_data_getdata:	
  5616                           
  5617                           	psect	text14
  5618  0B59                     __ptext14:	
  5619 ;; *************** function ___awmod *****************
  5620 ;; Defined at:
  5621 ;;		line 5 in file "E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\awmod.c"
  5622 ;; Parameters:    Size  Location     Type
  5623 ;;  divisor         2    0[BANK3 ] int 
  5624 ;;  dividend        2    2[BANK3 ] int 
  5625 ;; Auto vars:     Size  Location     Type
  5626 ;;  sign            1    6[BANK3 ] unsigned char 
  5627 ;;  counter         1    5[BANK3 ] unsigned char 
  5628 ;; Return value:  Size  Location     Type
  5629 ;;                  2    0[BANK3 ] int 
  5630 ;; Registers used:
  5631 ;;		wreg, status,2, status,0
  5632 ;; Tracked objects:
  5633 ;;		On entry : 0/0
  5634 ;;		On exit  : 0/0
  5635 ;;		Unchanged: 0/0
  5636 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5637 ;;      Params:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  5638 ;;      Locals:         0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0
  5639 ;;      Temps:          0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0
  5640 ;;      Totals:         0       0       0       0       7       0       0       0       0       0       0       0       
      +0       0
  5641 ;;Total ram usage:        7 bytes
  5642 ;; Hardware stack levels used:    1
  5643 ;; Hardware stack levels required when called:    9
  5644 ;; This function calls:
  5645 ;;		Nothing
  5646 ;; This function is called by:
  5647 ;;		_display_update
  5648 ;; This function uses a non-reentrant model
  5649 ;;
  5650                           
  5651                           
  5652                           ;psect for function ___awmod
  5653  0B59                     ___awmod:	
  5654                           
  5655                           ;incstack = 0
  5656                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  5657  0B59  0023               	movlb	3	; select bank3
  5658  0B5A  01CA               	clrf	___awmod@sign^(0+384)
  5659  0B5B  1FC7               	btfss	(___awmod@dividend+1)^(0+384),7
  5660  0B5C  2B64               	goto	l3279
  5661  0B5D  09C6               	comf	___awmod@dividend^(0+384),f
  5662  0B5E  09C7               	comf	(___awmod@dividend+1)^(0+384),f
  5663  0B5F  0AC6               	incf	___awmod@dividend^(0+384),f
  5664  0B60  1903               	skipnz
  5665  0B61  0AC7               	incf	(___awmod@dividend+1)^(0+384),f
  5666  0B62  01CA               	clrf	___awmod@sign^(0+384)
  5667  0B63  0ACA               	incf	___awmod@sign^(0+384),f
  5668  0B64                     l3279:	
  5669  0B64  1FC5               	btfss	(___awmod@divisor+1)^(0+384),7
  5670  0B65  2B6B               	goto	l3283
  5671  0B66  09C4               	comf	___awmod@divisor^(0+384),f
  5672  0B67  09C5               	comf	(___awmod@divisor+1)^(0+384),f
  5673  0B68  0AC4               	incf	___awmod@divisor^(0+384),f
  5674  0B69  1903               	skipnz
  5675  0B6A  0AC5               	incf	(___awmod@divisor+1)^(0+384),f
  5676  0B6B                     l3283:	
  5677  0B6B  0844               	movf	___awmod@divisor^(0+384),w
  5678  0B6C  0445               	iorwf	(___awmod@divisor+1)^(0+384),w
  5679  0B6D  1903               	btfsc	3,2
  5680  0B6E  2B92               	goto	l3301
  5681  0B6F  01C9               	clrf	___awmod@counter^(0+384)
  5682  0B70  0AC9               	incf	___awmod@counter^(0+384),f
  5683  0B71                     l3291:	
  5684  0B71  1BC5               	btfsc	(___awmod@divisor+1)^(0+384),7
  5685  0B72  2B7D               	goto	l3293
  5686  0B73  3001               	movlw	1
  5687  0B74                     u3135:	
  5688  0B74  35C4               	lslf	___awmod@divisor^(0+384),f
  5689  0B75  0DC5               	rlf	(___awmod@divisor+1)^(0+384),f
  5690  0B76  0B89               	decfsz	9,f
  5691  0B77  2B74               	goto	u3135
  5692  0B78  3001               	movlw	1
  5693  0B79  00C8               	movwf	??___awmod^(0+384)
  5694  0B7A  0848               	movf	??___awmod^(0+384),w
  5695  0B7B  07C9               	addwf	___awmod@counter^(0+384),f
  5696  0B7C  2B71               	goto	l3291
  5697  0B7D                     l3293:	
  5698  0B7D  0845               	movf	(___awmod@divisor+1)^(0+384),w
  5699  0B7E  0247               	subwf	(___awmod@dividend+1)^(0+384),w
  5700  0B7F  1D03               	skipz
  5701  0B80  2B83               	goto	u3155
  5702  0B81  0844               	movf	___awmod@divisor^(0+384),w
  5703  0B82  0246               	subwf	___awmod@dividend^(0+384),w
  5704  0B83                     u3155:	
  5705  0B83  1C03               	skipc
  5706  0B84  2B89               	goto	l3297
  5707  0B85  0844               	movf	___awmod@divisor^(0+384),w
  5708  0B86  02C6               	subwf	___awmod@dividend^(0+384),f
  5709  0B87  0845               	movf	(___awmod@divisor+1)^(0+384),w
  5710  0B88  3BC7               	subwfb	(___awmod@dividend+1)^(0+384),f
  5711  0B89                     l3297:	
  5712  0B89  3001               	movlw	1
  5713  0B8A                     u3165:	
  5714  0B8A  36C5               	lsrf	(___awmod@divisor+1)^(0+384),f
  5715  0B8B  0CC4               	rrf	___awmod@divisor^(0+384),f
  5716  0B8C  0B89               	decfsz	9,f
  5717  0B8D  2B8A               	goto	u3165
  5718  0B8E  3001               	movlw	1
  5719  0B8F  02C9               	subwf	___awmod@counter^(0+384),f
  5720  0B90  1D03               	btfss	3,2
  5721  0B91  2B7D               	goto	l3293
  5722  0B92                     l3301:	
  5723  0B92  084A               	movf	___awmod@sign^(0+384),w
  5724  0B93  1903               	btfsc	3,2
  5725  0B94  2B9A               	goto	l3305
  5726  0B95  09C6               	comf	___awmod@dividend^(0+384),f
  5727  0B96  09C7               	comf	(___awmod@dividend+1)^(0+384),f
  5728  0B97  0AC6               	incf	___awmod@dividend^(0+384),f
  5729  0B98  1903               	skipnz
  5730  0B99  0AC7               	incf	(___awmod@dividend+1)^(0+384),f
  5731  0B9A                     l3305:	
  5732  0B9A  0847               	movf	(___awmod@dividend+1)^(0+384),w
  5733  0B9B  00C5               	movwf	(?___awmod+1)^(0+384)
  5734  0B9C  0846               	movf	___awmod@dividend^(0+384),w
  5735  0B9D  00C4               	movwf	?___awmod^(0+384)
  5736  0B9E  0008               	return
  5737  0B9F                     __end_of___awmod:	
  5738                           
  5739                           	psect	text15
  5740  0BF0                     __ptext15:	
  5741 ;; *************** function ___awdiv *****************
  5742 ;; Defined at:
  5743 ;;		line 5 in file "E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\awdiv.c"
  5744 ;; Parameters:    Size  Location     Type
  5745 ;;  divisor         2    0[BANK3 ] int 
  5746 ;;  dividend        2    2[BANK3 ] int 
  5747 ;; Auto vars:     Size  Location     Type
  5748 ;;  quotient        2    7[BANK3 ] int 
  5749 ;;  sign            1    6[BANK3 ] unsigned char 
  5750 ;;  counter         1    5[BANK3 ] unsigned char 
  5751 ;; Return value:  Size  Location     Type
  5752 ;;                  2    0[BANK3 ] int 
  5753 ;; Registers used:
  5754 ;;		wreg, status,2, status,0
  5755 ;; Tracked objects:
  5756 ;;		On entry : 0/0
  5757 ;;		On exit  : 0/0
  5758 ;;		Unchanged: 0/0
  5759 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5760 ;;      Params:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  5761 ;;      Locals:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  5762 ;;      Temps:          0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0
  5763 ;;      Totals:         0       0       0       0       9       0       0       0       0       0       0       0       
      +0       0
  5764 ;;Total ram usage:        9 bytes
  5765 ;; Hardware stack levels used:    1
  5766 ;; Hardware stack levels required when called:    9
  5767 ;; This function calls:
  5768 ;;		Nothing
  5769 ;; This function is called by:
  5770 ;;		_display_update
  5771 ;; This function uses a non-reentrant model
  5772 ;;
  5773                           
  5774                           
  5775                           ;psect for function ___awdiv
  5776  0BF0                     ___awdiv:	
  5777                           
  5778                           ;incstack = 0
  5779                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  5780  0BF0  0023               	movlb	3	; select bank3
  5781  0BF1  01CA               	clrf	___awdiv@sign^(0+384)
  5782  0BF2  1FC5               	btfss	(___awdiv@divisor+1)^(0+384),7
  5783  0BF3  2BFB               	goto	l3235
  5784  0BF4  09C4               	comf	___awdiv@divisor^(0+384),f
  5785  0BF5  09C5               	comf	(___awdiv@divisor+1)^(0+384),f
  5786  0BF6  0AC4               	incf	___awdiv@divisor^(0+384),f
  5787  0BF7  1903               	skipnz
  5788  0BF8  0AC5               	incf	(___awdiv@divisor+1)^(0+384),f
  5789  0BF9  01CA               	clrf	___awdiv@sign^(0+384)
  5790  0BFA  0ACA               	incf	___awdiv@sign^(0+384),f
  5791  0BFB                     l3235:	
  5792  0BFB  1FC7               	btfss	(___awdiv@dividend+1)^(0+384),7
  5793  0BFC  2C06               	goto	l3241
  5794  0BFD  09C6               	comf	___awdiv@dividend^(0+384),f
  5795  0BFE  09C7               	comf	(___awdiv@dividend+1)^(0+384),f
  5796  0BFF  0AC6               	incf	___awdiv@dividend^(0+384),f
  5797  0C00  1903               	skipnz
  5798  0C01  0AC7               	incf	(___awdiv@dividend+1)^(0+384),f
  5799  0C02  3001               	movlw	1
  5800  0C03  00C8               	movwf	??___awdiv^(0+384)
  5801  0C04  0848               	movf	??___awdiv^(0+384),w
  5802  0C05  06CA               	xorwf	___awdiv@sign^(0+384),f
  5803  0C06                     l3241:	
  5804  0C06  01CB               	clrf	___awdiv@quotient^(0+384)
  5805  0C07  01CC               	clrf	(___awdiv@quotient+1)^(0+384)
  5806  0C08  0844               	movf	___awdiv@divisor^(0+384),w
  5807  0C09  0445               	iorwf	(___awdiv@divisor+1)^(0+384),w
  5808  0C0A  1903               	btfsc	3,2
  5809  0C0B  2C35               	goto	l3263
  5810  0C0C  01C9               	clrf	___awdiv@counter^(0+384)
  5811  0C0D  0AC9               	incf	___awdiv@counter^(0+384),f
  5812  0C0E                     l3251:	
  5813  0C0E  1BC5               	btfsc	(___awdiv@divisor+1)^(0+384),7
  5814  0C0F  2C1A               	goto	l3253
  5815  0C10  3001               	movlw	1
  5816  0C11                     u3035:	
  5817  0C11  35C4               	lslf	___awdiv@divisor^(0+384),f
  5818  0C12  0DC5               	rlf	(___awdiv@divisor+1)^(0+384),f
  5819  0C13  0B89               	decfsz	9,f
  5820  0C14  2C11               	goto	u3035
  5821  0C15  3001               	movlw	1
  5822  0C16  00C8               	movwf	??___awdiv^(0+384)
  5823  0C17  0848               	movf	??___awdiv^(0+384),w
  5824  0C18  07C9               	addwf	___awdiv@counter^(0+384),f
  5825  0C19  2C0E               	goto	l3251
  5826  0C1A                     l3253:	
  5827  0C1A  3001               	movlw	1
  5828  0C1B                     u3055:	
  5829  0C1B  35CB               	lslf	___awdiv@quotient^(0+384),f
  5830  0C1C  0DCC               	rlf	(___awdiv@quotient+1)^(0+384),f
  5831  0C1D  0B89               	decfsz	9,f
  5832  0C1E  2C1B               	goto	u3055
  5833  0C1F  0845               	movf	(___awdiv@divisor+1)^(0+384),w
  5834  0C20  0247               	subwf	(___awdiv@dividend+1)^(0+384),w
  5835  0C21  1D03               	skipz
  5836  0C22  2C25               	goto	u3065
  5837  0C23  0844               	movf	___awdiv@divisor^(0+384),w
  5838  0C24  0246               	subwf	___awdiv@dividend^(0+384),w
  5839  0C25                     u3065:	
  5840  0C25  1C03               	skipc
  5841  0C26  2C2C               	goto	l3259
  5842  0C27  0844               	movf	___awdiv@divisor^(0+384),w
  5843  0C28  02C6               	subwf	___awdiv@dividend^(0+384),f
  5844  0C29  0845               	movf	(___awdiv@divisor+1)^(0+384),w
  5845  0C2A  3BC7               	subwfb	(___awdiv@dividend+1)^(0+384),f
  5846  0C2B  144B               	bsf	___awdiv@quotient^(0+384),0
  5847  0C2C                     l3259:	
  5848  0C2C  3001               	movlw	1
  5849  0C2D                     u3075:	
  5850  0C2D  36C5               	lsrf	(___awdiv@divisor+1)^(0+384),f
  5851  0C2E  0CC4               	rrf	___awdiv@divisor^(0+384),f
  5852  0C2F  0B89               	decfsz	9,f
  5853  0C30  2C2D               	goto	u3075
  5854  0C31  3001               	movlw	1
  5855  0C32  02C9               	subwf	___awdiv@counter^(0+384),f
  5856  0C33  1D03               	btfss	3,2
  5857  0C34  2C1A               	goto	l3253
  5858  0C35                     l3263:	
  5859  0C35  084A               	movf	___awdiv@sign^(0+384),w
  5860  0C36  1903               	btfsc	3,2
  5861  0C37  2C3D               	goto	l3267
  5862  0C38  09CB               	comf	___awdiv@quotient^(0+384),f
  5863  0C39  09CC               	comf	(___awdiv@quotient+1)^(0+384),f
  5864  0C3A  0ACB               	incf	___awdiv@quotient^(0+384),f
  5865  0C3B  1903               	skipnz
  5866  0C3C  0ACC               	incf	(___awdiv@quotient+1)^(0+384),f
  5867  0C3D                     l3267:	
  5868  0C3D  084C               	movf	(___awdiv@quotient+1)^(0+384),w
  5869  0C3E  00C5               	movwf	(?___awdiv+1)^(0+384)
  5870  0C3F  084B               	movf	___awdiv@quotient^(0+384),w
  5871  0C40  00C4               	movwf	?___awdiv^(0+384)
  5872  0C41  0008               	return
  5873  0C42                     __end_of___awdiv:	
  5874                           
  5875                           	psect	text16
  5876  085F                     __ptext16:	
  5877 ;; *************** function _display_set *****************
  5878 ;; Defined at:
  5879 ;;		line 16 in file "display.c"
  5880 ;; Parameters:    Size  Location     Type
  5881 ;;  ison            1    wreg     enum E5232
  5882 ;; Auto vars:     Size  Location     Type
  5883 ;;  ison            1    0[BANK3 ] enum E5232
  5884 ;; Return value:  Size  Location     Type
  5885 ;;                  1    wreg      void 
  5886 ;; Registers used:
  5887 ;;		wreg, status,0
  5888 ;; Tracked objects:
  5889 ;;		On entry : 0/0
  5890 ;;		On exit  : 0/0
  5891 ;;		Unchanged: 0/0
  5892 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5893 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5894 ;;      Locals:         0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0
  5895 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5896 ;;      Totals:         0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0
  5897 ;;Total ram usage:        1 bytes
  5898 ;; Hardware stack levels used:    1
  5899 ;; Hardware stack levels required when called:    9
  5900 ;; This function calls:
  5901 ;;		Nothing
  5902 ;; This function is called by:
  5903 ;;		_init_env
  5904 ;; This function uses a non-reentrant model
  5905 ;;
  5906                           
  5907                           
  5908                           ;psect for function _display_set
  5909  085F                     _display_set:	
  5910                           
  5911                           ;incstack = 0
  5912                           ; Regs used in _display_set: [wreg+status,0]
  5913                           ;display_set@ison stored from wreg
  5914  085F  0023               	movlb	3	; select bank3
  5915  0860  00C4               	movwf	display_set@ison^(0+384)
  5916                           
  5917                           ;display.c: 16: void display_set(BOOL ison);display.c: 17: {;display.c: 18:     PORTAbit
      +                          s.RA0 = ison;
  5918  0861  0C44               	rrf	display_set@ison^(0+384),w
  5919  0862  0020               	movlb	0	; select bank0
  5920  0863  1C03               	skipc
  5921  0864  100C               	bcf	12,0	;volatile
  5922  0865  1803               	skipnc
  5923  0866  140C               	bsf	12,0	;volatile
  5924  0867  0008               	return
  5925  0868                     __end_of_display_set:	
  5926                           
  5927                           	psect	text17
  5928  0857                     __ptext17:	
  5929 ;; *************** function _capture_init *****************
  5930 ;; Defined at:
  5931 ;;		line 25 in file "hardware.c"
  5932 ;; Parameters:    Size  Location     Type
  5933 ;;		None
  5934 ;; Auto vars:     Size  Location     Type
  5935 ;;		None
  5936 ;; Return value:  Size  Location     Type
  5937 ;;                  1    wreg      unsigned char 
  5938 ;; Registers used:
  5939 ;;		wreg, status,2, status,0, pclath, cstack
  5940 ;; Tracked objects:
  5941 ;;		On entry : 0/0
  5942 ;;		On exit  : 0/0
  5943 ;;		Unchanged: 0/0
  5944 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5945 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5946 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5947 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5948 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5949 ;;Total ram usage:        0 bytes
  5950 ;; Hardware stack levels used:    1
  5951 ;; Hardware stack levels required when called:   10
  5952 ;; This function calls:
  5953 ;;		_capture_setEdge
  5954 ;; This function is called by:
  5955 ;;		_main
  5956 ;; This function uses a non-reentrant model
  5957 ;;
  5958                           
  5959                           
  5960                           ;psect for function _capture_init
  5961  0857                     _capture_init:	
  5962                           
  5963                           ;hardware.c: 30:     capture_setEdge((0b0100));
  5964                           
  5965                           ;incstack = 0
  5966                           ; Regs used in _capture_init: [wreg+status,2+status,0+pclath+cstack]
  5967  0857  3004               	movlw	4
  5968  0858  3188  20E0         	fcall	_capture_setEdge
  5969                           
  5970                           ;hardware.c: 31:     TRISCbits.TRISC1 = 1;
  5971  085A  0021               	movlb	1	; select bank1
  5972  085B  148E               	bsf	14,1	;volatile
  5973                           
  5974                           ;hardware.c: 33:     PIR2bits.CCP2IF = 0;
  5975  085C  0020               	movlb	0	; select bank0
  5976  085D  1012               	bcf	18,0	;volatile
  5977  085E  0008               	return
  5978  085F                     __end_of_capture_init:	
  5979                           
  5980                           	psect	text18
  5981  08E0                     __ptext18:	
  5982 ;; *************** function _capture_setEdge *****************
  5983 ;; Defined at:
  5984 ;;		line 12 in file "hardware.c"
  5985 ;; Parameters:    Size  Location     Type
  5986 ;;  edge            1    wreg     unsigned char 
  5987 ;; Auto vars:     Size  Location     Type
  5988 ;;  edge            1    0[BANK3 ] unsigned char 
  5989 ;; Return value:  Size  Location     Type
  5990 ;;                  2  483[None  ] int 
  5991 ;; Registers used:
  5992 ;;		wreg, status,2, status,0
  5993 ;; Tracked objects:
  5994 ;;		On entry : 0/0
  5995 ;;		On exit  : 0/0
  5996 ;;		Unchanged: 0/0
  5997 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5998 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5999 ;;      Locals:         0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0
  6000 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6001 ;;      Totals:         0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0
  6002 ;;Total ram usage:        1 bytes
  6003 ;; Hardware stack levels used:    1
  6004 ;; Hardware stack levels required when called:    9
  6005 ;; This function calls:
  6006 ;;		Nothing
  6007 ;; This function is called by:
  6008 ;;		_capture_init
  6009 ;; This function uses a non-reentrant model
  6010 ;;
  6011                           
  6012                           
  6013                           ;psect for function _capture_setEdge
  6014  08E0                     _capture_setEdge:	
  6015                           
  6016                           ;incstack = 0
  6017                           ; Regs used in _capture_setEdge: [wreg+status,2+status,0]
  6018                           ;capture_setEdge@edge stored from wreg
  6019  08E0  0023               	movlb	3	; select bank3
  6020  08E1  00C4               	movwf	capture_setEdge@edge^(0+384)
  6021                           
  6022                           ;hardware.c: 12: static int capture_setEdge(u8 edge);hardware.c: 13: {;hardware.c: 14:  
      +                             if((edge == (0b0101)) || (edge == (0b0100)))
  6023  08E2  3005               	movlw	5
  6024  08E3  0644               	xorwf	capture_setEdge@edge^(0+384),w
  6025  08E4  1903               	btfsc	3,2
  6026  08E5  28EA               	goto	l3601
  6027  08E6  3004               	movlw	4
  6028  08E7  0644               	xorwf	capture_setEdge@edge^(0+384),w
  6029  08E8  1D03               	btfss	3,2
  6030  08E9  0008               	return
  6031  08EA                     l3601:	
  6032                           
  6033                           ;hardware.c: 15:     {;hardware.c: 16:         CCP2CONbits.CCP2M = edge;
  6034  08EA  0025               	movlb	5	; select bank5
  6035  08EB  081A               	movf	26,w	;volatile
  6036  08EC  0023               	movlb	3	; select bank3
  6037  08ED  0644               	xorwf	capture_setEdge@edge^(0+384),w
  6038  08EE  39F0               	andlw	-16
  6039  08EF  0644               	xorwf	capture_setEdge@edge^(0+384),w
  6040  08F0  0025               	movlb	5	; select bank5
  6041  08F1  009A               	movwf	26	;volatile
  6042  08F2  0008               	return
  6043  08F3                     __end_of_capture_setEdge:	
  6044                           
  6045                           	psect	text19
  6046  07F2                     __ptext19:	
  6047 ;; *************** function _capture_Set *****************
  6048 ;; Defined at:
  6049 ;;		line 38 in file "hardware.c"
  6050 ;; Parameters:    Size  Location     Type
  6051 ;;  isON            1    wreg     unsigned char 
  6052 ;; Auto vars:     Size  Location     Type
  6053 ;;  isON            1    0[BANK3 ] unsigned char 
  6054 ;; Return value:  Size  Location     Type
  6055 ;;                  1    wreg      unsigned char 
  6056 ;; Registers used:
  6057 ;;		wreg, status,2, status,0
  6058 ;; Tracked objects:
  6059 ;;		On entry : 0/0
  6060 ;;		On exit  : 0/0
  6061 ;;		Unchanged: 0/0
  6062 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6063 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6064 ;;      Locals:         0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0
  6065 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6066 ;;      Totals:         0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0
  6067 ;;Total ram usage:        1 bytes
  6068 ;; Hardware stack levels used:    1
  6069 ;; Hardware stack levels required when called:    9
  6070 ;; This function calls:
  6071 ;;		Nothing
  6072 ;; This function is called by:
  6073 ;;		_main
  6074 ;; This function uses a non-reentrant model
  6075 ;;
  6076                           
  6077                           
  6078                           ;psect for function _capture_Set
  6079  07F2                     _capture_Set:	
  6080                           
  6081                           ;incstack = 0
  6082                           ; Regs used in _capture_Set: [wreg+status,2+status,0]
  6083                           ;capture_Set@isON stored from wreg
  6084  07F2  0023               	movlb	3	; select bank3
  6085  07F3  00C4               	movwf	capture_Set@isON^(0+384)
  6086                           
  6087                           ;hardware.c: 38: u8 capture_Set(u8 isON);hardware.c: 39: {;hardware.c: 42:     PIR2bits.
      +                          CCP2IF = 0;
  6088  07F4  0020               	movlb	0	; select bank0
  6089  07F5  1012               	bcf	18,0	;volatile
  6090                           
  6091                           ;hardware.c: 45:     PIE2bits.CCP2IE = (isON)? 1 : 0;
  6092  07F6  0023               	movlb	3	; select bank3
  6093  07F7  0844               	movf	capture_Set@isON^(0+384),w
  6094  07F8  1903               	btfsc	3,2
  6095  07F9  2FFD               	goto	u3680
  6096  07FA  0021               	movlb	1	; select bank1
  6097  07FB  1412               	bsf	18,0	;volatile
  6098  07FC  0008               	return
  6099  07FD                     u3680:	
  6100  07FD  0021               	movlb	1	; select bank1
  6101  07FE  1012               	bcf	18,0	;volatile
  6102  07FF  0008               	return
  6103  0800                     __end_of_capture_Set:	
  6104                           
  6105                           	psect	intentry
  6106  0004                     __pintentry:	
  6107 ;; *************** function _ISR *****************
  6108 ;; Defined at:
  6109 ;;		line 197 in file "main.c"
  6110 ;; Parameters:    Size  Location     Type
  6111 ;;		None
  6112 ;; Auto vars:     Size  Location     Type
  6113 ;;  send           64    0[BANK2 ] unsigned char [64]
  6114 ;;  i               1   75[BANK1 ] unsigned char 
  6115 ;;  buf            64   11[BANK1 ] unsigned char [64]
  6116 ;; Return value:  Size  Location     Type
  6117 ;;                  1    wreg      void 
  6118 ;; Registers used:
  6119 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6120 ;; Tracked objects:
  6121 ;;		On entry : 0/0
  6122 ;;		On exit  : 0/0
  6123 ;;		Unchanged: 0/0
  6124 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6125 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6126 ;;      Locals:         0       0      65      64       0       0       0       0       0       0       0       0       
      +0       0
  6127 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6128 ;;      Totals:         0       0      67      64       0       0       0       0       0       0       0       0       
      +0       0
  6129 ;;Total ram usage:      131 bytes
  6130 ;; Hardware stack levels used:    1
  6131 ;; Hardware stack levels required when called:    8
  6132 ;; This function calls:
  6133 ;;		_bpc_proc
  6134 ;;		_capture_IsEnable
  6135 ;;		_capture_IsIntrpt
  6136 ;;		_capture_clrIntrpt
  6137 ;;		_capture_handdle
  6138 ;;		_key_isPressed
  6139 ;;		_sprintf
  6140 ;;		_strcpy
  6141 ;;		_strlen
  6142 ;;		_timer_IsTimer0Itrpt
  6143 ;;		_timer_IsTimer1Itrpt
  6144 ;;		_timer_Timer0Handdle
  6145 ;;		_timer_Timer1ClrIntrpt
  6146 ;;		i1_capture_Set
  6147 ;;		i1_timer_Timer0Reset
  6148 ;; This function is called by:
  6149 ;;		Interrupt level 1
  6150 ;; This function uses a non-reentrant model
  6151 ;;
  6152                           
  6153  0004                     _ISR:	
  6154                           
  6155                           ;incstack = 0
  6156  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  6157                           
  6158                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6159  0005  3180               	pagesel	$
  6160  0006  3188  202C  3180   	fcall	_timer_IsTimer1Itrpt
  6161  0009  3A00               	xorlw	0
  6162  000A  1903               	skipnz
  6163  000B  280F               	goto	i1l4025
  6164  000C  3188  201A  3180   	fcall	_timer_Timer1ClrIntrpt
  6165  000F                     i1l4025:	
  6166  000F  3188  2028  3180   	fcall	_timer_IsTimer0Itrpt
  6167  0012  3A00               	xorlw	0
  6168  0013  1903               	skipnz
  6169  0014  288D               	goto	i1l148
  6170  0015  3188  203E  3180   	fcall	_timer_Timer0Handdle
  6171  0018  3189  2109  3180   	fcall	_key_isPressed
  6172  001B  3A00               	xorlw	0
  6173  001C  1903               	skipnz
  6174  001D  288A               	goto	i1l149
  6175  001E  30A0               	movlw	low ISR@F5516
  6176  001F  0086               	movwf	6
  6177  0020  3002               	movlw	high ISR@F5516
  6178  0021  0087               	movwf	7
  6179  0022  30AB               	movlw	low ISR@buf
  6180  0023  0084               	movwf	4
  6181  0024  3000               	movlw	high ISR@buf
  6182  0025  0085               	movwf	5
  6183  0026  3040               	movlw	64
  6184  0027  0021               	movlb	1	; select bank1
  6185  0028  00A9               	movwf	??_ISR^(0+128)
  6186  0029                     u406_20:	
  6187  0029  0016               	moviw fsr1++
  6188  002A  001A               	movwi fsr0++
  6189  002B  0BA9               	decfsz	??_ISR^(0+128),f
  6190  002C  2829               	goto	u406_20
  6191  002D  300B               	movlw	low (STR_1| (0+32768))
  6192  002E  0020               	movlb	0	; select bank0
  6193  002F  00E8               	movwf	sprintf@fmt
  6194  0030  3090               	movlw	high (STR_1| (0+32768))
  6195  0031  00E9               	movwf	sprintf@fmt+1
  6196  0032  301F               	movlw	low (STR_2| (0+32768))
  6197  0033  00EA               	movwf	low ((?_sprintf| 0+2))
  6198  0034  3090               	movlw	high (STR_2| (0+32768))
  6199  0035  00EB               	movwf	(low ((?_sprintf| 0+2))+1)
  6200  0036  30D5               	movlw	213
  6201  0037  00EC               	movwf	?_sprintf+4
  6202  0038  3000               	movlw	0
  6203  0039  00ED               	movwf	?_sprintf+5
  6204  003A  3026               	movlw	low (STR_3| (0+32768))
  6205  003B  00EE               	movwf	low ((?_sprintf| 0+6))
  6206  003C  3090               	movlw	high (STR_3| (0+32768))
  6207  003D  00EF               	movwf	(low ((?_sprintf| 0+6))+1)
  6208  003E  30AB               	movlw	(low (ISR@buf| 0))& (0+255)
  6209  003F  3189  21DF  3180   	fcall	_sprintf
  6210  0042  0021               	movlb	1	; select bank1
  6211  0043  01EB               	clrf	ISR@i^(0+128)
  6212  0044  3020               	movlw	low ISR@F5519
  6213  0045  0086               	movwf	6
  6214  0046  3003               	movlw	high ISR@F5519
  6215  0047  0087               	movwf	7
  6216  0048  3020               	movlw	low ISR@send
  6217  0049  0084               	movwf	4
  6218  004A  3001               	movlw	high ISR@send
  6219  004B  0085               	movwf	5
  6220  004C  3040               	movlw	64
  6221  004D  00A9               	movwf	??_ISR^(0+128)
  6222  004E                     u407_20:	
  6223  004E  0016               	moviw fsr1++
  6224  004F  001A               	movwi fsr0++
  6225  0050  0BA9               	decfsz	??_ISR^(0+128),f
  6226  0051  284E               	goto	u407_20
  6227  0052  30AB               	movlw	(low (ISR@buf| 0))& (0+255)
  6228  0053  00A9               	movwf	??_ISR^(0+128)
  6229  0054  0829               	movf	??_ISR^(0+128),w
  6230  0055  00F0               	movwf	strcpy@src
  6231  0056  3020               	movlw	(low (ISR@send| (0+256)))& (0+255)
  6232  0057  3189  214D  3180   	fcall	_strcpy
  6233  005A                     i1l4047:	
  6234  005A  3020               	movlw	low ISR@send
  6235  005B  00F0               	movwf	strlen@s
  6236  005C  3001               	movlw	high ISR@send
  6237  005D  00F1               	movwf	strlen@s+1
  6238  005E  3189  2136  3180   	fcall	_strlen
  6239  0061  0870               	movf	?_strlen,w
  6240  0062  3E01               	addlw	1
  6241  0063  0021               	movlb	1	; select bank1
  6242  0064  00A9               	movwf	??_ISR^(0+128)
  6243  0065  3000               	movlw	0
  6244  0066  3D71               	addwfc	?_strlen+1,w
  6245  0067  00AA               	movwf	(??_ISR+1)^(0+128)
  6246  0068  086B               	movf	ISR@i^(0+128),w
  6247  0069  0629               	xorwf	??_ISR^(0+128),w
  6248  006A  042A               	iorwf	(??_ISR+1)^(0+128),w
  6249  006B  1903               	btfsc	3,2
  6250  006C  2886               	goto	i1l4049
  6251  006D  0023               	movlb	3	; select bank3
  6252  006E  169E               	bsf	30,5	;volatile
  6253  006F  121E               	bcf	30,4	;volatile
  6254  0070  179D               	bsf	29,7	;volatile
  6255  0071  0021               	movlb	1	; select bank1
  6256  0072  1611               	bsf	17,4	;volatile
  6257  0073                     i1l156:	
  6258  0073  0023               	movlb	3	; select bank3
  6259  0074  1C9E               	btfss	30,1	;volatile
  6260  0075  2873               	goto	i1l156
  6261  0076  0021               	movlb	1	; select bank1
  6262  0077  086B               	movf	ISR@i^(0+128),w
  6263  0078  3E20               	addlw	(low (ISR@send| (0+256)))& (0+255)
  6264  0079  0086               	movwf	6
  6265  007A  3001               	movlw	1	; select bank2/3
  6266  007B  0087               	movwf	7
  6267  007C  0801               	movf	1,w
  6268  007D  0023               	movlb	3	; select bank3
  6269  007E  009A               	movwf	26	;volatile
  6270  007F  3001               	movlw	1
  6271  0080  0021               	movlb	1	; select bank1
  6272  0081  00A9               	movwf	??_ISR^(0+128)
  6273  0082  0829               	movf	??_ISR^(0+128),w
  6274  0083  07EB               	addwf	ISR@i^(0+128),f
  6275  0084  1211               	bcf	17,4	;volatile
  6276  0085  285A               	goto	i1l4047
  6277  0086                     i1l4049:	
  6278  0086  3001               	movlw	1
  6279  0087  3188  209D  3180   	fcall	i1_capture_Set
  6280  008A                     i1l149:	
  6281                           
  6282                           ;main.c: 228:         timer_Timer0Reset();
  6283  008A  3188  2034  3180   	fcall	i1_timer_Timer0Reset
  6284  008D                     i1l148:	
  6285                           ;main.c: 229:     }
  6286                           
  6287                           
  6288                           ;main.c: 231:     if(capture_IsEnable() && capture_IsIntrpt())
  6289  008D  3188  2020  3180   	fcall	_capture_IsEnable
  6290  0090  3A00               	xorlw	0
  6291  0091  1903               	skipnz
  6292  0092  28A1               	goto	i1l161
  6293  0093  3188  2024  3180   	fcall	_capture_IsIntrpt
  6294  0096  3A00               	xorlw	0
  6295  0097  1903               	skipnz
  6296  0098  28A1               	goto	i1l161
  6297                           
  6298                           ;main.c: 232:     {;main.c: 233:         capture_handdle();
  6299  0099  318C  2495  3180   	fcall	_capture_handdle
  6300                           
  6301                           ;main.c: 235:         bpc_proc();
  6302  009C  3180  20E1  3180   	fcall	_bpc_proc
  6303                           
  6304                           ;main.c: 237:         capture_clrIntrpt();
  6305  009F  3188  2017         	fcall	_capture_clrIntrpt
  6306  00A1                     i1l161:	
  6307  00A1  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  6308  00A2  0009               	retfie
  6309  00A3                     __end_of_ISR:	
  6310                           
  6311                           	psect	text21
  6312  0834                     __ptext21:	
  6313 ;; *************** function i1_timer_Timer0Reset *****************
  6314 ;; Defined at:
  6315 ;;		line 92 in file "timer.c"
  6316 ;; Parameters:    Size  Location     Type
  6317 ;;		None
  6318 ;; Auto vars:     Size  Location     Type
  6319 ;;		None
  6320 ;; Return value:  Size  Location     Type
  6321 ;;                  1    wreg      void 
  6322 ;; Registers used:
  6323 ;;		wreg
  6324 ;; Tracked objects:
  6325 ;;		On entry : 0/0
  6326 ;;		On exit  : 0/0
  6327 ;;		Unchanged: 0/0
  6328 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6329 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6330 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6331 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6332 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6333 ;;Total ram usage:        0 bytes
  6334 ;; Hardware stack levels used:    1
  6335 ;; This function calls:
  6336 ;;		Nothing
  6337 ;; This function is called by:
  6338 ;;		_ISR
  6339 ;; This function uses a non-reentrant model
  6340 ;;
  6341                           
  6342                           
  6343                           ;psect for function i1_timer_Timer0Reset
  6344  0834                     i1_timer_Timer0Reset:	
  6345                           
  6346                           ;timer.c: 94:     INTCONbits.TMR0IF = 0;
  6347                           
  6348                           ;incstack = 0
  6349                           ; Regs used in i1_timer_Timer0Reset: [wreg]
  6350  0834  110B               	bcf	11,2	;volatile
  6351                           
  6352                           ;timer.c: 95:     TMR0 = (159 + 0);
  6353  0835  309F               	movlw	159
  6354  0836  0020               	movlb	0	; select bank0
  6355  0837  0095               	movwf	21	;volatile
  6356  0838  0008               	return
  6357  0839                     __end_ofi1_timer_Timer0Reset:	
  6358                           
  6359                           	psect	text22
  6360  081A                     __ptext22:	
  6361 ;; *************** function _timer_Timer1ClrIntrpt *****************
  6362 ;; Defined at:
  6363 ;;		line 51 in file "timer.c"
  6364 ;; Parameters:    Size  Location     Type
  6365 ;;		None
  6366 ;; Auto vars:     Size  Location     Type
  6367 ;;		None
  6368 ;; Return value:  Size  Location     Type
  6369 ;;                  1    wreg      void 
  6370 ;; Registers used:
  6371 ;;		None
  6372 ;; Tracked objects:
  6373 ;;		On entry : 0/0
  6374 ;;		On exit  : 0/0
  6375 ;;		Unchanged: 0/0
  6376 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6377 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6378 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6379 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6380 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6381 ;;Total ram usage:        0 bytes
  6382 ;; Hardware stack levels used:    1
  6383 ;; This function calls:
  6384 ;;		Nothing
  6385 ;; This function is called by:
  6386 ;;		_ISR
  6387 ;; This function uses a non-reentrant model
  6388 ;;
  6389                           
  6390                           
  6391                           ;psect for function _timer_Timer1ClrIntrpt
  6392  081A                     _timer_Timer1ClrIntrpt:	
  6393                           
  6394                           ;timer.c: 53:     PIR1bits.TMR1IF = 0b0;
  6395                           
  6396                           ;incstack = 0
  6397                           ; Regs used in _timer_Timer1ClrIntrpt: []
  6398  081A  0020               	movlb	0	; select bank0
  6399  081B  1011               	bcf	17,0	;volatile
  6400  081C  0008               	return
  6401  081D                     __end_of_timer_Timer1ClrIntrpt:	
  6402                           
  6403                           	psect	text23
  6404  083E                     __ptext23:	
  6405 ;; *************** function _timer_Timer0Handdle *****************
  6406 ;; Defined at:
  6407 ;;		line 110 in file "timer.c"
  6408 ;; Parameters:    Size  Location     Type
  6409 ;;		None
  6410 ;; Auto vars:     Size  Location     Type
  6411 ;;		None
  6412 ;; Return value:  Size  Location     Type
  6413 ;;                  2   68[None  ] int 
  6414 ;; Registers used:
  6415 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6416 ;; Tracked objects:
  6417 ;;		On entry : 0/0
  6418 ;;		On exit  : 0/0
  6419 ;;		Unchanged: 0/0
  6420 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6421 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6422 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6423 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6424 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6425 ;;Total ram usage:        0 bytes
  6426 ;; Hardware stack levels used:    1
  6427 ;; Hardware stack levels required when called:    5
  6428 ;; This function calls:
  6429 ;;		_key_checkPressed
  6430 ;;		_update_time
  6431 ;; This function is called by:
  6432 ;;		_ISR
  6433 ;; This function uses a non-reentrant model
  6434 ;;
  6435                           
  6436                           
  6437                           ;psect for function _timer_Timer0Handdle
  6438  083E                     _timer_Timer0Handdle:	
  6439                           
  6440                           ;timer.c: 112:     key_checkPressed();
  6441                           
  6442                           ;incstack = 0
  6443                           ; Regs used in _timer_Timer0Handdle: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6444  083E  3189  2165  3188   	fcall	_key_checkPressed
  6445                           
  6446                           ;timer.c: 114:     update_time();
  6447  0841  318E  2602         	fcall	_update_time
  6448  0843  0008               	return
  6449  0844                     __end_of_timer_Timer0Handdle:	
  6450                           
  6451                           	psect	text24
  6452  0E02                     __ptext24:	
  6453 ;; *************** function _update_time *****************
  6454 ;; Defined at:
  6455 ;;		line 97 in file "display.c"
  6456 ;; Parameters:    Size  Location     Type
  6457 ;;		None
  6458 ;; Auto vars:     Size  Location     Type
  6459 ;;  pdata           1   13[COMMON] PTR volatile struct .
  6460 ;;		 -> g_data(39), 
  6461 ;; Return value:  Size  Location     Type
  6462 ;;                  1    wreg      void 
  6463 ;; Registers used:
  6464 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6465 ;; Tracked objects:
  6466 ;;		On entry : 0/0
  6467 ;;		On exit  : 0/0
  6468 ;;		Unchanged: 0/0
  6469 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6470 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6471 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6472 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6473 ;;      Totals:         1       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6474 ;;Total ram usage:        3 bytes
  6475 ;; Hardware stack levels used:    1
  6476 ;; Hardware stack levels required when called:    4
  6477 ;; This function calls:
  6478 ;;		i1___awmod
  6479 ;;		i1_capture_Set
  6480 ;;		i1_data_getdata
  6481 ;;		i1_display_update
  6482 ;; This function is called by:
  6483 ;;		_timer_Timer0Handdle
  6484 ;; This function uses a non-reentrant model
  6485 ;;
  6486                           
  6487                           
  6488                           ;psect for function _update_time
  6489  0E02                     _update_time:	
  6490                           
  6491                           ;display.c: 99:     G_DATA *pdata = data_getdata();
  6492                           
  6493                           ;incstack = 0
  6494                           ; Regs used in _update_time: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6495  0E02  3188  2015  318E   	fcall	i1_data_getdata
  6496  0E05  0020               	movlb	0	; select bank0
  6497  0E06  00AC               	movwf	??_update_time
  6498  0E07  082C               	movf	??_update_time,w
  6499  0E08  00FD               	movwf	update_time@pdata
  6500                           
  6501                           ;display.c: 100:     pdata->g_time_100ms++;
  6502  0E09  3001               	movlw	1
  6503  0E0A  00AC               	movwf	??_update_time
  6504  0E0B  087D               	movf	update_time@pdata,w
  6505  0E0C  3E06               	addlw	6
  6506  0E0D  0086               	movwf	6
  6507  0E0E  3002               	movlw	2	; select bank4/5
  6508  0E0F  0087               	movwf	7
  6509  0E10  082C               	movf	??_update_time,w
  6510  0E11  0781               	addwf	1,f
  6511                           
  6512                           ;display.c: 104:     if(pdata->g_time_100ms == 10)
  6513  0E12  087D               	movf	update_time@pdata,w
  6514  0E13  3E06               	addlw	6
  6515  0E14  0086               	movwf	6
  6516  0E15  3002               	movlw	2	; select bank4/5
  6517  0E16  0087               	movwf	7
  6518  0E17  300A               	movlw	10
  6519  0E18  0601               	xorwf	1,w
  6520  0E19  1D03               	btfss	3,2
  6521  0E1A  0008               	return
  6522                           
  6523                           ;display.c: 105:     {;display.c: 107:         pdata->g_time_100ms = 0;
  6524  0E1B  087D               	movf	update_time@pdata,w
  6525  0E1C  3E06               	addlw	6
  6526  0E1D  0086               	movwf	6
  6527  0E1E  3002               	movlw	2	; select bank4/5
  6528  0E1F  0087               	movwf	7
  6529  0E20  0181               	clrf	1
  6530                           
  6531                           ;display.c: 108:         pdata->g_time_s++;
  6532  0E21  3001               	movlw	1
  6533  0E22  00AC               	movwf	??_update_time
  6534  0E23  087D               	movf	update_time@pdata,w
  6535  0E24  3E05               	addlw	5
  6536  0E25  0086               	movwf	6
  6537  0E26  3002               	movlw	2	; select bank4/5
  6538  0E27  0087               	movwf	7
  6539  0E28  082C               	movf	??_update_time,w
  6540  0E29  0781               	addwf	1,f
  6541                           
  6542                           ;display.c: 110:         if(pdata->g_time_s == 60)
  6543  0E2A  087D               	movf	update_time@pdata,w
  6544  0E2B  3E05               	addlw	5
  6545  0E2C  0086               	movwf	6
  6546  0E2D  3002               	movlw	2	; select bank4/5
  6547  0E2E  0087               	movwf	7
  6548  0E2F  303C               	movlw	60
  6549  0E30  0601               	xorwf	1,w
  6550  0E31  1D03               	btfss	3,2
  6551  0E32  0008               	return
  6552                           
  6553                           ;display.c: 111:         {;display.c: 112:             pdata->g_time_m++;
  6554  0E33  3001               	movlw	1
  6555  0E34  00AC               	movwf	??_update_time
  6556  0E35  087D               	movf	update_time@pdata,w
  6557  0E36  3E04               	addlw	4
  6558  0E37  0086               	movwf	6
  6559  0E38  3002               	movlw	2	; select bank4/5
  6560  0E39  0087               	movwf	7
  6561  0E3A  082C               	movf	??_update_time,w
  6562  0E3B  0781               	addwf	1,f
  6563                           
  6564                           ;display.c: 113:             pdata->g_time_s = 0;
  6565  0E3C  087D               	movf	update_time@pdata,w
  6566  0E3D  3E05               	addlw	5
  6567  0E3E  0086               	movwf	6
  6568  0E3F  3002               	movlw	2	; select bank4/5
  6569  0E40  0087               	movwf	7
  6570  0E41  0181               	clrf	1
  6571                           
  6572                           ;display.c: 114:             pdata->cnt_update++;
  6573  0E42  087D               	movf	update_time@pdata,w
  6574  0E43  3E21               	addlw	33
  6575  0E44  0086               	movwf	6
  6576  0E45  3002               	movlw	2	; select bank4/5
  6577  0E46  0087               	movwf	7
  6578  0E47  3001               	movlw	1
  6579  0E48  0781               	addwf	1,f
  6580  0E49  3141               	addfsr 1,1
  6581  0E4A  1803               	skipnc
  6582  0E4B  0A81               	incf	1,f
  6583                           
  6584                           ;display.c: 115:             if(pdata->g_time_m % 30 == 0){
  6585  0E4C  301E               	movlw	30
  6586  0E4D  00F0               	movwf	i1___awmod@divisor
  6587  0E4E  3000               	movlw	0
  6588  0E4F  00F1               	movwf	i1___awmod@divisor+1
  6589  0E50  087D               	movf	update_time@pdata,w
  6590  0E51  3E04               	addlw	4
  6591  0E52  0086               	movwf	6
  6592  0E53  3002               	movlw	2	; select bank4/5
  6593  0E54  0087               	movwf	7
  6594  0E55  0801               	movf	1,w
  6595  0E56  00AC               	movwf	??_update_time
  6596  0E57  01AD               	clrf	??_update_time+1
  6597  0E58  082C               	movf	??_update_time,w
  6598  0E59  00F2               	movwf	i1___awmod@dividend
  6599  0E5A  082D               	movf	??_update_time+1,w
  6600  0E5B  00F3               	movwf	i1___awmod@dividend+1
  6601  0E5C  318A  22CF  318E   	fcall	i1___awmod
  6602  0E5F  0870               	movf	?i1___awmod,w
  6603  0E60  0471               	iorwf	?i1___awmod+1,w
  6604  0E61  1D03               	btfss	3,2
  6605  0E62  2E67               	goto	i1l3463
  6606                           
  6607                           ;display.c: 116:                 capture_Set(TRUE);
  6608  0E63  3001               	movlw	1
  6609  0E64  3188  209D  318E   	fcall	i1_capture_Set
  6610  0E67                     i1l3463:	
  6611                           
  6612                           ;display.c: 118:             if(pdata->g_time_m == 60)
  6613  0E67  087D               	movf	update_time@pdata,w
  6614  0E68  3E04               	addlw	4
  6615  0E69  0086               	movwf	6
  6616  0E6A  3002               	movlw	2	; select bank4/5
  6617  0E6B  0087               	movwf	7
  6618  0E6C  303C               	movlw	60
  6619  0E6D  0601               	xorwf	1,w
  6620  0E6E  1D03               	btfss	3,2
  6621  0E6F  2E8F               	goto	i1l3469
  6622                           
  6623                           ;display.c: 119:             {;display.c: 120:                 pdata->g_time_h++;
  6624  0E70  3001               	movlw	1
  6625  0E71  0020               	movlb	0	; select bank0
  6626  0E72  00AC               	movwf	??_update_time
  6627  0E73  087D               	movf	update_time@pdata,w
  6628  0E74  3E03               	addlw	3
  6629  0E75  0086               	movwf	6
  6630  0E76  3002               	movlw	2	; select bank4/5
  6631  0E77  0087               	movwf	7
  6632  0E78  082C               	movf	??_update_time,w
  6633  0E79  0781               	addwf	1,f
  6634                           
  6635                           ;display.c: 121:                 pdata->g_time_m = 0;
  6636  0E7A  087D               	movf	update_time@pdata,w
  6637  0E7B  3E04               	addlw	4
  6638  0E7C  0086               	movwf	6
  6639  0E7D  3002               	movlw	2	; select bank4/5
  6640  0E7E  0087               	movwf	7
  6641  0E7F  0181               	clrf	1
  6642                           
  6643                           ;display.c: 123:                 if(pdata->g_time_h == 24)
  6644  0E80  087D               	movf	update_time@pdata,w
  6645  0E81  3E03               	addlw	3
  6646  0E82  0086               	movwf	6
  6647  0E83  3002               	movlw	2	; select bank4/5
  6648  0E84  0087               	movwf	7
  6649  0E85  3018               	movlw	24
  6650  0E86  0601               	xorwf	1,w
  6651  0E87  1D03               	btfss	3,2
  6652  0E88  2E8F               	goto	i1l3469
  6653                           
  6654                           ;display.c: 124:                 {;display.c: 125:                     pdata->g_time_h =
      +                           0;
  6655  0E89  087D               	movf	update_time@pdata,w
  6656  0E8A  3E03               	addlw	3
  6657  0E8B  0086               	movwf	6
  6658  0E8C  3002               	movlw	2	; select bank4/5
  6659  0E8D  0087               	movwf	7
  6660  0E8E  0181               	clrf	1
  6661  0E8F                     i1l3469:	
  6662                           
  6663                           ;display.c: 129:             display_update();
  6664  0E8F  3187  2749         	fcall	i1_display_update
  6665  0E91  0008               	return
  6666  0E92                     __end_of_update_time:	
  6667                           
  6668                           	psect	text25
  6669  0965                     __ptext25:	
  6670 ;; *************** function _key_checkPressed *****************
  6671 ;; Defined at:
  6672 ;;		line 126 in file "hardware.c"
  6673 ;; Parameters:    Size  Location     Type
  6674 ;;		None
  6675 ;; Auto vars:     Size  Location     Type
  6676 ;;  pdata           1    3[COMMON] PTR volatile struct .
  6677 ;;		 -> g_data(39), 
  6678 ;; Return value:  Size  Location     Type
  6679 ;;                  1    wreg      void 
  6680 ;; Registers used:
  6681 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6682 ;; Tracked objects:
  6683 ;;		On entry : 0/0
  6684 ;;		On exit  : 0/0
  6685 ;;		Unchanged: 0/0
  6686 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6687 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6688 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6689 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6690 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6691 ;;Total ram usage:        2 bytes
  6692 ;; Hardware stack levels used:    1
  6693 ;; Hardware stack levels required when called:    2
  6694 ;; This function calls:
  6695 ;;		_led_Blink
  6696 ;;		i1_data_getdata
  6697 ;; This function is called by:
  6698 ;;		_timer_Timer0Handdle
  6699 ;; This function uses a non-reentrant model
  6700 ;;
  6701                           
  6702                           
  6703                           ;psect for function _key_checkPressed
  6704  0965                     _key_checkPressed:	
  6705                           
  6706                           ;hardware.c: 146:     G_DATA *pdata = data_getdata();
  6707                           
  6708                           ;incstack = 0
  6709                           ; Regs used in _key_checkPressed: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6710  0965  3188  2015  3189   	fcall	i1_data_getdata
  6711  0968  00F2               	movwf	??_key_checkPressed
  6712  0969  0872               	movf	??_key_checkPressed,w
  6713  096A  00F3               	movwf	key_checkPressed@pdata
  6714                           
  6715                           ;hardware.c: 148:     if(PORTCbits.RC5 == PIN_HIGH && FALSE == pdata->g_flg_switch)
  6716  096B  0020               	movlb	0	; select bank0
  6717  096C  1E8E               	btfss	14,5	;volatile
  6718  096D  0008               	return
  6719  096E  0873               	movf	key_checkPressed@pdata,w
  6720  096F  0086               	movwf	6
  6721  0970  3002               	movlw	2	; select bank4/5
  6722  0971  0087               	movwf	7
  6723  0972  0801               	movf	1,w
  6724  0973  1D03               	btfss	3,2
  6725  0974  0008               	return
  6726                           
  6727                           ;hardware.c: 149:     {;hardware.c: 151:         pdata->g_flg_switch = TRUE;
  6728  0975  3001               	movlw	1
  6729  0976  00F2               	movwf	??_key_checkPressed
  6730  0977  0873               	movf	key_checkPressed@pdata,w
  6731  0978  0086               	movwf	6
  6732  0979  3002               	movlw	2	; select bank4/5
  6733  097A  0087               	movwf	7
  6734  097B  0872               	movf	??_key_checkPressed,w
  6735  097C  0081               	movwf	1
  6736                           
  6737                           ;hardware.c: 153:         led_Blink();
  6738  097D  3188  2087         	fcall	_led_Blink
  6739  097F  0008               	return
  6740  0980                     __end_of_key_checkPressed:	
  6741                           
  6742                           	psect	text26
  6743  0887                     __ptext26:	
  6744 ;; *************** function _led_Blink *****************
  6745 ;; Defined at:
  6746 ;;		line 116 in file "hardware.c"
  6747 ;; Parameters:    Size  Location     Type
  6748 ;;		None
  6749 ;; Auto vars:     Size  Location     Type
  6750 ;;		None
  6751 ;; Return value:  Size  Location     Type
  6752 ;;                  1    wreg      unsigned char 
  6753 ;; Registers used:
  6754 ;;		wreg, status,2, status,0, pclath, cstack
  6755 ;; Tracked objects:
  6756 ;;		On entry : 0/0
  6757 ;;		On exit  : 0/0
  6758 ;;		Unchanged: 0/0
  6759 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6760 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6761 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6762 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6763 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6764 ;;Total ram usage:        1 bytes
  6765 ;; Hardware stack levels used:    1
  6766 ;; Hardware stack levels required when called:    1
  6767 ;; This function calls:
  6768 ;;		i1_led_SetState
  6769 ;; This function is called by:
  6770 ;;		_key_checkPressed
  6771 ;; This function uses a non-reentrant model
  6772 ;;
  6773                           
  6774                           
  6775                           ;psect for function _led_Blink
  6776  0887                     _led_Blink:	
  6777                           
  6778                           ;hardware.c: 118:     static u8 State = 0;;hardware.c: 119:     led_SetState(State++ & 0
      +                          x01);
  6779                           
  6780                           ;incstack = 0
  6781                           ; Regs used in _led_Blink: [wreg+status,2+status,0+pclath+cstack]
  6782  0887  0022               	movlb	2	; select bank2
  6783  0888  0866               	movf	led_Blink@State^(0+256),w
  6784  0889  3901               	andlw	1
  6785  088A  3188  2072         	fcall	i1_led_SetState
  6786  088C  3001               	movlw	1
  6787  088D  00F1               	movwf	??_led_Blink
  6788  088E  0871               	movf	??_led_Blink,w
  6789  088F  0022               	movlb	2	; select bank2
  6790  0890  07E6               	addwf	led_Blink@State^(0+256),f
  6791  0891  0008               	return
  6792  0892                     __end_of_led_Blink:	
  6793                           
  6794                           	psect	text27
  6795  082C                     __ptext27:	
  6796 ;; *************** function _timer_IsTimer1Itrpt *****************
  6797 ;; Defined at:
  6798 ;;		line 46 in file "timer.c"
  6799 ;; Parameters:    Size  Location     Type
  6800 ;;		None
  6801 ;; Auto vars:     Size  Location     Type
  6802 ;;		None
  6803 ;; Return value:  Size  Location     Type
  6804 ;;                  1    wreg      enum E5232
  6805 ;; Registers used:
  6806 ;;		wreg, status,2, status,0
  6807 ;; Tracked objects:
  6808 ;;		On entry : 0/0
  6809 ;;		On exit  : 0/0
  6810 ;;		Unchanged: 0/0
  6811 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6812 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6813 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6814 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6815 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6816 ;;Total ram usage:        0 bytes
  6817 ;; Hardware stack levels used:    1
  6818 ;; This function calls:
  6819 ;;		Nothing
  6820 ;; This function is called by:
  6821 ;;		_ISR
  6822 ;; This function uses a non-reentrant model
  6823 ;;
  6824                           
  6825                           
  6826                           ;psect for function _timer_IsTimer1Itrpt
  6827  082C                     _timer_IsTimer1Itrpt:	
  6828                           
  6829                           ;timer.c: 48:     return (PIR1bits.TMR1IF == 0b1)? TRUE : FALSE;
  6830                           
  6831                           ;incstack = 0
  6832                           ; Regs used in _timer_IsTimer1Itrpt: [wreg+status,2+status,0]
  6833  082C  0020               	movlb	0	; select bank0
  6834  082D  0811               	movf	17,w	;volatile
  6835  082E  3901               	andlw	1
  6836  082F  0008               	return
  6837  0830                     __end_of_timer_IsTimer1Itrpt:	
  6838                           
  6839                           	psect	text28
  6840  0828                     __ptext28:	
  6841 ;; *************** function _timer_IsTimer0Itrpt *****************
  6842 ;; Defined at:
  6843 ;;		line 103 in file "timer.c"
  6844 ;; Parameters:    Size  Location     Type
  6845 ;;		None
  6846 ;; Auto vars:     Size  Location     Type
  6847 ;;		None
  6848 ;; Return value:  Size  Location     Type
  6849 ;;                  1    wreg      enum E5232
  6850 ;; Registers used:
  6851 ;;		wreg, status,2, status,0
  6852 ;; Tracked objects:
  6853 ;;		On entry : 0/0
  6854 ;;		On exit  : 0/0
  6855 ;;		Unchanged: 0/0
  6856 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6857 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6858 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6859 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6860 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6861 ;;Total ram usage:        0 bytes
  6862 ;; Hardware stack levels used:    1
  6863 ;; This function calls:
  6864 ;;		Nothing
  6865 ;; This function is called by:
  6866 ;;		_ISR
  6867 ;; This function uses a non-reentrant model
  6868 ;;
  6869                           
  6870                           
  6871                           ;psect for function _timer_IsTimer0Itrpt
  6872  0828                     _timer_IsTimer0Itrpt:	
  6873                           
  6874                           ;timer.c: 105:     return (INTCONbits.TMR0IF == 0b1)? TRUE : FALSE;
  6875                           
  6876                           ;incstack = 0
  6877                           ; Regs used in _timer_IsTimer0Itrpt: [wreg+status,2+status,0]
  6878  0828  0C0B               	rrf	11,w	;volatile
  6879  0829  0C89               	rrf	9,f
  6880  082A  3901               	andlw	1
  6881  082B  0008               	return
  6882  082C                     __end_of_timer_IsTimer0Itrpt:	
  6883                           
  6884                           	psect	text29
  6885  094D                     __ptext29:	
  6886 ;; *************** function _strcpy *****************
  6887 ;; Defined at:
  6888 ;;		line 7 in file "E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\strcpy.c"
  6889 ;; Parameters:    Size  Location     Type
  6890 ;;  dest            1    wreg     PTR unsigned char 
  6891 ;;		 -> ISR@send(64), 
  6892 ;;  src             1    0[COMMON] PTR const unsigned char 
  6893 ;;		 -> ISR@buf(64), 
  6894 ;; Auto vars:     Size  Location     Type
  6895 ;;  dest            1    4[COMMON] PTR unsigned char 
  6896 ;;		 -> ISR@send(64), 
  6897 ;;  d               1    3[COMMON] PTR unsigned char 
  6898 ;;		 -> ISR@send(64), 
  6899 ;;  s               1    2[COMMON] PTR const unsigned char 
  6900 ;;		 -> ISR@buf(64), 
  6901 ;; Return value:  Size  Location     Type
  6902 ;;                  1    wreg      PTR unsigned char 
  6903 ;; Registers used:
  6904 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  6905 ;; Tracked objects:
  6906 ;;		On entry : 0/0
  6907 ;;		On exit  : 0/0
  6908 ;;		Unchanged: 0/0
  6909 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6910 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6911 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6912 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6913 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6914 ;;Total ram usage:        5 bytes
  6915 ;; Hardware stack levels used:    1
  6916 ;; This function calls:
  6917 ;;		Nothing
  6918 ;; This function is called by:
  6919 ;;		_ISR
  6920 ;; This function uses a non-reentrant model
  6921 ;;
  6922                           
  6923                           
  6924                           ;psect for function _strcpy
  6925  094D                     _strcpy:	
  6926                           
  6927                           ;incstack = 0
  6928                           ; Regs used in _strcpy: [wreg-fsr1h+status,2+status,0]
  6929                           ;strcpy@dest stored from wreg
  6930  094D  00F4               	movwf	strcpy@dest
  6931  094E  0870               	movf	strcpy@src,w
  6932  094F  00F1               	movwf	??_strcpy
  6933  0950  0871               	movf	??_strcpy,w
  6934  0951  00F2               	movwf	strcpy@s
  6935  0952  0874               	movf	strcpy@dest,w
  6936  0953  00F1               	movwf	??_strcpy
  6937  0954  0871               	movf	??_strcpy,w
  6938  0955  00F3               	movwf	strcpy@d
  6939  0956                     i1l3755:	
  6940  0956  0873               	movf	strcpy@d,w
  6941  0957  0086               	movwf	6
  6942  0958  3001               	movlw	1	; select bank2/3
  6943  0959  0087               	movwf	7
  6944  095A  0AF3               	incf	strcpy@d,f
  6945  095B  0872               	movf	strcpy@s,w
  6946  095C  0084               	movwf	4
  6947  095D  0185               	clrf	5
  6948  095E  0AF2               	incf	strcpy@s,f
  6949  095F  0800               	movf	0,w
  6950  0960  3FC0               	movwi [0]fsr1
  6951  0961  0889               	movf	9,f
  6952  0962  1903               	btfsc	3,2
  6953  0963  0008               	return
  6954  0964  2956               	goto	i1l3755
  6955  0965                     __end_of_strcpy:	
  6956                           
  6957                           	psect	text30
  6958  09DF                     __ptext30:	
  6959 ;; *************** function _sprintf *****************
  6960 ;; Defined at:
  6961 ;;		line 9 in file "E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_sprintf.c"
  6962 ;; Parameters:    Size  Location     Type
  6963 ;;  s               1    wreg     PTR unsigned char 
  6964 ;;		 -> ISR@buf(64), 
  6965 ;;  fmt             2   72[BANK0 ] PTR const unsigned char 
  6966 ;;		 -> STR_1(20), 
  6967 ;; Auto vars:     Size  Location     Type
  6968 ;;  s               1    3[BANK1 ] PTR unsigned char 
  6969 ;;		 -> ISR@buf(64), 
  6970 ;;  f               5    4[BANK1 ] struct _IO_FILE
  6971 ;;  ret             2    0        int 
  6972 ;;  ap              1    2[BANK1 ] PTR void [1]
  6973 ;;		 -> ?_sprintf(2), 
  6974 ;; Return value:  Size  Location     Type
  6975 ;;                  2   72[BANK0 ] int 
  6976 ;; Registers used:
  6977 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6978 ;; Tracked objects:
  6979 ;;		On entry : 0/0
  6980 ;;		On exit  : 0/0
  6981 ;;		Unchanged: 0/0
  6982 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6983 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6984 ;;      Locals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0
  6985 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6986 ;;      Totals:         1       8       9       0       0       0       0       0       0       0       0       0       
      +0       0
  6987 ;;Total ram usage:       18 bytes
  6988 ;; Hardware stack levels used:    1
  6989 ;; Hardware stack levels required when called:    7
  6990 ;; This function calls:
  6991 ;;		_vfprintf
  6992 ;; This function is called by:
  6993 ;;		_ISR
  6994 ;; This function uses a non-reentrant model
  6995 ;;
  6996                           
  6997                           
  6998                           ;psect for function _sprintf
  6999  09DF                     _sprintf:	
  7000                           
  7001                           ;incstack = 0
  7002                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7003                           ;sprintf@s stored from wreg
  7004  09DF  0021               	movlb	1	; select bank1
  7005  09E0  00A3               	movwf	sprintf@s^(0+128)
  7006  09E1  306A               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  7007  09E2  00FD               	movwf	??_sprintf
  7008  09E3  087D               	movf	??_sprintf,w
  7009  09E4  00A2               	movwf	sprintf@ap^(0+128)
  7010  09E5  0823               	movf	sprintf@s^(0+128),w
  7011  09E6  00FD               	movwf	??_sprintf
  7012  09E7  087D               	movf	??_sprintf,w
  7013  09E8  00A4               	movwf	sprintf@f^(0+128)
  7014  09E9  01A5               	clrf	(sprintf@f^(0+128)+1)
  7015  09EA  01A6               	clrf	((sprintf@f+1)^(0+128)+1)
  7016  09EB  01A7               	clrf	(sprintf@f^(0+128)+3)
  7017  09EC  01A8               	clrf	((sprintf@f+1)^(0+128)+3)
  7018  09ED  0020               	movlb	0	; select bank0
  7019  09EE  0869               	movf	sprintf@fmt+1,w
  7020  09EF  00E1               	movwf	vfprintf@fmt+1
  7021  09F0  0868               	movf	sprintf@fmt,w
  7022  09F1  00E0               	movwf	vfprintf@fmt
  7023  09F2  30A2               	movlw	(low (sprintf@ap| 0))& (0+255)
  7024  09F3  00FD               	movwf	??_sprintf
  7025  09F4  087D               	movf	??_sprintf,w
  7026  09F5  00E2               	movwf	vfprintf@ap
  7027  09F6  30A4               	movlw	(low (sprintf@f| 0))& (0+255)
  7028  09F7  318A  22A0         	fcall	_vfprintf
  7029  09F9  0021               	movlb	1	; select bank1
  7030  09FA  0825               	movf	(sprintf@f^(0+128)+1),w
  7031  09FB  0723               	addwf	sprintf@s^(0+128),w
  7032  09FC  00FD               	movwf	??_sprintf
  7033  09FD  087D               	movf	??_sprintf,w
  7034  09FE  0086               	movwf	6
  7035  09FF  0187               	clrf	7
  7036  0A00  0181               	clrf	1
  7037  0A01  0008               	return
  7038  0A02                     __end_of_sprintf:	
  7039                           
  7040                           	psect	text31
  7041  0AA0                     __ptext31:	
  7042 ;; *************** function _vfprintf *****************
  7043 ;; Defined at:
  7044 ;;		line 1368 in file "E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  7045 ;; Parameters:    Size  Location     Type
  7046 ;;  fp              1    wreg     PTR struct _IO_FILE
  7047 ;;		 -> sprintf@f(5), 
  7048 ;;  fmt             2   64[BANK0 ] PTR const unsigned char 
  7049 ;;		 -> STR_1(20), 
  7050 ;;  ap              1   66[BANK0 ] PTR PTR void 
  7051 ;;		 -> sprintf@ap(1), 
  7052 ;; Auto vars:     Size  Location     Type
  7053 ;;  fp              1   69[BANK0 ] PTR struct _IO_FILE
  7054 ;;		 -> sprintf@f(5), 
  7055 ;;  cfmt            2   70[BANK0 ] PTR unsigned char 
  7056 ;;		 -> STR_1(20), 
  7057 ;; Return value:  Size  Location     Type
  7058 ;;                  2   64[BANK0 ] int 
  7059 ;; Registers used:
  7060 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7061 ;; Tracked objects:
  7062 ;;		On entry : 0/0
  7063 ;;		On exit  : 0/0
  7064 ;;		Unchanged: 0/0
  7065 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7066 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7067 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7068 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7069 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7070 ;;Total ram usage:        8 bytes
  7071 ;; Hardware stack levels used:    1
  7072 ;; Hardware stack levels required when called:    6
  7073 ;; This function calls:
  7074 ;;		_vfpfcnvrt
  7075 ;; This function is called by:
  7076 ;;		_sprintf
  7077 ;; This function uses a non-reentrant model
  7078 ;;
  7079                           
  7080                           
  7081                           ;psect for function _vfprintf
  7082  0AA0                     _vfprintf:	
  7083                           
  7084                           ;incstack = 0
  7085                           ; Regs used in _vfprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7086                           ;vfprintf@fp stored from wreg
  7087  0AA0  0020               	movlb	0	; select bank0
  7088  0AA1  00E5               	movwf	vfprintf@fp
  7089                           
  7090                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1368: int v
      +                          fprintf(FILE *fp, const char *fmt, va_list ap);E:\Program Files (x86)\Microchip\xc8\v2.0
      +                          5\pic\sources\c99\common\doprnt.c: 1369: {;E:\Program Files (x86)\Microchip\xc8\v2.05\pi
      +                          c\sources\c99\common\doprnt.c: 1371:     char *cfmt;;E:\Program Files (x86)\Microchip\xc
      +                          8\v2.05\pic\sources\c99\common\doprnt.c: 1373:     cfmt = (char *)fmt;
  7091  0AA2  0861               	movf	vfprintf@fmt+1,w
  7092  0AA3  00E7               	movwf	vfprintf@cfmt+1
  7093  0AA4  0860               	movf	vfprintf@fmt,w
  7094  0AA5  00E6               	movwf	vfprintf@cfmt
  7095                           
  7096                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1374:     n
      +                          out = 0;
  7097  0AA6  0023               	movlb	3	; select bank3
  7098  0AA7  01A0               	clrf	_nout^(0+384)
  7099  0AA8  01A1               	clrf	(_nout+1)^(0+384)
  7100  0AA9                     i1l3613:	
  7101                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
  7102                           
  7103                           
  7104                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
  7105  0AA9  0020               	movlb	0	; select bank0
  7106  0AAA  0866               	movf	vfprintf@cfmt,w
  7107  0AAB  0084               	movwf	4
  7108  0AAC  0867               	movf	vfprintf@cfmt+1,w
  7109  0AAD  0085               	movwf	5
  7110  0AAE  0012               	moviw fsr0++
  7111  0AAF  1903               	btfsc	3,2
  7112  0AB0  2AC6               	goto	i1l3615
  7113                           
  7114                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1376:      
      +                             nout += vfpfcnvrt(fp, &cfmt, ap);
  7115  0AB1  3066               	movlw	(low (vfprintf@cfmt| 0))& (0+255)
  7116  0AB2  00E3               	movwf	??_vfprintf
  7117  0AB3  0863               	movf	??_vfprintf,w
  7118  0AB4  00CE               	movwf	vfpfcnvrt@fmt
  7119  0AB5  0862               	movf	vfprintf@ap,w
  7120  0AB6  00E4               	movwf	??_vfprintf+1
  7121  0AB7  0864               	movf	??_vfprintf+1,w
  7122  0AB8  00CF               	movwf	vfpfcnvrt@ap
  7123  0AB9  0865               	movf	vfprintf@fp,w
  7124  0ABA  3183  2386  318A   	fcall	_vfpfcnvrt
  7125  0ABD  0020               	movlb	0	; select bank0
  7126  0ABE  084E               	movf	?_vfpfcnvrt,w
  7127  0ABF  0023               	movlb	3	; select bank3
  7128  0AC0  07A0               	addwf	_nout^(0+384),f
  7129  0AC1  0020               	movlb	0	; select bank0
  7130  0AC2  084F               	movf	?_vfpfcnvrt+1,w
  7131  0AC3  0023               	movlb	3	; select bank3
  7132  0AC4  3DA1               	addwfc	(_nout+1)^(0+384),f
  7133  0AC5  2AA9               	goto	i1l3613
  7134  0AC6                     i1l3615:	
  7135                           
  7136                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1378:     r
      +                          eturn nout;
  7137  0AC6  0023               	movlb	3	; select bank3
  7138  0AC7  0821               	movf	(_nout+1)^(0+384),w
  7139  0AC8  0020               	movlb	0	; select bank0
  7140  0AC9  00E1               	movwf	?_vfprintf+1
  7141  0ACA  0023               	movlb	3	; select bank3
  7142  0ACB  0820               	movf	_nout^(0+384),w
  7143  0ACC  0020               	movlb	0	; select bank0
  7144  0ACD  00E0               	movwf	?_vfprintf
  7145  0ACE  0008               	return
  7146  0ACF                     __end_of_vfprintf:	
  7147                           
  7148                           	psect	text32
  7149  0386                     __ptext32:	
  7150 ;; *************** function _vfpfcnvrt *****************
  7151 ;; Defined at:
  7152 ;;		line 670 in file "E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  7153 ;; Parameters:    Size  Location     Type
  7154 ;;  fp              1    wreg     PTR struct _IO_FILE
  7155 ;;		 -> sprintf@f(5), 
  7156 ;;  fmt             1   46[BANK0 ] PTR PTR unsigned char 
  7157 ;;		 -> vfprintf@cfmt(2), 
  7158 ;;  ap              1   47[BANK0 ] PTR PTR void 
  7159 ;;		 -> sprintf@ap(1), 
  7160 ;; Auto vars:     Size  Location     Type
  7161 ;;  fp              1   63[BANK0 ] PTR struct _IO_FILE
  7162 ;;		 -> sprintf@f(5), 
  7163 ;;  ll              8   53[BANK0 ] long long 
  7164 ;;  llu             8    0        unsigned long long 
  7165 ;;  f               4    0        unsigned long long 
  7166 ;;  ct              3    0        unsigned char [3]
  7167 ;;  cp              2   61[BANK0 ] PTR unsigned char 
  7168 ;;		 -> ?_sprintf(2), STR_3(4), STR_2(7), 
  7169 ;;  vp              2    0        PTR void 
  7170 ;;  i               2    0        int 
  7171 ;;  done            2    0        int 
  7172 ;;  c               1    0        unsigned char 
  7173 ;; Return value:  Size  Location     Type
  7174 ;;                  2   46[BANK0 ] int 
  7175 ;; Registers used:
  7176 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7177 ;; Tracked objects:
  7178 ;;		On entry : 0/0
  7179 ;;		On exit  : 0/0
  7180 ;;		Unchanged: 0/0
  7181 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7182 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7183 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7184 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7185 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7186 ;;Total ram usage:       18 bytes
  7187 ;; Hardware stack levels used:    1
  7188 ;; Hardware stack levels required when called:    5
  7189 ;; This function calls:
  7190 ;;		_dtoa
  7191 ;;		_fputc
  7192 ;;		_stoa
  7193 ;; This function is called by:
  7194 ;;		_vfprintf
  7195 ;; This function uses a non-reentrant model
  7196 ;;
  7197                           
  7198                           
  7199                           ;psect for function _vfpfcnvrt
  7200  0386                     _vfpfcnvrt:	
  7201                           
  7202                           ;incstack = 0
  7203                           ; Regs used in _vfpfcnvrt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7204                           ;vfpfcnvrt@fp stored from wreg
  7205  0386  0020               	movlb	0	; select bank0
  7206  0387  00DF               	movwf	vfpfcnvrt@fp
  7207                           
  7208                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 670: static
      +                           int vfpfcnvrt(FILE *fp, char *fmt[], va_list ap);E:\Program Files (x86)\Microchip\xc8\v
      +                          2.05\pic\sources\c99\common\doprnt.c: 671: {;E:\Program Files (x86)\Microchip\xc8\v2.05\
      +                          pic\sources\c99\common\doprnt.c: 672:     char c, *cp, ct[3];;E:\Program Files (x86)\Mic
      +                          rochip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 673:     int done, i;;E:\Program Files
      +                           (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 674:     long long ll;
  7209  0388  084E               	movf	vfpfcnvrt@fmt,w
  7210  0389  0086               	movwf	6
  7211  038A  0187               	clrf	7
  7212  038B  3F40               	moviw [0]fsr1
  7213  038C  00D0               	movwf	??_vfpfcnvrt
  7214  038D  3F41               	moviw [1]fsr1
  7215  038E  00D1               	movwf	??_vfpfcnvrt+1
  7216  038F  0850               	movf	??_vfpfcnvrt,w
  7217  0390  0084               	movwf	4
  7218  0391  0851               	movf	??_vfpfcnvrt+1,w
  7219  0392  0085               	movwf	5
  7220  0393  0012               	moviw fsr0++
  7221  0394  3A25               	xorlw	37
  7222  0395  1D03               	btfss	3,2
  7223  0396  2C64               	goto	i1l3219
  7224                           
  7225                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 681:       
      +                            ++*fmt;
  7226  0397  084E               	movf	vfpfcnvrt@fmt,w
  7227  0398  0086               	movwf	6
  7228  0399  0187               	clrf	7
  7229  039A  3001               	movlw	1
  7230  039B  0781               	addwf	1,f
  7231  039C  3141               	addfsr 1,1
  7232  039D  1803               	skipnc
  7233  039E  0A81               	incf	1,f
  7234                           
  7235                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 683:       
      +                            flags = width = 0;
  7236  039F  0022               	movlb	2	; select bank2
  7237  03A0  01E0               	clrf	_width^(0+256)
  7238  03A1  01E1               	clrf	(_width+1)^(0+256)
  7239  03A2  0021               	movlb	1	; select bank1
  7240  03A3  01EE               	clrf	_flags^(0+128)
  7241  03A4  01EF               	clrf	(_flags+1)^(0+128)
  7242                           
  7243                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 684:       
      +                            prec = -1;
  7244  03A5  30FF               	movlw	255
  7245  03A6  00EC               	movwf	_prec^(0+128)
  7246  03A7  30FF               	movlw	255
  7247  03A8  00ED               	movwf	(_prec^(0+128)+1)
  7248                           
  7249                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 825:       
      +                            if ((*fmt[0] == 'd') || (*fmt[0] == 'i')) {
  7250  03A9  0020               	movlb	0	; select bank0
  7251  03AA  084E               	movf	vfpfcnvrt@fmt,w
  7252  03AB  0086               	movwf	6
  7253  03AC  0187               	clrf	7
  7254  03AD  3F40               	moviw [0]fsr1
  7255  03AE  00D0               	movwf	??_vfpfcnvrt
  7256  03AF  3F41               	moviw [1]fsr1
  7257  03B0  00D1               	movwf	??_vfpfcnvrt+1
  7258  03B1  0850               	movf	??_vfpfcnvrt,w
  7259  03B2  0084               	movwf	4
  7260  03B3  0851               	movf	??_vfpfcnvrt+1,w
  7261  03B4  0085               	movwf	5
  7262  03B5  0012               	moviw fsr0++
  7263  03B6  3A64               	xorlw	100
  7264  03B7  1903               	btfsc	3,2
  7265  03B8  2BC8               	goto	i1l3185
  7266  03B9  084E               	movf	vfpfcnvrt@fmt,w
  7267  03BA  0086               	movwf	6
  7268  03BB  0187               	clrf	7
  7269  03BC  3F40               	moviw [0]fsr1
  7270  03BD  00D0               	movwf	??_vfpfcnvrt
  7271  03BE  3F41               	moviw [1]fsr1
  7272  03BF  00D1               	movwf	??_vfpfcnvrt+1
  7273  03C0  0850               	movf	??_vfpfcnvrt,w
  7274  03C1  0084               	movwf	4
  7275  03C2  0851               	movf	??_vfpfcnvrt+1,w
  7276  03C3  0085               	movwf	5
  7277  03C4  0012               	moviw fsr0++
  7278  03C5  3A69               	xorlw	105
  7279  03C6  1D03               	btfss	3,2
  7280  03C7  2C02               	goto	i1l3193
  7281  03C8                     i1l3185:	
  7282                           
  7283                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 827:       
      +                                ++*fmt;
  7284  03C8  084E               	movf	vfpfcnvrt@fmt,w
  7285  03C9  0086               	movwf	6
  7286  03CA  0187               	clrf	7
  7287  03CB  3001               	movlw	1
  7288  03CC  0781               	addwf	1,f
  7289  03CD  3141               	addfsr 1,1
  7290  03CE  1803               	skipnc
  7291  03CF  0A81               	incf	1,f
  7292                           
  7293                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 828:       
      +                                ll = (long long)(*(int *)__va_arg(*(int **)ap, (int)0));
  7294  03D0  084F               	movf	vfpfcnvrt@ap,w
  7295  03D1  0086               	movwf	6
  7296  03D2  0187               	clrf	7
  7297  03D3  0801               	movf	1,w
  7298  03D4  0084               	movwf	4
  7299  03D5  0185               	clrf	5
  7300  03D6  3002               	movlw	2
  7301  03D7  0781               	addwf	1,f
  7302  03D8  3F00               	moviw [0]fsr0
  7303  03D9  00D0               	movwf	??_vfpfcnvrt
  7304  03DA  3F01               	moviw [1]fsr0
  7305  03DB  00D1               	movwf	??_vfpfcnvrt+1
  7306  03DC  0850               	movf	??_vfpfcnvrt,w
  7307  03DD  00D5               	movwf	vfpfcnvrt@ll
  7308  03DE  0851               	movf	??_vfpfcnvrt+1,w
  7309  03DF  00D6               	movwf	vfpfcnvrt@ll+1
  7310  03E0  0D89               	rlf	9,f
  7311  03E1  3B89               	subwfb	9,f
  7312  03E2  0989               	comf	9,f
  7313  03E3  00D7               	movwf	vfpfcnvrt@ll+2
  7314  03E4  00D8               	movwf	vfpfcnvrt@ll+3
  7315  03E5  00D9               	movwf	vfpfcnvrt@ll+4
  7316  03E6  00DA               	movwf	vfpfcnvrt@ll+5
  7317  03E7  00DB               	movwf	vfpfcnvrt@ll+6
  7318  03E8  00DC               	movwf	vfpfcnvrt@ll+7
  7319                           
  7320                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 830:       
      +                                return dtoa(fp, ll);
  7321  03E9  0855               	movf	vfpfcnvrt@ll,w
  7322  03EA  00B0               	movwf	dtoa@d
  7323  03EB  0856               	movf	vfpfcnvrt@ll+1,w
  7324  03EC  00B1               	movwf	dtoa@d+1
  7325  03ED  0857               	movf	vfpfcnvrt@ll+2,w
  7326  03EE  00B2               	movwf	dtoa@d+2
  7327  03EF  0858               	movf	vfpfcnvrt@ll+3,w
  7328  03F0  00B3               	movwf	dtoa@d+3
  7329  03F1  0859               	movf	vfpfcnvrt@ll+4,w
  7330  03F2  00B4               	movwf	dtoa@d+4
  7331  03F3  085A               	movf	vfpfcnvrt@ll+5,w
  7332  03F4  00B5               	movwf	dtoa@d+5
  7333  03F5  085B               	movf	vfpfcnvrt@ll+6,w
  7334  03F6  00B6               	movwf	dtoa@d+6
  7335  03F7  085C               	movf	vfpfcnvrt@ll+7,w
  7336  03F8  00B7               	movwf	dtoa@d+7
  7337  03F9  085F               	movf	vfpfcnvrt@fp,w
  7338  03FA  3182  2235         	fcall	_dtoa
  7339  03FC  0020               	movlb	0	; select bank0
  7340  03FD  0831               	movf	?_dtoa+1,w
  7341  03FE  00CF               	movwf	?_vfpfcnvrt+1
  7342  03FF  0830               	movf	?_dtoa,w
  7343  0400  00CE               	movwf	?_vfpfcnvrt
  7344  0401  0008               	return
  7345  0402                     i1l3193:	
  7346                           
  7347                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1149:      
      +                             if (*fmt[0] == 's') {
  7348  0402  084E               	movf	vfpfcnvrt@fmt,w
  7349  0403  0086               	movwf	6
  7350  0404  0187               	clrf	7
  7351  0405  3F40               	moviw [0]fsr1
  7352  0406  00D0               	movwf	??_vfpfcnvrt
  7353  0407  3F41               	moviw [1]fsr1
  7354  0408  00D1               	movwf	??_vfpfcnvrt+1
  7355  0409  0850               	movf	??_vfpfcnvrt,w
  7356  040A  0084               	movwf	4
  7357  040B  0851               	movf	??_vfpfcnvrt+1,w
  7358  040C  0085               	movwf	5
  7359  040D  0012               	moviw fsr0++
  7360  040E  3A73               	xorlw	115
  7361  040F  1D03               	btfss	3,2
  7362  0410  2C32               	goto	i1l3203
  7363                           
  7364                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1151:      
      +                                 ++*fmt;
  7365  0411  084E               	movf	vfpfcnvrt@fmt,w
  7366  0412  0086               	movwf	6
  7367  0413  0187               	clrf	7
  7368  0414  3001               	movlw	1
  7369  0415  0781               	addwf	1,f
  7370  0416  3141               	addfsr 1,1
  7371  0417  1803               	skipnc
  7372  0418  0A81               	incf	1,f
  7373                           
  7374                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1152:      
      +                                 cp = (*(char * *)__va_arg(*(char * **)ap, (char *)0));
  7375  0419  084F               	movf	vfpfcnvrt@ap,w
  7376  041A  0086               	movwf	6
  7377  041B  0187               	clrf	7
  7378  041C  0801               	movf	1,w
  7379  041D  0084               	movwf	4
  7380  041E  0185               	clrf	5
  7381  041F  3002               	movlw	2
  7382  0420  0781               	addwf	1,f
  7383  0421  3F00               	moviw [0]fsr0
  7384  0422  00DD               	movwf	vfpfcnvrt@cp
  7385  0423  3F01               	moviw [1]fsr0
  7386  0424  00DE               	movwf	vfpfcnvrt@cp+1
  7387                           
  7388                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1154:      
      +                                 return stoa(fp, cp);
  7389  0425  085E               	movf	vfpfcnvrt@cp+1,w
  7390  0426  00F9               	movwf	stoa@s+1
  7391  0427  085D               	movf	vfpfcnvrt@cp,w
  7392  0428  00F8               	movwf	stoa@s
  7393  0429  085F               	movf	vfpfcnvrt@fp,w
  7394  042A  318F  273A         	fcall	_stoa
  7395  042C  0879               	movf	?_stoa+1,w
  7396  042D  0020               	movlb	0	; select bank0
  7397  042E  00CF               	movwf	?_vfpfcnvrt+1
  7398  042F  0878               	movf	?_stoa,w
  7399  0430  00CE               	movwf	?_vfpfcnvrt
  7400  0431  0008               	return
  7401  0432                     i1l3203:	
  7402                           
  7403                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1350:      
      +                             if ((*fmt)[0] == '%') {
  7404  0432  084E               	movf	vfpfcnvrt@fmt,w
  7405  0433  0086               	movwf	6
  7406  0434  0187               	clrf	7
  7407  0435  3F40               	moviw [0]fsr1
  7408  0436  00D0               	movwf	??_vfpfcnvrt
  7409  0437  3F41               	moviw [1]fsr1
  7410  0438  00D1               	movwf	??_vfpfcnvrt+1
  7411  0439  0850               	movf	??_vfpfcnvrt,w
  7412  043A  0084               	movwf	4
  7413  043B  0851               	movf	??_vfpfcnvrt+1,w
  7414  043C  0085               	movwf	5
  7415  043D  0012               	moviw fsr0++
  7416  043E  3A25               	xorlw	37
  7417  043F  1D03               	btfss	3,2
  7418  0440  2C59               	goto	i1l3213
  7419                           
  7420                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1351:      
      +                                 ++*fmt;
  7421  0441  084E               	movf	vfpfcnvrt@fmt,w
  7422  0442  0086               	movwf	6
  7423  0443  0187               	clrf	7
  7424  0444  3001               	movlw	1
  7425  0445  0781               	addwf	1,f
  7426  0446  3141               	addfsr 1,1
  7427  0447  1803               	skipnc
  7428  0448  0A81               	incf	1,f
  7429                           
  7430                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1352:      
      +                                 fputc((int)'%', fp);
  7431  0449  3025               	movlw	37
  7432  044A  00F0               	movwf	fputc@c
  7433  044B  3000               	movlw	0
  7434  044C  00F1               	movwf	fputc@c+1
  7435  044D  085F               	movf	vfpfcnvrt@fp,w
  7436  044E  00D0               	movwf	??_vfpfcnvrt
  7437  044F  0850               	movf	??_vfpfcnvrt,w
  7438  0450  00F2               	movwf	fputc@fp
  7439  0451  318B  2314         	fcall	_fputc
  7440  0453                     i1l3209:	
  7441                           
  7442                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1353:      
      +                                 return 1;
  7443  0453  3001               	movlw	1
  7444  0454  0020               	movlb	0	; select bank0
  7445  0455  00CE               	movwf	?_vfpfcnvrt
  7446  0456  3000               	movlw	0
  7447  0457  00CF               	movwf	?_vfpfcnvrt+1
  7448  0458  0008               	return
  7449  0459                     i1l3213:	
  7450                           
  7451                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1357:      
      +                             ++*fmt;
  7452  0459  084E               	movf	vfpfcnvrt@fmt,w
  7453  045A  0086               	movwf	6
  7454  045B  0187               	clrf	7
  7455  045C  3001               	movlw	1
  7456  045D  0781               	addwf	1,f
  7457  045E  3141               	addfsr 1,1
  7458  045F  1803               	skipnc
  7459  0460  0A81               	incf	1,f
  7460                           
  7461                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1358:      
      +                             return 0;
  7462  0461  01CE               	clrf	?_vfpfcnvrt
  7463  0462  01CF               	clrf	?_vfpfcnvrt+1
  7464  0463  0008               	return
  7465  0464                     i1l3219:	
  7466                           
  7467                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1362:     f
      +                          putc((int)(*fmt)[0], fp);
  7468  0464  084E               	movf	vfpfcnvrt@fmt,w
  7469  0465  0086               	movwf	6
  7470  0466  0187               	clrf	7
  7471  0467  3F40               	moviw [0]fsr1
  7472  0468  00D0               	movwf	??_vfpfcnvrt
  7473  0469  3F41               	moviw [1]fsr1
  7474  046A  00D1               	movwf	??_vfpfcnvrt+1
  7475  046B  0850               	movf	??_vfpfcnvrt,w
  7476  046C  0084               	movwf	4
  7477  046D  0851               	movf	??_vfpfcnvrt+1,w
  7478  046E  0085               	movwf	5
  7479  046F  0800               	movf	0,w	;code access
  7480  0470  00D2               	movwf	??_vfpfcnvrt+2
  7481  0471  01D3               	clrf	??_vfpfcnvrt+3
  7482  0472  0852               	movf	??_vfpfcnvrt+2,w
  7483  0473  00F0               	movwf	fputc@c
  7484  0474  0853               	movf	??_vfpfcnvrt+3,w
  7485  0475  00F1               	movwf	fputc@c+1
  7486  0476  085F               	movf	vfpfcnvrt@fp,w
  7487  0477  00D4               	movwf	??_vfpfcnvrt+4
  7488  0478  0854               	movf	??_vfpfcnvrt+4,w
  7489  0479  00F2               	movwf	fputc@fp
  7490  047A  318B  2314  3183   	fcall	_fputc
  7491                           
  7492                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1363:     +
      +                          +*fmt;
  7493  047D  0020               	movlb	0	; select bank0
  7494  047E  084E               	movf	vfpfcnvrt@fmt,w
  7495  047F  0086               	movwf	6
  7496  0480  0187               	clrf	7
  7497  0481  3001               	movlw	1
  7498  0482  0781               	addwf	1,f
  7499  0483  3141               	addfsr 1,1
  7500  0484  1803               	skipnc
  7501  0485  0A81               	incf	1,f
  7502  0486  2C53               	goto	i1l3209
  7503  0487                     __end_of_vfpfcnvrt:	
  7504                           
  7505                           	psect	text33
  7506  0F3A                     __ptext33:	
  7507 ;; *************** function _stoa *****************
  7508 ;; Defined at:
  7509 ;;		line 546 in file "E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  7510 ;; Parameters:    Size  Location     Type
  7511 ;;  fp              1    wreg     PTR struct _IO_FILE
  7512 ;;		 -> sprintf@f(5), 
  7513 ;;  s               2    8[COMMON] PTR unsigned char 
  7514 ;;		 -> ?_sprintf(2), STR_3(4), STR_2(7), 
  7515 ;; Auto vars:     Size  Location     Type
  7516 ;;  fp              1   11[BANK0 ] PTR struct _IO_FILE
  7517 ;;		 -> sprintf@f(5), 
  7518 ;;  nuls            7    0[BANK0 ] unsigned char [7]
  7519 ;;  l               2   16[BANK0 ] int 
  7520 ;;  p               2   14[BANK0 ] int 
  7521 ;;  cp              2   12[BANK0 ] PTR unsigned char 
  7522 ;;		 -> ?_sprintf(2), stoa@nuls(7), STR_3(4), STR_2(7), 
  7523 ;;  w               2    9[BANK0 ] int 
  7524 ;;  i               2    7[BANK0 ] int 
  7525 ;; Return value:  Size  Location     Type
  7526 ;;                  2    8[COMMON] int 
  7527 ;; Registers used:
  7528 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7529 ;; Tracked objects:
  7530 ;;		On entry : 0/0
  7531 ;;		On exit  : 0/0
  7532 ;;		Unchanged: 0/0
  7533 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7534 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7535 ;;      Locals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7536 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7537 ;;      Totals:         5      18       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7538 ;;Total ram usage:       23 bytes
  7539 ;; Hardware stack levels used:    1
  7540 ;; Hardware stack levels required when called:    2
  7541 ;; This function calls:
  7542 ;;		_fputc
  7543 ;;		_strlen
  7544 ;; This function is called by:
  7545 ;;		_vfpfcnvrt
  7546 ;; This function uses a non-reentrant model
  7547 ;;
  7548                           
  7549                           
  7550                           ;psect for function _stoa
  7551  0F3A                     _stoa:	
  7552                           
  7553                           ;incstack = 0
  7554                           ; Regs used in _stoa: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7555                           ;stoa@fp stored from wreg
  7556  0F3A  0020               	movlb	0	; select bank0
  7557  0F3B  00AB               	movwf	stoa@fp
  7558                           
  7559                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 546: static
      +                           int stoa(FILE *fp, char *s);E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\
      +                          common\doprnt.c: 547: {;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\commo
      +                          n\doprnt.c: 548:     char *cp, nuls[] = "(null)";
  7560  0F3C  30E2               	movlw	low stoa@F1139
  7561  0F3D  0086               	movwf	6
  7562  0F3E  3001               	movlw	high stoa@F1139
  7563  0F3F  0087               	movwf	7
  7564  0F40  3020               	movlw	low stoa@nuls
  7565  0F41  0084               	movwf	4
  7566  0F42  3000               	movlw	high stoa@nuls
  7567  0F43  0085               	movwf	5
  7568  0F44  3007               	movlw	7
  7569  0F45  00FA               	movwf	??_stoa
  7570  0F46                     u262_20:	
  7571  0F46  0016               	moviw fsr1++
  7572  0F47  001A               	movwi fsr0++
  7573  0F48  0BFA               	decfsz	??_stoa,f
  7574  0F49  2F46               	goto	u262_20
  7575                           
  7576                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 549:     in
      +                          t i, l, p, w;;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c
      +                          : 552:     cp = s;
  7577  0F4A  0879               	movf	stoa@s+1,w
  7578  0F4B  00AD               	movwf	stoa@cp+1
  7579  0F4C  0878               	movf	stoa@s,w
  7580  0F4D  00AC               	movwf	stoa@cp
  7581                           
  7582                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 553:     if
      +                           (!cp) {
  7583  0F4E  082C               	movf	stoa@cp,w
  7584  0F4F  042D               	iorwf	stoa@cp+1,w
  7585  0F50  1D03               	btfss	3,2
  7586  0F51  2F56               	goto	i1l2975
  7587                           
  7588                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 554:       
      +                            cp = nuls;
  7589  0F52  3020               	movlw	low stoa@nuls
  7590  0F53  00AC               	movwf	stoa@cp
  7591  0F54  3000               	movlw	high stoa@nuls
  7592  0F55  00AD               	movwf	stoa@cp+1
  7593  0F56                     i1l2975:	
  7594                           
  7595                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 558:     l 
      +                          = strlen(cp);
  7596  0F56  082D               	movf	stoa@cp+1,w
  7597  0F57  00F1               	movwf	strlen@s+1
  7598  0F58  082C               	movf	stoa@cp,w
  7599  0F59  00F0               	movwf	strlen@s
  7600  0F5A  3189  2136  318F   	fcall	_strlen
  7601  0F5D  0871               	movf	?_strlen+1,w
  7602  0F5E  0020               	movlb	0	; select bank0
  7603  0F5F  00B1               	movwf	stoa@l+1
  7604  0F60  0870               	movf	?_strlen,w
  7605  0F61  00B0               	movwf	stoa@l
  7606                           
  7607                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 559:     p 
      +                          = prec;
  7608  0F62  0021               	movlb	1	; select bank1
  7609  0F63  086D               	movf	(_prec+1)^(0+128),w
  7610  0F64  0020               	movlb	0	; select bank0
  7611  0F65  00AF               	movwf	stoa@p+1
  7612  0F66  0021               	movlb	1	; select bank1
  7613  0F67  086C               	movf	_prec^(0+128),w
  7614  0F68  0020               	movlb	0	; select bank0
  7615  0F69  00AE               	movwf	stoa@p
  7616                           
  7617                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 560:     l 
      +                          = (!(p < 0) && (p < l)) ? p : l;
  7618  0F6A  1BAF               	btfsc	stoa@p+1,7
  7619  0F6B  2F7D               	goto	i1l795
  7620  0F6C  082F               	movf	stoa@p+1,w
  7621  0F6D  3A80               	xorlw	128
  7622  0F6E  00FA               	movwf	??_stoa
  7623  0F6F  0831               	movf	stoa@l+1,w
  7624  0F70  3A80               	xorlw	128
  7625  0F71  027A               	subwf	??_stoa,w
  7626  0F72  1D03               	skipz
  7627  0F73  2F76               	goto	u265_25
  7628  0F74  0830               	movf	stoa@l,w
  7629  0F75  022E               	subwf	stoa@p,w
  7630  0F76                     u265_25:	
  7631  0F76  1803               	btfsc	3,0
  7632  0F77  2F7D               	goto	i1l795
  7633  0F78  0020               	movlb	0	; select bank0
  7634  0F79  082F               	movf	stoa@p+1,w
  7635  0F7A  00B1               	movwf	stoa@l+1
  7636  0F7B  082E               	movf	stoa@p,w
  7637  0F7C  00B0               	movwf	stoa@l
  7638  0F7D                     i1l795:	
  7639                           
  7640                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 561:     p 
      +                          = l;
  7641  0F7D  0020               	movlb	0	; select bank0
  7642  0F7E  0831               	movf	stoa@l+1,w
  7643  0F7F  00AF               	movwf	stoa@p+1
  7644  0F80  0830               	movf	stoa@l,w
  7645  0F81  00AE               	movwf	stoa@p
  7646                           
  7647                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 562:     w 
      +                          = width;
  7648  0F82  0022               	movlb	2	; select bank2
  7649  0F83  0861               	movf	(_width+1)^(0+256),w
  7650  0F84  0020               	movlb	0	; select bank0
  7651  0F85  00AA               	movwf	stoa@w+1
  7652  0F86  0022               	movlb	2	; select bank2
  7653  0F87  0860               	movf	_width^(0+256),w
  7654  0F88  0020               	movlb	0	; select bank0
  7655  0F89  00A9               	movwf	stoa@w
  7656                           
  7657                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 565:     if
      +                           (!(flags & (1 << 0))) {
  7658  0F8A  0021               	movlb	1	; select bank1
  7659  0F8B  1C6E               	btfss	_flags^(0+128),0
  7660  0F8C  2F9F               	goto	i1l2993
  7661  0F8D  2FAC               	goto	i1l2995
  7662  0F8E                     i1l2989:	
  7663                           
  7664                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 567:       
      +                                fputc(' ', fp);
  7665  0F8E  3020               	movlw	32
  7666  0F8F  00F0               	movwf	fputc@c
  7667  0F90  3000               	movlw	0
  7668  0F91  00F1               	movwf	fputc@c+1
  7669  0F92  0020               	movlb	0	; select bank0
  7670  0F93  082B               	movf	stoa@fp,w
  7671  0F94  00FA               	movwf	??_stoa
  7672  0F95  087A               	movf	??_stoa,w
  7673  0F96  00F2               	movwf	fputc@fp
  7674  0F97  318B  2314  318F   	fcall	_fputc
  7675                           
  7676                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 568:       
      +                                ++l;
  7677  0F9A  3001               	movlw	1
  7678  0F9B  0020               	movlb	0	; select bank0
  7679  0F9C  07B0               	addwf	stoa@l,f
  7680  0F9D  3000               	movlw	0
  7681  0F9E  3DB1               	addwfc	stoa@l+1,f
  7682  0F9F                     i1l2993:	
  7683                           
  7684                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 566:       
      +                            while (l < w) {
  7685  0F9F  0020               	movlb	0	; select bank0
  7686  0FA0  0831               	movf	stoa@l+1,w
  7687  0FA1  3A80               	xorlw	128
  7688  0FA2  00FA               	movwf	??_stoa
  7689  0FA3  082A               	movf	stoa@w+1,w
  7690  0FA4  3A80               	xorlw	128
  7691  0FA5  027A               	subwf	??_stoa,w
  7692  0FA6  1D03               	skipz
  7693  0FA7  2FAA               	goto	u267_25
  7694  0FA8  0829               	movf	stoa@w,w
  7695  0FA9  0230               	subwf	stoa@l,w
  7696  0FAA                     u267_25:	
  7697  0FAA  1C03               	skipc
  7698  0FAB  2F8E               	goto	i1l2989
  7699  0FAC                     i1l2995:	
  7700                           
  7701                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 573:     i 
      +                          = 0;
  7702  0FAC  0020               	movlb	0	; select bank0
  7703  0FAD  01A7               	clrf	stoa@i
  7704  0FAE  01A8               	clrf	stoa@i+1
  7705  0FAF                     i1l3003:	
  7706                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 574:     wh
      +                          ile (i < p) {
  7707                           
  7708                           
  7709                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 574:     wh
      +                          ile (i < p) {
  7710  0FAF  0828               	movf	stoa@i+1,w
  7711  0FB0  3A80               	xorlw	128
  7712  0FB1  00FA               	movwf	??_stoa
  7713  0FB2  082F               	movf	stoa@p+1,w
  7714  0FB3  3A80               	xorlw	128
  7715  0FB4  027A               	subwf	??_stoa,w
  7716  0FB5  1D03               	skipz
  7717  0FB6  2FB9               	goto	u268_25
  7718  0FB7  082E               	movf	stoa@p,w
  7719  0FB8  0227               	subwf	stoa@i,w
  7720  0FB9                     u268_25:	
  7721  0FB9  1803               	btfsc	3,0
  7722  0FBA  2FD8               	goto	i1l804
  7723                           
  7724                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 575:       
      +                            fputc(*cp, fp);
  7725  0FBB  0020               	movlb	0	; select bank0
  7726  0FBC  082C               	movf	stoa@cp,w
  7727  0FBD  0084               	movwf	4
  7728  0FBE  082D               	movf	stoa@cp+1,w
  7729  0FBF  0085               	movwf	5
  7730  0FC0  0800               	movf	0,w	;code access
  7731  0FC1  00FA               	movwf	??_stoa
  7732  0FC2  01FB               	clrf	??_stoa+1
  7733  0FC3  087A               	movf	??_stoa,w
  7734  0FC4  00F0               	movwf	fputc@c
  7735  0FC5  087B               	movf	??_stoa+1,w
  7736  0FC6  00F1               	movwf	fputc@c+1
  7737  0FC7  082B               	movf	stoa@fp,w
  7738  0FC8  00FC               	movwf	??_stoa+2
  7739  0FC9  087C               	movf	??_stoa+2,w
  7740  0FCA  00F2               	movwf	fputc@fp
  7741  0FCB  318B  2314  318F   	fcall	_fputc
  7742                           
  7743                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 576:       
      +                            ++cp;
  7744  0FCE  3001               	movlw	1
  7745  0FCF  0020               	movlb	0	; select bank0
  7746  0FD0  07AC               	addwf	stoa@cp,f
  7747  0FD1  3000               	movlw	0
  7748  0FD2  3DAD               	addwfc	stoa@cp+1,f
  7749                           
  7750                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 577:       
      +                            ++i;
  7751  0FD3  3001               	movlw	1
  7752  0FD4  07A7               	addwf	stoa@i,f
  7753  0FD5  3000               	movlw	0
  7754  0FD6  3DA8               	addwfc	stoa@i+1,f
  7755  0FD7  2FAF               	goto	i1l3003
  7756  0FD8                     i1l804:	
  7757                           
  7758                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 581:     if
      +                           (flags & (1 << 0)) {
  7759  0FD8  0021               	movlb	1	; select bank1
  7760  0FD9  186E               	btfsc	_flags^(0+128),0
  7761  0FDA  2FED               	goto	i1l3011
  7762  0FDB  2FFA               	goto	i1l3013
  7763  0FDC                     i1l3007:	
  7764                           
  7765                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 583:       
      +                                fputc(' ', fp);
  7766  0FDC  3020               	movlw	32
  7767  0FDD  00F0               	movwf	fputc@c
  7768  0FDE  3000               	movlw	0
  7769  0FDF  00F1               	movwf	fputc@c+1
  7770  0FE0  0020               	movlb	0	; select bank0
  7771  0FE1  082B               	movf	stoa@fp,w
  7772  0FE2  00FA               	movwf	??_stoa
  7773  0FE3  087A               	movf	??_stoa,w
  7774  0FE4  00F2               	movwf	fputc@fp
  7775  0FE5  318B  2314  318F   	fcall	_fputc
  7776                           
  7777                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 584:       
      +                                ++l;
  7778  0FE8  3001               	movlw	1
  7779  0FE9  0020               	movlb	0	; select bank0
  7780  0FEA  07B0               	addwf	stoa@l,f
  7781  0FEB  3000               	movlw	0
  7782  0FEC  3DB1               	addwfc	stoa@l+1,f
  7783  0FED                     i1l3011:	
  7784                           
  7785                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 582:       
      +                            while (l < w) {
  7786  0FED  0020               	movlb	0	; select bank0
  7787  0FEE  0831               	movf	stoa@l+1,w
  7788  0FEF  3A80               	xorlw	128
  7789  0FF0  00FA               	movwf	??_stoa
  7790  0FF1  082A               	movf	stoa@w+1,w
  7791  0FF2  3A80               	xorlw	128
  7792  0FF3  027A               	subwf	??_stoa,w
  7793  0FF4  1D03               	skipz
  7794  0FF5  2FF8               	goto	u270_25
  7795  0FF6  0829               	movf	stoa@w,w
  7796  0FF7  0230               	subwf	stoa@l,w
  7797  0FF8                     u270_25:	
  7798  0FF8  1C03               	skipc
  7799  0FF9  2FDC               	goto	i1l3007
  7800  0FFA                     i1l3013:	
  7801                           
  7802                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 588:     re
      +                          turn l;
  7803  0FFA  0020               	movlb	0	; select bank0
  7804  0FFB  0831               	movf	stoa@l+1,w
  7805  0FFC  00F9               	movwf	?_stoa+1
  7806  0FFD  0830               	movf	stoa@l,w
  7807  0FFE  00F8               	movwf	?_stoa
  7808  0FFF  0008               	return
  7809  1000                     __end_of_stoa:	
  7810                           
  7811                           	psect	text34
  7812  0235                     __ptext34:	
  7813 ;; *************** function _dtoa *****************
  7814 ;; Defined at:
  7815 ;;		line 274 in file "E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  7816 ;; Parameters:    Size  Location     Type
  7817 ;;  fp              1    wreg     PTR struct _IO_FILE
  7818 ;;		 -> sprintf@f(5), 
  7819 ;;  d               8   16[BANK0 ] long long 
  7820 ;; Auto vars:     Size  Location     Type
  7821 ;;  fp              1   29[BANK0 ] PTR struct _IO_FILE
  7822 ;;		 -> sprintf@f(5), 
  7823 ;;  n               8   36[BANK0 ] long long 
  7824 ;;  i               2   44[BANK0 ] int 
  7825 ;;  s               2   34[BANK0 ] int 
  7826 ;;  w               2   32[BANK0 ] int 
  7827 ;;  p               2   30[BANK0 ] int 
  7828 ;; Return value:  Size  Location     Type
  7829 ;;                  2   16[BANK0 ] int 
  7830 ;; Registers used:
  7831 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7832 ;; Tracked objects:
  7833 ;;		On entry : 0/0
  7834 ;;		On exit  : 0/0
  7835 ;;		Unchanged: 0/0
  7836 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7837 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7838 ;;      Locals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7839 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7840 ;;      Totals:         0      30       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7841 ;;Total ram usage:       30 bytes
  7842 ;; Hardware stack levels used:    1
  7843 ;; Hardware stack levels required when called:    4
  7844 ;; This function calls:
  7845 ;;		___aodiv
  7846 ;;		___aomod
  7847 ;;		_abs
  7848 ;;		_pad
  7849 ;; This function is called by:
  7850 ;;		_vfpfcnvrt
  7851 ;; This function uses a non-reentrant model
  7852 ;;
  7853                           
  7854                           
  7855                           ;psect for function _dtoa
  7856  0235                     _dtoa:	
  7857                           
  7858                           ;incstack = 0
  7859                           ; Regs used in _dtoa: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7860                           ;dtoa@fp stored from wreg
  7861  0235  0020               	movlb	0	; select bank0
  7862  0236  00BD               	movwf	dtoa@fp
  7863                           
  7864                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 274: static
      +                           int dtoa(FILE *fp, long long d);E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\
      +                          c99\common\doprnt.c: 275: {;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\c
      +                          ommon\doprnt.c: 276:     int i, p, s, w;;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\
      +                          sources\c99\common\doprnt.c: 277:     long long n;;E:\Program Files (x86)\Microchip\xc8\
      +                          v2.05\pic\sources\c99\common\doprnt.c: 280:     n = d;
  7865  0237  0830               	movf	dtoa@d,w
  7866  0238  00C4               	movwf	dtoa@n
  7867  0239  0831               	movf	dtoa@d+1,w
  7868  023A  00C5               	movwf	dtoa@n+1
  7869  023B  0832               	movf	dtoa@d+2,w
  7870  023C  00C6               	movwf	dtoa@n+2
  7871  023D  0833               	movf	dtoa@d+3,w
  7872  023E  00C7               	movwf	dtoa@n+3
  7873  023F  0834               	movf	dtoa@d+4,w
  7874  0240  00C8               	movwf	dtoa@n+4
  7875  0241  0835               	movf	dtoa@d+5,w
  7876  0242  00C9               	movwf	dtoa@n+5
  7877  0243  0836               	movf	dtoa@d+6,w
  7878  0244  00CA               	movwf	dtoa@n+6
  7879  0245  0837               	movf	dtoa@d+7,w
  7880  0246  00CB               	movwf	dtoa@n+7
  7881                           
  7882                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 281:     s 
      +                          = n < 0 ? 1 : 0;
  7883  0247  3044               	movlw	low dtoa@n
  7884  0248  0086               	movwf	6
  7885  0249  3000               	movlw	high dtoa@n
  7886  024A  0087               	movwf	7
  7887  024B  3F47               	moviw [7]fsr1
  7888  024C  00B8               	movwf	??_dtoa
  7889  024D  1FB8               	btfss	??_dtoa,7
  7890  024E  2A51               	goto	u246_20
  7891  024F  3001               	movlw	1
  7892  0250  2A52               	goto	u247_20
  7893  0251                     u246_20:	
  7894  0251  3000               	movlw	0
  7895  0252                     u247_20:	
  7896  0252  0020               	movlb	0	; select bank0
  7897  0253  00B9               	movwf	??_dtoa+1
  7898  0254  01BA               	clrf	??_dtoa+2
  7899  0255  0839               	movf	??_dtoa+1,w
  7900  0256  00C2               	movwf	dtoa@s
  7901  0257  083A               	movf	??_dtoa+2,w
  7902  0258  00C3               	movwf	dtoa@s+1
  7903                           
  7904                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 282:     if
      +                           (s) {
  7905  0259  0842               	movf	dtoa@s,w
  7906  025A  0443               	iorwf	dtoa@s+1,w
  7907  025B  1903               	btfsc	3,2
  7908  025C  2A7B               	goto	i1l763
  7909                           
  7910                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 283:       
      +                            n = -n;
  7911  025D  09C4               	comf	dtoa@n,f
  7912  025E  09C5               	comf	dtoa@n+1,f
  7913  025F  09C6               	comf	dtoa@n+2,f
  7914  0260  09C7               	comf	dtoa@n+3,f
  7915  0261  09C8               	comf	dtoa@n+4,f
  7916  0262  09C9               	comf	dtoa@n+5,f
  7917  0263  09CA               	comf	dtoa@n+6,f
  7918  0264  09CB               	comf	dtoa@n+7,f
  7919  0265  0AC4               	incf	dtoa@n,f
  7920  0266  1D03               	skipz
  7921  0267  2A7B               	goto	i1l763
  7922  0268  0AC5               	incf	dtoa@n+1,f
  7923  0269  1D03               	skipz
  7924  026A  2A7B               	goto	i1l763
  7925  026B  0AC6               	incf	dtoa@n+2,f
  7926  026C  1D03               	skipz
  7927  026D  2A7B               	goto	i1l763
  7928  026E  0AC7               	incf	dtoa@n+3,f
  7929  026F  1D03               	skipz
  7930  0270  2A7B               	goto	i1l763
  7931  0271  0AC8               	incf	dtoa@n+4,f
  7932  0272  1D03               	skipz
  7933  0273  2A7B               	goto	i1l763
  7934  0274  0AC9               	incf	dtoa@n+5,f
  7935  0275  1D03               	skipz
  7936  0276  2A7B               	goto	i1l763
  7937  0277  0ACA               	incf	dtoa@n+6,f
  7938  0278  1D03               	skipz
  7939  0279  2A7B               	goto	i1l763
  7940  027A  0ACB               	incf	dtoa@n+7,f
  7941  027B                     i1l763:	
  7942                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 284:     }
  7943                           
  7944                           
  7945                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 287:     if
      +                           (!(prec < 0)) {
  7946  027B  0021               	movlb	1	; select bank1
  7947  027C  1BED               	btfsc	(_prec+1)^(0+128),7
  7948  027D  2A82               	goto	i1l764
  7949                           
  7950                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 288:       
      +                            flags &= ~(1 << 1);
  7951  027E  30FD               	movlw	253
  7952  027F  05EE               	andwf	_flags^(0+128),f
  7953  0280  30FF               	movlw	255
  7954  0281  05EF               	andwf	(_flags+1)^(0+128),f
  7955  0282                     i1l764:	
  7956                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 289:     }
  7957                           
  7958                           
  7959                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 290:     p 
      +                          = (0 < prec) ? prec : 1;
  7960  0282  086D               	movf	(_prec+1)^(0+128),w
  7961  0283  3A80               	xorlw	128
  7962  0284  0020               	movlb	0	; select bank0
  7963  0285  00B8               	movwf	??_dtoa
  7964  0286  3080               	movlw	128
  7965  0287  0238               	subwf	??_dtoa,w
  7966  0288  1D03               	skipz
  7967  0289  2A8D               	goto	u251_25
  7968  028A  3001               	movlw	1
  7969  028B  0021               	movlb	1	; select bank1
  7970  028C  026C               	subwf	_prec^(0+128),w
  7971  028D                     u251_25:	
  7972  028D  1803               	skipnc
  7973  028E  2A95               	goto	i1l2921
  7974  028F  3001               	movlw	1
  7975  0290  0020               	movlb	0	; select bank0
  7976  0291  00BE               	movwf	dtoa@p
  7977  0292  3000               	movlw	0
  7978  0293  00BF               	movwf	dtoa@p+1
  7979  0294  2A9D               	goto	i1l768
  7980  0295                     i1l2921:	
  7981  0295  0021               	movlb	1	; select bank1
  7982  0296  086D               	movf	(_prec+1)^(0+128),w
  7983  0297  0020               	movlb	0	; select bank0
  7984  0298  00BF               	movwf	dtoa@p+1
  7985  0299  0021               	movlb	1	; select bank1
  7986  029A  086C               	movf	_prec^(0+128),w
  7987  029B  0020               	movlb	0	; select bank0
  7988  029C  00BE               	movwf	dtoa@p
  7989  029D                     i1l768:	
  7990                           
  7991                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 291:     w 
      +                          = width;
  7992  029D  0022               	movlb	2	; select bank2
  7993  029E  0861               	movf	(_width+1)^(0+256),w
  7994  029F  0020               	movlb	0	; select bank0
  7995  02A0  00C1               	movwf	dtoa@w+1
  7996  02A1  0022               	movlb	2	; select bank2
  7997  02A2  0860               	movf	_width^(0+256),w
  7998  02A3  0020               	movlb	0	; select bank0
  7999  02A4  00C0               	movwf	dtoa@w
  8000                           
  8001                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 292:     if
      +                           (s || (flags & (1 << 2))) {
  8002  02A5  0842               	movf	dtoa@s,w
  8003  02A6  0443               	iorwf	dtoa@s+1,w
  8004  02A7  1D03               	btfss	3,2
  8005  02A8  2AAC               	goto	i1l2927
  8006  02A9  0021               	movlb	1	; select bank1
  8007  02AA  1D6E               	btfss	_flags^(0+128),2
  8008  02AB  2AB1               	goto	i1l769
  8009  02AC                     i1l2927:	
  8010                           
  8011                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 293:       
      +                            --w;
  8012  02AC  30FF               	movlw	255
  8013  02AD  0020               	movlb	0	; select bank0
  8014  02AE  07C0               	addwf	dtoa@w,f
  8015  02AF  30FF               	movlw	255
  8016  02B0  3DC1               	addwfc	dtoa@w+1,f
  8017  02B1                     i1l769:	
  8018                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 294:     }
  8019                           
  8020                           
  8021                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 297:     i 
      +                          = sizeof(dbuf) - 1;
  8022  02B1  301F               	movlw	31
  8023  02B2  0020               	movlb	0	; select bank0
  8024  02B3  00CC               	movwf	dtoa@i
  8025  02B4  3000               	movlw	0
  8026  02B5  00CD               	movwf	dtoa@i+1
  8027                           
  8028                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 298:     db
      +                          uf[i] = '\0';
  8029  02B6  0023               	movlb	3	; select bank3
  8030  02B7  01C3               	clrf	(_dbuf^(0+384)+31)
  8031                           
  8032                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 299:     wh
      +                          ile (!(i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  8033  02B8  2B47               	goto	i1l772
  8034  02B9                     i1l2941:	
  8035  02B9  0020               	movlb	0	; select bank0
  8036  02BA  0844               	movf	dtoa@n,w
  8037  02BB  0445               	iorwf	dtoa@n+1,w
  8038  02BC  0446               	iorwf	dtoa@n+2,w
  8039  02BD  0447               	iorwf	dtoa@n+3,w
  8040  02BE  0448               	iorwf	dtoa@n+4,w
  8041  02BF  0449               	iorwf	dtoa@n+5,w
  8042  02C0  044A               	iorwf	dtoa@n+6,w
  8043  02C1  044B               	iorwf	dtoa@n+7,w
  8044  02C2  1D03               	skipz
  8045  02C3  2ADE               	goto	i1l2931
  8046  02C4  083F               	movf	dtoa@p+1,w
  8047  02C5  3A80               	xorlw	128
  8048  02C6  00B8               	movwf	??_dtoa
  8049  02C7  3080               	movlw	128
  8050  02C8  0238               	subwf	??_dtoa,w
  8051  02C9  1D03               	skipz
  8052  02CA  2ACD               	goto	u256_25
  8053  02CB  3001               	movlw	1
  8054  02CC  023E               	subwf	dtoa@p,w
  8055  02CD                     u256_25:	
  8056  02CD  1803               	skipnc
  8057  02CE  2ADE               	goto	i1l2931
  8058  02CF  0020               	movlb	0	; select bank0
  8059  02D0  0841               	movf	dtoa@w+1,w
  8060  02D1  3A80               	xorlw	128
  8061  02D2  00B8               	movwf	??_dtoa
  8062  02D3  3080               	movlw	128
  8063  02D4  0238               	subwf	??_dtoa,w
  8064  02D5  1D03               	skipz
  8065  02D6  2AD9               	goto	u257_25
  8066  02D7  3001               	movlw	1
  8067  02D8  0240               	subwf	dtoa@w,w
  8068  02D9                     u257_25:	
  8069  02D9  1C03               	skipc
  8070  02DA  2B53               	goto	i1l2949
  8071  02DB  0021               	movlb	1	; select bank1
  8072  02DC  1CEE               	btfss	_flags^(0+128),1
  8073  02DD  2B53               	goto	i1l2949
  8074  02DE                     i1l2931:	
  8075                           
  8076                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 300:       
      +                            --i;
  8077  02DE  30FF               	movlw	255
  8078  02DF  0020               	movlb	0	; select bank0
  8079  02E0  07CC               	addwf	dtoa@i,f
  8080  02E1  30FF               	movlw	255
  8081  02E2  3DCD               	addwfc	dtoa@i+1,f
  8082                           
  8083                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 301:       
      +                            dbuf[i] = '0' + abs(n % 10);
  8084  02E3  300A               	movlw	10
  8085  02E4  00A0               	movwf	___aomod@divisor
  8086  02E5  01A1               	clrf	___aomod@divisor+1
  8087  02E6  01A2               	clrf	___aomod@divisor+2
  8088  02E7  01A3               	clrf	___aomod@divisor+3
  8089  02E8  01A4               	clrf	___aomod@divisor+4
  8090  02E9  01A5               	clrf	___aomod@divisor+5
  8091  02EA  01A6               	clrf	___aomod@divisor+6
  8092  02EB  01A7               	clrf	___aomod@divisor+7
  8093  02EC  0844               	movf	dtoa@n,w
  8094  02ED  00A8               	movwf	___aomod@dividend
  8095  02EE  0845               	movf	dtoa@n+1,w
  8096  02EF  00A9               	movwf	___aomod@dividend+1
  8097  02F0  0846               	movf	dtoa@n+2,w
  8098  02F1  00AA               	movwf	___aomod@dividend+2
  8099  02F2  0847               	movf	dtoa@n+3,w
  8100  02F3  00AB               	movwf	___aomod@dividend+3
  8101  02F4  0848               	movf	dtoa@n+4,w
  8102  02F5  00AC               	movwf	___aomod@dividend+4
  8103  02F6  0849               	movf	dtoa@n+5,w
  8104  02F7  00AD               	movwf	___aomod@dividend+5
  8105  02F8  084A               	movf	dtoa@n+6,w
  8106  02F9  00AE               	movwf	___aomod@dividend+6
  8107  02FA  084B               	movf	dtoa@n+7,w
  8108  02FB  00AF               	movwf	___aomod@dividend+7
  8109  02FC  3186  266D  3182   	fcall	___aomod
  8110  02FF  0020               	movlb	0	; select bank0
  8111  0300  0821               	movf	?___aomod+1,w
  8112  0301  00F4               	movwf	abs@a+1
  8113  0302  0820               	movf	?___aomod,w
  8114  0303  00F3               	movwf	abs@a
  8115  0304  3189  211F  3182   	fcall	_abs
  8116  0307  0873               	movf	?_abs,w
  8117  0308  3E30               	addlw	48
  8118  0309  0020               	movlb	0	; select bank0
  8119  030A  00B8               	movwf	??_dtoa
  8120  030B  084C               	movf	dtoa@i,w
  8121  030C  3EA4               	addlw	(low (_dbuf| (0+256)))& (0+255)
  8122  030D  0086               	movwf	6
  8123  030E  3001               	movlw	1	; select bank3/4
  8124  030F  0087               	movwf	7
  8125  0310  0838               	movf	??_dtoa,w
  8126  0311  0081               	movwf	1
  8127                           
  8128                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 302:       
      +                            --p;
  8129  0312  30FF               	movlw	255
  8130  0313  07BE               	addwf	dtoa@p,f
  8131  0314  30FF               	movlw	255
  8132  0315  3DBF               	addwfc	dtoa@p+1,f
  8133                           
  8134                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 303:       
      +                            --w;
  8135  0316  30FF               	movlw	255
  8136  0317  07C0               	addwf	dtoa@w,f
  8137  0318  30FF               	movlw	255
  8138  0319  3DC1               	addwfc	dtoa@w+1,f
  8139                           
  8140                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 304:       
      +                            n = n / 10;
  8141  031A  300A               	movlw	10
  8142  031B  00A0               	movwf	___aodiv@divisor
  8143  031C  01A1               	clrf	___aodiv@divisor+1
  8144  031D  01A2               	clrf	___aodiv@divisor+2
  8145  031E  01A3               	clrf	___aodiv@divisor+3
  8146  031F  01A4               	clrf	___aodiv@divisor+4
  8147  0320  01A5               	clrf	___aodiv@divisor+5
  8148  0321  01A6               	clrf	___aodiv@divisor+6
  8149  0322  01A7               	clrf	___aodiv@divisor+7
  8150  0323  0844               	movf	dtoa@n,w
  8151  0324  00A8               	movwf	___aodiv@dividend
  8152  0325  0845               	movf	dtoa@n+1,w
  8153  0326  00A9               	movwf	___aodiv@dividend+1
  8154  0327  0846               	movf	dtoa@n+2,w
  8155  0328  00AA               	movwf	___aodiv@dividend+2
  8156  0329  0847               	movf	dtoa@n+3,w
  8157  032A  00AB               	movwf	___aodiv@dividend+3
  8158  032B  0848               	movf	dtoa@n+4,w
  8159  032C  00AC               	movwf	___aodiv@dividend+4
  8160  032D  0849               	movf	dtoa@n+5,w
  8161  032E  00AD               	movwf	___aodiv@dividend+5
  8162  032F  084A               	movf	dtoa@n+6,w
  8163  0330  00AE               	movwf	___aodiv@dividend+6
  8164  0331  084B               	movf	dtoa@n+7,w
  8165  0332  00AF               	movwf	___aodiv@dividend+7
  8166  0333  3184  2487  3182   	fcall	___aodiv
  8167  0336  0020               	movlb	0	; select bank0
  8168  0337  0820               	movf	?___aodiv,w
  8169  0338  00C4               	movwf	dtoa@n
  8170  0339  0821               	movf	?___aodiv+1,w
  8171  033A  00C5               	movwf	dtoa@n+1
  8172  033B  0822               	movf	?___aodiv+2,w
  8173  033C  00C6               	movwf	dtoa@n+2
  8174  033D  0823               	movf	?___aodiv+3,w
  8175  033E  00C7               	movwf	dtoa@n+3
  8176  033F  0824               	movf	?___aodiv+4,w
  8177  0340  00C8               	movwf	dtoa@n+4
  8178  0341  0825               	movf	?___aodiv+5,w
  8179  0342  00C9               	movwf	dtoa@n+5
  8180  0343  0826               	movf	?___aodiv+6,w
  8181  0344  00CA               	movwf	dtoa@n+6
  8182  0345  0827               	movf	?___aodiv+7,w
  8183  0346  00CB               	movwf	dtoa@n+7
  8184  0347                     i1l772:	
  8185                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 305:     }
  8186                           
  8187                           
  8188                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 299:     wh
      +                          ile (!(i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  8189  0347  0020               	movlb	0	; select bank0
  8190  0348  084D               	movf	dtoa@i+1,w
  8191  0349  3A80               	xorlw	128
  8192  034A  00B8               	movwf	??_dtoa
  8193  034B  3080               	movlw	128
  8194  034C  0238               	subwf	??_dtoa,w
  8195  034D  1D03               	skipz
  8196  034E  2B51               	goto	u254_25
  8197  034F  3001               	movlw	1
  8198  0350  024C               	subwf	dtoa@i,w
  8199  0351                     u254_25:	
  8200  0351  1803               	btfsc	3,0
  8201  0352  2AB9               	goto	i1l2941
  8202  0353                     i1l2949:	
  8203                           
  8204                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 308:     if
      +                           (s || (flags & (1 << 2))) {
  8205  0353  0020               	movlb	0	; select bank0
  8206  0354  0842               	movf	dtoa@s,w
  8207  0355  0443               	iorwf	dtoa@s+1,w
  8208  0356  1D03               	btfss	3,2
  8209  0357  2B5B               	goto	i1l2953
  8210  0358  0021               	movlb	1	; select bank1
  8211  0359  1D6E               	btfss	_flags^(0+128),2
  8212  035A  2B73               	goto	i1l2963
  8213  035B                     i1l2953:	
  8214                           
  8215                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 309:       
      +                            --i;
  8216  035B  30FF               	movlw	255
  8217  035C  0020               	movlb	0	; select bank0
  8218  035D  07CC               	addwf	dtoa@i,f
  8219  035E  30FF               	movlw	255
  8220  035F  3DCD               	addwfc	dtoa@i+1,f
  8221                           
  8222                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 310:       
      +                            dbuf[i] = s ? '-' : '+';
  8223  0360  0842               	movf	dtoa@s,w
  8224  0361  0443               	iorwf	dtoa@s+1,w
  8225  0362  1D03               	btfss	3,2
  8226  0363  2B66               	goto	i1l2959
  8227  0364  302B               	movlw	43
  8228  0365  2B67               	goto	L1
  8229  0366                     i1l2959:	
  8230  0366  302D               	movlw	45
  8231  0367                     L1:	
  8232  0367  00BB               	movwf	_dtoa$1774
  8233  0368  3000               	movlw	0
  8234  0369  00BC               	movwf	_dtoa$1774+1
  8235  036A  083B               	movf	_dtoa$1774,w
  8236  036B  00B8               	movwf	??_dtoa
  8237  036C  084C               	movf	dtoa@i,w
  8238  036D  3EA4               	addlw	(low (_dbuf| (0+256)))& (0+255)
  8239  036E  0086               	movwf	6
  8240  036F  3001               	movlw	1	; select bank3/4
  8241  0370  0087               	movwf	7
  8242  0371  0838               	movf	??_dtoa,w
  8243  0372  0081               	movwf	1
  8244  0373                     i1l2963:	
  8245                           
  8246                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 314:     re
      +                          turn pad(fp, &dbuf[i], w);
  8247  0373  0020               	movlb	0	; select bank0
  8248  0374  084C               	movf	dtoa@i,w
  8249  0375  3EA4               	addlw	(low (_dbuf| (0+256)))& (0+255)
  8250  0376  00B8               	movwf	??_dtoa
  8251  0377  0838               	movf	??_dtoa,w
  8252  0378  00A4               	movwf	pad@buf
  8253  0379  0841               	movf	dtoa@w+1,w
  8254  037A  00A6               	movwf	pad@p+1
  8255  037B  0840               	movf	dtoa@w,w
  8256  037C  00A5               	movwf	pad@p
  8257  037D  083D               	movf	dtoa@fp,w
  8258  037E  318C  2442         	fcall	_pad
  8259  0380  0020               	movlb	0	; select bank0
  8260  0381  0825               	movf	?_pad+1,w
  8261  0382  00B1               	movwf	?_dtoa+1
  8262  0383  0824               	movf	?_pad,w
  8263  0384  00B0               	movwf	?_dtoa
  8264  0385  0008               	return
  8265  0386                     __end_of_dtoa:	
  8266                           
  8267                           	psect	text35
  8268  0C42                     __ptext35:	
  8269 ;; *************** function _pad *****************
  8270 ;; Defined at:
  8271 ;;		line 72 in file "E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  8272 ;; Parameters:    Size  Location     Type
  8273 ;;  fp              1    wreg     PTR struct _IO_FILE
  8274 ;;		 -> sprintf@f(5), 
  8275 ;;  buf             1    4[BANK0 ] PTR unsigned char 
  8276 ;;		 -> dbuf(32), 
  8277 ;;  p               2    5[BANK0 ] int 
  8278 ;; Auto vars:     Size  Location     Type
  8279 ;;  fp              1   11[BANK0 ] PTR struct _IO_FILE
  8280 ;;		 -> sprintf@f(5), 
  8281 ;;  w               2    9[BANK0 ] int 
  8282 ;;  i               2    7[BANK0 ] int 
  8283 ;; Return value:  Size  Location     Type
  8284 ;;                  2    4[BANK0 ] int 
  8285 ;; Registers used:
  8286 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8287 ;; Tracked objects:
  8288 ;;		On entry : 0/0
  8289 ;;		On exit  : 0/0
  8290 ;;		Unchanged: 0/0
  8291 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8292 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8293 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8294 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8295 ;;      Totals:         1       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8296 ;;Total ram usage:        9 bytes
  8297 ;; Hardware stack levels used:    1
  8298 ;; Hardware stack levels required when called:    3
  8299 ;; This function calls:
  8300 ;;		_fputc
  8301 ;;		_fputs
  8302 ;;		_strlen
  8303 ;; This function is called by:
  8304 ;;		_dtoa
  8305 ;; This function uses a non-reentrant model
  8306 ;;
  8307                           
  8308                           
  8309                           ;psect for function _pad
  8310  0C42                     _pad:	
  8311                           
  8312                           ;incstack = 0
  8313                           ; Regs used in _pad: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8314                           ;pad@fp stored from wreg
  8315  0C42  0020               	movlb	0	; select bank0
  8316  0C43  00AB               	movwf	pad@fp
  8317                           
  8318                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 72: static 
      +                          int pad(FILE *fp, char *buf, int p);E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 73: {;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99
      +                          \common\doprnt.c: 74:     int i, w;;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 77:     if (flags & (1 << 0)) {
  8319  0C44  0021               	movlb	1	; select bank1
  8320  0C45  1C6E               	btfss	_flags^(0+128),0
  8321  0C46  2C50               	goto	i1l2777
  8322                           
  8323                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 78:        
      +                           fputs((const char *)buf, fp);
  8324  0C47  0020               	movlb	0	; select bank0
  8325  0C48  082B               	movf	pad@fp,w
  8326  0C49  00FC               	movwf	??_pad
  8327  0C4A  087C               	movf	??_pad,w
  8328  0C4B  00F8               	movwf	fputs@fp
  8329  0C4C  0824               	movf	pad@buf,w
  8330  0C4D  318A  2202  318C   	fcall	_fputs
  8331  0C50                     i1l2777:	
  8332                           
  8333                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 82:     w =
      +                           (p < 0) ? 0 : p;
  8334  0C50  0020               	movlb	0	; select bank0
  8335  0C51  1BA6               	btfsc	pad@p+1,7
  8336  0C52  2C58               	goto	i1l2781
  8337  0C53  0826               	movf	pad@p+1,w
  8338  0C54  00AA               	movwf	pad@w+1
  8339  0C55  0825               	movf	pad@p,w
  8340  0C56  00A9               	movwf	pad@w
  8341  0C57  2C5A               	goto	i1l755
  8342  0C58                     i1l2781:	
  8343  0C58  01A9               	clrf	pad@w
  8344  0C59  01AA               	clrf	pad@w+1
  8345  0C5A                     i1l755:	
  8346                           
  8347                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 83:     i =
      +                           0;
  8348  0C5A  01A7               	clrf	pad@i
  8349  0C5B  01A8               	clrf	pad@i+1
  8350  0C5C                     i1l2787:	
  8351                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  8352                           
  8353                           
  8354                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  8355  0C5C  0828               	movf	pad@i+1,w
  8356  0C5D  3A80               	xorlw	128
  8357  0C5E  00FC               	movwf	??_pad
  8358  0C5F  082A               	movf	pad@w+1,w
  8359  0C60  3A80               	xorlw	128
  8360  0C61  027C               	subwf	??_pad,w
  8361  0C62  1D03               	skipz
  8362  0C63  2C66               	goto	u218_25
  8363  0C64  0829               	movf	pad@w,w
  8364  0C65  0227               	subwf	pad@i,w
  8365  0C66                     u218_25:	
  8366  0C66  1803               	btfsc	3,0
  8367  0C67  2C7A               	goto	i1l758
  8368                           
  8369                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 85:        
      +                           fputc(' ', fp);
  8370  0C68  3020               	movlw	32
  8371  0C69  00F0               	movwf	fputc@c
  8372  0C6A  3000               	movlw	0
  8373  0C6B  00F1               	movwf	fputc@c+1
  8374  0C6C  0020               	movlb	0	; select bank0
  8375  0C6D  082B               	movf	pad@fp,w
  8376  0C6E  00FC               	movwf	??_pad
  8377  0C6F  087C               	movf	??_pad,w
  8378  0C70  00F2               	movwf	fputc@fp
  8379  0C71  318B  2314  318C   	fcall	_fputc
  8380                           
  8381                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 86:        
      +                           ++i;
  8382  0C74  3001               	movlw	1
  8383  0C75  0020               	movlb	0	; select bank0
  8384  0C76  07A7               	addwf	pad@i,f
  8385  0C77  3000               	movlw	0
  8386  0C78  3DA8               	addwfc	pad@i+1,f
  8387  0C79  2C5C               	goto	i1l2787
  8388  0C7A                     i1l758:	
  8389                           
  8390                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 90:     if 
      +                          (!(flags & (1 << 0))) {
  8391  0C7A  0021               	movlb	1	; select bank1
  8392  0C7B  186E               	btfsc	_flags^(0+128),0
  8393  0C7C  2C86               	goto	i1l2791
  8394                           
  8395                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 91:        
      +                           fputs((const char *)buf, fp);
  8396  0C7D  0020               	movlb	0	; select bank0
  8397  0C7E  082B               	movf	pad@fp,w
  8398  0C7F  00FC               	movwf	??_pad
  8399  0C80  087C               	movf	??_pad,w
  8400  0C81  00F8               	movwf	fputs@fp
  8401  0C82  0824               	movf	pad@buf,w
  8402  0C83  318A  2202  318C   	fcall	_fputs
  8403  0C86                     i1l2791:	
  8404                           
  8405                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 94:     ret
      +                          urn strlen(buf) + w;
  8406  0C86  0020               	movlb	0	; select bank0
  8407  0C87  0824               	movf	pad@buf,w
  8408  0C88  00F0               	movwf	strlen@s
  8409  0C89  3001               	movlw	1
  8410  0C8A  00F1               	movwf	strlen@s+1
  8411  0C8B  3189  2136         	fcall	_strlen
  8412  0C8D  0020               	movlb	0	; select bank0
  8413  0C8E  0829               	movf	pad@w,w
  8414  0C8F  0770               	addwf	?_strlen,w
  8415  0C90  00A4               	movwf	?_pad
  8416  0C91  082A               	movf	pad@w+1,w
  8417  0C92  3D71               	addwfc	?_strlen+1,w
  8418  0C93  00A5               	movwf	?_pad+1
  8419  0C94  0008               	return
  8420  0C95                     __end_of_pad:	
  8421                           
  8422                           	psect	text36
  8423  0936                     __ptext36:	
  8424 ;; *************** function _strlen *****************
  8425 ;; Defined at:
  8426 ;;		line 12 in file "E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\strlen.c"
  8427 ;; Parameters:    Size  Location     Type
  8428 ;;  s               2    0[COMMON] PTR const unsigned char 
  8429 ;;		 -> ?_sprintf(2), stoa@nuls(7), dbuf(32), ISR@send(64), 
  8430 ;;		 -> STR_3(4), STR_2(7), 
  8431 ;; Auto vars:     Size  Location     Type
  8432 ;;  a               2    3[COMMON] PTR const unsigned char 
  8433 ;;		 -> ?_sprintf(2), stoa@nuls(7), dbuf(32), ISR@send(64), 
  8434 ;;		 -> STR_3(4), STR_2(7), 
  8435 ;; Return value:  Size  Location     Type
  8436 ;;                  2    0[COMMON] unsigned int 
  8437 ;; Registers used:
  8438 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  8439 ;; Tracked objects:
  8440 ;;		On entry : 0/0
  8441 ;;		On exit  : 0/0
  8442 ;;		Unchanged: 0/0
  8443 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8444 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8445 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8446 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8447 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8448 ;;Total ram usage:        5 bytes
  8449 ;; Hardware stack levels used:    1
  8450 ;; This function calls:
  8451 ;;		Nothing
  8452 ;; This function is called by:
  8453 ;;		_ISR
  8454 ;;		_pad
  8455 ;;		_stoa
  8456 ;; This function uses a non-reentrant model
  8457 ;;
  8458                           
  8459                           
  8460                           ;psect for function _strlen
  8461  0936                     _strlen:	
  8462                           
  8463                           ;incstack = 0
  8464                           ; Regs used in _strlen: [wreg-fsr0h+status,2+status,0]
  8465  0936  0871               	movf	strlen@s+1,w
  8466  0937  00F4               	movwf	strlen@a+1
  8467  0938  0870               	movf	strlen@s,w
  8468  0939  00F3               	movwf	strlen@a
  8469  093A                     i1l2751:	
  8470  093A  0870               	movf	strlen@s,w
  8471  093B  0084               	movwf	4
  8472  093C  0871               	movf	strlen@s+1,w
  8473  093D  0085               	movwf	5
  8474  093E  0012               	moviw fsr0++
  8475  093F  1903               	btfsc	3,2
  8476  0940  2946               	goto	i1l2753
  8477  0941  3001               	movlw	1
  8478  0942  07F0               	addwf	strlen@s,f
  8479  0943  3000               	movlw	0
  8480  0944  3DF1               	addwfc	strlen@s+1,f
  8481  0945  293A               	goto	i1l2751
  8482  0946                     i1l2753:	
  8483  0946  0873               	movf	strlen@a,w
  8484  0947  0270               	subwf	strlen@s,w
  8485  0948  00F0               	movwf	?_strlen
  8486  0949  0874               	movf	strlen@a+1,w
  8487  094A  3B71               	subwfb	strlen@s+1,w
  8488  094B  00F1               	movwf	?_strlen+1
  8489  094C  0008               	return
  8490  094D                     __end_of_strlen:	
  8491                           
  8492                           	psect	text37
  8493  0A02                     __ptext37:	
  8494 ;; *************** function _fputs *****************
  8495 ;; Defined at:
  8496 ;;		line 8 in file "E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputs.c"
  8497 ;; Parameters:    Size  Location     Type
  8498 ;;  s               1    wreg     PTR const unsigned char 
  8499 ;;		 -> dbuf(32), 
  8500 ;;  fp              1    8[COMMON] PTR struct _IO_FILE
  8501 ;;		 -> sprintf@f(5), 
  8502 ;; Auto vars:     Size  Location     Type
  8503 ;;  s               1    3[BANK0 ] PTR const unsigned char 
  8504 ;;		 -> dbuf(32), 
  8505 ;;  i               2    1[BANK0 ] int 
  8506 ;;  c               1    0[BANK0 ] unsigned char 
  8507 ;; Return value:  Size  Location     Type
  8508 ;;                  2    8[COMMON] int 
  8509 ;; Registers used:
  8510 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8511 ;; Tracked objects:
  8512 ;;		On entry : 0/0
  8513 ;;		On exit  : 0/0
  8514 ;;		Unchanged: 0/0
  8515 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8516 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8517 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8518 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8519 ;;      Totals:         4       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8520 ;;Total ram usage:        8 bytes
  8521 ;; Hardware stack levels used:    1
  8522 ;; Hardware stack levels required when called:    2
  8523 ;; This function calls:
  8524 ;;		_fputc
  8525 ;; This function is called by:
  8526 ;;		_pad
  8527 ;; This function uses a non-reentrant model
  8528 ;;
  8529                           
  8530                           
  8531                           ;psect for function _fputs
  8532  0A02                     _fputs:	
  8533                           
  8534                           ;incstack = 0
  8535                           ; Regs used in _fputs: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8536                           ;fputs@s stored from wreg
  8537  0A02  0020               	movlb	0	; select bank0
  8538  0A03  00A3               	movwf	fputs@s
  8539  0A04  01A1               	clrf	fputs@i
  8540  0A05  01A2               	clrf	fputs@i+1
  8541  0A06                     i1l2763:	
  8542  0A06  0821               	movf	fputs@i,w
  8543  0A07  0723               	addwf	fputs@s,w
  8544  0A08  00F9               	movwf	??_fputs
  8545  0A09  0879               	movf	??_fputs,w
  8546  0A0A  0086               	movwf	6
  8547  0A0B  3001               	movlw	1	; select bank2/3
  8548  0A0C  0087               	movwf	7
  8549  0A0D  0801               	movf	1,w
  8550  0A0E  00FA               	movwf	??_fputs+1
  8551  0A0F  087A               	movf	??_fputs+1,w
  8552  0A10  00A0               	movwf	fputs@c
  8553  0A11  0820               	movf	fputs@c,w
  8554  0A12  1903               	btfsc	3,2
  8555  0A13  0008               	return
  8556  0A14  0820               	movf	fputs@c,w
  8557  0A15  00F9               	movwf	??_fputs
  8558  0A16  01FA               	clrf	??_fputs+1
  8559  0A17  0879               	movf	??_fputs,w
  8560  0A18  00F0               	movwf	fputc@c
  8561  0A19  087A               	movf	??_fputs+1,w
  8562  0A1A  00F1               	movwf	fputc@c+1
  8563  0A1B  0878               	movf	fputs@fp,w
  8564  0A1C  00FB               	movwf	??_fputs+2
  8565  0A1D  087B               	movf	??_fputs+2,w
  8566  0A1E  00F2               	movwf	fputc@fp
  8567  0A1F  318B  2314  318A   	fcall	_fputc
  8568  0A22  3001               	movlw	1
  8569  0A23  0020               	movlb	0	; select bank0
  8570  0A24  07A1               	addwf	fputs@i,f
  8571  0A25  3000               	movlw	0
  8572  0A26  3DA2               	addwfc	fputs@i+1,f
  8573  0A27  2A06               	goto	i1l2763
  8574  0A28                     __end_of_fputs:	
  8575                           
  8576                           	psect	text38
  8577  0B14                     __ptext38:	
  8578 ;; *************** function _fputc *****************
  8579 ;; Defined at:
  8580 ;;		line 8 in file "E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputc.c"
  8581 ;; Parameters:    Size  Location     Type
  8582 ;;  c               2    0[COMMON] int 
  8583 ;;  fp              1    2[COMMON] PTR struct _IO_FILE
  8584 ;;		 -> sprintf@f(5), 
  8585 ;; Auto vars:     Size  Location     Type
  8586 ;;		None
  8587 ;; Return value:  Size  Location     Type
  8588 ;;                  2    0[COMMON] int 
  8589 ;; Registers used:
  8590 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8591 ;; Tracked objects:
  8592 ;;		On entry : 0/0
  8593 ;;		On exit  : 0/0
  8594 ;;		Unchanged: 0/0
  8595 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8596 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8597 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8598 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8599 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8600 ;;Total ram usage:        8 bytes
  8601 ;; Hardware stack levels used:    1
  8602 ;; Hardware stack levels required when called:    1
  8603 ;; This function calls:
  8604 ;;		_putch
  8605 ;; This function is called by:
  8606 ;;		_pad
  8607 ;;		_stoa
  8608 ;;		_vfpfcnvrt
  8609 ;;		_fputs
  8610 ;; This function uses a non-reentrant model
  8611 ;;
  8612                           
  8613                           
  8614                           ;psect for function _fputc
  8615  0B14                     _fputc:	
  8616                           
  8617                           ;incstack = 0
  8618                           ; Regs used in _fputc: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8619  0B14  0872               	movf	fputc@fp,w
  8620  0B15  1D03               	btfss	3,2
  8621  0B16  0872               	movf	fputc@fp,w
  8622  0B17  1D03               	btfss	3,2
  8623  0B18  2B1D               	goto	i1l2737
  8624  0B19  0870               	movf	fputc@c,w
  8625  0B1A  3188  2014         	fcall	_putch
  8626  0B1C  0008               	return
  8627  0B1D                     i1l2737:	
  8628  0B1D  0872               	movf	fputc@fp,w
  8629  0B1E  3E03               	addlw	3
  8630  0B1F  0086               	movwf	6
  8631  0B20  0187               	clrf	7
  8632  0B21  0016               	moviw fsr1++
  8633  0B22  0401               	iorwf	1,w
  8634  0B23  1903               	btfsc	3,2
  8635  0B24  2B40               	goto	i1l2741
  8636  0B25  0872               	movf	fputc@fp,w
  8637  0B26  3E03               	addlw	3
  8638  0B27  0086               	movwf	6
  8639  0B28  0187               	clrf	7
  8640  0B29  3F40               	moviw [0]fsr1
  8641  0B2A  00F3               	movwf	??_fputc
  8642  0B2B  3F41               	moviw [1]fsr1
  8643  0B2C  00F4               	movwf	??_fputc+1
  8644  0B2D  0A72               	incf	fputc@fp,w
  8645  0B2E  0086               	movwf	6
  8646  0B2F  0187               	clrf	7
  8647  0B30  3F40               	moviw [0]fsr1
  8648  0B31  00F5               	movwf	??_fputc+2
  8649  0B32  3F41               	moviw [1]fsr1
  8650  0B33  00F6               	movwf	??_fputc+3
  8651  0B34  0876               	movf	??_fputc+3,w
  8652  0B35  3A80               	xorlw	128
  8653  0B36  00F7               	movwf	??_fputc+4
  8654  0B37  0874               	movf	??_fputc+1,w
  8655  0B38  3A80               	xorlw	128
  8656  0B39  0277               	subwf	??_fputc+4,w
  8657  0B3A  1D03               	skipz
  8658  0B3B  2B3E               	goto	u211_25
  8659  0B3C  0873               	movf	??_fputc,w
  8660  0B3D  0275               	subwf	??_fputc+2,w
  8661  0B3E                     u211_25:	
  8662  0B3E  1803               	skipnc
  8663  0B3F  0008               	return
  8664  0B40                     i1l2741:	
  8665  0B40  0870               	movf	fputc@c,w
  8666  0B41  00F3               	movwf	??_fputc
  8667  0B42  0872               	movf	fputc@fp,w
  8668  0B43  0086               	movwf	6
  8669  0B44  0187               	clrf	7
  8670  0B45  0A72               	incf	fputc@fp,w
  8671  0B46  0084               	movwf	4
  8672  0B47  0185               	clrf	5
  8673  0B48  0800               	movf	0,w
  8674  0B49  0701               	addwf	1,w
  8675  0B4A  00F4               	movwf	??_fputc+1
  8676  0B4B  0874               	movf	??_fputc+1,w
  8677  0B4C  0086               	movwf	6
  8678  0B4D  0187               	clrf	7
  8679  0B4E  0873               	movf	??_fputc,w
  8680  0B4F  0081               	movwf	1
  8681  0B50  0A72               	incf	fputc@fp,w
  8682  0B51  0086               	movwf	6
  8683  0B52  0187               	clrf	7
  8684  0B53  3001               	movlw	1
  8685  0B54  0781               	addwf	1,f
  8686  0B55  3141               	addfsr 1,1
  8687  0B56  1803               	skipnc
  8688  0B57  0A81               	incf	1,f
  8689  0B58  0008               	return
  8690  0B59                     __end_of_fputc:	
  8691                           
  8692                           	psect	text39
  8693  0814                     __ptext39:	
  8694 ;; *************** function _putch *****************
  8695 ;; Defined at:
  8696 ;;		line 7 in file "E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\putch.c"
  8697 ;; Parameters:    Size  Location     Type
  8698 ;;  c               1    wreg     unsigned char 
  8699 ;; Auto vars:     Size  Location     Type
  8700 ;;  c               1    0[COMMON] unsigned char 
  8701 ;; Return value:  Size  Location     Type
  8702 ;;                  1    wreg      void 
  8703 ;; Registers used:
  8704 ;;		wreg
  8705 ;; Tracked objects:
  8706 ;;		On entry : 0/0
  8707 ;;		On exit  : 0/0
  8708 ;;		Unchanged: 0/0
  8709 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8710 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8711 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8712 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8713 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8714 ;;Total ram usage:        0 bytes
  8715 ;; Hardware stack levels used:    1
  8716 ;; This function calls:
  8717 ;;		Nothing
  8718 ;; This function is called by:
  8719 ;;		_fputc
  8720 ;; This function uses a non-reentrant model
  8721 ;;
  8722                           
  8723                           
  8724                           ;psect for function _putch
  8725  0814                     _putch:	
  8726                           
  8727                           ;incstack = 0
  8728                           ; Regs used in _putch: [wreg]
  8729  0814  0008               	return
  8730  0815                     __end_of_putch:	
  8731                           
  8732                           	psect	text40
  8733  091F                     __ptext40:	
  8734 ;; *************** function _abs *****************
  8735 ;; Defined at:
  8736 ;;		line 1 in file "E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\abs.c"
  8737 ;; Parameters:    Size  Location     Type
  8738 ;;  a               2    3[COMMON] int 
  8739 ;; Auto vars:     Size  Location     Type
  8740 ;;		None
  8741 ;; Return value:  Size  Location     Type
  8742 ;;                  2    3[COMMON] int 
  8743 ;; Registers used:
  8744 ;;		wreg, status,2, status,0
  8745 ;; Tracked objects:
  8746 ;;		On entry : 0/0
  8747 ;;		On exit  : 0/0
  8748 ;;		Unchanged: 0/0
  8749 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8750 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8751 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8752 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8753 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8754 ;;Total ram usage:        4 bytes
  8755 ;; Hardware stack levels used:    1
  8756 ;; This function calls:
  8757 ;;		Nothing
  8758 ;; This function is called by:
  8759 ;;		_dtoa
  8760 ;; This function uses a non-reentrant model
  8761 ;;
  8762                           
  8763                           
  8764                           ;psect for function _abs
  8765  091F                     _abs:	
  8766                           
  8767                           ;incstack = 0
  8768                           ; Regs used in _abs: [wreg+status,2+status,0]
  8769  091F  0874               	movf	abs@a+1,w
  8770  0920  3A80               	xorlw	128
  8771  0921  00F5               	movwf	??_abs
  8772  0922  3080               	movlw	128
  8773  0923  0275               	subwf	??_abs,w
  8774  0924  1D03               	skipz
  8775  0925  2928               	goto	u220_25
  8776  0926  3001               	movlw	1
  8777  0927  0273               	subwf	abs@a,w
  8778  0928                     u220_25:	
  8779  0928  1803               	skipnc
  8780  0929  0008               	return
  8781  092A  0973               	comf	abs@a,w
  8782  092B  00F5               	movwf	??_abs
  8783  092C  0974               	comf	abs@a+1,w
  8784  092D  00F6               	movwf	??_abs+1
  8785  092E  0AF5               	incf	??_abs,f
  8786  092F  1903               	skipnz
  8787  0930  0AF6               	incf	??_abs+1,f
  8788  0931  0875               	movf	??_abs,w
  8789  0932  00F3               	movwf	?_abs
  8790  0933  0876               	movf	??_abs+1,w
  8791  0934  00F4               	movwf	?_abs+1
  8792  0935  0008               	return
  8793  0936                     __end_of_abs:	
  8794                           
  8795                           	psect	text41
  8796  066D                     __ptext41:	
  8797 ;; *************** function ___aomod *****************
  8798 ;; Defined at:
  8799 ;;		line 7 in file "E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\aomod.c"
  8800 ;; Parameters:    Size  Location     Type
  8801 ;;  divisor         8    0[BANK0 ] long long 
  8802 ;;  dividend        8    8[BANK0 ] long long 
  8803 ;; Auto vars:     Size  Location     Type
  8804 ;;  sign            1    2[COMMON] unsigned char 
  8805 ;;  counter         1    1[COMMON] unsigned char 
  8806 ;; Return value:  Size  Location     Type
  8807 ;;                  8    0[BANK0 ] long long 
  8808 ;; Registers used:
  8809 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8810 ;; Tracked objects:
  8811 ;;		On entry : 0/0
  8812 ;;		On exit  : 0/0
  8813 ;;		Unchanged: 0/0
  8814 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8815 ;;      Params:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8816 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8817 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8818 ;;      Totals:         3      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8819 ;;Total ram usage:       19 bytes
  8820 ;; Hardware stack levels used:    1
  8821 ;; This function calls:
  8822 ;;		Nothing
  8823 ;; This function is called by:
  8824 ;;		_dtoa
  8825 ;; This function uses a non-reentrant model
  8826 ;;
  8827                           
  8828                           
  8829                           ;psect for function ___aomod
  8830  066D                     ___aomod:	
  8831                           
  8832                           ;incstack = 0
  8833                           ; Regs used in ___aomod: [wreg+fsr1l+fsr1h+status,2+status,0]
  8834  066D  01F2               	clrf	___aomod@sign
  8835  066E  3028               	movlw	low ___aomod@dividend
  8836  066F  0086               	movwf	6
  8837  0670  3000               	movlw	high ___aomod@dividend
  8838  0671  0087               	movwf	7
  8839  0672  3F47               	moviw [7]fsr1
  8840  0673  00F0               	movwf	??___aomod
  8841  0674  1FF0               	btfss	??___aomod,7
  8842  0675  2E97               	goto	i1l2843
  8843  0676  0020               	movlb	0	; select bank0
  8844  0677  09A8               	comf	___aomod@dividend,f
  8845  0678  09A9               	comf	___aomod@dividend+1,f
  8846  0679  09AA               	comf	___aomod@dividend+2,f
  8847  067A  09AB               	comf	___aomod@dividend+3,f
  8848  067B  09AC               	comf	___aomod@dividend+4,f
  8849  067C  09AD               	comf	___aomod@dividend+5,f
  8850  067D  09AE               	comf	___aomod@dividend+6,f
  8851  067E  09AF               	comf	___aomod@dividend+7,f
  8852  067F  0AA8               	incf	___aomod@dividend,f
  8853  0680  1D03               	skipz
  8854  0681  2E95               	goto	u233_2lld
  8855  0682  0AA9               	incf	___aomod@dividend+1,f
  8856  0683  1D03               	skipz
  8857  0684  2E95               	goto	u233_2lld
  8858  0685  0AAA               	incf	___aomod@dividend+2,f
  8859  0686  1D03               	skipz
  8860  0687  2E95               	goto	u233_2lld
  8861  0688  0AAB               	incf	___aomod@dividend+3,f
  8862  0689  1D03               	skipz
  8863  068A  2E95               	goto	u233_2lld
  8864  068B  0AAC               	incf	___aomod@dividend+4,f
  8865  068C  1D03               	skipz
  8866  068D  2E95               	goto	u233_2lld
  8867  068E  0AAD               	incf	___aomod@dividend+5,f
  8868  068F  1D03               	skipz
  8869  0690  2E95               	goto	u233_2lld
  8870  0691  0AAE               	incf	___aomod@dividend+6,f
  8871  0692  1D03               	skipz
  8872  0693  2E95               	goto	u233_2lld
  8873  0694  0AAF               	incf	___aomod@dividend+7,f
  8874  0695                     u233_2lld:	
  8875  0695  01F2               	clrf	___aomod@sign
  8876  0696  0AF2               	incf	___aomod@sign,f
  8877  0697                     i1l2843:	
  8878  0697  3020               	movlw	low ___aomod@divisor
  8879  0698  0086               	movwf	6
  8880  0699  3000               	movlw	high ___aomod@divisor
  8881  069A  0087               	movwf	7
  8882  069B  3F47               	moviw [7]fsr1
  8883  069C  00F0               	movwf	??___aomod
  8884  069D  1FF0               	btfss	??___aomod,7
  8885  069E  2EBE               	goto	i1l2847
  8886  069F  0020               	movlb	0	; select bank0
  8887  06A0  09A0               	comf	___aomod@divisor,f
  8888  06A1  09A1               	comf	___aomod@divisor+1,f
  8889  06A2  09A2               	comf	___aomod@divisor+2,f
  8890  06A3  09A3               	comf	___aomod@divisor+3,f
  8891  06A4  09A4               	comf	___aomod@divisor+4,f
  8892  06A5  09A5               	comf	___aomod@divisor+5,f
  8893  06A6  09A6               	comf	___aomod@divisor+6,f
  8894  06A7  09A7               	comf	___aomod@divisor+7,f
  8895  06A8  0AA0               	incf	___aomod@divisor,f
  8896  06A9  1D03               	skipz
  8897  06AA  2EBE               	goto	i1l2847
  8898  06AB  0AA1               	incf	___aomod@divisor+1,f
  8899  06AC  1D03               	skipz
  8900  06AD  2EBE               	goto	i1l2847
  8901  06AE  0AA2               	incf	___aomod@divisor+2,f
  8902  06AF  1D03               	skipz
  8903  06B0  2EBE               	goto	i1l2847
  8904  06B1  0AA3               	incf	___aomod@divisor+3,f
  8905  06B2  1D03               	skipz
  8906  06B3  2EBE               	goto	i1l2847
  8907  06B4  0AA4               	incf	___aomod@divisor+4,f
  8908  06B5  1D03               	skipz
  8909  06B6  2EBE               	goto	i1l2847
  8910  06B7  0AA5               	incf	___aomod@divisor+5,f
  8911  06B8  1D03               	skipz
  8912  06B9  2EBE               	goto	i1l2847
  8913  06BA  0AA6               	incf	___aomod@divisor+6,f
  8914  06BB  1D03               	skipz
  8915  06BC  2EBE               	goto	i1l2847
  8916  06BD  0AA7               	incf	___aomod@divisor+7,f
  8917  06BE                     i1l2847:	
  8918  06BE  0020               	movlb	0	; select bank0
  8919  06BF  0820               	movf	___aomod@divisor,w
  8920  06C0  0421               	iorwf	___aomod@divisor+1,w
  8921  06C1  0422               	iorwf	___aomod@divisor+2,w
  8922  06C2  0423               	iorwf	___aomod@divisor+3,w
  8923  06C3  0424               	iorwf	___aomod@divisor+4,w
  8924  06C4  0425               	iorwf	___aomod@divisor+5,w
  8925  06C5  0426               	iorwf	___aomod@divisor+6,w
  8926  06C6  0427               	iorwf	___aomod@divisor+7,w
  8927  06C7  1903               	skipnz
  8928  06C8  2F16               	goto	i1l2863
  8929  06C9  01F1               	clrf	___aomod@counter
  8930  06CA  0AF1               	incf	___aomod@counter,f
  8931  06CB                     i1l2855:	
  8932  06CB  1BA7               	btfsc	___aomod@divisor+7,7
  8933  06CC  2EDA               	goto	i1l2857
  8934  06CD  35A0               	lslf	___aomod@divisor,f
  8935  06CE  0DA1               	rlf	___aomod@divisor+1,f
  8936  06CF  0DA2               	rlf	___aomod@divisor+2,f
  8937  06D0  0DA3               	rlf	___aomod@divisor+3,f
  8938  06D1  0DA4               	rlf	___aomod@divisor+4,f
  8939  06D2  0DA5               	rlf	___aomod@divisor+5,f
  8940  06D3  0DA6               	rlf	___aomod@divisor+6,f
  8941  06D4  0DA7               	rlf	___aomod@divisor+7,f
  8942  06D5  3001               	movlw	1
  8943  06D6  00F0               	movwf	??___aomod
  8944  06D7  0870               	movf	??___aomod,w
  8945  06D8  07F1               	addwf	___aomod@counter,f
  8946  06D9  2ECB               	goto	i1l2855
  8947  06DA                     i1l2857:	
  8948  06DA  0827               	movf	___aomod@divisor+7,w
  8949  06DB  022F               	subwf	___aomod@dividend+7,w
  8950  06DC  1D03               	skipz
  8951  06DD  2EF8               	goto	u238_25
  8952  06DE  0826               	movf	___aomod@divisor+6,w
  8953  06DF  022E               	subwf	___aomod@dividend+6,w
  8954  06E0  1D03               	skipz
  8955  06E1  2EF8               	goto	u238_25
  8956  06E2  0825               	movf	___aomod@divisor+5,w
  8957  06E3  022D               	subwf	___aomod@dividend+5,w
  8958  06E4  1D03               	skipz
  8959  06E5  2EF8               	goto	u238_25
  8960  06E6  0824               	movf	___aomod@divisor+4,w
  8961  06E7  022C               	subwf	___aomod@dividend+4,w
  8962  06E8  1D03               	skipz
  8963  06E9  2EF8               	goto	u238_25
  8964  06EA  0823               	movf	___aomod@divisor+3,w
  8965  06EB  022B               	subwf	___aomod@dividend+3,w
  8966  06EC  1D03               	skipz
  8967  06ED  2EF8               	goto	u238_25
  8968  06EE  0822               	movf	___aomod@divisor+2,w
  8969  06EF  022A               	subwf	___aomod@dividend+2,w
  8970  06F0  1D03               	skipz
  8971  06F1  2EF8               	goto	u238_25
  8972  06F2  0821               	movf	___aomod@divisor+1,w
  8973  06F3  0229               	subwf	___aomod@dividend+1,w
  8974  06F4  1D03               	skipz
  8975  06F5  2EF8               	goto	u238_25
  8976  06F6  0820               	movf	___aomod@divisor,w
  8977  06F7  0228               	subwf	___aomod@dividend,w
  8978  06F8                     u238_25:	
  8979  06F8  1C03               	skipc
  8980  06F9  2F0A               	goto	i1l2861
  8981  06FA  0820               	movf	___aomod@divisor,w
  8982  06FB  02A8               	subwf	___aomod@dividend,f
  8983  06FC  0821               	movf	___aomod@divisor+1,w
  8984  06FD  3BA9               	subwfb	___aomod@dividend+1,f
  8985  06FE  0822               	movf	___aomod@divisor+2,w
  8986  06FF  3BAA               	subwfb	___aomod@dividend+2,f
  8987  0700  0823               	movf	___aomod@divisor+3,w
  8988  0701  3BAB               	subwfb	___aomod@dividend+3,f
  8989  0702  0824               	movf	___aomod@divisor+4,w
  8990  0703  3BAC               	subwfb	___aomod@dividend+4,f
  8991  0704  0825               	movf	___aomod@divisor+5,w
  8992  0705  3BAD               	subwfb	___aomod@dividend+5,f
  8993  0706  0826               	movf	___aomod@divisor+6,w
  8994  0707  3BAE               	subwfb	___aomod@dividend+6,f
  8995  0708  0827               	movf	___aomod@divisor+7,w
  8996  0709  3BAF               	subwfb	___aomod@dividend+7,f
  8997  070A                     i1l2861:	
  8998  070A  36A7               	lsrf	___aomod@divisor+7,f
  8999  070B  0CA6               	rrf	___aomod@divisor+6,f
  9000  070C  0CA5               	rrf	___aomod@divisor+5,f
  9001  070D  0CA4               	rrf	___aomod@divisor+4,f
  9002  070E  0CA3               	rrf	___aomod@divisor+3,f
  9003  070F  0CA2               	rrf	___aomod@divisor+2,f
  9004  0710  0CA1               	rrf	___aomod@divisor+1,f
  9005  0711  0CA0               	rrf	___aomod@divisor,f
  9006  0712  3001               	movlw	1
  9007  0713  02F1               	subwf	___aomod@counter,f
  9008  0714  1D03               	btfss	3,2
  9009  0715  2EDA               	goto	i1l2857
  9010  0716                     i1l2863:	
  9011  0716  0872               	movf	___aomod@sign,w
  9012  0717  1903               	btfsc	3,2
  9013  0718  2F37               	goto	i1l941
  9014  0719  09A8               	comf	___aomod@dividend,f
  9015  071A  09A9               	comf	___aomod@dividend+1,f
  9016  071B  09AA               	comf	___aomod@dividend+2,f
  9017  071C  09AB               	comf	___aomod@dividend+3,f
  9018  071D  09AC               	comf	___aomod@dividend+4,f
  9019  071E  09AD               	comf	___aomod@dividend+5,f
  9020  071F  09AE               	comf	___aomod@dividend+6,f
  9021  0720  09AF               	comf	___aomod@dividend+7,f
  9022  0721  0AA8               	incf	___aomod@dividend,f
  9023  0722  1D03               	skipz
  9024  0723  2F37               	goto	i1l941
  9025  0724  0AA9               	incf	___aomod@dividend+1,f
  9026  0725  1D03               	skipz
  9027  0726  2F37               	goto	i1l941
  9028  0727  0AAA               	incf	___aomod@dividend+2,f
  9029  0728  1D03               	skipz
  9030  0729  2F37               	goto	i1l941
  9031  072A  0AAB               	incf	___aomod@dividend+3,f
  9032  072B  1D03               	skipz
  9033  072C  2F37               	goto	i1l941
  9034  072D  0AAC               	incf	___aomod@dividend+4,f
  9035  072E  1D03               	skipz
  9036  072F  2F37               	goto	i1l941
  9037  0730  0AAD               	incf	___aomod@dividend+5,f
  9038  0731  1D03               	skipz
  9039  0732  2F37               	goto	i1l941
  9040  0733  0AAE               	incf	___aomod@dividend+6,f
  9041  0734  1D03               	skipz
  9042  0735  2F37               	goto	i1l941
  9043  0736  0AAF               	incf	___aomod@dividend+7,f
  9044  0737                     i1l941:	
  9045  0737  0020               	movlb	0	; select bank0
  9046  0738  0828               	movf	___aomod@dividend,w
  9047  0739  00A0               	movwf	?___aomod
  9048  073A  0829               	movf	___aomod@dividend+1,w
  9049  073B  00A1               	movwf	?___aomod+1
  9050  073C  082A               	movf	___aomod@dividend+2,w
  9051  073D  00A2               	movwf	?___aomod+2
  9052  073E  082B               	movf	___aomod@dividend+3,w
  9053  073F  00A3               	movwf	?___aomod+3
  9054  0740  082C               	movf	___aomod@dividend+4,w
  9055  0741  00A4               	movwf	?___aomod+4
  9056  0742  082D               	movf	___aomod@dividend+5,w
  9057  0743  00A5               	movwf	?___aomod+5
  9058  0744  082E               	movf	___aomod@dividend+6,w
  9059  0745  00A6               	movwf	?___aomod+6
  9060  0746  082F               	movf	___aomod@dividend+7,w
  9061  0747  00A7               	movwf	?___aomod+7
  9062  0748  0008               	return
  9063  0749                     __end_of___aomod:	
  9064                           
  9065                           	psect	text42
  9066  0487                     __ptext42:	
  9067 ;; *************** function ___aodiv *****************
  9068 ;; Defined at:
  9069 ;;		line 7 in file "E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\aodiv.c"
  9070 ;; Parameters:    Size  Location     Type
  9071 ;;  divisor         8    0[BANK0 ] long long 
  9072 ;;  dividend        8    8[BANK0 ] long long 
  9073 ;; Auto vars:     Size  Location     Type
  9074 ;;  quotient        8    3[COMMON] long long 
  9075 ;;  sign            1    2[COMMON] unsigned char 
  9076 ;;  counter         1    1[COMMON] unsigned char 
  9077 ;; Return value:  Size  Location     Type
  9078 ;;                  8    0[BANK0 ] long long 
  9079 ;; Registers used:
  9080 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9081 ;; Tracked objects:
  9082 ;;		On entry : 0/0
  9083 ;;		On exit  : 0/0
  9084 ;;		Unchanged: 0/0
  9085 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9086 ;;      Params:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9087 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9088 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9089 ;;      Totals:        11      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9090 ;;Total ram usage:       27 bytes
  9091 ;; Hardware stack levels used:    1
  9092 ;; This function calls:
  9093 ;;		Nothing
  9094 ;; This function is called by:
  9095 ;;		_dtoa
  9096 ;; This function uses a non-reentrant model
  9097 ;;
  9098                           
  9099                           
  9100                           ;psect for function ___aodiv
  9101  0487                     ___aodiv:	
  9102                           
  9103                           ;incstack = 0
  9104                           ; Regs used in ___aodiv: [wreg+fsr1l+fsr1h+status,2+status,0]
  9105  0487  01F2               	clrf	___aodiv@sign
  9106  0488  3020               	movlw	low ___aodiv@divisor
  9107  0489  0086               	movwf	6
  9108  048A  3000               	movlw	high ___aodiv@divisor
  9109  048B  0087               	movwf	7
  9110  048C  3F47               	moviw [7]fsr1
  9111  048D  00F0               	movwf	??___aodiv
  9112  048E  1FF0               	btfss	??___aodiv,7
  9113  048F  2CB1               	goto	i1l2805
  9114  0490  0020               	movlb	0	; select bank0
  9115  0491  09A0               	comf	___aodiv@divisor,f
  9116  0492  09A1               	comf	___aodiv@divisor+1,f
  9117  0493  09A2               	comf	___aodiv@divisor+2,f
  9118  0494  09A3               	comf	___aodiv@divisor+3,f
  9119  0495  09A4               	comf	___aodiv@divisor+4,f
  9120  0496  09A5               	comf	___aodiv@divisor+5,f
  9121  0497  09A6               	comf	___aodiv@divisor+6,f
  9122  0498  09A7               	comf	___aodiv@divisor+7,f
  9123  0499  0AA0               	incf	___aodiv@divisor,f
  9124  049A  1D03               	skipz
  9125  049B  2CAF               	goto	u222_2lld
  9126  049C  0AA1               	incf	___aodiv@divisor+1,f
  9127  049D  1D03               	skipz
  9128  049E  2CAF               	goto	u222_2lld
  9129  049F  0AA2               	incf	___aodiv@divisor+2,f
  9130  04A0  1D03               	skipz
  9131  04A1  2CAF               	goto	u222_2lld
  9132  04A2  0AA3               	incf	___aodiv@divisor+3,f
  9133  04A3  1D03               	skipz
  9134  04A4  2CAF               	goto	u222_2lld
  9135  04A5  0AA4               	incf	___aodiv@divisor+4,f
  9136  04A6  1D03               	skipz
  9137  04A7  2CAF               	goto	u222_2lld
  9138  04A8  0AA5               	incf	___aodiv@divisor+5,f
  9139  04A9  1D03               	skipz
  9140  04AA  2CAF               	goto	u222_2lld
  9141  04AB  0AA6               	incf	___aodiv@divisor+6,f
  9142  04AC  1D03               	skipz
  9143  04AD  2CAF               	goto	u222_2lld
  9144  04AE  0AA7               	incf	___aodiv@divisor+7,f
  9145  04AF                     u222_2lld:	
  9146  04AF  01F2               	clrf	___aodiv@sign
  9147  04B0  0AF2               	incf	___aodiv@sign,f
  9148  04B1                     i1l2805:	
  9149  04B1  3028               	movlw	low ___aodiv@dividend
  9150  04B2  0086               	movwf	6
  9151  04B3  3000               	movlw	high ___aodiv@dividend
  9152  04B4  0087               	movwf	7
  9153  04B5  3F47               	moviw [7]fsr1
  9154  04B6  00F0               	movwf	??___aodiv
  9155  04B7  1FF0               	btfss	??___aodiv,7
  9156  04B8  2CDC               	goto	i1l2811
  9157  04B9  0020               	movlb	0	; select bank0
  9158  04BA  09A8               	comf	___aodiv@dividend,f
  9159  04BB  09A9               	comf	___aodiv@dividend+1,f
  9160  04BC  09AA               	comf	___aodiv@dividend+2,f
  9161  04BD  09AB               	comf	___aodiv@dividend+3,f
  9162  04BE  09AC               	comf	___aodiv@dividend+4,f
  9163  04BF  09AD               	comf	___aodiv@dividend+5,f
  9164  04C0  09AE               	comf	___aodiv@dividend+6,f
  9165  04C1  09AF               	comf	___aodiv@dividend+7,f
  9166  04C2  0AA8               	incf	___aodiv@dividend,f
  9167  04C3  1D03               	skipz
  9168  04C4  2CD8               	goto	i1l2809
  9169  04C5  0AA9               	incf	___aodiv@dividend+1,f
  9170  04C6  1D03               	skipz
  9171  04C7  2CD8               	goto	i1l2809
  9172  04C8  0AAA               	incf	___aodiv@dividend+2,f
  9173  04C9  1D03               	skipz
  9174  04CA  2CD8               	goto	i1l2809
  9175  04CB  0AAB               	incf	___aodiv@dividend+3,f
  9176  04CC  1D03               	skipz
  9177  04CD  2CD8               	goto	i1l2809
  9178  04CE  0AAC               	incf	___aodiv@dividend+4,f
  9179  04CF  1D03               	skipz
  9180  04D0  2CD8               	goto	i1l2809
  9181  04D1  0AAD               	incf	___aodiv@dividend+5,f
  9182  04D2  1D03               	skipz
  9183  04D3  2CD8               	goto	i1l2809
  9184  04D4  0AAE               	incf	___aodiv@dividend+6,f
  9185  04D5  1D03               	skipz
  9186  04D6  2CD8               	goto	i1l2809
  9187  04D7  0AAF               	incf	___aodiv@dividend+7,f
  9188  04D8                     i1l2809:	
  9189  04D8  3001               	movlw	1
  9190  04D9  00F0               	movwf	??___aodiv
  9191  04DA  0870               	movf	??___aodiv,w
  9192  04DB  06F2               	xorwf	___aodiv@sign,f
  9193  04DC                     i1l2811:	
  9194  04DC  3073               	movlw	low ___aodiv@quotient
  9195  04DD  0086               	movwf	6
  9196  04DE  3000               	movlw	high ___aodiv@quotient
  9197  04DF  0087               	movwf	7
  9198  04E0  3008               	movlw	8
  9199  04E1  00F0               	movwf	??___aodiv
  9200  04E2  3000               	movlw	0
  9201  04E3                     u225_20:	
  9202  04E3  001E               	movwi fsr1++
  9203  04E4  0BF0               	decfsz	??___aodiv,f
  9204  04E5  2CE3               	goto	u225_20
  9205  04E6  0020               	movlb	0	; select bank0
  9206  04E7  0820               	movf	___aodiv@divisor,w
  9207  04E8  0421               	iorwf	___aodiv@divisor+1,w
  9208  04E9  0422               	iorwf	___aodiv@divisor+2,w
  9209  04EA  0423               	iorwf	___aodiv@divisor+3,w
  9210  04EB  0424               	iorwf	___aodiv@divisor+4,w
  9211  04EC  0425               	iorwf	___aodiv@divisor+5,w
  9212  04ED  0426               	iorwf	___aodiv@divisor+6,w
  9213  04EE  0427               	iorwf	___aodiv@divisor+7,w
  9214  04EF  1903               	skipnz
  9215  04F0  2D47               	goto	i1l2833
  9216  04F1  01F1               	clrf	___aodiv@counter
  9217  04F2  0AF1               	incf	___aodiv@counter,f
  9218  04F3                     i1l2821:	
  9219  04F3  1BA7               	btfsc	___aodiv@divisor+7,7
  9220  04F4  2D02               	goto	i1l2823
  9221  04F5  35A0               	lslf	___aodiv@divisor,f
  9222  04F6  0DA1               	rlf	___aodiv@divisor+1,f
  9223  04F7  0DA2               	rlf	___aodiv@divisor+2,f
  9224  04F8  0DA3               	rlf	___aodiv@divisor+3,f
  9225  04F9  0DA4               	rlf	___aodiv@divisor+4,f
  9226  04FA  0DA5               	rlf	___aodiv@divisor+5,f
  9227  04FB  0DA6               	rlf	___aodiv@divisor+6,f
  9228  04FC  0DA7               	rlf	___aodiv@divisor+7,f
  9229  04FD  3001               	movlw	1
  9230  04FE  00F0               	movwf	??___aodiv
  9231  04FF  0870               	movf	??___aodiv,w
  9232  0500  07F1               	addwf	___aodiv@counter,f
  9233  0501  2CF3               	goto	i1l2821
  9234  0502                     i1l2823:	
  9235  0502  35F3               	lslf	___aodiv@quotient,f
  9236  0503  0DF4               	rlf	___aodiv@quotient+1,f
  9237  0504  0DF5               	rlf	___aodiv@quotient+2,f
  9238  0505  0DF6               	rlf	___aodiv@quotient+3,f
  9239  0506  0DF7               	rlf	___aodiv@quotient+4,f
  9240  0507  0DF8               	rlf	___aodiv@quotient+5,f
  9241  0508  0DF9               	rlf	___aodiv@quotient+6,f
  9242  0509  0DFA               	rlf	___aodiv@quotient+7,f
  9243  050A  0827               	movf	___aodiv@divisor+7,w
  9244  050B  022F               	subwf	___aodiv@dividend+7,w
  9245  050C  1D03               	skipz
  9246  050D  2D28               	goto	u228_25
  9247  050E  0826               	movf	___aodiv@divisor+6,w
  9248  050F  022E               	subwf	___aodiv@dividend+6,w
  9249  0510  1D03               	skipz
  9250  0511  2D28               	goto	u228_25
  9251  0512  0825               	movf	___aodiv@divisor+5,w
  9252  0513  022D               	subwf	___aodiv@dividend+5,w
  9253  0514  1D03               	skipz
  9254  0515  2D28               	goto	u228_25
  9255  0516  0824               	movf	___aodiv@divisor+4,w
  9256  0517  022C               	subwf	___aodiv@dividend+4,w
  9257  0518  1D03               	skipz
  9258  0519  2D28               	goto	u228_25
  9259  051A  0823               	movf	___aodiv@divisor+3,w
  9260  051B  022B               	subwf	___aodiv@dividend+3,w
  9261  051C  1D03               	skipz
  9262  051D  2D28               	goto	u228_25
  9263  051E  0822               	movf	___aodiv@divisor+2,w
  9264  051F  022A               	subwf	___aodiv@dividend+2,w
  9265  0520  1D03               	skipz
  9266  0521  2D28               	goto	u228_25
  9267  0522  0821               	movf	___aodiv@divisor+1,w
  9268  0523  0229               	subwf	___aodiv@dividend+1,w
  9269  0524  1D03               	skipz
  9270  0525  2D28               	goto	u228_25
  9271  0526  0820               	movf	___aodiv@divisor,w
  9272  0527  0228               	subwf	___aodiv@dividend,w
  9273  0528                     u228_25:	
  9274  0528  1C03               	skipc
  9275  0529  2D3B               	goto	i1l2831
  9276  052A  0820               	movf	___aodiv@divisor,w
  9277  052B  02A8               	subwf	___aodiv@dividend,f
  9278  052C  0821               	movf	___aodiv@divisor+1,w
  9279  052D  3BA9               	subwfb	___aodiv@dividend+1,f
  9280  052E  0822               	movf	___aodiv@divisor+2,w
  9281  052F  3BAA               	subwfb	___aodiv@dividend+2,f
  9282  0530  0823               	movf	___aodiv@divisor+3,w
  9283  0531  3BAB               	subwfb	___aodiv@dividend+3,f
  9284  0532  0824               	movf	___aodiv@divisor+4,w
  9285  0533  3BAC               	subwfb	___aodiv@dividend+4,f
  9286  0534  0825               	movf	___aodiv@divisor+5,w
  9287  0535  3BAD               	subwfb	___aodiv@dividend+5,f
  9288  0536  0826               	movf	___aodiv@divisor+6,w
  9289  0537  3BAE               	subwfb	___aodiv@dividend+6,f
  9290  0538  0827               	movf	___aodiv@divisor+7,w
  9291  0539  3BAF               	subwfb	___aodiv@dividend+7,f
  9292  053A  1473               	bsf	___aodiv@quotient,0
  9293  053B                     i1l2831:	
  9294  053B  36A7               	lsrf	___aodiv@divisor+7,f
  9295  053C  0CA6               	rrf	___aodiv@divisor+6,f
  9296  053D  0CA5               	rrf	___aodiv@divisor+5,f
  9297  053E  0CA4               	rrf	___aodiv@divisor+4,f
  9298  053F  0CA3               	rrf	___aodiv@divisor+3,f
  9299  0540  0CA2               	rrf	___aodiv@divisor+2,f
  9300  0541  0CA1               	rrf	___aodiv@divisor+1,f
  9301  0542  0CA0               	rrf	___aodiv@divisor,f
  9302  0543  3001               	movlw	1
  9303  0544  02F1               	subwf	___aodiv@counter,f
  9304  0545  1D03               	btfss	3,2
  9305  0546  2D02               	goto	i1l2823
  9306  0547                     i1l2833:	
  9307  0547  0872               	movf	___aodiv@sign,w
  9308  0548  1903               	btfsc	3,2
  9309  0549  2D68               	goto	i1l928
  9310  054A  09F3               	comf	___aodiv@quotient,f
  9311  054B  09F4               	comf	___aodiv@quotient+1,f
  9312  054C  09F5               	comf	___aodiv@quotient+2,f
  9313  054D  09F6               	comf	___aodiv@quotient+3,f
  9314  054E  09F7               	comf	___aodiv@quotient+4,f
  9315  054F  09F8               	comf	___aodiv@quotient+5,f
  9316  0550  09F9               	comf	___aodiv@quotient+6,f
  9317  0551  09FA               	comf	___aodiv@quotient+7,f
  9318  0552  0AF3               	incf	___aodiv@quotient,f
  9319  0553  1D03               	skipz
  9320  0554  2D68               	goto	i1l928
  9321  0555  0AF4               	incf	___aodiv@quotient+1,f
  9322  0556  1D03               	skipz
  9323  0557  2D68               	goto	i1l928
  9324  0558  0AF5               	incf	___aodiv@quotient+2,f
  9325  0559  1D03               	skipz
  9326  055A  2D68               	goto	i1l928
  9327  055B  0AF6               	incf	___aodiv@quotient+3,f
  9328  055C  1D03               	skipz
  9329  055D  2D68               	goto	i1l928
  9330  055E  0AF7               	incf	___aodiv@quotient+4,f
  9331  055F  1D03               	skipz
  9332  0560  2D68               	goto	i1l928
  9333  0561  0AF8               	incf	___aodiv@quotient+5,f
  9334  0562  1D03               	skipz
  9335  0563  2D68               	goto	i1l928
  9336  0564  0AF9               	incf	___aodiv@quotient+6,f
  9337  0565  1D03               	skipz
  9338  0566  2D68               	goto	i1l928
  9339  0567  0AFA               	incf	___aodiv@quotient+7,f
  9340  0568                     i1l928:	
  9341  0568  0873               	movf	___aodiv@quotient,w
  9342  0569  0020               	movlb	0	; select bank0
  9343  056A  00A0               	movwf	?___aodiv
  9344  056B  0874               	movf	___aodiv@quotient+1,w
  9345  056C  00A1               	movwf	?___aodiv+1
  9346  056D  0875               	movf	___aodiv@quotient+2,w
  9347  056E  00A2               	movwf	?___aodiv+2
  9348  056F  0876               	movf	___aodiv@quotient+3,w
  9349  0570  00A3               	movwf	?___aodiv+3
  9350  0571  0877               	movf	___aodiv@quotient+4,w
  9351  0572  00A4               	movwf	?___aodiv+4
  9352  0573  0878               	movf	___aodiv@quotient+5,w
  9353  0574  00A5               	movwf	?___aodiv+5
  9354  0575  0879               	movf	___aodiv@quotient+6,w
  9355  0576  00A6               	movwf	?___aodiv+6
  9356  0577  087A               	movf	___aodiv@quotient+7,w
  9357  0578  00A7               	movwf	?___aodiv+7
  9358  0579  0008               	return
  9359  057A                     __end_of___aodiv:	
  9360                           
  9361                           	psect	text43
  9362  0909                     __ptext43:	
  9363 ;; *************** function _key_isPressed *****************
  9364 ;; Defined at:
  9365 ;;		line 158 in file "hardware.c"
  9366 ;; Parameters:    Size  Location     Type
  9367 ;;		None
  9368 ;; Auto vars:     Size  Location     Type
  9369 ;;  pdata           1    1[COMMON] PTR volatile struct .
  9370 ;;		 -> g_data(39), 
  9371 ;; Return value:  Size  Location     Type
  9372 ;;                  1    wreg      enum E5232
  9373 ;; Registers used:
  9374 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9375 ;; Tracked objects:
  9376 ;;		On entry : 0/0
  9377 ;;		On exit  : 0/0
  9378 ;;		Unchanged: 0/0
  9379 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9380 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9381 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9382 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9383 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9384 ;;Total ram usage:        2 bytes
  9385 ;; Hardware stack levels used:    1
  9386 ;; Hardware stack levels required when called:    1
  9387 ;; This function calls:
  9388 ;;		i1_data_getdata
  9389 ;; This function is called by:
  9390 ;;		_ISR
  9391 ;; This function uses a non-reentrant model
  9392 ;;
  9393                           
  9394                           
  9395                           ;psect for function _key_isPressed
  9396  0909                     _key_isPressed:	
  9397                           
  9398                           ;hardware.c: 160:     G_DATA *pdata = data_getdata();
  9399                           
  9400                           ;incstack = 0
  9401                           ; Regs used in _key_isPressed: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9402  0909  3188  2015  3189   	fcall	i1_data_getdata
  9403  090C  00F0               	movwf	??_key_isPressed
  9404  090D  0870               	movf	??_key_isPressed,w
  9405  090E  00F1               	movwf	key_isPressed@pdata
  9406                           
  9407                           ;hardware.c: 161:     if(pdata->g_flg_switch == TRUE){
  9408  090F  0871               	movf	key_isPressed@pdata,w
  9409  0910  0086               	movwf	6
  9410  0911  3002               	movlw	2	; select bank4/5
  9411  0912  0087               	movwf	7
  9412  0913  0301               	decf	1,w
  9413  0914  1D03               	btfss	3,2
  9414  0915  291D               	goto	i1l3737
  9415                           
  9416                           ;hardware.c: 162:         pdata->g_flg_switch = FALSE;
  9417  0916  0871               	movf	key_isPressed@pdata,w
  9418  0917  0086               	movwf	6
  9419  0918  3002               	movlw	2	; select bank4/5
  9420  0919  0087               	movwf	7
  9421  091A  0181               	clrf	1
  9422                           
  9423                           ;hardware.c: 163:         return TRUE;
  9424  091B  3001               	movlw	1
  9425  091C  0008               	return
  9426  091D                     i1l3737:	
  9427                           
  9428                           ;hardware.c: 165:         return FALSE;
  9429  091D  3000               	movlw	0
  9430  091E  0008               	return
  9431  091F                     __end_of_key_isPressed:	
  9432                           
  9433                           	psect	text44
  9434  0C95                     __ptext44:	
  9435 ;; *************** function _capture_handdle *****************
  9436 ;; Defined at:
  9437 ;;		line 65 in file "hardware.c"
  9438 ;; Parameters:    Size  Location     Type
  9439 ;;		None
  9440 ;; Auto vars:     Size  Location     Type
  9441 ;;  cnt_tmp         2   12[COMMON] unsigned short 
  9442 ;;  cnt_int         2   10[COMMON] unsigned short 
  9443 ;;  pdata           1    9[COMMON] PTR volatile struct .
  9444 ;;		 -> g_data(39), 
  9445 ;; Return value:  Size  Location     Type
  9446 ;;                  2   96[None  ] int 
  9447 ;; Registers used:
  9448 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9449 ;; Tracked objects:
  9450 ;;		On entry : 0/0
  9451 ;;		On exit  : 0/0
  9452 ;;		Unchanged: 0/0
  9453 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9454 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9455 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9456 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9457 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9458 ;;Total ram usage:       13 bytes
  9459 ;; Hardware stack levels used:    1
  9460 ;; Hardware stack levels required when called:    1
  9461 ;; This function calls:
  9462 ;;		_capture_IsNegEdge
  9463 ;;		i1_capture_setEdge
  9464 ;;		i1_data_getdata
  9465 ;;		i1_led_SetState
  9466 ;; This function is called by:
  9467 ;;		_ISR
  9468 ;; This function uses a non-reentrant model
  9469 ;;
  9470                           
  9471                           
  9472                           ;psect for function _capture_handdle
  9473  0C95                     _capture_handdle:	
  9474                           
  9475                           ;hardware.c: 67:     G_DATA *pdata = data_getdata();
  9476                           
  9477                           ;incstack = 0
  9478                           ; Regs used in _capture_handdle: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9479  0C95  3188  2015  318C   	fcall	i1_data_getdata
  9480  0C98  00F1               	movwf	??_capture_handdle
  9481  0C99  0871               	movf	??_capture_handdle,w
  9482  0C9A  00F9               	movwf	capture_handdle@pdata
  9483                           
  9484                           ;hardware.c: 72:     cnt_tmp = CCPR2H;
  9485  0C9B  0025               	movlb	5	; select bank5
  9486  0C9C  0819               	movf	25,w	;volatile
  9487  0C9D  00F1               	movwf	??_capture_handdle
  9488  0C9E  01F2               	clrf	??_capture_handdle+1
  9489  0C9F  0871               	movf	??_capture_handdle,w
  9490  0CA0  00FC               	movwf	capture_handdle@cnt_tmp
  9491  0CA1  0872               	movf	??_capture_handdle+1,w
  9492  0CA2  00FD               	movwf	capture_handdle@cnt_tmp+1
  9493                           
  9494                           ;hardware.c: 73:     cnt_tmp = (cnt_tmp << 8) + CCPR2L;
  9495  0CA3  0818               	movf	24,w	;volatile
  9496  0CA4  00F1               	movwf	??_capture_handdle
  9497  0CA5  01F2               	clrf	??_capture_handdle+1
  9498  0CA6  087C               	movf	capture_handdle@cnt_tmp,w
  9499  0CA7  00F4               	movwf	??_capture_handdle+3
  9500  0CA8  01F3               	clrf	??_capture_handdle+2
  9501  0CA9  0871               	movf	??_capture_handdle,w
  9502  0CAA  0773               	addwf	??_capture_handdle+2,w
  9503  0CAB  00F5               	movwf	??_capture_handdle+4
  9504  0CAC  0872               	movf	??_capture_handdle+1,w
  9505  0CAD  3D74               	addwfc	??_capture_handdle+3,w
  9506  0CAE  00F6               	movwf	??_capture_handdle+5
  9507  0CAF  0875               	movf	??_capture_handdle+4,w
  9508  0CB0  00FC               	movwf	capture_handdle@cnt_tmp
  9509  0CB1  0876               	movf	??_capture_handdle+5,w
  9510  0CB2  00FD               	movwf	capture_handdle@cnt_tmp+1
  9511                           
  9512                           ;hardware.c: 75:     if(cnt_tmp > last_cnt)
  9513  0CB3  087D               	movf	capture_handdle@cnt_tmp+1,w
  9514  0CB4  0022               	movlb	2	; select bank2
  9515  0CB5  0263               	subwf	(capture_handdle@last_cnt+1)^(0+256),w
  9516  0CB6  1D03               	skipz
  9517  0CB7  2CBA               	goto	u370_25
  9518  0CB8  087C               	movf	capture_handdle@cnt_tmp,w
  9519  0CB9  0262               	subwf	capture_handdle@last_cnt^(0+256),w
  9520  0CBA                     u370_25:	
  9521  0CBA  1803               	skipnc
  9522  0CBB  2CC3               	goto	i1l3785
  9523                           
  9524                           ;hardware.c: 76:     {;hardware.c: 77:         cnt_int = cnt_tmp - last_cnt;
  9525  0CBC  0862               	movf	capture_handdle@last_cnt^(0+256),w
  9526  0CBD  027C               	subwf	capture_handdle@cnt_tmp,w
  9527  0CBE  00FA               	movwf	capture_handdle@cnt_int
  9528  0CBF  0863               	movf	(capture_handdle@last_cnt+1)^(0+256),w
  9529  0CC0  3B7D               	subwfb	capture_handdle@cnt_tmp+1,w
  9530  0CC1  00FB               	movwf	capture_handdle@cnt_int+1
  9531                           
  9532                           ;hardware.c: 78:     }
  9533  0CC2  2CCB               	goto	i1l3789
  9534  0CC3                     i1l3785:	
  9535                           
  9536                           ;hardware.c: 80:     {;hardware.c: 81:         cnt_int = 0xffff - last_cnt;
  9537  0CC3  0962               	comf	capture_handdle@last_cnt^(0+256),w
  9538  0CC4  00FA               	movwf	capture_handdle@cnt_int
  9539  0CC5  0963               	comf	(capture_handdle@last_cnt+1)^(0+256),w
  9540  0CC6  00FB               	movwf	capture_handdle@cnt_int+1
  9541                           
  9542                           ;hardware.c: 82:         cnt_int += cnt_tmp;
  9543  0CC7  087C               	movf	capture_handdle@cnt_tmp,w
  9544  0CC8  07FA               	addwf	capture_handdle@cnt_int,f
  9545  0CC9  087D               	movf	capture_handdle@cnt_tmp+1,w
  9546  0CCA  3DFB               	addwfc	capture_handdle@cnt_int+1,f
  9547  0CCB                     i1l3789:	
  9548                           
  9549                           ;hardware.c: 87:     if(capture_IsNegEdge())
  9550  0CCB  3188  2068  318C   	fcall	_capture_IsNegEdge
  9551  0CCE  3A00               	xorlw	0
  9552  0CCF  1903               	skipnz
  9553  0CD0  2CDC               	goto	i1l3795
  9554                           
  9555                           ;hardware.c: 88:     {;hardware.c: 89:         pdata->cnt_high = cnt_int;
  9556  0CD1  0879               	movf	capture_handdle@pdata,w
  9557  0CD2  3E23               	addlw	35
  9558  0CD3  0086               	movwf	6
  9559  0CD4  3002               	movlw	2	; select bank4/5
  9560  0CD5  0087               	movwf	7
  9561  0CD6  087A               	movf	capture_handdle@cnt_int,w
  9562  0CD7  3FC0               	movwi [0]fsr1
  9563  0CD8  087B               	movf	capture_handdle@cnt_int+1,w
  9564  0CD9  3FC1               	movwi [1]fsr1
  9565                           
  9566                           ;hardware.c: 90:         led_SetState(FALSE);
  9567  0CDA  3000               	movlw	0
  9568  0CDB  2CE6               	goto	L2
  9569  0CDC                     i1l3795:	
  9570                           ;hardware.c: 91:     }
  9571                           
  9572                           
  9573                           ;hardware.c: 93:     {;hardware.c: 94:         pdata->cnt_low = cnt_int;
  9574  0CDC  0879               	movf	capture_handdle@pdata,w
  9575  0CDD  3E25               	addlw	37
  9576  0CDE  0086               	movwf	6
  9577  0CDF  3002               	movlw	2	; select bank4/5
  9578  0CE0  0087               	movwf	7
  9579  0CE1  087A               	movf	capture_handdle@cnt_int,w
  9580  0CE2  3FC0               	movwi [0]fsr1
  9581  0CE3  087B               	movf	capture_handdle@cnt_int+1,w
  9582  0CE4  3FC1               	movwi [1]fsr1
  9583                           
  9584                           ;hardware.c: 95:         led_SetState(TRUE);
  9585  0CE5  3001               	movlw	1
  9586  0CE6                     L2:	
  9587  0CE6  3188  2072  318C   	fcall	i1_led_SetState
  9588                           
  9589                           ;hardware.c: 98:     last_cnt = cnt_tmp;
  9590  0CE9  087D               	movf	capture_handdle@cnt_tmp+1,w
  9591  0CEA  0022               	movlb	2	; select bank2
  9592  0CEB  00E3               	movwf	(capture_handdle@last_cnt+1)^(0+256)
  9593  0CEC  087C               	movf	capture_handdle@cnt_tmp,w
  9594  0CED  00E2               	movwf	capture_handdle@last_cnt^(0+256)
  9595                           
  9596                           ;hardware.c: 101:     capture_setEdge( (capture_IsNegEdge())? (0b0101) : (0b0100));
  9597  0CEE  3188  2068  318C   	fcall	_capture_IsNegEdge
  9598  0CF1  3A00               	xorlw	0
  9599  0CF2  1D03               	skipz
  9600  0CF3  2CF6               	goto	i1l3805
  9601  0CF4  3004               	movlw	4
  9602  0CF5  2CF7               	goto	L3
  9603  0CF6                     i1l3805:	
  9604  0CF6  3005               	movlw	5
  9605  0CF7                     L3:	
  9606  0CF7  00F7               	movwf	_capture_handdle$1382
  9607  0CF8  3000               	movlw	0
  9608  0CF9  00F8               	movwf	_capture_handdle$1382+1
  9609  0CFA  0877               	movf	_capture_handdle$1382,w
  9610  0CFB  3188  20D0         	fcall	i1_capture_setEdge
  9611  0CFD  0008               	return
  9612  0CFE                     __end_of_capture_handdle:	
  9613                           
  9614                           	psect	text45
  9615  0872                     __ptext45:	
  9616 ;; *************** function i1_led_SetState *****************
  9617 ;; Defined at:
  9618 ;;		line 110 in file "hardware.c"
  9619 ;; Parameters:    Size  Location     Type
  9620 ;;  isOn            1    wreg     unsigned char 
  9621 ;; Auto vars:     Size  Location     Type
  9622 ;;  isOn            1    0[COMMON] unsigned char 
  9623 ;; Return value:  Size  Location     Type
  9624 ;;                  1    wreg      unsigned char 
  9625 ;; Registers used:
  9626 ;;		wreg, status,2, status,0
  9627 ;; Tracked objects:
  9628 ;;		On entry : 0/0
  9629 ;;		On exit  : 0/0
  9630 ;;		Unchanged: 0/0
  9631 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9632 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9633 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9634 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9635 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9636 ;;Total ram usage:        1 bytes
  9637 ;; Hardware stack levels used:    1
  9638 ;; This function calls:
  9639 ;;		Nothing
  9640 ;; This function is called by:
  9641 ;;		_capture_handdle
  9642 ;;		_led_Blink
  9643 ;; This function uses a non-reentrant model
  9644 ;;
  9645                           
  9646                           
  9647                           ;psect for function i1_led_SetState
  9648  0872                     i1_led_SetState:	
  9649                           
  9650                           ;incstack = 0
  9651                           ; Regs used in i1_led_SetState: [wreg+status,2+status,0]
  9652                           ;i1led_SetState@isOn stored from wreg
  9653  0872  00F0               	movwf	i1led_SetState@isOn
  9654                           
  9655                           ;hardware.c: 110: u8 led_SetState(u8 isOn);hardware.c: 111: {;hardware.c: 112:     LATBb
      +                          its.LATB3 = (isOn)? LED_STATE_ON : LED_STATE_OFF;
  9656  0873  0870               	movf	i1led_SetState@isOn,w
  9657  0874  1D03               	btfss	3,2
  9658  0875  2879               	goto	u271_20
  9659  0876  0022               	movlb	2	; select bank2
  9660  0877  158D               	bsf	13,3	;volatile
  9661  0878  0008               	return
  9662  0879                     u271_20:	
  9663  0879  0022               	movlb	2	; select bank2
  9664  087A  118D               	bcf	13,3	;volatile
  9665  087B  0008               	return
  9666  087C                     __end_ofi1_led_SetState:	
  9667                           
  9668                           	psect	text46
  9669  08D0                     __ptext46:	
  9670 ;; *************** function i1_capture_setEdge *****************
  9671 ;; Defined at:
  9672 ;;		line 12 in file "hardware.c"
  9673 ;; Parameters:    Size  Location     Type
  9674 ;;  edge            1    wreg     unsigned char 
  9675 ;; Auto vars:     Size  Location     Type
  9676 ;;  edge            1    0[COMMON] unsigned char 
  9677 ;; Return value:  Size  Location     Type
  9678 ;;                  2    0[None  ] int 
  9679 ;; Registers used:
  9680 ;;		wreg, status,2, status,0
  9681 ;; Tracked objects:
  9682 ;;		On entry : 0/0
  9683 ;;		On exit  : 0/0
  9684 ;;		Unchanged: 0/0
  9685 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9686 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9687 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9688 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9689 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9690 ;;Total ram usage:        1 bytes
  9691 ;; Hardware stack levels used:    1
  9692 ;; This function calls:
  9693 ;;		Nothing
  9694 ;; This function is called by:
  9695 ;;		_capture_handdle
  9696 ;; This function uses a non-reentrant model
  9697 ;;
  9698                           
  9699                           
  9700                           ;psect for function i1_capture_setEdge
  9701  08D0                     i1_capture_setEdge:	
  9702                           
  9703                           ;incstack = 0
  9704                           ; Regs used in i1_capture_setEdge: [wreg+status,2+status,0]
  9705                           ;i1capture_setEdge@edge stored from wreg
  9706  08D0  00F0               	movwf	i1capture_setEdge@edge
  9707                           
  9708                           ;hardware.c: 12: static int capture_setEdge(u8 edge);hardware.c: 13: {;hardware.c: 14:  
      +                             if((edge == (0b0101)) || (edge == (0b0100)))
  9709  08D1  3005               	movlw	5
  9710  08D2  0670               	xorwf	i1capture_setEdge@edge,w
  9711  08D3  1903               	btfsc	3,2
  9712  08D4  28D9               	goto	i1l3623
  9713  08D5  3004               	movlw	4
  9714  08D6  0670               	xorwf	i1capture_setEdge@edge,w
  9715  08D7  1D03               	btfss	3,2
  9716  08D8  0008               	return
  9717  08D9                     i1l3623:	
  9718                           
  9719                           ;hardware.c: 15:     {;hardware.c: 16:         CCP2CONbits.CCP2M = edge;
  9720  08D9  0025               	movlb	5	; select bank5
  9721  08DA  081A               	movf	26,w	;volatile
  9722  08DB  0670               	xorwf	i1capture_setEdge@edge,w
  9723  08DC  39F0               	andlw	-16
  9724  08DD  0670               	xorwf	i1capture_setEdge@edge,w
  9725  08DE  009A               	movwf	26	;volatile
  9726  08DF  0008               	return
  9727  08E0                     __end_ofi1_capture_setEdge:	
  9728                           
  9729                           	psect	text47
  9730  0817                     __ptext47:	
  9731 ;; *************** function _capture_clrIntrpt *****************
  9732 ;; Defined at:
  9733 ;;		line 56 in file "hardware.c"
  9734 ;; Parameters:    Size  Location     Type
  9735 ;;		None
  9736 ;; Auto vars:     Size  Location     Type
  9737 ;;		None
  9738 ;; Return value:  Size  Location     Type
  9739 ;;                  1    wreg      void 
  9740 ;; Registers used:
  9741 ;;		None
  9742 ;; Tracked objects:
  9743 ;;		On entry : 0/0
  9744 ;;		On exit  : 0/0
  9745 ;;		Unchanged: 0/0
  9746 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9747 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9748 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9749 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9750 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9751 ;;Total ram usage:        0 bytes
  9752 ;; Hardware stack levels used:    1
  9753 ;; This function calls:
  9754 ;;		Nothing
  9755 ;; This function is called by:
  9756 ;;		_ISR
  9757 ;; This function uses a non-reentrant model
  9758 ;;
  9759                           
  9760                           
  9761                           ;psect for function _capture_clrIntrpt
  9762  0817                     _capture_clrIntrpt:	
  9763                           
  9764                           ;hardware.c: 58:     PIR2bits.CCP2IF = 0;
  9765                           
  9766                           ;incstack = 0
  9767                           ; Regs used in _capture_clrIntrpt: []
  9768  0817  0020               	movlb	0	; select bank0
  9769  0818  1012               	bcf	18,0	;volatile
  9770  0819  0008               	return
  9771  081A                     __end_of_capture_clrIntrpt:	
  9772                           
  9773                           	psect	text48
  9774  0824                     __ptext48:	
  9775 ;; *************** function _capture_IsIntrpt *****************
  9776 ;; Defined at:
  9777 ;;		line 52 in file "hardware.c"
  9778 ;; Parameters:    Size  Location     Type
  9779 ;;		None
  9780 ;; Auto vars:     Size  Location     Type
  9781 ;;		None
  9782 ;; Return value:  Size  Location     Type
  9783 ;;                  1    wreg      enum E5232
  9784 ;; Registers used:
  9785 ;;		wreg, status,2, status,0
  9786 ;; Tracked objects:
  9787 ;;		On entry : 0/0
  9788 ;;		On exit  : 0/0
  9789 ;;		Unchanged: 0/0
  9790 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9791 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9792 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9793 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9794 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9795 ;;Total ram usage:        0 bytes
  9796 ;; Hardware stack levels used:    1
  9797 ;; This function calls:
  9798 ;;		Nothing
  9799 ;; This function is called by:
  9800 ;;		_ISR
  9801 ;; This function uses a non-reentrant model
  9802 ;;
  9803                           
  9804                           
  9805                           ;psect for function _capture_IsIntrpt
  9806  0824                     _capture_IsIntrpt:	
  9807                           
  9808                           ;hardware.c: 54:     return (PIR2bits.CCP2IF == 0b1)? TRUE : FALSE;
  9809                           
  9810                           ;incstack = 0
  9811                           ; Regs used in _capture_IsIntrpt: [wreg+status,2+status,0]
  9812  0824  0020               	movlb	0	; select bank0
  9813  0825  0812               	movf	18,w	;volatile
  9814  0826  3901               	andlw	1
  9815  0827  0008               	return
  9816  0828                     __end_of_capture_IsIntrpt:	
  9817                           
  9818                           	psect	text49
  9819  0820                     __ptext49:	
  9820 ;; *************** function _capture_IsEnable *****************
  9821 ;; Defined at:
  9822 ;;		line 48 in file "hardware.c"
  9823 ;; Parameters:    Size  Location     Type
  9824 ;;		None
  9825 ;; Auto vars:     Size  Location     Type
  9826 ;;		None
  9827 ;; Return value:  Size  Location     Type
  9828 ;;                  1    wreg      enum E5232
  9829 ;; Registers used:
  9830 ;;		wreg, status,2, status,0
  9831 ;; Tracked objects:
  9832 ;;		On entry : 0/0
  9833 ;;		On exit  : 0/0
  9834 ;;		Unchanged: 0/0
  9835 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9836 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9837 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9838 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9839 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9840 ;;Total ram usage:        0 bytes
  9841 ;; Hardware stack levels used:    1
  9842 ;; This function calls:
  9843 ;;		Nothing
  9844 ;; This function is called by:
  9845 ;;		_ISR
  9846 ;; This function uses a non-reentrant model
  9847 ;;
  9848                           
  9849                           
  9850                           ;psect for function _capture_IsEnable
  9851  0820                     _capture_IsEnable:	
  9852                           
  9853                           ;hardware.c: 50:     return (PIE2bits.CCP2IE == 0b1)? TRUE : FALSE;
  9854                           
  9855                           ;incstack = 0
  9856                           ; Regs used in _capture_IsEnable: [wreg+status,2+status,0]
  9857  0820  0021               	movlb	1	; select bank1
  9858  0821  0812               	movf	18,w	;volatile
  9859  0822  3901               	andlw	1
  9860  0823  0008               	return
  9861  0824                     __end_of_capture_IsEnable:	
  9862                           
  9863                           	psect	text50
  9864  00E1                     __ptext50:	
  9865 ;; *************** function _bpc_proc *****************
  9866 ;; Defined at:
  9867 ;;		line 80 in file "bpc.c"
  9868 ;; Parameters:    Size  Location     Type
  9869 ;;		None
  9870 ;; Auto vars:     Size  Location     Type
  9871 ;;  i               2   20[BANK0 ] int 
  9872 ;;  last_time_m     2   18[BANK0 ] unsigned short 
  9873 ;;  last_time_h     2   16[BANK0 ] unsigned short 
  9874 ;;  last_time_s     2   14[BANK0 ] unsigned short 
  9875 ;;  pdata           1   23[BANK0 ] PTR volatile struct .
  9876 ;;		 -> g_data(39), 
  9877 ;;  number          1   22[BANK0 ] unsigned char 
  9878 ;; Return value:  Size  Location     Type
  9879 ;;                  2   98[None  ] int 
  9880 ;; Registers used:
  9881 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9882 ;; Tracked objects:
  9883 ;;		On entry : 0/0
  9884 ;;		On exit  : 0/0
  9885 ;;		Unchanged: 0/0
  9886 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9887 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9888 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9889 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9890 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9891 ;;Total ram usage:       12 bytes
  9892 ;; Hardware stack levels used:    1
  9893 ;; Hardware stack levels required when called:    4
  9894 ;; This function calls:
  9895 ;;		_bpc_Cnt2Qua
  9896 ;;		_check_err
  9897 ;;		i1_capture_Set
  9898 ;;		i1_data_getdata
  9899 ;;		i1_display_update
  9900 ;; This function is called by:
  9901 ;;		_ISR
  9902 ;; This function uses a non-reentrant model
  9903 ;;
  9904                           
  9905                           
  9906                           ;psect for function _bpc_proc
  9907  00E1                     _bpc_proc:	
  9908                           
  9909                           ;bpc.c: 82:     G_DATA *pdata = data_getdata();
  9910                           
  9911                           ;incstack = 0
  9912                           ; Regs used in _bpc_proc: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9913  00E1  3188  2015  3180   	fcall	i1_data_getdata
  9914  00E4  0020               	movlb	0	; select bank0
  9915  00E5  00AC               	movwf	??_bpc_proc
  9916  00E6  082C               	movf	??_bpc_proc,w
  9917  00E7  00B7               	movwf	bpc_proc@pdata
  9918                           
  9919                           ;bpc.c: 83:     u8 number = bpc_Cnt2Qua();
  9920  00E8  318D  257C  3180   	fcall	_bpc_Cnt2Qua
  9921  00EB  0020               	movlb	0	; select bank0
  9922  00EC  00AC               	movwf	??_bpc_proc
  9923  00ED  082C               	movf	??_bpc_proc,w
  9924  00EE  00B6               	movwf	bpc_proc@number
  9925                           
  9926                           ;bpc.c: 85:     if(6 == number){
  9927  00EF  3006               	movlw	6
  9928  00F0  0636               	xorwf	bpc_proc@number,w
  9929  00F1  1903               	btfsc	3,2
  9930  00F2  0008               	return
  9931  00F3  3004               	movlw	4
  9932  00F4  0636               	xorwf	bpc_proc@number,w
  9933  00F5  1D03               	btfss	3,2
  9934  00F6  2906               	goto	i1l3827
  9935                           
  9936                           ;bpc.c: 88:         pdata->g_find_recv_start = FALSE;
  9937  00F7  0837               	movf	bpc_proc@pdata,w
  9938  00F8  3E02               	addlw	2
  9939  00F9  0086               	movwf	6
  9940  00FA  3002               	movlw	2	; select bank4/5
  9941  00FB  0087               	movwf	7
  9942  00FC  0181               	clrf	1
  9943                           
  9944                           ;bpc.c: 89:         pdata->g_recv_count = 0;
  9945  00FD  0837               	movf	bpc_proc@pdata,w
  9946  00FE  3E0B               	addlw	11
  9947  00FF  0086               	movwf	6
  9948  0100  3002               	movlw	2	; select bank4/5
  9949  0101  0087               	movwf	7
  9950  0102  3000               	movlw	0
  9951  0103  3FC0               	movwi [0]fsr1
  9952  0104  3FC1               	movwi [1]fsr1
  9953  0105  0008               	return
  9954  0106                     i1l3827:	
  9955                           
  9956                           ;bpc.c: 95:     if(pdata->g_find_recv_start || 5 == number){
  9957  0106  0837               	movf	bpc_proc@pdata,w
  9958  0107  3E02               	addlw	2
  9959  0108  0086               	movwf	6
  9960  0109  3002               	movlw	2	; select bank4/5
  9961  010A  0087               	movwf	7
  9962  010B  0801               	movf	1,w
  9963  010C  1D03               	btfss	3,2
  9964  010D  2912               	goto	i1l3831
  9965  010E  3005               	movlw	5
  9966  010F  0636               	xorwf	bpc_proc@number,w
  9967  0110  1D03               	btfss	3,2
  9968  0111  293F               	goto	i1l3837
  9969  0112                     i1l3831:	
  9970                           
  9971                           ;bpc.c: 96:         if(!pdata->g_find_recv_start){
  9972  0112  0837               	movf	bpc_proc@pdata,w
  9973  0113  3E02               	addlw	2
  9974  0114  0086               	movwf	6
  9975  0115  3002               	movlw	2	; select bank4/5
  9976  0116  0087               	movwf	7
  9977  0117  0801               	movf	1,w
  9978  0118  1D03               	btfss	3,2
  9979  0119  2948               	goto	i1l3841
  9980                           
  9981                           ;bpc.c: 97:             pdata->g_find_recv_start = TRUE;
  9982  011A  3001               	movlw	1
  9983  011B  00AC               	movwf	??_bpc_proc
  9984  011C  0837               	movf	bpc_proc@pdata,w
  9985  011D  3E02               	addlw	2
  9986  011E  0086               	movwf	6
  9987  011F  3002               	movlw	2	; select bank4/5
  9988  0120  0087               	movwf	7
  9989  0121  082C               	movf	??_bpc_proc,w
  9990  0122  0081               	movwf	1
  9991                           
  9992                           ;bpc.c: 98:             pdata->g_recv_buf[pdata->g_recv_count++] = number;
  9993  0123  0836               	movf	bpc_proc@number,w
  9994  0124  00AC               	movwf	??_bpc_proc
  9995  0125  0837               	movf	bpc_proc@pdata,w
  9996  0126  3E0B               	addlw	11
  9997  0127  0086               	movwf	6
  9998  0128  3002               	movlw	2	; select bank4/5
  9999  0129  0087               	movwf	7
 10000  012A  0801               	movf	1,w
 10001  012B  0737               	addwf	bpc_proc@pdata,w
 10002  012C  00AD               	movwf	??_bpc_proc+1
 10003  012D  082D               	movf	??_bpc_proc+1,w
 10004  012E  3E0D               	addlw	13
 10005  012F  0086               	movwf	6
 10006  0130  3002               	movlw	2	; select bank4/5
 10007  0131  0087               	movwf	7
 10008  0132  082C               	movf	??_bpc_proc,w
 10009  0133  0081               	movwf	1
 10010  0134  0837               	movf	bpc_proc@pdata,w
 10011  0135  3E0B               	addlw	11
 10012  0136  0086               	movwf	6
 10013  0137  3002               	movlw	2	; select bank4/5
 10014  0138  0087               	movwf	7
 10015  0139  3001               	movlw	1
 10016  013A  0781               	addwf	1,f
 10017  013B  3141               	addfsr 1,1
 10018  013C  1803               	skipnc
 10019  013D  0A81               	incf	1,f
 10020  013E  0008               	return
 10021  013F                     i1l3837:	
 10022                           
 10023                           ;bpc.c: 102:         pdata->g_recv_count = 0;
 10024  013F  0837               	movf	bpc_proc@pdata,w
 10025  0140  3E0B               	addlw	11
 10026  0141  0086               	movwf	6
 10027  0142  3002               	movlw	2	; select bank4/5
 10028  0143  0087               	movwf	7
 10029  0144  3000               	movlw	0
 10030  0145  3FC0               	movwi [0]fsr1
 10031  0146  3FC1               	movwi [1]fsr1
 10032  0147  0008               	return
 10033  0148                     i1l3841:	
 10034                           
 10035                           ;bpc.c: 107:     pdata->g_recv_buf[pdata->g_recv_count++] = number;
 10036  0148  0836               	movf	bpc_proc@number,w
 10037  0149  00AC               	movwf	??_bpc_proc
 10038  014A  0837               	movf	bpc_proc@pdata,w
 10039  014B  3E0B               	addlw	11
 10040  014C  0086               	movwf	6
 10041  014D  3002               	movlw	2	; select bank4/5
 10042  014E  0087               	movwf	7
 10043  014F  0801               	movf	1,w
 10044  0150  0737               	addwf	bpc_proc@pdata,w
 10045  0151  00AD               	movwf	??_bpc_proc+1
 10046  0152  082D               	movf	??_bpc_proc+1,w
 10047  0153  3E0D               	addlw	13
 10048  0154  0086               	movwf	6
 10049  0155  3002               	movlw	2	; select bank4/5
 10050  0156  0087               	movwf	7
 10051  0157  082C               	movf	??_bpc_proc,w
 10052  0158  0081               	movwf	1
 10053  0159  0837               	movf	bpc_proc@pdata,w
 10054  015A  3E0B               	addlw	11
 10055  015B  0086               	movwf	6
 10056  015C  3002               	movlw	2	; select bank4/5
 10057  015D  0087               	movwf	7
 10058  015E  3001               	movlw	1
 10059  015F  0781               	addwf	1,f
 10060  0160  3141               	addfsr 1,1
 10061  0161  1803               	skipnc
 10062  0162  0A81               	incf	1,f
 10063                           
 10064                           ;bpc.c: 108:     if(pdata->g_recv_count <= CODE_P3){
 10065  0163  0837               	movf	bpc_proc@pdata,w
 10066  0164  3E0B               	addlw	11
 10067  0165  0086               	movwf	6
 10068  0166  3002               	movlw	2	; select bank4/5
 10069  0167  0087               	movwf	7
 10070  0168  3F40               	moviw [0]fsr1
 10071  0169  00AC               	movwf	??_bpc_proc
 10072  016A  3F41               	moviw [1]fsr1
 10073  016B  00AD               	movwf	??_bpc_proc+1
 10074  016C  3000               	movlw	0
 10075  016D  022D               	subwf	??_bpc_proc+1,w
 10076  016E  300B               	movlw	11
 10077  016F  1903               	skipnz
 10078  0170  022C               	subwf	??_bpc_proc,w
 10079  0171  1C03               	btfss	3,0
 10080  0172  0008               	return
 10081                           
 10082                           ;bpc.c: 113:     if(pdata->g_recv_buf[CODE_P1] > 2)
 10083  0173  0837               	movf	bpc_proc@pdata,w
 10084  0174  3E0E               	addlw	14
 10085  0175  0086               	movwf	6
 10086  0176  3002               	movlw	2	; select bank4/5
 10087  0177  0087               	movwf	7
 10088  0178  3003               	movlw	3
 10089  0179  0201               	subwf	1,w
 10090  017A  1C03               	skipc
 10091  017B  2990               	goto	i1l3855
 10092                           
 10093                           ;bpc.c: 114:     {;bpc.c: 115:         pdata->g_find_recv_start = FALSE;
 10094  017C  0837               	movf	bpc_proc@pdata,w
 10095  017D  3E02               	addlw	2
 10096  017E  0086               	movwf	6
 10097  017F  3002               	movlw	2	; select bank4/5
 10098  0180  0087               	movwf	7
 10099  0181  0181               	clrf	1
 10100                           
 10101                           ;bpc.c: 116:         pdata->g_isDecoding = 0;
 10102  0182  0A37               	incf	bpc_proc@pdata,w
 10103  0183  0086               	movwf	6
 10104  0184  3002               	movlw	2	; select bank4/5
 10105  0185  0087               	movwf	7
 10106  0186  0181               	clrf	1
 10107                           
 10108                           ;bpc.c: 117:         pdata->g_recv_count = 0;
 10109  0187  0837               	movf	bpc_proc@pdata,w
 10110  0188  3E0B               	addlw	11
 10111  0189  0086               	movwf	6
 10112  018A  3002               	movlw	2	; select bank4/5
 10113  018B  0087               	movwf	7
 10114  018C  3000               	movlw	0
 10115  018D  3FC0               	movwi [0]fsr1
 10116  018E  3FC1               	movwi [1]fsr1
 10117  018F  0008               	return
 10118  0190                     i1l3855:	
 10119                           
 10120                           ;bpc.c: 121:     u16 last_time_h = pdata->g_time_h;
 10121  0190  0837               	movf	bpc_proc@pdata,w
 10122  0191  3E03               	addlw	3
 10123  0192  0086               	movwf	6
 10124  0193  3002               	movlw	2	; select bank4/5
 10125  0194  0087               	movwf	7
 10126  0195  0801               	movf	1,w
 10127  0196  00AC               	movwf	??_bpc_proc
 10128  0197  01AD               	clrf	??_bpc_proc+1
 10129  0198  082C               	movf	??_bpc_proc,w
 10130  0199  00B0               	movwf	bpc_proc@last_time_h
 10131  019A  082D               	movf	??_bpc_proc+1,w
 10132  019B  00B1               	movwf	bpc_proc@last_time_h+1
 10133                           
 10134                           ;bpc.c: 122:     u16 last_time_m = pdata->g_time_m;
 10135  019C  0837               	movf	bpc_proc@pdata,w
 10136  019D  3E04               	addlw	4
 10137  019E  0086               	movwf	6
 10138  019F  3002               	movlw	2	; select bank4/5
 10139  01A0  0087               	movwf	7
 10140  01A1  0801               	movf	1,w
 10141  01A2  00AC               	movwf	??_bpc_proc
 10142  01A3  01AD               	clrf	??_bpc_proc+1
 10143  01A4  082C               	movf	??_bpc_proc,w
 10144  01A5  00B2               	movwf	bpc_proc@last_time_m
 10145  01A6  082D               	movf	??_bpc_proc+1,w
 10146  01A7  00B3               	movwf	bpc_proc@last_time_m+1
 10147                           
 10148                           ;bpc.c: 123:     u16 last_time_s = pdata->g_time_s;
 10149  01A8  0837               	movf	bpc_proc@pdata,w
 10150  01A9  3E05               	addlw	5
 10151  01AA  0086               	movwf	6
 10152  01AB  3002               	movlw	2	; select bank4/5
 10153  01AC  0087               	movwf	7
 10154  01AD  0801               	movf	1,w
 10155  01AE  00AC               	movwf	??_bpc_proc
 10156  01AF  01AD               	clrf	??_bpc_proc+1
 10157  01B0  082C               	movf	??_bpc_proc,w
 10158  01B1  00AE               	movwf	bpc_proc@last_time_s
 10159  01B2  082D               	movf	??_bpc_proc+1,w
 10160  01B3  00AF               	movwf	bpc_proc@last_time_s+1
 10161                           
 10162                           ;bpc.c: 125:     if(check_err(pdata))
 10163  01B4  0837               	movf	bpc_proc@pdata,w
 10164  01B5  3185  257A  3180   	fcall	_check_err
 10165  01B8  0870               	movf	?_check_err,w
 10166  01B9  0471               	iorwf	?_check_err+1,w
 10167  01BA  1903               	btfsc	3,2
 10168  01BB  29D9               	goto	i1l3863
 10169                           
 10170                           ;bpc.c: 126:     {;bpc.c: 128:         pdata->g_time_h = last_time_h;
 10171  01BC  0020               	movlb	0	; select bank0
 10172  01BD  0830               	movf	bpc_proc@last_time_h,w
 10173  01BE  00AC               	movwf	??_bpc_proc
 10174  01BF  0837               	movf	bpc_proc@pdata,w
 10175  01C0  3E03               	addlw	3
 10176  01C1  0086               	movwf	6
 10177  01C2  3002               	movlw	2	; select bank4/5
 10178  01C3  0087               	movwf	7
 10179  01C4  082C               	movf	??_bpc_proc,w
 10180  01C5  0081               	movwf	1
 10181                           
 10182                           ;bpc.c: 129:         pdata->g_time_m = last_time_m;
 10183  01C6  0832               	movf	bpc_proc@last_time_m,w
 10184  01C7  00AC               	movwf	??_bpc_proc
 10185  01C8  0837               	movf	bpc_proc@pdata,w
 10186  01C9  3E04               	addlw	4
 10187  01CA  0086               	movwf	6
 10188  01CB  3002               	movlw	2	; select bank4/5
 10189  01CC  0087               	movwf	7
 10190  01CD  082C               	movf	??_bpc_proc,w
 10191  01CE  0081               	movwf	1
 10192                           
 10193                           ;bpc.c: 130:         pdata->g_time_s = last_time_s;
 10194  01CF  082E               	movf	bpc_proc@last_time_s,w
 10195  01D0  00AC               	movwf	??_bpc_proc
 10196  01D1  0837               	movf	bpc_proc@pdata,w
 10197  01D2  3E05               	addlw	5
 10198  01D3  0086               	movwf	6
 10199  01D4  3002               	movlw	2	; select bank4/5
 10200  01D5  0087               	movwf	7
 10201  01D6  082C               	movf	??_bpc_proc,w
 10202  01D7  0081               	movwf	1
 10203  01D8  0008               	return
 10204  01D9                     i1l3863:	
 10205                           
 10206                           ;bpc.c: 135:     if(last_time_h != pdata->g_time_h || last_time_m != pdata->g_time_m)
 10207  01D9  0020               	movlb	0	; select bank0
 10208  01DA  0837               	movf	bpc_proc@pdata,w
 10209  01DB  3E03               	addlw	3
 10210  01DC  0086               	movwf	6
 10211  01DD  3002               	movlw	2	; select bank4/5
 10212  01DE  0087               	movwf	7
 10213  01DF  0801               	movf	1,w
 10214  01E0  00AC               	movwf	??_bpc_proc
 10215  01E1  01AD               	clrf	??_bpc_proc+1
 10216  01E2  0831               	movf	bpc_proc@last_time_h+1,w
 10217  01E3  062D               	xorwf	??_bpc_proc+1,w
 10218  01E4  1D03               	skipz
 10219  01E5  29E8               	goto	u381_25
 10220  01E6  0830               	movf	bpc_proc@last_time_h,w
 10221  01E7  062C               	xorwf	??_bpc_proc,w
 10222  01E8                     u381_25:	
 10223  01E8  1D03               	skipz
 10224  01E9  29FA               	goto	i1l3867
 10225  01EA  0837               	movf	bpc_proc@pdata,w
 10226  01EB  3E04               	addlw	4
 10227  01EC  0086               	movwf	6
 10228  01ED  3002               	movlw	2	; select bank4/5
 10229  01EE  0087               	movwf	7
 10230  01EF  0801               	movf	1,w
 10231  01F0  00AC               	movwf	??_bpc_proc
 10232  01F1  01AD               	clrf	??_bpc_proc+1
 10233  01F2  0833               	movf	bpc_proc@last_time_m+1,w
 10234  01F3  062D               	xorwf	??_bpc_proc+1,w
 10235  01F4  1D03               	skipz
 10236  01F5  29F8               	goto	u382_25
 10237  01F6  0832               	movf	bpc_proc@last_time_m,w
 10238  01F7  062C               	xorwf	??_bpc_proc,w
 10239  01F8                     u382_25:	
 10240  01F8  1903               	skipnz
 10241  01F9  29FD               	goto	i1l3869
 10242  01FA                     i1l3867:	
 10243                           
 10244                           ;bpc.c: 136:     {;bpc.c: 137:         display_update();
 10245  01FA  3187  2749  3180   	fcall	i1_display_update
 10246  01FD                     i1l3869:	
 10247                           
 10248                           ;bpc.c: 141:     pdata->g_find_recv_start = FALSE;
 10249  01FD  0020               	movlb	0	; select bank0
 10250  01FE  0837               	movf	bpc_proc@pdata,w
 10251  01FF  3E02               	addlw	2
 10252  0200  0086               	movwf	6
 10253  0201  3002               	movlw	2	; select bank4/5
 10254  0202  0087               	movwf	7
 10255  0203  0181               	clrf	1
 10256                           
 10257                           ;bpc.c: 143:     pdata->g_isDecoding = FALSE;
 10258  0204  0A37               	incf	bpc_proc@pdata,w
 10259  0205  0086               	movwf	6
 10260  0206  3002               	movlw	2	; select bank4/5
 10261  0207  0087               	movwf	7
 10262  0208  0181               	clrf	1
 10263                           
 10264                           ;bpc.c: 146:  capture_Set(FALSE);
 10265  0209  3000               	movlw	0
 10266  020A  3188  209D  3180   	fcall	i1_capture_Set
 10267                           
 10268                           ;bpc.c: 147:     pdata->g_recv_count = CODE_P0;
 10269  020D  0020               	movlb	0	; select bank0
 10270  020E  0837               	movf	bpc_proc@pdata,w
 10271  020F  3E0B               	addlw	11
 10272  0210  0086               	movwf	6
 10273  0211  3002               	movlw	2	; select bank4/5
 10274  0212  0087               	movwf	7
 10275  0213  3000               	movlw	0
 10276  0214  3FC0               	movwi [0]fsr1
 10277  0215  3FC1               	movwi [1]fsr1
 10278                           
 10279                           ;bpc.c: 148:     for(int i = 0;i < 20; i++)
 10280  0216  01B4               	clrf	bpc_proc@i
 10281  0217  01B5               	clrf	bpc_proc@i+1
 10282  0218                     i1l3883:	
 10283                           
 10284                           ;bpc.c: 149:     {;bpc.c: 150:         pdata->g_recv_buf[i] = 5;
 10285  0218  3005               	movlw	5
 10286  0219  0020               	movlb	0	; select bank0
 10287  021A  00AC               	movwf	??_bpc_proc
 10288  021B  0834               	movf	bpc_proc@i,w
 10289  021C  0737               	addwf	bpc_proc@pdata,w
 10290  021D  00AD               	movwf	??_bpc_proc+1
 10291  021E  082D               	movf	??_bpc_proc+1,w
 10292  021F  3E0D               	addlw	13
 10293  0220  0086               	movwf	6
 10294  0221  3002               	movlw	2	; select bank4/5
 10295  0222  0087               	movwf	7
 10296  0223  082C               	movf	??_bpc_proc,w
 10297  0224  0081               	movwf	1
 10298                           
 10299                           ;bpc.c: 151:     }
 10300  0225  3001               	movlw	1
 10301  0226  07B4               	addwf	bpc_proc@i,f
 10302  0227  3000               	movlw	0
 10303  0228  3DB5               	addwfc	bpc_proc@i+1,f
 10304  0229  0835               	movf	bpc_proc@i+1,w
 10305  022A  3A80               	xorlw	128
 10306  022B  00AC               	movwf	??_bpc_proc
 10307  022C  3080               	movlw	128
 10308  022D  022C               	subwf	??_bpc_proc,w
 10309  022E  1D03               	skipz
 10310  022F  2A32               	goto	u383_25
 10311  0230  3014               	movlw	20
 10312  0231  0234               	subwf	bpc_proc@i,w
 10313  0232                     u383_25:	
 10314  0232  1803               	btfsc	3,0
 10315  0233  0008               	return
 10316  0234  2A18               	goto	i1l3883
 10317  0235                     __end_of_bpc_proc:	
 10318                           
 10319                           	psect	text51
 10320  0749                     __ptext51:	
 10321 ;; *************** function i1_display_update *****************
 10322 ;; Defined at:
 10323 ;;		line 74 in file "display.c"
 10324 ;; Parameters:    Size  Location     Type
 10325 ;;		None
 10326 ;; Auto vars:     Size  Location     Type
 10327 ;;  display_upda    1   11[BANK0 ] PTR volatile struct .
 10328 ;;		 -> g_data(39), 
 10329 ;; Return value:  Size  Location     Type
 10330 ;;                  1    wreg      void 
 10331 ;; Registers used:
 10332 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10333 ;; Tracked objects:
 10334 ;;		On entry : 0/0
 10335 ;;		On exit  : 0/0
 10336 ;;		Unchanged: 0/0
 10337 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10338 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10339 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10340 ;;      Temps:          0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10341 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10342 ;;Total ram usage:       12 bytes
 10343 ;; Hardware stack levels used:    1
 10344 ;; Hardware stack levels required when called:    3
 10345 ;; This function calls:
 10346 ;;		i1___awdiv
 10347 ;;		i1___awmod
 10348 ;;		i1_data_getdata
 10349 ;;		i1_display_write_once
 10350 ;; This function is called by:
 10351 ;;		_bpc_proc
 10352 ;;		_update_time
 10353 ;; This function uses a non-reentrant model
 10354 ;;
 10355                           
 10356                           
 10357                           ;psect for function i1_display_update
 10358  0749                     i1_display_update:	
 10359                           
 10360                           ;display.c: 88:     G_DATA *pdata = data_getdata();
 10361                           
 10362                           ;incstack = 0
 10363                           ; Regs used in i1_display_update: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10364  0749  3188  2015  3187   	fcall	i1_data_getdata
 10365  074C  0020               	movlb	0	; select bank0
 10366  074D  00A0               	movwf	??i1_display_update
 10367  074E  0820               	movf	??i1_display_update,w
 10368  074F  00AB               	movwf	i1display_update@pdata
 10369                           
 10370                           ;display.c: 89:     display_write_once(segmcode[(pdata->g_time_h/10 == 0? 10:pdata->g_ti
      +                          me_h/10)], segmcode[pdata->g_time_h%10], segmcode[pdata->g_time_m/10], segmcode[pdata->g
      +                          _time_m%10]);
 10371  0750  300A               	movlw	10
 10372  0751  00F0               	movwf	i1___awdiv@divisor
 10373  0752  3000               	movlw	0
 10374  0753  00F1               	movwf	i1___awdiv@divisor+1
 10375  0754  082B               	movf	i1display_update@pdata,w
 10376  0755  3E03               	addlw	3
 10377  0756  0086               	movwf	6
 10378  0757  3002               	movlw	2	; select bank4/5
 10379  0758  0087               	movwf	7
 10380  0759  0801               	movf	1,w
 10381  075A  00A0               	movwf	??i1_display_update
 10382  075B  01A1               	clrf	??i1_display_update+1
 10383  075C  0820               	movf	??i1_display_update,w
 10384  075D  00F2               	movwf	i1___awdiv@dividend
 10385  075E  0821               	movf	??i1_display_update+1,w
 10386  075F  00F3               	movwf	i1___awdiv@dividend+1
 10387  0760  318B  239F  3187   	fcall	i1___awdiv
 10388  0763  0870               	movf	?i1___awdiv,w
 10389  0764  0471               	iorwf	?i1___awdiv+1,w
 10390  0765  1903               	btfsc	3,2
 10391  0766  2F81               	goto	i1l3321
 10392  0767  300A               	movlw	10
 10393  0768  00F0               	movwf	i1___awdiv@divisor
 10394  0769  3000               	movlw	0
 10395  076A  00F1               	movwf	i1___awdiv@divisor+1
 10396  076B  0020               	movlb	0	; select bank0
 10397  076C  082B               	movf	i1display_update@pdata,w
 10398  076D  3E03               	addlw	3
 10399  076E  0086               	movwf	6
 10400  076F  3002               	movlw	2	; select bank4/5
 10401  0770  0087               	movwf	7
 10402  0771  0801               	movf	1,w
 10403  0772  00A0               	movwf	??i1_display_update
 10404  0773  01A1               	clrf	??i1_display_update+1
 10405  0774  0820               	movf	??i1_display_update,w
 10406  0775  00F2               	movwf	i1___awdiv@dividend
 10407  0776  0821               	movf	??i1_display_update+1,w
 10408  0777  00F3               	movwf	i1___awdiv@dividend+1
 10409  0778  318B  239F  3187   	fcall	i1___awdiv
 10410  077B  0871               	movf	?i1___awdiv+1,w
 10411  077C  0020               	movlb	0	; select bank0
 10412  077D  00AA               	movwf	i1_display_update$1550+1
 10413  077E  0870               	movf	?i1___awdiv,w
 10414  077F  00A9               	movwf	i1_display_update$1550
 10415  0780  2F86               	goto	i1l3323
 10416  0781                     i1l3321:	
 10417  0781  300A               	movlw	10
 10418  0782  0020               	movlb	0	; select bank0
 10419  0783  00A9               	movwf	i1_display_update$1550
 10420  0784  3000               	movlw	0
 10421  0785  00AA               	movwf	i1_display_update$1550+1
 10422  0786                     i1l3323:	
 10423  0786  300A               	movlw	10
 10424  0787  00F0               	movwf	i1___awmod@divisor
 10425  0788  3000               	movlw	0
 10426  0789  00F1               	movwf	i1___awmod@divisor+1
 10427  078A  082B               	movf	i1display_update@pdata,w
 10428  078B  3E03               	addlw	3
 10429  078C  0086               	movwf	6
 10430  078D  3002               	movlw	2	; select bank4/5
 10431  078E  0087               	movwf	7
 10432  078F  0801               	movf	1,w
 10433  0790  00A0               	movwf	??i1_display_update
 10434  0791  01A1               	clrf	??i1_display_update+1
 10435  0792  0820               	movf	??i1_display_update,w
 10436  0793  00F2               	movwf	i1___awmod@dividend
 10437  0794  0821               	movf	??i1_display_update+1,w
 10438  0795  00F3               	movwf	i1___awmod@dividend+1
 10439  0796  318A  22CF  3187   	fcall	i1___awmod
 10440  0799  0871               	movf	?i1___awmod+1,w
 10441  079A  0085               	movwf	5
 10442  079B  0870               	movf	?i1___awmod,w
 10443  079C  0084               	movwf	4
 10444  079D  3000               	movlw	low (_segmcode| (0+32768))
 10445  079E  0784               	addwf	4,f
 10446  079F  3090               	movlw	high (_segmcode| (0+32768))
 10447  07A0  3D85               	addwfc	5,f
 10448  07A1  0800               	movf	0,w	;code access
 10449  07A2  0020               	movlb	0	; select bank0
 10450  07A3  00A2               	movwf	??i1_display_update+2
 10451  07A4  0822               	movf	??i1_display_update+2,w
 10452  07A5  00F9               	movwf	i1display_write_once@HR
 10453  07A6  300A               	movlw	10
 10454  07A7  00F0               	movwf	i1___awdiv@divisor
 10455  07A8  3000               	movlw	0
 10456  07A9  00F1               	movwf	i1___awdiv@divisor+1
 10457  07AA  082B               	movf	i1display_update@pdata,w
 10458  07AB  3E04               	addlw	4
 10459  07AC  0086               	movwf	6
 10460  07AD  3002               	movlw	2	; select bank4/5
 10461  07AE  0087               	movwf	7
 10462  07AF  0801               	movf	1,w
 10463  07B0  00A3               	movwf	??i1_display_update+3
 10464  07B1  01A4               	clrf	??i1_display_update+4
 10465  07B2  0823               	movf	??i1_display_update+3,w
 10466  07B3  00F2               	movwf	i1___awdiv@dividend
 10467  07B4  0824               	movf	??i1_display_update+4,w
 10468  07B5  00F3               	movwf	i1___awdiv@dividend+1
 10469  07B6  318B  239F  3187   	fcall	i1___awdiv
 10470  07B9  0871               	movf	?i1___awdiv+1,w
 10471  07BA  0085               	movwf	5
 10472  07BB  0870               	movf	?i1___awdiv,w
 10473  07BC  0084               	movwf	4
 10474  07BD  3000               	movlw	low (_segmcode| (0+32768))
 10475  07BE  0784               	addwf	4,f
 10476  07BF  3090               	movlw	high (_segmcode| (0+32768))
 10477  07C0  3D85               	addwfc	5,f
 10478  07C1  0800               	movf	0,w	;code access
 10479  07C2  0020               	movlb	0	; select bank0
 10480  07C3  00A5               	movwf	??i1_display_update+5
 10481  07C4  0825               	movf	??i1_display_update+5,w
 10482  07C5  00FA               	movwf	i1display_write_once@ML
 10483  07C6  300A               	movlw	10
 10484  07C7  00F0               	movwf	i1___awmod@divisor
 10485  07C8  3000               	movlw	0
 10486  07C9  00F1               	movwf	i1___awmod@divisor+1
 10487  07CA  082B               	movf	i1display_update@pdata,w
 10488  07CB  3E04               	addlw	4
 10489  07CC  0086               	movwf	6
 10490  07CD  3002               	movlw	2	; select bank4/5
 10491  07CE  0087               	movwf	7
 10492  07CF  0801               	movf	1,w
 10493  07D0  00A6               	movwf	??i1_display_update+6
 10494  07D1  01A7               	clrf	??i1_display_update+7
 10495  07D2  0826               	movf	??i1_display_update+6,w
 10496  07D3  00F2               	movwf	i1___awmod@dividend
 10497  07D4  0827               	movf	??i1_display_update+7,w
 10498  07D5  00F3               	movwf	i1___awmod@dividend+1
 10499  07D6  318A  22CF  3187   	fcall	i1___awmod
 10500  07D9  0871               	movf	?i1___awmod+1,w
 10501  07DA  0085               	movwf	5
 10502  07DB  0870               	movf	?i1___awmod,w
 10503  07DC  0084               	movwf	4
 10504  07DD  3000               	movlw	low (_segmcode| (0+32768))
 10505  07DE  0784               	addwf	4,f
 10506  07DF  3090               	movlw	high (_segmcode| (0+32768))
 10507  07E0  3D85               	addwfc	5,f
 10508  07E1  0800               	movf	0,w	;code access
 10509  07E2  0020               	movlb	0	; select bank0
 10510  07E3  00A8               	movwf	??i1_display_update+8
 10511  07E4  0828               	movf	??i1_display_update+8,w
 10512  07E5  00FB               	movwf	i1display_write_once@MR
 10513  07E6  082A               	movf	i1_display_update$1550+1,w
 10514  07E7  0085               	movwf	5
 10515  07E8  0829               	movf	i1_display_update$1550,w
 10516  07E9  0084               	movwf	4
 10517  07EA  3000               	movlw	low (_segmcode| (0+32768))
 10518  07EB  0784               	addwf	4,f
 10519  07EC  3090               	movlw	high (_segmcode| (0+32768))
 10520  07ED  3D85               	addwfc	5,f
 10521  07EE  0800               	movf	0,w	;code access
 10522  07EF  3189  21BD         	fcall	i1_display_write_once
 10523  07F1  0008               	return
 10524  07F2                     __end_ofi1_display_update:	
 10525                           
 10526                           	psect	text52
 10527  09BD                     __ptext52:	
 10528 ;; *************** function i1_display_write_once *****************
 10529 ;; Defined at:
 10530 ;;		line 56 in file "display.c"
 10531 ;; Parameters:    Size  Location     Type
 10532 ;;  HL              1    wreg     unsigned char 
 10533 ;;  HR              1    9[COMMON] unsigned char 
 10534 ;;  ML              1   10[COMMON] unsigned char 
 10535 ;;  MR              1   11[COMMON] unsigned char 
 10536 ;; Auto vars:     Size  Location     Type
 10537 ;;  HL              1   12[COMMON] unsigned char 
 10538 ;; Return value:  Size  Location     Type
 10539 ;;                  1    wreg      void 
 10540 ;; Registers used:
 10541 ;;		wreg, status,2, status,0, pclath, cstack
 10542 ;; Tracked objects:
 10543 ;;		On entry : 0/0
 10544 ;;		On exit  : 0/0
 10545 ;;		Unchanged: 0/0
 10546 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10547 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10548 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10549 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10550 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10551 ;;Total ram usage:        4 bytes
 10552 ;; Hardware stack levels used:    1
 10553 ;; Hardware stack levels required when called:    2
 10554 ;; This function calls:
 10555 ;;		i1_display_control595_delay
 10556 ;;		i1_display_write_byte
 10557 ;; This function is called by:
 10558 ;;		i1_display_update
 10559 ;; This function uses a non-reentrant model
 10560 ;;
 10561                           
 10562                           
 10563                           ;psect for function i1_display_write_once
 10564  09BD                     i1_display_write_once:	
 10565                           
 10566                           ;incstack = 0
 10567                           ; Regs used in i1_display_write_once: [wreg+status,2+status,0+pclath+cstack]
 10568                           ;i1display_write_once@HL stored from wreg
 10569  09BD  00FC               	movwf	i1display_write_once@HL
 10570                           
 10571                           ;display.c: 58:     display_write_byte(HL);
 10572  09BE  087C               	movf	i1display_write_once@HL,w
 10573  09BF  318A  224E  3189   	fcall	i1_display_write_byte
 10574                           
 10575                           ;display.c: 59:     display_write_byte(HR);
 10576  09C2  0879               	movf	i1display_write_once@HR,w
 10577  09C3  318A  224E  3189   	fcall	i1_display_write_byte
 10578                           
 10579                           ;display.c: 60:     display_write_byte(ML);
 10580  09C6  087A               	movf	i1display_write_once@ML,w
 10581  09C7  318A  224E  3189   	fcall	i1_display_write_byte
 10582                           
 10583                           ;display.c: 61:     display_write_byte(MR);
 10584  09CA  087B               	movf	i1display_write_once@MR,w
 10585  09CB  318A  224E  3189   	fcall	i1_display_write_byte
 10586                           
 10587                           ;display.c: 64:     LATBbits.LATB0 = PIN_LOW;
 10588  09CE  0022               	movlb	2	; select bank2
 10589  09CF  100D               	bcf	13,0	;volatile
 10590                           
 10591                           ;display.c: 65:     display_control595_delay();
 10592  09D0  3188  207C  3189   	fcall	i1_display_control595_delay
 10593                           
 10594                           ;display.c: 66:     LATBbits.LATB0 = PIN_HIGH;
 10595  09D3  0022               	movlb	2	; select bank2
 10596  09D4  140D               	bsf	13,0	;volatile
 10597                           
 10598                           ;display.c: 67:     display_control595_delay();
 10599  09D5  3188  207C  3189   	fcall	i1_display_control595_delay
 10600                           
 10601                           ;display.c: 69:     LATBbits.LATB1 = PIN_HIGH;
 10602  09D8  0022               	movlb	2	; select bank2
 10603  09D9  148D               	bsf	13,1	;volatile
 10604                           
 10605                           ;display.c: 70:  display_control595_delay();
 10606  09DA  3188  207C         	fcall	i1_display_control595_delay
 10607                           
 10608                           ;display.c: 71:     LATBbits.LATB1 = PIN_LOW;
 10609  09DC  0022               	movlb	2	; select bank2
 10610  09DD  108D               	bcf	13,1	;volatile
 10611  09DE  0008               	return
 10612  09DF                     __end_ofi1_display_write_once:	
 10613                           
 10614                           	psect	text53
 10615  0A4E                     __ptext53:	
 10616 ;; *************** function i1_display_write_byte *****************
 10617 ;; Defined at:
 10618 ;;		line 44 in file "display.c"
 10619 ;; Parameters:    Size  Location     Type
 10620 ;;  data            1    wreg     unsigned char 
 10621 ;; Auto vars:     Size  Location     Type
 10622 ;;  data            1    4[COMMON] unsigned char 
 10623 ;;  display_writ    1    5[COMMON] unsigned char 
 10624 ;; Return value:  Size  Location     Type
 10625 ;;                  1    wreg      void 
 10626 ;; Registers used:
 10627 ;;		wreg, status,2, status,0, pclath, cstack
 10628 ;; Tracked objects:
 10629 ;;		On entry : 0/0
 10630 ;;		On exit  : 0/0
 10631 ;;		Unchanged: 0/0
 10632 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10633 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10634 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10635 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10636 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10637 ;;Total ram usage:        4 bytes
 10638 ;; Hardware stack levels used:    1
 10639 ;; Hardware stack levels required when called:    1
 10640 ;; This function calls:
 10641 ;;		i1_display_control595_delay
 10642 ;; This function is called by:
 10643 ;;		i1_display_write_once
 10644 ;; This function uses a non-reentrant model
 10645 ;;
 10646                           
 10647                           
 10648                           ;psect for function i1_display_write_byte
 10649  0A4E                     i1_display_write_byte:	
 10650                           
 10651                           ;incstack = 0
 10652                           ; Regs used in i1_display_write_byte: [wreg+status,2+status,0+pclath+cstack]
 10653                           ;i1display_write_byte@data stored from wreg
 10654  0A4E  00F4               	movwf	i1display_write_byte@data
 10655                           
 10656                           ;display.c: 45:     u8 i;;display.c: 46:     for(i = 0; i < 8; i++){
 10657  0A4F  01F5               	clrf	i1display_write_byte@i
 10658  0A50                     i1l2873:	
 10659                           
 10660                           ;display.c: 47:   LATBbits.LATB5 = (data & 0x80) >> 7;
 10661  0A50  0874               	movf	i1display_write_byte@data,w
 10662  0A51  00F2               	movwf	??i1_display_write_byte
 10663  0A52  3007               	movlw	7
 10664  0A53                     u242_25:	
 10665  0A53  36F2               	lsrf	??i1_display_write_byte,f
 10666  0A54  0B89               	decfsz	9,f
 10667  0A55  2A53               	goto	u242_25
 10668  0A56  0872               	movf	??i1_display_write_byte,w
 10669  0A57  3901               	andlw	1
 10670  0A58  00F3               	movwf	??i1_display_write_byte+1
 10671  0A59  0EF3               	swapf	??i1_display_write_byte+1,f
 10672  0A5A  0DF3               	rlf	??i1_display_write_byte+1,f
 10673  0A5B  0022               	movlb	2	; select bank2
 10674  0A5C  080D               	movf	13,w	;volatile
 10675  0A5D  0673               	xorwf	??i1_display_write_byte+1,w
 10676  0A5E  39DF               	andlw	-33
 10677  0A5F  0673               	xorwf	??i1_display_write_byte+1,w
 10678  0A60  008D               	movwf	13	;volatile
 10679                           
 10680                           ;display.c: 48:         LATBbits.LATB0 = PIN_LOW;
 10681  0A61  100D               	bcf	13,0	;volatile
 10682                           
 10683                           ;display.c: 49:   display_control595_delay();
 10684  0A62  3188  207C  318A   	fcall	i1_display_control595_delay
 10685                           
 10686                           ;display.c: 50:         LATBbits.LATB0 = PIN_HIGH;
 10687  0A65  0022               	movlb	2	; select bank2
 10688  0A66  140D               	bsf	13,0	;volatile
 10689                           
 10690                           ;display.c: 51:   display_control595_delay();
 10691  0A67  3188  207C  318A   	fcall	i1_display_control595_delay
 10692                           
 10693                           ;display.c: 52:         data <<= 1;
 10694  0A6A  1003               	clrc
 10695  0A6B  0DF4               	rlf	i1display_write_byte@data,f
 10696                           
 10697                           ;display.c: 53:     }
 10698  0A6C  3001               	movlw	1
 10699  0A6D  00F2               	movwf	??i1_display_write_byte
 10700  0A6E  0872               	movf	??i1_display_write_byte,w
 10701  0A6F  07F5               	addwf	i1display_write_byte@i,f
 10702  0A70  3008               	movlw	8
 10703  0A71  0275               	subwf	i1display_write_byte@i,w
 10704  0A72  1803               	btfsc	3,0
 10705  0A73  0008               	return
 10706  0A74  2A50               	goto	i1l2873
 10707  0A75                     __end_ofi1_display_write_byte:	
 10708                           
 10709                           	psect	text54
 10710  087C                     __ptext54:	
 10711 ;; *************** function i1_display_control595_delay *****************
 10712 ;; Defined at:
 10713 ;;		line 28 in file "display.c"
 10714 ;; Parameters:    Size  Location     Type
 10715 ;;		None
 10716 ;; Auto vars:     Size  Location     Type
 10717 ;;  display_cont    1    1[COMMON] unsigned char 
 10718 ;; Return value:  Size  Location     Type
 10719 ;;                  1    wreg      void 
 10720 ;; Registers used:
 10721 ;;		wreg, status,2, status,0
 10722 ;; Tracked objects:
 10723 ;;		On entry : 0/0
 10724 ;;		On exit  : 0/0
 10725 ;;		Unchanged: 0/0
 10726 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10727 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10728 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10729 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10730 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10731 ;;Total ram usage:        2 bytes
 10732 ;; Hardware stack levels used:    1
 10733 ;; This function calls:
 10734 ;;		Nothing
 10735 ;; This function is called by:
 10736 ;;		i1_display_write_byte
 10737 ;;		i1_display_write_once
 10738 ;; This function uses a non-reentrant model
 10739 ;;
 10740                           
 10741                           
 10742                           ;psect for function i1_display_control595_delay
 10743  087C                     i1_display_control595_delay:	
 10744                           
 10745                           ;display.c: 29:    u8 times = 10;
 10746                           
 10747                           ;incstack = 0
 10748                           ; Regs used in i1_display_control595_delay: [wreg+status,2+status,0]
 10749  087C  300A               	movlw	10
 10750  087D  00F0               	movwf	??i1_display_control595_delay
 10751  087E  0870               	movf	??i1_display_control595_delay,w
 10752  087F  00F1               	movwf	i1display_control595_delay@times
 10753  0880                     i1l556:	
 10754                           ;display.c: 33:    }
 10755                           
 10756                           ;display.c: 30:    while(times > 0){
 10757                           
 10758                           
 10759                           ;display.c: 30:    while(times > 0){
 10760  0880  0871               	movf	i1display_control595_delay@times,w
 10761  0881  1903               	btfsc	3,2
 10762  0882  0008               	return
 10763                           
 10764                           ;display.c: 31:     __nop();
 10765  0883  0000               	nop
 10766                           
 10767                           ;display.c: 32:        times--;
 10768  0884  3001               	movlw	1
 10769  0885  02F1               	subwf	i1display_control595_delay@times,f
 10770  0886  2880               	goto	i1l556
 10771  0887                     __end_ofi1_display_control595_delay:	
 10772                           
 10773                           	psect	text55
 10774  0ACF                     __ptext55:	
 10775 ;; *************** function i1___awmod *****************
 10776 ;; Defined at:
 10777 ;;		line 5 in file "E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\awmod.c"
 10778 ;; Parameters:    Size  Location     Type
 10779 ;;  divisor         2    0[COMMON] int 
 10780 ;;  dividend        2    2[COMMON] int 
 10781 ;; Auto vars:     Size  Location     Type
 10782 ;;  __awmod         1    6[COMMON] unsigned char 
 10783 ;;  __awmod         1    5[COMMON] unsigned char 
 10784 ;; Return value:  Size  Location     Type
 10785 ;;                  2    0[COMMON] int 
 10786 ;; Registers used:
 10787 ;;		wreg, status,2, status,0
 10788 ;; Tracked objects:
 10789 ;;		On entry : 0/0
 10790 ;;		On exit  : 0/0
 10791 ;;		Unchanged: 0/0
 10792 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10793 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10794 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10795 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10796 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10797 ;;Total ram usage:        7 bytes
 10798 ;; Hardware stack levels used:    1
 10799 ;; This function calls:
 10800 ;;		Nothing
 10801 ;; This function is called by:
 10802 ;;		_update_time
 10803 ;;		i1_display_update
 10804 ;; This function uses a non-reentrant model
 10805 ;;
 10806                           
 10807                           
 10808                           ;psect for function i1___awmod
 10809  0ACF                     i1___awmod:	
 10810                           
 10811                           ;incstack = 0
 10812                           ; Regs used in i1___awmod: [wreg+status,2+status,0]
 10813  0ACF  01F6               	clrf	i1___awmod@sign
 10814  0AD0  1FF3               	btfss	i1___awmod@dividend+1,7
 10815  0AD1  2AD9               	goto	i1l3087
 10816  0AD2  09F2               	comf	i1___awmod@dividend,f
 10817  0AD3  09F3               	comf	i1___awmod@dividend+1,f
 10818  0AD4  0AF2               	incf	i1___awmod@dividend,f
 10819  0AD5  1903               	skipnz
 10820  0AD6  0AF3               	incf	i1___awmod@dividend+1,f
 10821  0AD7  01F6               	clrf	i1___awmod@sign
 10822  0AD8  0AF6               	incf	i1___awmod@sign,f
 10823  0AD9                     i1l3087:	
 10824  0AD9  1FF1               	btfss	i1___awmod@divisor+1,7
 10825  0ADA  2AE0               	goto	i1l3091
 10826  0ADB  09F0               	comf	i1___awmod@divisor,f
 10827  0ADC  09F1               	comf	i1___awmod@divisor+1,f
 10828  0ADD  0AF0               	incf	i1___awmod@divisor,f
 10829  0ADE  1903               	skipnz
 10830  0ADF  0AF1               	incf	i1___awmod@divisor+1,f
 10831  0AE0                     i1l3091:	
 10832  0AE0  0870               	movf	i1___awmod@divisor,w
 10833  0AE1  0471               	iorwf	i1___awmod@divisor+1,w
 10834  0AE2  1903               	btfsc	3,2
 10835  0AE3  2B07               	goto	i1l3109
 10836  0AE4  01F5               	clrf	i1___awmod@counter
 10837  0AE5  0AF5               	incf	i1___awmod@counter,f
 10838  0AE6                     i1l3099:	
 10839  0AE6  1BF1               	btfsc	i1___awmod@divisor+1,7
 10840  0AE7  2AF2               	goto	i1l3101
 10841  0AE8  3001               	movlw	1
 10842  0AE9                     u286_25:	
 10843  0AE9  35F0               	lslf	i1___awmod@divisor,f
 10844  0AEA  0DF1               	rlf	i1___awmod@divisor+1,f
 10845  0AEB  0B89               	decfsz	9,f
 10846  0AEC  2AE9               	goto	u286_25
 10847  0AED  3001               	movlw	1
 10848  0AEE  00F4               	movwf	??i1___awmod
 10849  0AEF  0874               	movf	??i1___awmod,w
 10850  0AF0  07F5               	addwf	i1___awmod@counter,f
 10851  0AF1  2AE6               	goto	i1l3099
 10852  0AF2                     i1l3101:	
 10853  0AF2  0871               	movf	i1___awmod@divisor+1,w
 10854  0AF3  0273               	subwf	i1___awmod@dividend+1,w
 10855  0AF4  1D03               	skipz
 10856  0AF5  2AF8               	goto	u288_25
 10857  0AF6  0870               	movf	i1___awmod@divisor,w
 10858  0AF7  0272               	subwf	i1___awmod@dividend,w
 10859  0AF8                     u288_25:	
 10860  0AF8  1C03               	skipc
 10861  0AF9  2AFE               	goto	i1l3105
 10862  0AFA  0870               	movf	i1___awmod@divisor,w
 10863  0AFB  02F2               	subwf	i1___awmod@dividend,f
 10864  0AFC  0871               	movf	i1___awmod@divisor+1,w
 10865  0AFD  3BF3               	subwfb	i1___awmod@dividend+1,f
 10866  0AFE                     i1l3105:	
 10867  0AFE  3001               	movlw	1
 10868  0AFF                     u289_25:	
 10869  0AFF  36F1               	lsrf	i1___awmod@divisor+1,f
 10870  0B00  0CF0               	rrf	i1___awmod@divisor,f
 10871  0B01  0B89               	decfsz	9,f
 10872  0B02  2AFF               	goto	u289_25
 10873  0B03  3001               	movlw	1
 10874  0B04  02F5               	subwf	i1___awmod@counter,f
 10875  0B05  1D03               	btfss	3,2
 10876  0B06  2AF2               	goto	i1l3101
 10877  0B07                     i1l3109:	
 10878  0B07  0876               	movf	i1___awmod@sign,w
 10879  0B08  1903               	btfsc	3,2
 10880  0B09  2B0F               	goto	i1l3113
 10881  0B0A  09F2               	comf	i1___awmod@dividend,f
 10882  0B0B  09F3               	comf	i1___awmod@dividend+1,f
 10883  0B0C  0AF2               	incf	i1___awmod@dividend,f
 10884  0B0D  1903               	skipnz
 10885  0B0E  0AF3               	incf	i1___awmod@dividend+1,f
 10886  0B0F                     i1l3113:	
 10887  0B0F  0873               	movf	i1___awmod@dividend+1,w
 10888  0B10  00F1               	movwf	?i1___awmod+1
 10889  0B11  0872               	movf	i1___awmod@dividend,w
 10890  0B12  00F0               	movwf	?i1___awmod
 10891  0B13  0008               	return
 10892  0B14                     __end_ofi1___awmod:	
 10893                           
 10894                           	psect	text56
 10895  0B9F                     __ptext56:	
 10896 ;; *************** function i1___awdiv *****************
 10897 ;; Defined at:
 10898 ;;		line 5 in file "E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\awdiv.c"
 10899 ;; Parameters:    Size  Location     Type
 10900 ;;  divisor         2    0[COMMON] int 
 10901 ;;  dividend        2    2[COMMON] int 
 10902 ;; Auto vars:     Size  Location     Type
 10903 ;;  __awdiv         2    7[COMMON] int 
 10904 ;;  __awdiv         1    6[COMMON] unsigned char 
 10905 ;;  __awdiv         1    5[COMMON] unsigned char 
 10906 ;; Return value:  Size  Location     Type
 10907 ;;                  2    0[COMMON] int 
 10908 ;; Registers used:
 10909 ;;		wreg, status,2, status,0
 10910 ;; Tracked objects:
 10911 ;;		On entry : 0/0
 10912 ;;		On exit  : 0/0
 10913 ;;		Unchanged: 0/0
 10914 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10915 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10916 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10917 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10918 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10919 ;;Total ram usage:        9 bytes
 10920 ;; Hardware stack levels used:    1
 10921 ;; This function calls:
 10922 ;;		Nothing
 10923 ;; This function is called by:
 10924 ;;		i1_display_update
 10925 ;; This function uses a non-reentrant model
 10926 ;;
 10927                           
 10928                           
 10929                           ;psect for function i1___awdiv
 10930  0B9F                     i1___awdiv:	
 10931                           
 10932                           ;incstack = 0
 10933                           ; Regs used in i1___awdiv: [wreg+status,2+status,0]
 10934  0B9F  01F6               	clrf	i1___awdiv@sign
 10935  0BA0  1FF1               	btfss	i1___awdiv@divisor+1,7
 10936  0BA1  2BA9               	goto	i1l3043
 10937  0BA2  09F0               	comf	i1___awdiv@divisor,f
 10938  0BA3  09F1               	comf	i1___awdiv@divisor+1,f
 10939  0BA4  0AF0               	incf	i1___awdiv@divisor,f
 10940  0BA5  1903               	skipnz
 10941  0BA6  0AF1               	incf	i1___awdiv@divisor+1,f
 10942  0BA7  01F6               	clrf	i1___awdiv@sign
 10943  0BA8  0AF6               	incf	i1___awdiv@sign,f
 10944  0BA9                     i1l3043:	
 10945  0BA9  1FF3               	btfss	i1___awdiv@dividend+1,7
 10946  0BAA  2BB4               	goto	i1l3049
 10947  0BAB  09F2               	comf	i1___awdiv@dividend,f
 10948  0BAC  09F3               	comf	i1___awdiv@dividend+1,f
 10949  0BAD  0AF2               	incf	i1___awdiv@dividend,f
 10950  0BAE  1903               	skipnz
 10951  0BAF  0AF3               	incf	i1___awdiv@dividend+1,f
 10952  0BB0  3001               	movlw	1
 10953  0BB1  00F4               	movwf	??i1___awdiv
 10954  0BB2  0874               	movf	??i1___awdiv,w
 10955  0BB3  06F6               	xorwf	i1___awdiv@sign,f
 10956  0BB4                     i1l3049:	
 10957  0BB4  01F7               	clrf	i1___awdiv@quotient
 10958  0BB5  01F8               	clrf	i1___awdiv@quotient+1
 10959  0BB6  0870               	movf	i1___awdiv@divisor,w
 10960  0BB7  0471               	iorwf	i1___awdiv@divisor+1,w
 10961  0BB8  1903               	btfsc	3,2
 10962  0BB9  2BE3               	goto	i1l3071
 10963  0BBA  01F5               	clrf	i1___awdiv@counter
 10964  0BBB  0AF5               	incf	i1___awdiv@counter,f
 10965  0BBC                     i1l3059:	
 10966  0BBC  1BF1               	btfsc	i1___awdiv@divisor+1,7
 10967  0BBD  2BC8               	goto	i1l3061
 10968  0BBE  3001               	movlw	1
 10969  0BBF                     u276_25:	
 10970  0BBF  35F0               	lslf	i1___awdiv@divisor,f
 10971  0BC0  0DF1               	rlf	i1___awdiv@divisor+1,f
 10972  0BC1  0B89               	decfsz	9,f
 10973  0BC2  2BBF               	goto	u276_25
 10974  0BC3  3001               	movlw	1
 10975  0BC4  00F4               	movwf	??i1___awdiv
 10976  0BC5  0874               	movf	??i1___awdiv,w
 10977  0BC6  07F5               	addwf	i1___awdiv@counter,f
 10978  0BC7  2BBC               	goto	i1l3059
 10979  0BC8                     i1l3061:	
 10980  0BC8  3001               	movlw	1
 10981  0BC9                     u278_25:	
 10982  0BC9  35F7               	lslf	i1___awdiv@quotient,f
 10983  0BCA  0DF8               	rlf	i1___awdiv@quotient+1,f
 10984  0BCB  0B89               	decfsz	9,f
 10985  0BCC  2BC9               	goto	u278_25
 10986  0BCD  0871               	movf	i1___awdiv@divisor+1,w
 10987  0BCE  0273               	subwf	i1___awdiv@dividend+1,w
 10988  0BCF  1D03               	skipz
 10989  0BD0  2BD3               	goto	u279_25
 10990  0BD1  0870               	movf	i1___awdiv@divisor,w
 10991  0BD2  0272               	subwf	i1___awdiv@dividend,w
 10992  0BD3                     u279_25:	
 10993  0BD3  1C03               	skipc
 10994  0BD4  2BDA               	goto	i1l3067
 10995  0BD5  0870               	movf	i1___awdiv@divisor,w
 10996  0BD6  02F2               	subwf	i1___awdiv@dividend,f
 10997  0BD7  0871               	movf	i1___awdiv@divisor+1,w
 10998  0BD8  3BF3               	subwfb	i1___awdiv@dividend+1,f
 10999  0BD9  1477               	bsf	i1___awdiv@quotient,0
 11000  0BDA                     i1l3067:	
 11001  0BDA  3001               	movlw	1
 11002  0BDB                     u280_25:	
 11003  0BDB  36F1               	lsrf	i1___awdiv@divisor+1,f
 11004  0BDC  0CF0               	rrf	i1___awdiv@divisor,f
 11005  0BDD  0B89               	decfsz	9,f
 11006  0BDE  2BDB               	goto	u280_25
 11007  0BDF  3001               	movlw	1
 11008  0BE0  02F5               	subwf	i1___awdiv@counter,f
 11009  0BE1  1D03               	btfss	3,2
 11010  0BE2  2BC8               	goto	i1l3061
 11011  0BE3                     i1l3071:	
 11012  0BE3  0876               	movf	i1___awdiv@sign,w
 11013  0BE4  1903               	btfsc	3,2
 11014  0BE5  2BEB               	goto	i1l3075
 11015  0BE6  09F7               	comf	i1___awdiv@quotient,f
 11016  0BE7  09F8               	comf	i1___awdiv@quotient+1,f
 11017  0BE8  0AF7               	incf	i1___awdiv@quotient,f
 11018  0BE9  1903               	skipnz
 11019  0BEA  0AF8               	incf	i1___awdiv@quotient+1,f
 11020  0BEB                     i1l3075:	
 11021  0BEB  0878               	movf	i1___awdiv@quotient+1,w
 11022  0BEC  00F1               	movwf	?i1___awdiv+1
 11023  0BED  0877               	movf	i1___awdiv@quotient,w
 11024  0BEE  00F0               	movwf	?i1___awdiv
 11025  0BEF  0008               	return
 11026  0BF0                     __end_ofi1___awdiv:	
 11027                           
 11028                           	psect	text57
 11029  089D                     __ptext57:	
 11030 ;; *************** function i1_capture_Set *****************
 11031 ;; Defined at:
 11032 ;;		line 38 in file "hardware.c"
 11033 ;; Parameters:    Size  Location     Type
 11034 ;;  isON            1    wreg     unsigned char 
 11035 ;; Auto vars:     Size  Location     Type
 11036 ;;  isON            1    0[COMMON] unsigned char 
 11037 ;; Return value:  Size  Location     Type
 11038 ;;                  1    wreg      unsigned char 
 11039 ;; Registers used:
 11040 ;;		wreg, status,2, status,0
 11041 ;; Tracked objects:
 11042 ;;		On entry : 0/0
 11043 ;;		On exit  : 0/0
 11044 ;;		Unchanged: 0/0
 11045 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11046 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11047 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11048 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11049 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11050 ;;Total ram usage:        1 bytes
 11051 ;; Hardware stack levels used:    1
 11052 ;; This function calls:
 11053 ;;		Nothing
 11054 ;; This function is called by:
 11055 ;;		_ISR
 11056 ;;		_bpc_proc
 11057 ;;		_update_time
 11058 ;; This function uses a non-reentrant model
 11059 ;;
 11060                           
 11061                           
 11062                           ;psect for function i1_capture_Set
 11063  089D                     i1_capture_Set:	
 11064                           
 11065                           ;incstack = 0
 11066                           ; Regs used in i1_capture_Set: [wreg+status,2+status,0]
 11067                           ;i1capture_Set@isON stored from wreg
 11068  089D  00F0               	movwf	i1capture_Set@isON
 11069                           
 11070                           ;hardware.c: 38: u8 capture_Set(u8 isON);hardware.c: 39: {;hardware.c: 42:     PIR2bits.
      +                          CCP2IF = 0;
 11071  089E  0020               	movlb	0	; select bank0
 11072  089F  1012               	bcf	18,0	;volatile
 11073                           
 11074                           ;hardware.c: 45:     PIE2bits.CCP2IE = (isON)? 1 : 0;
 11075  08A0  0870               	movf	i1capture_Set@isON,w
 11076  08A1  1903               	btfsc	3,2
 11077  08A2  28A6               	goto	u319_20
 11078  08A3  0021               	movlb	1	; select bank1
 11079  08A4  1412               	bsf	18,0	;volatile
 11080  08A5  0008               	return
 11081  08A6                     u319_20:	
 11082  08A6  0021               	movlb	1	; select bank1
 11083  08A7  1012               	bcf	18,0	;volatile
 11084  08A8  0008               	return
 11085  08A9                     __end_ofi1_capture_Set:	
 11086                           
 11087                           	psect	text58
 11088  057A                     __ptext58:	
 11089 ;; *************** function _check_err *****************
 11090 ;; Defined at:
 11091 ;;		line 50 in file "bpc.c"
 11092 ;; Parameters:    Size  Location     Type
 11093 ;;  pdata           1    wreg     PTR volatile struct .
 11094 ;;		 -> g_data(39), 
 11095 ;; Auto vars:     Size  Location     Type
 11096 ;;  pdata           1   10[BANK0 ] PTR volatile struct .
 11097 ;;		 -> g_data(39), 
 11098 ;;  i               1    8[BANK0 ] unsigned char 
 11099 ;;  check           1    9[BANK0 ] unsigned char 
 11100 ;; Return value:  Size  Location     Type
 11101 ;;                  2    0[COMMON] int 
 11102 ;; Registers used:
 11103 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 11104 ;; Tracked objects:
 11105 ;;		On entry : 0/0
 11106 ;;		On exit  : 0/0
 11107 ;;		Unchanged: 0/0
 11108 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11109 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11110 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11111 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11112 ;;      Totals:         5      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11113 ;;Total ram usage:       16 bytes
 11114 ;; Hardware stack levels used:    1
 11115 ;; This function calls:
 11116 ;;		Nothing
 11117 ;; This function is called by:
 11118 ;;		_bpc_proc
 11119 ;; This function uses a non-reentrant model
 11120 ;;
 11121                           
 11122                           
 11123                           ;psect for function _check_err
 11124  057A                     _check_err:	
 11125                           
 11126                           ;incstack = 0
 11127                           ; Regs used in _check_err: [wreg-fsr1h+status,2+status,0]
 11128                           ;check_err@pdata stored from wreg
 11129  057A  0020               	movlb	0	; select bank0
 11130  057B  00AA               	movwf	check_err@pdata
 11131                           
 11132                           ;bpc.c: 50: static int check_err(G_DATA *pdata);bpc.c: 51: {;bpc.c: 53:     pdata->g_tim
      +                          e_h = pdata->g_recv_buf[CODE_H_1] * 4 + pdata->g_recv_buf[CODE_H_2];
 11133  057C  082A               	movf	check_err@pdata,w
 11134  057D  3E11               	addlw	17
 11135  057E  0086               	movwf	6
 11136  057F  3002               	movlw	2	; select bank4/5
 11137  0580  0087               	movwf	7
 11138  0581  082A               	movf	check_err@pdata,w
 11139  0582  3E10               	addlw	16
 11140  0583  0084               	movwf	4
 11141  0584  3002               	movlw	2	; select bank4/5
 11142  0585  0085               	movwf	5
 11143  0586  0800               	movf	0,w
 11144  0587  00F2               	movwf	??_check_err
 11145  0588  3001               	movlw	1
 11146  0589                     u345_25:	
 11147  0589  35F2               	lslf	??_check_err,f
 11148  058A  3EFF               	addlw	-1
 11149  058B  1D03               	skipz
 11150  058C  2D89               	goto	u345_25
 11151  058D  3572               	lslf	??_check_err,w
 11152  058E  0701               	addwf	1,w
 11153  058F  00F3               	movwf	??_check_err+1
 11154  0590  082A               	movf	check_err@pdata,w
 11155  0591  3E03               	addlw	3
 11156  0592  0086               	movwf	6
 11157  0593  3002               	movlw	2	; select bank4/5
 11158  0594  0087               	movwf	7
 11159  0595  0873               	movf	??_check_err+1,w
 11160  0596  0081               	movwf	1
 11161                           
 11162                           ;bpc.c: 54:     pdata->g_time_m = pdata->g_recv_buf[CODE_M_1] * 16 + pdata->g_recv_buf[C
      +                          ODE_M_2] * 4 + pdata->g_recv_buf[CODE_M_3];
 11163  0597  082A               	movf	check_err@pdata,w
 11164  0598  3E14               	addlw	20
 11165  0599  0086               	movwf	6
 11166  059A  3002               	movlw	2	; select bank4/5
 11167  059B  0087               	movwf	7
 11168  059C  082A               	movf	check_err@pdata,w
 11169  059D  3E13               	addlw	19
 11170  059E  0084               	movwf	4
 11171  059F  3002               	movlw	2	; select bank4/5
 11172  05A0  0085               	movwf	5
 11173  05A1  0800               	movf	0,w
 11174  05A2  00F2               	movwf	??_check_err
 11175  05A3  3002               	movlw	2
 11176  05A4                     u346_25:	
 11177  05A4  35F2               	lslf	??_check_err,f
 11178  05A5  0B89               	decfsz	9,f
 11179  05A6  2DA4               	goto	u346_25
 11180  05A7  082A               	movf	check_err@pdata,w
 11181  05A8  3E12               	addlw	18
 11182  05A9  0084               	movwf	4
 11183  05AA  3002               	movlw	2	; select bank4/5
 11184  05AB  0085               	movwf	5
 11185  05AC  0800               	movf	0,w
 11186  05AD  00F3               	movwf	??_check_err+1
 11187  05AE  3003               	movlw	3
 11188  05AF                     u347_25:	
 11189  05AF  35F3               	lslf	??_check_err+1,f
 11190  05B0  3EFF               	addlw	-1
 11191  05B1  1D03               	skipz
 11192  05B2  2DAF               	goto	u347_25
 11193  05B3  3573               	lslf	??_check_err+1,w
 11194  05B4  0772               	addwf	??_check_err,w
 11195  05B5  0701               	addwf	1,w
 11196  05B6  00F4               	movwf	??_check_err+2
 11197  05B7  082A               	movf	check_err@pdata,w
 11198  05B8  3E04               	addlw	4
 11199  05B9  0086               	movwf	6
 11200  05BA  3002               	movlw	2	; select bank4/5
 11201  05BB  0087               	movwf	7
 11202  05BC  0874               	movf	??_check_err+2,w
 11203  05BD  0081               	movwf	1
 11204                           
 11205                           ;bpc.c: 55:     pdata->g_time_s = 10 + ((pdata->g_recv_buf[CODE_P1] == 1)? 20: (pdata->g
      +                          _recv_buf[CODE_P1] == 2)? 40: 0);
 11206  05BE  082A               	movf	check_err@pdata,w
 11207  05BF  3E0E               	addlw	14
 11208  05C0  0086               	movwf	6
 11209  05C1  3002               	movlw	2	; select bank4/5
 11210  05C2  0087               	movwf	7
 11211  05C3  0301               	decf	1,w
 11212  05C4  1903               	btfsc	3,2
 11213  05C5  2DDB               	goto	i1l3535
 11214  05C6  082A               	movf	check_err@pdata,w
 11215  05C7  3E0E               	addlw	14
 11216  05C8  0086               	movwf	6
 11217  05C9  3002               	movlw	2	; select bank4/5
 11218  05CA  0087               	movwf	7
 11219  05CB  3002               	movlw	2
 11220  05CC  0601               	xorwf	1,w
 11221  05CD  1903               	btfsc	3,2
 11222  05CE  2DD2               	goto	i1l3533
 11223  05CF  01A2               	clrf	_check_err$1146
 11224  05D0  01A3               	clrf	_check_err$1146+1
 11225  05D1  2DD6               	goto	i1l419
 11226  05D2                     i1l3533:	
 11227  05D2  3028               	movlw	40
 11228  05D3  00A2               	movwf	_check_err$1146
 11229  05D4  3000               	movlw	0
 11230  05D5  00A3               	movwf	_check_err$1146+1
 11231  05D6                     i1l419:	
 11232  05D6  0823               	movf	_check_err$1146+1,w
 11233  05D7  00A1               	movwf	_check_err$1145+1
 11234  05D8  0822               	movf	_check_err$1146,w
 11235  05D9  00A0               	movwf	_check_err$1145
 11236  05DA  2DDF               	goto	i1l3537
 11237  05DB                     i1l3535:	
 11238  05DB  3014               	movlw	20
 11239  05DC  00A0               	movwf	_check_err$1145
 11240  05DD  3000               	movlw	0
 11241  05DE  00A1               	movwf	_check_err$1145+1
 11242  05DF                     i1l3537:	
 11243  05DF  0820               	movf	_check_err$1145,w
 11244  05E0  3E0A               	addlw	10
 11245  05E1  00F2               	movwf	??_check_err
 11246  05E2  082A               	movf	check_err@pdata,w
 11247  05E3  3E05               	addlw	5
 11248  05E4  0086               	movwf	6
 11249  05E5  3002               	movlw	2	; select bank4/5
 11250  05E6  0087               	movwf	7
 11251  05E7  0872               	movf	??_check_err,w
 11252  05E8  0081               	movwf	1
 11253                           
 11254                           ;bpc.c: 57:     u8 check = 0;
 11255  05E9  01A9               	clrf	check_err@check
 11256                           
 11257                           ;bpc.c: 58:     for(u8 i = CODE_P1; i < CODE_P3; i++)
 11258  05EA  01A8               	clrf	check_err@i
 11259  05EB  0AA8               	incf	check_err@i,f
 11260  05EC                     i1l3547:	
 11261                           
 11262                           ;bpc.c: 59:     {;bpc.c: 60:         check ^= pdata->g_recv_buf[i];
 11263  05EC  0828               	movf	check_err@i,w
 11264  05ED  072A               	addwf	check_err@pdata,w
 11265  05EE  00F2               	movwf	??_check_err
 11266  05EF  0872               	movf	??_check_err,w
 11267  05F0  3E0D               	addlw	13
 11268  05F1  0086               	movwf	6
 11269  05F2  3002               	movlw	2	; select bank4/5
 11270  05F3  0087               	movwf	7
 11271  05F4  0801               	movf	1,w
 11272  05F5  00F3               	movwf	??_check_err+1
 11273  05F6  0873               	movf	??_check_err+1,w
 11274  05F7  06A9               	xorwf	check_err@check,f
 11275                           
 11276                           ;bpc.c: 61:     }
 11277  05F8  3001               	movlw	1
 11278  05F9  00F2               	movwf	??_check_err
 11279  05FA  0872               	movf	??_check_err,w
 11280  05FB  07A8               	addwf	check_err@i,f
 11281  05FC  300A               	movlw	10
 11282  05FD  0228               	subwf	check_err@i,w
 11283  05FE  1C03               	skipc
 11284  05FF  2DEC               	goto	i1l3547
 11285                           
 11286                           ;bpc.c: 62:     if( (((0 == check) || (3 == check))) && (pdata->g_recv_buf[CODE_P3] % 2 
      +                          == 0) )
 11287  0600  0829               	movf	check_err@check,w
 11288  0601  1903               	btfsc	3,2
 11289  0602  2E07               	goto	i1l3557
 11290  0603  3003               	movlw	3
 11291  0604  0629               	xorwf	check_err@check,w
 11292  0605  1D03               	btfss	3,2
 11293  0606  2E20               	goto	i1l3567
 11294  0607                     i1l3557:	
 11295  0607  082A               	movf	check_err@pdata,w
 11296  0608  3E17               	addlw	23
 11297  0609  0086               	movwf	6
 11298  060A  3002               	movlw	2	; select bank4/5
 11299  060B  0087               	movwf	7
 11300  060C  1801               	btfsc	1,0
 11301  060D  2E20               	goto	i1l3567
 11302                           
 11303                           ;bpc.c: 63:     {;bpc.c: 64:         pdata->g_time_h += (2 ==pdata->g_recv_buf[CODE_P3])
      +                          ? 12 : 0;
 11304  060E  082A               	movf	check_err@pdata,w
 11305  060F  3E17               	addlw	23
 11306  0610  0086               	movwf	6
 11307  0611  3002               	movlw	2	; select bank4/5
 11308  0612  0087               	movwf	7
 11309  0613  3002               	movlw	2
 11310  0614  0601               	xorwf	1,w
 11311  0615  1903               	btfsc	3,2
 11312  0616  2E1A               	goto	i1l3563
 11313  0617  01A4               	clrf	_check_err$1149
 11314  0618  01A5               	clrf	_check_err$1149+1
 11315  0619  2E1E               	goto	i1l3565
 11316  061A                     i1l3563:	
 11317  061A  300C               	movlw	12
 11318  061B  00A4               	movwf	_check_err$1149
 11319  061C  3000               	movlw	0
 11320  061D  00A5               	movwf	_check_err$1149+1
 11321  061E                     i1l3565:	
 11322  061E  0824               	movf	_check_err$1149,w
 11323  061F  2E49               	goto	L4
 11324  0620                     i1l3567:	
 11325                           ;bpc.c: 65:     }else if( (((1 == check) || (2 == check))) && ((pdata->g_recv_buf[CODE_P
      +                          3] == 1) || (pdata->g_recv_buf[CODE_P3] == 3)) )
 11326                           
 11327  0620  0329               	decf	check_err@check,w
 11328  0621  1903               	btfsc	3,2
 11329  0622  2E27               	goto	i1l3571
 11330  0623  3002               	movlw	2
 11331  0624  0629               	xorwf	check_err@check,w
 11332  0625  1D03               	btfss	3,2
 11333  0626  2E52               	goto	i1l3583
 11334  0627                     i1l3571:	
 11335  0627  082A               	movf	check_err@pdata,w
 11336  0628  3E17               	addlw	23
 11337  0629  0086               	movwf	6
 11338  062A  3002               	movlw	2	; select bank4/5
 11339  062B  0087               	movwf	7
 11340  062C  0301               	decf	1,w
 11341  062D  1903               	btfsc	3,2
 11342  062E  2E38               	goto	i1l3575
 11343  062F  082A               	movf	check_err@pdata,w
 11344  0630  3E17               	addlw	23
 11345  0631  0086               	movwf	6
 11346  0632  3002               	movlw	2	; select bank4/5
 11347  0633  0087               	movwf	7
 11348  0634  3003               	movlw	3
 11349  0635  0601               	xorwf	1,w
 11350  0636  1D03               	btfss	3,2
 11351  0637  2E52               	goto	i1l3583
 11352  0638                     i1l3575:	
 11353                           
 11354                           ;bpc.c: 67:     {;bpc.c: 68:         pdata->g_time_h += (3 ==pdata->g_recv_buf[CODE_P3])
      +                          ? 12 : 0;
 11355  0638  082A               	movf	check_err@pdata,w
 11356  0639  3E17               	addlw	23
 11357  063A  0086               	movwf	6
 11358  063B  3002               	movlw	2	; select bank4/5
 11359  063C  0087               	movwf	7
 11360  063D  3003               	movlw	3
 11361  063E  0601               	xorwf	1,w
 11362  063F  1903               	btfsc	3,2
 11363  0640  2E44               	goto	i1l3579
 11364  0641  01A6               	clrf	_check_err$1150
 11365  0642  01A7               	clrf	_check_err$1150+1
 11366  0643  2E48               	goto	i1l3581
 11367  0644                     i1l3579:	
 11368  0644  300C               	movlw	12
 11369  0645  00A6               	movwf	_check_err$1150
 11370  0646  3000               	movlw	0
 11371  0647  00A7               	movwf	_check_err$1150+1
 11372  0648                     i1l3581:	
 11373  0648  0826               	movf	_check_err$1150,w
 11374  0649                     L4:	
 11375  0649  00F2               	movwf	??_check_err
 11376  064A  082A               	movf	check_err@pdata,w
 11377  064B  3E03               	addlw	3
 11378  064C  0086               	movwf	6
 11379  064D  3002               	movlw	2	; select bank4/5
 11380  064E  0087               	movwf	7
 11381  064F  0872               	movf	??_check_err,w
 11382  0650  0781               	addwf	1,f
 11383                           
 11384                           ;bpc.c: 69:     }
 11385  0651  2E6A               	goto	i1l3593
 11386  0652                     i1l3583:	
 11387                           
 11388                           ;bpc.c: 71:     {;bpc.c: 72:         pdata->g_find_recv_start = FALSE;
 11389  0652  082A               	movf	check_err@pdata,w
 11390  0653  3E02               	addlw	2
 11391  0654  0086               	movwf	6
 11392  0655  3002               	movlw	2	; select bank4/5
 11393  0656  0087               	movwf	7
 11394  0657  0181               	clrf	1
 11395                           
 11396                           ;bpc.c: 73:         pdata->g_isDecoding = 0;
 11397  0658  0A2A               	incf	check_err@pdata,w
 11398  0659  0086               	movwf	6
 11399  065A  3002               	movlw	2	; select bank4/5
 11400  065B  0087               	movwf	7
 11401  065C  0181               	clrf	1
 11402                           
 11403                           ;bpc.c: 74:         pdata->g_recv_count = 0;
 11404  065D  082A               	movf	check_err@pdata,w
 11405  065E  3E0B               	addlw	11
 11406  065F  0086               	movwf	6
 11407  0660  3002               	movlw	2	; select bank4/5
 11408  0661  0087               	movwf	7
 11409  0662  3000               	movlw	0
 11410  0663  3FC0               	movwi [0]fsr1
 11411  0664  3FC1               	movwi [1]fsr1
 11412                           
 11413                           ;bpc.c: 75:         return -1;
 11414  0665  30FF               	movlw	255
 11415  0666  00F0               	movwf	?_check_err
 11416  0667  30FF               	movlw	255
 11417  0668  00F1               	movwf	?_check_err+1
 11418  0669  0008               	return
 11419  066A                     i1l3593:	
 11420                           
 11421                           ;bpc.c: 77:     return 0;
 11422  066A  01F0               	clrf	?_check_err
 11423  066B  01F1               	clrf	?_check_err+1
 11424  066C  0008               	return
 11425  066D                     __end_of_check_err:	
 11426                           
 11427                           	psect	text59
 11428  0D7C                     __ptext59:	
 11429 ;; *************** function _bpc_Cnt2Qua *****************
 11430 ;; Defined at:
 11431 ;;		line 22 in file "bpc.c"
 11432 ;; Parameters:    Size  Location     Type
 11433 ;;		None
 11434 ;; Auto vars:     Size  Location     Type
 11435 ;;  pdata           1    6[COMMON] PTR volatile struct .
 11436 ;;		 -> g_data(39), 
 11437 ;; Return value:  Size  Location     Type
 11438 ;;                  1    wreg      unsigned char 
 11439 ;; Registers used:
 11440 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11441 ;; Tracked objects:
 11442 ;;		On entry : 0/0
 11443 ;;		On exit  : 0/0
 11444 ;;		Unchanged: 0/0
 11445 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11446 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11447 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11448 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11449 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11450 ;;Total ram usage:        3 bytes
 11451 ;; Hardware stack levels used:    1
 11452 ;; Hardware stack levels required when called:    1
 11453 ;; This function calls:
 11454 ;;		_capture_IsNegEdge
 11455 ;;		_cnt_abs
 11456 ;;		i1_data_getdata
 11457 ;; This function is called by:
 11458 ;;		_bpc_proc
 11459 ;; This function uses a non-reentrant model
 11460 ;;
 11461                           
 11462                           
 11463                           ;psect for function _bpc_Cnt2Qua
 11464  0D7C                     _bpc_Cnt2Qua:	
 11465                           
 11466                           ;bpc.c: 24:     G_DATA *pdata = data_getdata();
 11467                           
 11468                           ;incstack = 0
 11469                           ; Regs used in _bpc_Cnt2Qua: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11470  0D7C  3188  2015  318D   	fcall	i1_data_getdata
 11471  0D7F  00F4               	movwf	??_bpc_Cnt2Qua
 11472  0D80  0874               	movf	??_bpc_Cnt2Qua,w
 11473  0D81  00F6               	movwf	bpc_Cnt2Qua@pdata
 11474                           
 11475                           ;bpc.c: 25:     if(capture_IsNegEdge()){
 11476  0D82  3188  2068  318D   	fcall	_capture_IsNegEdge
 11477  0D85  3A00               	xorlw	0
 11478  0D86  1903               	skipnz
 11479  0D87  2D9C               	goto	i1l3489
 11480                           
 11481                           ;bpc.c: 27:         if(pdata->cnt_low > 31030 - 1550){
 11482  0D88  0876               	movf	bpc_Cnt2Qua@pdata,w
 11483  0D89  3E25               	addlw	37
 11484  0D8A  0086               	movwf	6
 11485  0D8B  3002               	movlw	2	; select bank4/5
 11486  0D8C  0087               	movwf	7
 11487  0D8D  3F40               	moviw [0]fsr1
 11488  0D8E  00F4               	movwf	??_bpc_Cnt2Qua
 11489  0D8F  3F41               	moviw [1]fsr1
 11490  0D90  00F5               	movwf	??_bpc_Cnt2Qua+1
 11491  0D91  3073               	movlw	115
 11492  0D92  0275               	subwf	??_bpc_Cnt2Qua+1,w
 11493  0D93  3029               	movlw	41
 11494  0D94  1903               	skipnz
 11495  0D95  0274               	subwf	??_bpc_Cnt2Qua,w
 11496  0D96  1C03               	skipc
 11497  0D97  2D9A               	goto	i1l3485
 11498                           
 11499                           ;bpc.c: 28:             return 5;
 11500  0D98  3005               	movlw	5
 11501  0D99  0008               	return
 11502  0D9A                     i1l3485:	
 11503                           
 11504                           ;bpc.c: 30:             return 6;
 11505  0D9A  3006               	movlw	6
 11506  0D9B  0008               	return
 11507  0D9C                     i1l3489:	
 11508                           
 11509                           ;bpc.c: 35:         if(cnt_abs(pdata->cnt_high, 3103) < 1550){
 11510  0D9C  0876               	movf	bpc_Cnt2Qua@pdata,w
 11511  0D9D  3E23               	addlw	35
 11512  0D9E  0086               	movwf	6
 11513  0D9F  3002               	movlw	2	; select bank4/5
 11514  0DA0  0087               	movwf	7
 11515  0DA1  3F40               	moviw [0]fsr1
 11516  0DA2  00F0               	movwf	cnt_abs@a
 11517  0DA3  3F41               	moviw [1]fsr1
 11518  0DA4  00F1               	movwf	cnt_abs@a+1
 11519  0DA5  301F               	movlw	31
 11520  0DA6  00F2               	movwf	cnt_abs@b
 11521  0DA7  300C               	movlw	12
 11522  0DA8  00F3               	movwf	cnt_abs@b+1
 11523  0DA9  3188  20F3  318D   	fcall	_cnt_abs
 11524  0DAC  3006               	movlw	6
 11525  0DAD  0271               	subwf	?_cnt_abs+1,w
 11526  0DAE  300E               	movlw	14
 11527  0DAF  1903               	skipnz
 11528  0DB0  0270               	subwf	?_cnt_abs,w
 11529  0DB1  1803               	skipnc
 11530  0DB2  2DB5               	goto	i1l3497
 11531                           
 11532                           ;bpc.c: 36:             return 0;
 11533  0DB3  3000               	movlw	0
 11534  0DB4  0008               	return
 11535  0DB5                     i1l3497:	
 11536  0DB5  0876               	movf	bpc_Cnt2Qua@pdata,w
 11537  0DB6  3E23               	addlw	35
 11538  0DB7  0086               	movwf	6
 11539  0DB8  3002               	movlw	2	; select bank4/5
 11540  0DB9  0087               	movwf	7
 11541  0DBA  3F40               	moviw [0]fsr1
 11542  0DBB  00F0               	movwf	cnt_abs@a
 11543  0DBC  3F41               	moviw [1]fsr1
 11544  0DBD  00F1               	movwf	cnt_abs@a+1
 11545  0DBE  3040               	movlw	64
 11546  0DBF  00F2               	movwf	cnt_abs@b
 11547  0DC0  3018               	movlw	24
 11548  0DC1  00F3               	movwf	cnt_abs@b+1
 11549  0DC2  3188  20F3  318D   	fcall	_cnt_abs
 11550  0DC5  3006               	movlw	6
 11551  0DC6  0271               	subwf	?_cnt_abs+1,w
 11552  0DC7  300E               	movlw	14
 11553  0DC8  1903               	skipnz
 11554  0DC9  0270               	subwf	?_cnt_abs,w
 11555  0DCA  1803               	skipnc
 11556  0DCB  2DCE               	goto	i1l3505
 11557                           
 11558                           ;bpc.c: 38:             return 1;
 11559  0DCC  3001               	movlw	1
 11560  0DCD  0008               	return
 11561  0DCE                     i1l3505:	
 11562  0DCE  0876               	movf	bpc_Cnt2Qua@pdata,w
 11563  0DCF  3E23               	addlw	35
 11564  0DD0  0086               	movwf	6
 11565  0DD1  3002               	movlw	2	; select bank4/5
 11566  0DD2  0087               	movwf	7
 11567  0DD3  3F40               	moviw [0]fsr1
 11568  0DD4  00F0               	movwf	cnt_abs@a
 11569  0DD5  3F41               	moviw [1]fsr1
 11570  0DD6  00F1               	movwf	cnt_abs@a+1
 11571  0DD7  305F               	movlw	95
 11572  0DD8  00F2               	movwf	cnt_abs@b
 11573  0DD9  3024               	movlw	36
 11574  0DDA  00F3               	movwf	cnt_abs@b+1
 11575  0DDB  3188  20F3  318D   	fcall	_cnt_abs
 11576  0DDE  3006               	movlw	6
 11577  0DDF  0271               	subwf	?_cnt_abs+1,w
 11578  0DE0  300E               	movlw	14
 11579  0DE1  1903               	skipnz
 11580  0DE2  0270               	subwf	?_cnt_abs,w
 11581  0DE3  1803               	skipnc
 11582  0DE4  2DE7               	goto	i1l3513
 11583                           
 11584                           ;bpc.c: 40:             return 2;
 11585  0DE5  3002               	movlw	2
 11586  0DE6  0008               	return
 11587  0DE7                     i1l3513:	
 11588  0DE7  0876               	movf	bpc_Cnt2Qua@pdata,w
 11589  0DE8  3E23               	addlw	35
 11590  0DE9  0086               	movwf	6
 11591  0DEA  3002               	movlw	2	; select bank4/5
 11592  0DEB  0087               	movwf	7
 11593  0DEC  3F40               	moviw [0]fsr1
 11594  0DED  00F0               	movwf	cnt_abs@a
 11595  0DEE  3F41               	moviw [1]fsr1
 11596  0DEF  00F1               	movwf	cnt_abs@a+1
 11597  0DF0  3081               	movlw	129
 11598  0DF1  00F2               	movwf	cnt_abs@b
 11599  0DF2  3030               	movlw	48
 11600  0DF3  00F3               	movwf	cnt_abs@b+1
 11601  0DF4  3188  20F3  318D   	fcall	_cnt_abs
 11602  0DF7  3006               	movlw	6
 11603  0DF8  0271               	subwf	?_cnt_abs+1,w
 11604  0DF9  300E               	movlw	14
 11605  0DFA  1903               	skipnz
 11606  0DFB  0270               	subwf	?_cnt_abs,w
 11607  0DFC  1803               	skipnc
 11608  0DFD  2E00               	goto	i1l3521
 11609                           
 11610                           ;bpc.c: 42:             return 3;
 11611  0DFE  3003               	movlw	3
 11612  0DFF  0008               	return
 11613  0E00                     i1l3521:	
 11614                           
 11615                           ;bpc.c: 44:             return 4;
 11616  0E00  3004               	movlw	4
 11617  0E01  0008               	return
 11618  0E02                     __end_of_bpc_Cnt2Qua:	
 11619                           
 11620                           	psect	text60
 11621  0815                     __ptext60:	
 11622 ;; *************** function i1_data_getdata *****************
 11623 ;; Defined at:
 11624 ;;		line 9 in file "data.c"
 11625 ;; Parameters:    Size  Location     Type
 11626 ;;		None
 11627 ;; Auto vars:     Size  Location     Type
 11628 ;;		None
 11629 ;; Return value:  Size  Location     Type
 11630 ;;                  1    wreg      PTR volatile struct .
 11631 ;; Registers used:
 11632 ;;		wreg
 11633 ;; Tracked objects:
 11634 ;;		On entry : 0/0
 11635 ;;		On exit  : 0/0
 11636 ;;		Unchanged: 0/0
 11637 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11638 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11639 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11640 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11641 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11642 ;;Total ram usage:        0 bytes
 11643 ;; Hardware stack levels used:    1
 11644 ;; This function calls:
 11645 ;;		Nothing
 11646 ;; This function is called by:
 11647 ;;		_bpc_Cnt2Qua
 11648 ;;		_bpc_proc
 11649 ;;		_capture_handdle
 11650 ;;		_key_checkPressed
 11651 ;;		_key_isPressed
 11652 ;;		_update_time
 11653 ;;		i1_display_update
 11654 ;; This function uses a non-reentrant model
 11655 ;;
 11656                           
 11657                           
 11658                           ;psect for function i1_data_getdata
 11659  0815                     i1_data_getdata:	
 11660                           
 11661                           ;data.c: 11:     return &g_data;
 11662                           
 11663                           ;incstack = 0
 11664                           ; Regs used in i1_data_getdata: [wreg]
 11665  0815  3020               	movlw	(low (_g_data| (0+512)))& (0+255)
 11666  0816  0008               	return
 11667  0817                     __end_ofi1_data_getdata:	
 11668                           
 11669                           	psect	text61
 11670  08F3                     __ptext61:	
 11671 ;; *************** function _cnt_abs *****************
 11672 ;; Defined at:
 11673 ;;		line 18 in file "bpc.c"
 11674 ;; Parameters:    Size  Location     Type
 11675 ;;  a               2    0[COMMON] unsigned short 
 11676 ;;  b               2    2[COMMON] unsigned short 
 11677 ;; Auto vars:     Size  Location     Type
 11678 ;;		None
 11679 ;; Return value:  Size  Location     Type
 11680 ;;                  2    0[COMMON] unsigned short 
 11681 ;; Registers used:
 11682 ;;		wreg, status,2, status,0
 11683 ;; Tracked objects:
 11684 ;;		On entry : 0/0
 11685 ;;		On exit  : 0/0
 11686 ;;		Unchanged: 0/0
 11687 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11688 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11689 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11690 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11691 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11692 ;;Total ram usage:        4 bytes
 11693 ;; Hardware stack levels used:    1
 11694 ;; This function calls:
 11695 ;;		Nothing
 11696 ;; This function is called by:
 11697 ;;		_bpc_Cnt2Qua
 11698 ;; This function uses a non-reentrant model
 11699 ;;
 11700                           
 11701                           
 11702                           ;psect for function _cnt_abs
 11703  08F3                     _cnt_abs:	
 11704                           
 11705                           ;bpc.c: 19:     return a>b? (a-b):(b-a);
 11706                           
 11707                           ;incstack = 0
 11708                           ; Regs used in _cnt_abs: [wreg+status,2+status,0]
 11709  08F3  0871               	movf	cnt_abs@a+1,w
 11710  08F4  0273               	subwf	cnt_abs@b+1,w
 11711  08F5  1D03               	skipz
 11712  08F6  28F9               	goto	u292_25
 11713  08F7  0870               	movf	cnt_abs@a,w
 11714  08F8  0272               	subwf	cnt_abs@b,w
 11715  08F9                     u292_25:	
 11716  08F9  1C03               	skipc
 11717  08FA  2902               	goto	i1l3149
 11718  08FB  0870               	movf	cnt_abs@a,w
 11719  08FC  0272               	subwf	cnt_abs@b,w
 11720  08FD  00F0               	movwf	?_cnt_abs
 11721  08FE  0871               	movf	cnt_abs@a+1,w
 11722  08FF  3B73               	subwfb	cnt_abs@b+1,w
 11723  0900  00F1               	movwf	?_cnt_abs+1
 11724  0901  0008               	return
 11725  0902                     i1l3149:	
 11726  0902  0872               	movf	cnt_abs@b,w
 11727  0903  0270               	subwf	cnt_abs@a,w
 11728  0904  00F0               	movwf	?_cnt_abs
 11729  0905  0873               	movf	cnt_abs@b+1,w
 11730  0906  3B71               	subwfb	cnt_abs@a+1,w
 11731  0907  00F1               	movwf	?_cnt_abs+1
 11732  0908  0008               	return
 11733  0909                     __end_of_cnt_abs:	
 11734                           
 11735                           	psect	text62
 11736  0868                     __ptext62:	
 11737 ;; *************** function _capture_IsNegEdge *****************
 11738 ;; Defined at:
 11739 ;;		line 60 in file "hardware.c"
 11740 ;; Parameters:    Size  Location     Type
 11741 ;;		None
 11742 ;; Auto vars:     Size  Location     Type
 11743 ;;		None
 11744 ;; Return value:  Size  Location     Type
 11745 ;;                  1    wreg      enum E5232
 11746 ;; Registers used:
 11747 ;;		wreg, status,2, status,0
 11748 ;; Tracked objects:
 11749 ;;		On entry : 0/0
 11750 ;;		On exit  : 0/0
 11751 ;;		Unchanged: 0/0
 11752 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11753 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11754 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11755 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11756 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11757 ;;Total ram usage:        0 bytes
 11758 ;; Hardware stack levels used:    1
 11759 ;; This function calls:
 11760 ;;		Nothing
 11761 ;; This function is called by:
 11762 ;;		_bpc_Cnt2Qua
 11763 ;;		_capture_handdle
 11764 ;; This function uses a non-reentrant model
 11765 ;;
 11766                           
 11767                           
 11768                           ;psect for function _capture_IsNegEdge
 11769  0868                     _capture_IsNegEdge:	
 11770                           
 11771                           ;hardware.c: 62:     return (CCP2CONbits.CCP2M == (0b0100))? TRUE : FALSE;
 11772                           
 11773                           ;incstack = 0
 11774                           ; Regs used in _capture_IsNegEdge: [wreg+status,2+status,0]
 11775  0868  0025               	movlb	5	; select bank5
 11776  0869  081A               	movf	26,w	;volatile
 11777  086A  390F               	andlw	15
 11778  086B  3A04               	xorlw	4
 11779  086C  1D03               	btfss	3,2
 11780  086D  2870               	goto	u293_20
 11781  086E  3001               	movlw	1
 11782  086F  0008               	return
 11783  0870                     u293_20:	
 11784  0870  3000               	movlw	0
 11785  0871  0008               	return
 11786  0872                     __end_of_capture_IsNegEdge:	
 11787  007E                     btemp	set	126	;btemp
 11788  007E                     int$flags	set	126
 11789  007E                     wtemp0	set	126


Data Sizes:
    Strings     31
    Constant    11
    Data        7
    BSS         222
    Persistent  32
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     80      80
    BANK1            80     76      80
    BANK2            80     64      79
    BANK3            80     30      73
    BANK4            80      0      39
    BANK5            80      0      64
    BANK6            80      0      64
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 64
		 -> ?_sprintf(BANK0[2]), stoa@nuls(BANK0[7]), dbuf(BANK3[32]), ISR@send(BANK2[64]), 
		 -> STR_3(CODE[4]), STR_2(CODE[7]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 64
		 -> ?_sprintf(BANK0[2]), stoa@nuls(BANK0[7]), dbuf(BANK3[32]), ISR@send(BANK2[64]), 
		 -> STR_3(CODE[4]), STR_2(CODE[7]), 

    strcpy@dest	PTR unsigned char  size(1) Largest target is 64
		 -> ISR@send(BANK2[64]), 

    strcpy@d	PTR unsigned char  size(1) Largest target is 64
		 -> ISR@send(BANK2[64]), 

    strcpy@src	PTR const unsigned char  size(1) Largest target is 64
		 -> ISR@buf(BANK1[64]), 

    strcpy@s	PTR const unsigned char  size(1) Largest target is 64
		 -> ISR@buf(BANK1[64]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_1(CODE[20]), 

    sprintf@s	PTR unsigned char  size(1) Largest target is 64
		 -> ISR@buf(BANK1[64]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    f.buffer	PTR unsigned char  size(1) Largest target is 64
		 -> ISR@buf(BANK1[64]), 

    fputs@s	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK3[32]), 

    fputs@fp	PTR struct _IO_FILE size(1) Largest target is 6
		 -> sprintf@f(BANK1[5]), 

    S2085_IO_FILE$buffer	PTR unsigned char  size(1) Largest target is 64
		 -> ISR@buf(BANK1[64]), 

    fputc@fp.buffer	PTR unsigned char  size(1) Largest target is 64
		 -> ISR@buf(BANK1[64]), 

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 6
		 -> sprintf@f(BANK1[5]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK1[1]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 6
		 -> sprintf@f(BANK1[5]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_1(CODE[20]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 20
		 -> STR_1(CODE[20]), 

    vfpfcnvrt@cp	PTR unsigned char  size(2) Largest target is 7
		 -> ?_sprintf(BANK0[2]), STR_3(CODE[4]), STR_2(CODE[7]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 6
		 -> sprintf@f(BANK1[5]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK1[1]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 2
		 -> vfprintf@cfmt(BANK0[2]), 

    stoa@fp	PTR struct _IO_FILE size(1) Largest target is 6
		 -> sprintf@f(BANK1[5]), 

    stoa@s	PTR unsigned char  size(2) Largest target is 7
		 -> ?_sprintf(BANK0[2]), STR_3(CODE[4]), STR_2(CODE[7]), 

    stoa@cp	PTR unsigned char  size(2) Largest target is 7
		 -> ?_sprintf(BANK0[2]), stoa@nuls(BANK0[7]), STR_3(CODE[4]), STR_2(CODE[7]), 

    dtoa@fp	PTR struct _IO_FILE size(1) Largest target is 6
		 -> sprintf@f(BANK1[5]), 

    pad@fp	PTR struct _IO_FILE size(1) Largest target is 6
		 -> sprintf@f(BANK1[5]), 

    pad@buf	PTR unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK3[32]), 

    update_time@pdata	PTR volatile struct . size(1) Largest target is 39
		 -> g_data(BANK4[39]), 

    display_update@pdata	PTR volatile struct . size(1) Largest target is 39
		 -> g_data(BANK4[39]), 

    key_isPressed@pdata	PTR volatile struct . size(1) Largest target is 39
		 -> g_data(BANK4[39]), 

    key_checkPressed@pdata	PTR volatile struct . size(1) Largest target is 39
		 -> g_data(BANK4[39]), 

    capture_handdle@pdata	PTR volatile struct . size(1) Largest target is 39
		 -> g_data(BANK4[39]), 

    bpc_proc@pdata	PTR volatile struct . size(1) Largest target is 39
		 -> g_data(BANK4[39]), 

    check_err@pdata	PTR volatile struct . size(1) Largest target is 39
		 -> g_data(BANK4[39]), 

    bpc_Cnt2Qua@pdata	PTR volatile struct . size(1) Largest target is 39
		 -> g_data(BANK4[39]), 

    sp__strcpy	PTR unsigned char  size(1) Largest target is 64
		 -> ISR@send(BANK2[64]), 

    sp__data_getdata	PTR volatile struct . size(1) Largest target is 39
		 -> g_data(BANK4[39]), 

    init_env@pdata	PTR volatile struct . size(1) Largest target is 39
		 -> g_data(BANK4[39]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_capture_handdle
    _ISR->_sprintf
    _timer_Timer0Handdle->_update_time
    _key_checkPressed->_led_Blink
    _led_Blink->i1_led_SetState
    _vfpfcnvrt->_stoa
    _stoa->_fputc
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___aomod
    _capture_handdle->i1_capture_setEdge
    _capture_handdle->i1_led_SetState
    i1_display_update->i1_display_write_once
    i1_display_write_once->i1___awdiv
    i1_display_write_byte->i1_display_control595_delay
    _bpc_Cnt2Qua->_cnt_abs

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    _ISR->_sprintf
    _timer_Timer0Handdle->_update_time
    _update_time->i1_display_update
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->___aodiv
    _dtoa->___aomod
    _pad->_fputs
    _abs->___aomod
    _bpc_proc->i1_display_update

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    _ISR->_sprintf

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    _main->_init_env
    _init_env->_display_update
    _display_update->_display_write_once
    _display_write_once->___awdiv
    _display_write_byte->_display_control595_delay
    _capture_init->_capture_setEdge

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    4337
                        _capture_Set
                       _capture_init
                     _display_update
                           _init_env
                       _led_SetState
                   _timer_Timer0Init
                  _timer_Timer0Start
                   _timer_Timer1Init
                  _timer_Timer1Start
                          _uart_init
 ---------------------------------------------------------------------------------
 (1) _uart_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _timer_Timer1Start                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _timer_Timer1Init                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _timer_Timer0Start                                    0     0      0       0
                  _timer_Timer0Reset
 ---------------------------------------------------------------------------------
 (2) _timer_Timer0Reset                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _timer_Timer0Init                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _led_SetState                                         1     1      0      22
                                              0 BANK3      1     1      0
 ---------------------------------------------------------------------------------
 (1) _init_env                                             5     5      0    2203
                                             25 BANK3      5     5      0
                       _data_getdata
                        _display_set
                     _display_update
 ---------------------------------------------------------------------------------
 (2) _display_update                                      12    12      0    2024
                                             13 BANK3     12    12      0
                            ___awdiv
                            ___awmod
                       _data_getdata
                 _display_write_once
 ---------------------------------------------------------------------------------
 (3) _display_write_once                                   4     1      3     433
                                              9 BANK3      4     1      3
                            ___awdiv (ARG)
                            ___awmod (ARG)
           _display_control595_delay
                 _display_write_byte
 ---------------------------------------------------------------------------------
 (4) _display_write_byte                                   4     4      0      93
                                              2 BANK3      4     4      0
           _display_control595_delay
 ---------------------------------------------------------------------------------
 (5) _display_control595_delay                             2     2      0      24
                                              0 BANK3      2     2      0
 ---------------------------------------------------------------------------------
 (3) _data_getdata                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4     700
                                              0 BANK3      7     3      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     756
                                              0 BANK3      9     5      4
 ---------------------------------------------------------------------------------
 (2) _display_set                                          1     1      0      22
                                              0 BANK3      1     1      0
 ---------------------------------------------------------------------------------
 (1) _capture_init                                         0     0      0      66
                    _capture_setEdge
 ---------------------------------------------------------------------------------
 (2) _capture_setEdge                                      1     1      0      66
                                              0 BANK3      1     1      0
 ---------------------------------------------------------------------------------
 (1) _capture_Set                                          1     1      0      22
                                              0 BANK3      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR                                                131   131      0   16851
                                              9 BANK1     67    67      0
                                              0 BANK2     64    64      0
                           _bpc_proc
                   _capture_IsEnable
                   _capture_IsIntrpt
                  _capture_clrIntrpt
                    _capture_handdle
                      _key_isPressed
                            _sprintf
                             _strcpy
                             _strlen
                _timer_IsTimer0Itrpt
                _timer_IsTimer1Itrpt
                _timer_Timer0Handdle
              _timer_Timer1ClrIntrpt
                      i1_capture_Set
                i1_timer_Timer0Reset
 ---------------------------------------------------------------------------------
 (7) i1_timer_Timer0Reset                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _timer_Timer1ClrIntrpt                                0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _timer_Timer0Handdle                                  0     0      0    2176
                   _key_checkPressed
                        _update_time
 ---------------------------------------------------------------------------------
 (8) _update_time                                          3     3      0    2109
                                             13 COMMON     1     1      0
                                             12 BANK0      2     2      0
                          i1___awmod
                      i1_capture_Set
                     i1_data_getdata
                   i1_display_update
 ---------------------------------------------------------------------------------
 (8) _key_checkPressed                                     2     2      0      67
                                              2 COMMON     2     2      0
                          _led_Blink
                     i1_data_getdata
 ---------------------------------------------------------------------------------
 (9) _led_Blink                                            1     1      0      22
                                              1 COMMON     1     1      0
                     i1_led_SetState
 ---------------------------------------------------------------------------------
 (7) _timer_IsTimer1Itrpt                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _timer_IsTimer0Itrpt                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _strcpy                                               5     4      1     205
                                              0 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (7) _sprintf                                             18    10      8    9789
                                             13 COMMON     1     1      0
                                             72 BANK0      8     0      8
                                              0 BANK1      9     9      0
                           _vfprintf
 ---------------------------------------------------------------------------------
 (8) _vfprintf                                             8     5      3    9479
                                             64 BANK0      8     5      3
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (9) _vfpfcnvrt                                           40    38      2    9165
                                             46 BANK0     18    16      2
                               _dtoa
                              _fputc
                               _stoa
 ---------------------------------------------------------------------------------
 (10) _stoa                                               23    21      2    2088
                                              8 COMMON     5     3      2
                                              0 BANK0     18    18      0
                              _fputc
                             _strlen
 ---------------------------------------------------------------------------------
 (10) _dtoa                                               30    22      8    5160
                                             16 BANK0     30    22      8
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (11) _pad                                                 9     6      3    3554
                                             12 COMMON     1     1      0
                                              4 BANK0      8     5      3
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (7) _strlen                                               5     3      2     228
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (12) _fputs                                               8     7      1    1605
                                              8 COMMON     4     3      1
                                              0 BANK0      4     4      0
                              _fputc
 ---------------------------------------------------------------------------------
 (11) _fputc                                               8     5      3    1290
                                              0 COMMON     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (12) _putch                                               1     1      0       0
 ---------------------------------------------------------------------------------
 (11) _abs                                                 4     2      2     142
                                              3 COMMON     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (11) ___aomod                                            19     3     16     448
                                              0 COMMON     3     3      0
                                              0 BANK0     16     0     16
 ---------------------------------------------------------------------------------
 (11) ___aodiv                                            27    11     16     452
                                              0 COMMON    11    11      0
                                              0 BANK0     16     0     16
 ---------------------------------------------------------------------------------
 (7) _key_isPressed                                        2     2      0      45
                                              0 COMMON     2     2      0
                     i1_data_getdata
 ---------------------------------------------------------------------------------
 (7) _capture_handdle                                     13    13      0     318
                                              1 COMMON    13    13      0
                  _capture_IsNegEdge
                  i1_capture_setEdge
                     i1_data_getdata
                     i1_led_SetState
 ---------------------------------------------------------------------------------
 (10) i1_led_SetState                                      1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) i1_capture_setEdge                                    1     1      0      66
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _capture_clrIntrpt                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _capture_IsIntrpt                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _capture_IsEnable                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _bpc_proc                                            12    12      0    3901
                                             12 BANK0     12    12      0
                        _bpc_Cnt2Qua
                          _check_err
                      i1_capture_Set
                     i1_data_getdata
                   i1_display_update
 ---------------------------------------------------------------------------------
 (9) i1_display_update                                    12    12      0    1326
                                              0 BANK0     12    12      0
                          i1___awdiv
                          i1___awmod
                     i1_data_getdata
               i1_display_write_once
 ---------------------------------------------------------------------------------
 (10) i1_display_write_once                                4     1      3     283
                                              9 COMMON     4     1      3
                          i1___awdiv (ARG)
                          i1___awmod (ARG)
         i1_display_control595_delay
               i1_display_write_byte
 ---------------------------------------------------------------------------------
 (11) i1_display_write_byte                                4     4      0      93
                                              2 COMMON     4     4      0
         i1_display_control595_delay
 ---------------------------------------------------------------------------------
 (12) i1_display_control595_delay                          2     2      0      24
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (10) i1___awmod                                           7     3      4     452
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (10) i1___awdiv                                           9     5      4     456
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (7) i1_capture_Set                                        1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) _check_err                                           16    14      2     749
                                              0 COMMON     5     3      2
                                              0 BANK0     11    11      0
 ---------------------------------------------------------------------------------
 (8) _bpc_Cnt2Qua                                          3     3      0     851
                                              4 COMMON     3     3      0
                  _capture_IsNegEdge
                            _cnt_abs
                     i1_data_getdata
 ---------------------------------------------------------------------------------
 (10) i1_data_getdata                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _cnt_abs                                              4     0      4     740
                                              0 COMMON     4     0      4
 ---------------------------------------------------------------------------------
 (8) _capture_IsNegEdge                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _capture_Set
   _capture_init
     _capture_setEdge
   _display_update
     ___awdiv
     ___awmod
     _data_getdata
     _display_write_once
       ___awdiv (ARG)
       ___awmod (ARG)
       _display_control595_delay (ARG)
       _display_write_byte (ARG)
         _display_control595_delay
   _init_env
     _data_getdata
     _display_set
     _display_update
       ___awdiv
       ___awmod
       _data_getdata
       _display_write_once
         ___awdiv (ARG)
         ___awmod (ARG)
         _display_control595_delay (ARG)
         _display_write_byte (ARG)
           _display_control595_delay
   _led_SetState
   _timer_Timer0Init
   _timer_Timer0Start
     _timer_Timer0Reset
   _timer_Timer1Init
   _timer_Timer1Start
   _uart_init

 _ISR (ROOT)
   _bpc_proc
     _bpc_Cnt2Qua
       _capture_IsNegEdge
       _cnt_abs
       i1_data_getdata
     _check_err
     i1_capture_Set
     i1_data_getdata
     i1_display_update
       i1___awdiv
       i1___awmod
       i1_data_getdata
       i1_display_write_once
         i1___awdiv (ARG)
         i1___awmod (ARG)
         i1_display_control595_delay (ARG)
         i1_display_write_byte (ARG)
           i1_display_control595_delay
   _capture_IsEnable
   _capture_IsIntrpt
   _capture_clrIntrpt
   _capture_handdle
     _capture_IsNegEdge
     i1_capture_setEdge
     i1_data_getdata
     i1_led_SetState
   _key_isPressed
     i1_data_getdata
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _dtoa
           ___aodiv
           ___aomod
           _abs
             ___aomod (ARG)
           _pad
             _fputc
               _putch
             _fputs
               _fputc
                 _putch
             _strlen
         _fputc
           _putch
         _stoa
           _fputc
             _putch
           _strlen
   _strcpy
   _strlen
   _timer_IsTimer0Itrpt
   _timer_IsTimer1Itrpt
   _timer_Timer0Handdle
     _key_checkPressed
       _led_Blink
         i1_led_SetState
       i1_data_getdata
     _update_time
       i1___awmod
       i1_capture_Set
       i1_data_getdata
       i1_display_update
         i1___awdiv
         i1___awmod
         i1_data_getdata
         i1_display_write_once
           i1___awdiv (ARG)
           i1___awmod (ARG)
           i1_display_control595_delay (ARG)
           i1_display_write_byte (ARG)
             i1_display_control595_delay
   _timer_Timer1ClrIntrpt
   i1_capture_Set
   i1_timer_Timer0Reset

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     4C      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     40      4F       9       98.8%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50     1E      49      11       91.3%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      27      13       48.8%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0      40      15       80.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0      40      17       80.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     1ED      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     1ED      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Tue Jun 18 17:10:46 2019

                        _update_time 0E02   __end_ofi1_display_control595_delay 0887  
         i1_display_control595_delay 087C                          __CFG_CP$OFF 0000  
                       ?_display_set 0070                         ___awdiv@sign 01CA  
                _display_update$1550 01DA                          __CFG_LVP$ON 0000  
                                l166 09BC                                  l556 08AE  
                                _GIE 005F                                  _RC4 0074  
                       __CFG_CPD$OFF 0000                                  _ISR 0004  
                                _abs 091F                                  _pad 0C42  
                       ___awmod@sign 01CA               __end_of_display_update 0F3A  
                       __CFG_BORV$LO 0000                                  wreg 0009  
                       __CFG_IESO$ON 0000                         __CFG_FOSC$HS 0000  
         __size_of_capture_clrIntrpt 0003                       ??_led_SetState 01C4  
              i1display_write_byte@i 0075                 __end_of_data_getdata 0004  
               capture_handdle@pdata 0079                                 ?_ISR 0070  
                               ISR@i 00EB                                 ?_abs 0073  
                               l3301 0B92                                 l3241 0C06  
                               l3305 0B9A                                 l3251 0C0E  
                               l3235 0BFB                                 l3253 0C1A  
                               l3333 0ECA                                 l3263 0C35  
                               l3335 0ECE                                 l3601 08EA  
                               l3267 0C3D                                 l3259 0C2C  
                               l3291 0B71                                 l3283 0B6B  
                               l3293 0B7D                                 l3279 0B64  
                               l3297 0B89                                 ?_pad 0024  
                               l3685 0D38                                 l2895 0A78  
                               STR_1 100B                                 STR_2 101F  
                               STR_3 1026                                 _BRGH 0CF2  
                               _CREN 0CEC                                 _LATA 010C  
                               _LATB 010D                                 _LATC 010E  
                               u3035 0C11                                 u3055 0C1B  
                               u3135 0B74                                 _ENUM 016E  
                               u3065 0C25                                 u3075 0C2D  
                               u3155 0B83                                 u3165 0B8A  
                               u2445 0A7B                                 _PEIE 005E  
                               u3655 0D52                                 u3680 07FD  
                               u3840 089A                                 _RCIE 048D  
                               _TMR0 0015                                 _SPEN 0CEF  
                  i1capture_Set@isON 0070                                 _TXIE 048C  
                               _TXEN 0CF5                                 _SYNC 0CF4  
                               _WPUA 020C                                 _WPUB 020D  
                               _WPUC 020E                         __CFG_WRT$OFF 0000  
                      __CFG_FCMEN$ON 0000                                 _Temp 01A2  
                               abs@a 0073                                 _dbuf 01A4  
                               _main 099C                                 _dtoa 0235  
                               _prec 00EC                                 _nout 01A0  
                               pad@i 0027                                 pad@p 0025  
                               fsr0h 0005                                 fsr1h 0007  
                               indf0 0000                                 fsr0l 0004  
                               indf1 0001                                 fsr1l 0006  
                               pad@w 0029                                 _stoa 0F3A  
                               btemp 007E                        __CFG_BOREN$ON 0000  
                               start 00A3                        __CFG_MCLRE$ON 0000  
          __size_ofi1_display_update 00A9                  i1_timer_Timer0Reset 0834  
                              ??_ISR 00A9               i1display_write_once@HL 007C  
             i1display_write_once@HR 0079               i1display_write_once@ML 007A  
             i1display_write_once@MR 007B                                ??_abs 0075  
                              ??_pad 007C                        __CFG_PLLEN$ON 0000  
           __end_of_timer_Timer0Init 08C3             __end_of_timer_Timer1Init 08D0  
                    __end_of___aodiv 057A                                ?_main 0070  
                              ?_dtoa 0030                       i1___awdiv@sign 0076  
                    __end_of___aomod 0749                      __end_of___awdiv 0C42  
                              _BRG16 0CFB                        __CFG_WDTE$OFF 0000  
                    __end_of___awmod 0B9F                                ?_stoa 0078  
                    ___awdiv@divisor 01C4                                _LATC3 0873  
                              _LATC4 0874                                _IOCAN 0392  
                              _IOCAP 0391                                _IOCBN 0395  
                              _IOCBP 0394                                _IOCCN 0398  
                              _IOCCP 0397                                i1l161 00A1  
                              i1l156 0073                                i1l148 008D  
                              i1l149 008A                                i1l419 05D6  
                              i1l556 0880                                i1l804 0FD8  
                              i1l755 0C5A                                i1l763 027B  
                              i1l772 0347                                i1l764 0282  
                              i1l941 0737                                i1l758 0C7A  
                              i1l928 0568                                i1l768 029D  
                              i1l769 02B1                                i1l795 0F7D  
                    ___awdiv@counter 01C9                                _RCREG 0199  
                       vfpfcnvrt@fmt 004E                                _TMR1H 0017  
                              _TMR1L 0016                                _TRISA 008C  
                              _TRISB 008D                                _TRISC 008E  
                              _WPUC3 1073                                _WPUC4 1074  
                              _RXSEL 08E9                                _TXREG 019A  
                              _TXSEL 08EA                      ?_display_update 0070  
                              _TX_en 0168                 __size_of_bpc_Cnt2Qua 0086  
               ?i1_timer_Timer0Reset 0070                  _timer_IsTimer0Itrpt 0828  
                    __end_of_cnt_abs 0909             __end_of_key_checkPressed 0980  
                _timer_IsTimer1Itrpt 082C                       i1___awmod@sign 0076  
               __end_of_capture_init 085F                                _flags 00EE  
             __size_ofi1_capture_Set 000C                                _fputc 0B14  
                              _fputs 0A02                                pad@fp 002B  
                              _width 0160                                _putch 0814  
                              dtoa@d 0030                                dtoa@i 004C  
                              dtoa@n 0044                                dtoa@p 003E  
                              dtoa@s 0042                                dtoa@w 0040  
                              stoa@i 0027                                stoa@l 0030  
                              stoa@p 002E                                stoa@s 0078  
                              stoa@w 0029                                status 0003  
                              wtemp0 007E                      __end_of_sprintf 0A02  
                 __size_ofi1___awdiv 0051                   __size_ofi1___awmod 0045  
               ?_timer_IsTimer0Itrpt 0070                 ?_timer_IsTimer1Itrpt 0070  
       __end_ofi1_display_write_byte 0A75         __end_ofi1_display_write_once 09DF  
                    __initialization 00A5                         __end_of_main 09BD  
                       __end_of_dtoa 0386                         __end_of_stoa 1000  
               __size_of_capture_Set 000E                 display_write_once@HL 01D0  
               display_write_once@HR 01CD                 display_write_once@ML 01CE  
               display_write_once@MR 01CF                       __CFG_LPBOR$OFF 0000  
             capture_handdle@cnt_int 007A               capture_handdle@cnt_tmp 007C  
            __size_ofi1_data_getdata 0002                               ??_main 01E2  
                             ??_dtoa 0038                               ??_stoa 007A  
          __size_of_capture_IsEnable 0004            __size_of_capture_IsIntrpt 0004  
              ??i1_timer_Timer0Reset 0070                               ISR@buf 00AB  
             __size_of_key_isPressed 0016                               ?_fputc 0070  
                             ?_fputs 0078                               _CCPR2H 0299  
                             _CCPR2L 0298                     ___awdiv@dividend 01C6  
                bpc_proc@last_time_h 0030                               ?_putch 0070  
                bpc_proc@last_time_m 0032                  bpc_proc@last_time_s 002E  
              _timer_Timer1ClrIntrpt 081A                               i1l3011 0FED  
                             i1l3003 0FAF                               i1l3101 0AF2  
                             i1l3013 0FFA                               i1l3007 0FDC  
                             i1l3113 0B0F                               i1l3105 0AFE  
                             i1l3043 0BA9                               i1l3203 0432  
                             i1l3061 0BC8                               i1l3109 0B07  
                             i1l3213 0459                               i1l3071 0BE3  
                             i1l3049 0BB4                               i1l3321 0781  
                             i1l3209 0453                               i1l4025 000F  
                             i1l3075 0BEB                               i1l3067 0BDA  
                             i1l3059 0BBC                               i1l3091 0AE0  
                             i1l3323 0786                               i1l3219 0464  
                             i1l3149 0902                               i1l3087 0AD9  
                             i1l4047 005A                               i1l3521 0E00  
                             i1l3513 0DE7                               i1l3505 0DCE  
                             i1l3193 0402                               i1l3185 03C8  
                             i1l4049 0086                               i1l3099 0AE6  
                             i1l2811 04DC                               i1l3533 05D2  
                             i1l2821 04F3                               i1l2805 04B1  
                             i1l2741 0B40                               i1l3613 0AA9  
                             i1l3535 05DB                               i1l3623 08D9  
                             i1l2831 053B                               i1l2823 0502  
                             i1l2751 093A                               i1l3615 0AC6  
                             i1l3463 0E67                               i1l3537 05DF  
                             i1l2833 0547                               i1l2809 04D8  
                             i1l2737 0B1D                               i1l2753 0946  
                             i1l2921 0295                               i1l3571 0627  
                             i1l3563 061A                               i1l3547 05EC  
                             i1l2843 0697                               i1l2763 0A06  
                             i1l2931 02DE                               i1l3485 0D9A  
                             i1l3581 0648                               i1l3565 061E  
                             i1l3557 0607                               i1l3805 0CF6  
                             i1l2861 070A                               u211_25 0B3E  
                             i1l2781 0C58                               i1l2941 02B9  
                             i1l3469 0E8F                               i1l3575 0638  
                             i1l3583 0652                               i1l3567 0620  
                             i1l3831 0112                               i1l2855 06CB  
                             i1l2863 0716                               i1l2847 06BE  
                             i1l2791 0C86                               i1l2927 02AC  
                             i1l3497 0DB5                               i1l3489 0D9C  
                             i1l3593 066A                               i1l2873 0A50  
                             i1l3841 0148                               i1l3737 091D  
                             i1l2857 06DA                               i1l2777 0C50  
                             i1l2953 035B                               i1l3579 0644  
                             i1l3827 0106                               i1l2787 0C5C  
                             i1l2963 0373                               i1l3755 0956  
                             i1l3837 013F                               u220_25 0928  
                             i1l2949 0353                               i1l3863 01D9  
                             i1l3855 0190                               i1l2959 0366  
                             i1l2975 0F56                               i1l3785 0CC3  
                             i1l2993 0F9F                               i1l3883 0218  
                             i1l3867 01FA                               i1l3795 0CDC  
                             i1l2995 0FAC                               i1l3869 01FD  
                             i1l3789 0CCB                               i1l2989 0F8E  
                             u225_20 04E3                               u242_25 0A53  
                             u218_25 0C66                               u251_25 028D  
                             u228_25 0528                               u246_20 0251  
                             u262_20 0F46                               u406_20 0029  
                             u238_25 06F8                               u254_25 0351  
                             u270_25 0FF8                               u319_20 08A6  
                             u271_20 0879                               u247_20 0252  
                             u407_20 004E                               u280_25 0BDB  
                             u256_25 02CD                               u345_25 0589  
                             u257_25 02D9                               u265_25 0F76  
                             u346_25 05A4                               u370_25 0CBA  
                             u347_25 05AF                               u267_25 0FAA  
                             u292_25 08F9                               u276_25 0BBF  
                             u268_25 0FB9                               u293_20 0870  
                             u381_25 01E8                               u278_25 0BC9  
                             u286_25 0AE9                               u382_25 01F8  
                             u279_25 0BD3                               u383_25 0232  
                             u288_25 0AF8                               u289_25 0AFF  
                             _SPBRGH 019C                               _SPBRGL 019B  
                             _TRISC3 0473                               _TRISC4 0474  
                     __CFG_PWRTE$OFF 0000                     __end_of_bpc_proc 0235  
              ??_timer_IsTimer0Itrpt 0070                ??_timer_IsTimer1Itrpt 0070  
                       vfprintf@cfmt 0066                        i1_capture_Set 089D  
                          ??___aodiv 0070                            ??___aomod 0070  
               __end_of_led_SetState 089D                            ??___awdiv 01C8  
                             _g_data 0220                       __CFG_STVREN$ON 0000  
        __end_of_timer_Timer0Handdle 0844                            ??___awmod 01C8  
         ??_display_control595_delay 01C4                               _flg_rc 0167  
                   __end_of_init_env 0D7C                     ___awdiv@quotient 01CB  
                    ___awmod@divisor 01C4                               _temp_h 016C  
                             _temp_l 016B                      ___awmod@counter 01C9  
                             pad@buf 0024                            ??_cnt_abs 0074  
                             dtoa@fp 003D                               _strcpy 094D  
                             _strlen 0936                 __size_of_display_set 0009  
                   __end_of_segmcode 100B                    __end_ofi1___awdiv 0BF0  
              __size_of_data_getdata 0002                    __end_ofi1___awmod 0B14  
                             fputc@c 0070                               fputs@c 0020  
                             fputs@i 0021                               fputs@s 0023  
                             stoa@cp 002C                               stoa@fp 002B  
                             putch@c 0070                     __end_of_vfprintf 0ACF  
                          ??_sprintf 007D              __end_of__initialization 00DD  
                   i1_display_update 0749                       ?i1_capture_Set 0070  
                     __pcstackCOMMON 0070                         ?_update_time 0070  
                      _key_isPressed 0909                         __pidataBANK3 0850  
                       _data_getdata 0002                   __size_of_check_err 00F3  
                      __end_of_fputc 0B59                        __end_of_fputs 0A28  
        ?i1_display_control595_delay 0070           __end_of_display_write_byte 0AA0  
         __end_of_display_write_once 0A4E                        __end_of_putch 0815  
                   led_SetState@isOn 01C4             i1display_write_byte@data 0074  
              __size_of_capture_init 0008                       _OPTION_REGbits 0095  
                 __size_of_led_Blink 000B                tmp_change@history_key 016D  
            capture_handdle@last_cnt 0162                 i1_display_write_byte 0A4E  
             ?_timer_Timer1ClrIntrpt 0070                 i1_display_write_once 09BD  
                            ??_fputc 0073                              ??_fputs 0079  
                            ??_putch 0070                           __pbssBANK1 00EC  
                         __pbssBANK2 0160                           __pbssBANK3 01A0  
                         __pbssBANK4 0220                           __pbssBANK5 02A0  
                         __pbssBANK6 0320                    i1_capture_setEdge 08D0  
           __size_of_capture_handdle 0069              __size_ofi1_led_SetState 000A  
                    __CFG_VCAPEN$OFF 0000                   ?i1_capture_setEdge 0070  
           __size_of_capture_setEdge 0013                              ISR@send 0120  
                     ?_key_isPressed 0070                           __pmaintext 099C  
                ??i1_capture_setEdge 0070                         _capture_init 0857  
                         __pintentry 0004                       i1_data_getdata 0815  
                   ??_display_update 01D1                       bpc_proc@number 0036  
                  ?_timer_Timer0Init 0070                              ?_strcpy 0070  
                            ?_strlen 0070                    ?_timer_Timer1Init 0070  
                   _capture_IsEnable 0820                   i1___awdiv@dividend 0072  
                 __size_of_uart_init 001C                              _ODCONC3 1473  
                            _ODCONC4 1474                     _capture_IsIntrpt 0824  
                 ??_timer_Timer0Init 01C4                   ??_timer_Timer1Init 01C4  
                display_update@pdata 01DC                   __size_of_vfpfcnvrt 0101  
                          ?_bpc_proc 0070                ?i1_display_write_byte 0070  
              ?i1_display_write_once 0079                    ?_key_checkPressed 0070  
          __end_ofi1_capture_setEdge 08E0                  capture_setEdge@edge 01C4  
                  __end_of_check_err 066D                     update_time@pdata 007D  
                 ??_key_checkPressed 0072                              _RX_data 0169  
                          ?_init_env 0070                              _TX_data 016A  
              __size_of_led_SetState 000B                      ??i1_capture_Set 0070  
                  __end_of_led_Blink 0892                   i1___awdiv@quotient 0077  
   __end_of_display_control595_delay 08B6               __end_ofi1_data_getdata 0817  
                            ___aodiv 0487                              ___aomod 066D  
                            ___awdiv 0BF0                              ___awmod 0B59  
    i1display_control595_delay@times 0071                            ?_vfprintf 0060  
                         check_err@i 0028                              __ptext1 0980  
                            __ptext2 081D                              __ptext3 08C3  
                            __ptext4 0830                              __ptext5 0839  
                            __ptext6 08B6                              __ptext7 0892  
                            __ptext8 0CFE                        ??_bpc_Cnt2Qua 0074  
                            __ptext9 0E92                              _cnt_abs 08F3  
                    __size_of_strcpy 0018                      __size_of_strlen 0017  
                       __size_of_ISR 009F                            _T1CONbits 0018  
                       __size_of_abs 0017                         __size_of_pad 0053  
                   ___awmod@dividend 01C6                            _IOCCFbits 0399  
                         ??_bpc_proc 002C                            _IOCCPbits 0397  
                            _sprintf 09DF                              clrloop0 0845  
                       _led_SetState 0892                 end_of_initialization 00DD  
                            fputc@fp 0072                              init_ram 084A  
__size_ofi1_display_control595_delay 000B                           ??_init_env 01DD  
                            fputs@fp 0078                              initloop 084B  
                    capture_Set@isON 01C4                      ??_key_isPressed 0070  
                  __end_of_uart_init 099C                        ??_capture_Set 01C4  
                  ??_capture_handdle 0071                   i1led_SetState@isOn 0070  
                  __end_of_vfpfcnvrt 0487                      ?i1_data_getdata 0070  
                         ??_vfprintf 0063                    ??_capture_setEdge 01C4  
               __size_of_update_time 0090                              strcpy@d 0073  
                            strlen@a 0073                              strcpy@s 0072  
                            strlen@s 0070          __end_ofi1_timer_Timer0Reset 0839  
              i1_display_update$1550 0029                            _PORTAbits 000C  
                          _PORTCbits 000E               ??i1_display_write_byte 0072  
             ??i1_display_write_once 007C                            _TRISCbits 008E  
           __end_ofi1_display_update 07F2                            i1___awdiv 0B9F  
                          i1___awmod 0ACF                  __end_of_bpc_Cnt2Qua 0E02  
         __size_ofi1_capture_setEdge 0010          __end_of_timer_IsTimer0Itrpt 082C  
        __end_of_timer_IsTimer1Itrpt 0830                       i1_led_SetState 0872  
                        _CCP2CONbits 029A                            _TXSTAbits 019E  
                      ??_display_set 01C4                          vfpfcnvrt@ap 004F  
                        vfpfcnvrt@cp 005D                          vfpfcnvrt@fp 005F  
                        vfpfcnvrt@ll 0055                  __end_of_capture_Set 0800  
       __size_of_timer_Timer0Handdle 0006              ??_timer_Timer1ClrIntrpt 0070  
                     __end_of_strcpy 0965                       __end_of_strlen 094D  
                start_initialization 00A5                          __end_of_ISR 00A3  
                        __end_of_abs 0936                          __end_of_pad 0C95  
                         ?i1___awdiv 0070                           ?i1___awmod 0070  
                display_write_byte@i 01C9    __size_of_display_control595_delay 000D  
                 _display_write_byte 0A75               display_write_byte@data 01C8  
                 _display_write_once 0A28            ?_display_control595_delay 0070  
             __end_ofi1_led_SetState 087C                       check_err@check 0029  
              key_checkPressed@pdata 0073                       check_err@pdata 002A  
             tmp_change@key_time_cnt 0164                  ?_display_write_byte 0070  
                ?_display_write_once 01CD             __end_of_capture_IsEnable 0824  
           __end_of_capture_IsIntrpt 0828                          vfprintf@fmt 0060  
                        __pdataBANK3 01E2                   i1___awmod@dividend 0072  
               ??_display_write_byte 01C6                 ??_display_write_once 01D0  
                           ??_strcpy 0071                             ??_strlen 0072  
                        _bpc_Cnt2Qua 0D7C                  __end_of_display_set 0868  
                          ___latbits 0002                        __pcstackBANK0 0020  
                      __pcstackBANK1 00A0                        __pcstackBANK2 0120  
                      __pcstackBANK3 01C4                     ___aodiv@dividend 0028  
                           ISR@F5516 02A0                             ISR@F5519 0320  
                    ?i1_led_SetState 0070                    __size_of_bpc_proc 0154  
          __size_of_timer_Timer0Init 000D            __size_of_timer_Timer1Init 000D  
                          _check_err 057A                    __size_of_init_env 007E  
                          _dtoa$1774 003B            __size_of_key_checkPressed 001B  
                        _capture_Set 07F2                             ?___aodiv 0020  
                           ?___aomod 0020                             ?___awdiv 01C4  
                   ___aodiv@quotient 0073                             ?___awmod 01C4  
                      bpc_proc@pdata 0037                            _led_Blink 0887  
                  i1___awdiv@divisor 0070                    i1___awdiv@counter 0075  
                  __size_of_vfprintf 002F                             ?_cnt_abs 0070  
                  _timer_Timer0Reset 0839                          ??i1___awdiv 0074  
                        ??i1___awmod 0074                    _timer_Timer0Start 0830  
                  _timer_Timer1Start 081D                             ?_sprintf 0068  
                     __size_of_fputc 0045                       __size_of_fputs 0026  
                 ?_timer_Timer0Reset 0070                      _capture_handdle 0C95  
                     __size_of_putch 0001                   ?_timer_Timer0Start 0070  
                 ?_timer_Timer1Start 0070                    _capture_IsNegEdge 0868  
               _capture_handdle$1382 0077                   ?_capture_IsNegEdge 0070  
                           _LATBbits 010D                      _capture_setEdge 08E0  
                         ?_check_err 0070                            clear_ram0 0844  
                   ??i1_data_getdata 0070                             _PIE1bits 0091  
                           _PIE2bits 0092                  ??_timer_Timer0Reset 01C4  
                           u222_2lld 04AF                  ??_timer_Timer0Start 01C4  
                           u233_2lld 0695                  ??_timer_Timer1Start 01C4  
                          bpc_proc@i 0034                             _PIR1bits 0011  
                           _PIR2bits 0012                __end_ofi1_capture_Set 08A9  
                ??_capture_IsNegEdge 0070                            _uart_init 0980  
                         ?_led_Blink 0070                          _display_set 085F  
                          _vfpfcnvrt 0386            __end_of_timer_Timer0Reset 083E  
                           _WPUCbits 020E            __end_of_timer_Timer0Start 0834  
          __end_of_timer_Timer1Start 0820                    ?i1_display_update 0070  
          __end_of_capture_IsNegEdge 0872              __size_of_display_update 00A8  
                 ??i1_display_update 0020                  _timer_Timer0Handdle 083E  
              __end_of_key_isPressed 091F                           vfprintf@ap 0062  
                         vfprintf@fp 0065                        ??_update_time 002C  
                          init_env@i 01DF                        ?_data_getdata 0070  
                         ?_uart_init 0070                    i1___awmod@divisor 0070  
                  i1___awmod@counter 0075                     __size_of___aodiv 00F3  
                   __size_of___aomod 00DC                     __size_of___awdiv 0052  
                   __size_of___awmod 0046                           ?_vfpfcnvrt 004E  
       ??i1_display_control595_delay 0070                      ___aodiv@divisor 0020  
                    ___aodiv@counter 0071                       led_Blink@State 0166  
               ?_timer_Timer0Handdle 0070                     __size_of_cnt_abs 0016  
                         sprintf@fmt 0068              __end_of_capture_handdle 0CFE  
              i1display_update@pdata 002B       __size_of_timer_Timer1ClrIntrpt 0003  
      __end_of_timer_Timer1ClrIntrpt 081D         __size_ofi1_timer_Timer0Reset 0005  
                           _bpc_proc 00E1                i1capture_setEdge@edge 0070  
      __size_ofi1_display_write_byte 0027                             __ptext10 0A28  
                           __ptext11 0A75                             __ptext12 08A9  
                           __ptext21 0834                             __ptext13 0002  
                           __ptext30 09DF                             __ptext22 081A  
                           __ptext14 0B59                             __ptext31 0AA0  
                           __ptext23 083E                             __ptext15 0BF0  
                           __ptext40 091F                             __ptext32 0386  
                           __ptext24 0E02                             __ptext16 085F  
                           __ptext41 066D                             __ptext33 0F3A  
                           __ptext25 0965                             __ptext17 0857  
                           __ptext50 00E1                             __ptext42 0487  
                           __ptext34 0235                             __ptext26 0887  
                           __ptext18 08E0                             __ptext51 0749  
                           __ptext43 0909                             __ptext35 0C42  
                           __ptext27 082C                             __ptext19 07F2  
                           __ptext60 0815                             __ptext52 09BD  
                           __ptext44 0C95                             __ptext36 0936  
                           __ptext28 0828                             __ptext61 08F3  
                           __ptext53 0A4E                             __ptext45 0872  
                           __ptext37 0A02                             __ptext29 094D  
                           __ptext62 0868                             __ptext54 087C  
                           __ptext46 08D0                             __ptext38 0B14  
                           __ptext55 0ACF                             __ptext47 0817  
                           __ptext39 0814                             __ptext56 0B9F  
                           __ptext48 0824                             __ptext57 089D  
                           __ptext49 0820                             __ptext58 057A  
                           __ptext59 0D7C        __size_ofi1_display_write_once 0022  
            __end_of_capture_setEdge 08F3                    _capture_clrIntrpt 0817  
                   __size_of_sprintf 0023                           strcpy@dest 0074  
                 ?_capture_clrIntrpt 0070        display_control595_delay@times 01C5  
                   _timer_Timer0Init 08B6                     _timer_Timer1Init 08C3  
                           _init_env 0CFE                        __size_of_main 0021  
                      __size_of_dtoa 0151                        __size_of_stoa 00C6  
                        ??_check_err 0072                    ?_capture_IsEnable 0070  
                           _segmcode 1000                  ??_capture_clrIntrpt 0070  
                      init_env@pdata 01E1                    ?_capture_IsIntrpt 0070  
                   _key_checkPressed 0965         __size_of_timer_IsTimer0Itrpt 0004  
                 ??_capture_IsEnable 0070         __size_of_timer_IsTimer1Itrpt 0004  
                     ??_data_getdata 01C4                            stoa@F1139 01E2  
                      ?_capture_init 0070                   ??_capture_IsIntrpt 0070  
                           int$flags 007E                          ??_led_Blink 0071  
                           cnt_abs@a 0070                             cnt_abs@b 0072  
                           _vfprintf 0AA0                  __end_of_update_time 0E92  
                   ___aomod@dividend 0028                         ?_bpc_Cnt2Qua 0070  
              ??_timer_Timer0Handdle 007E           __size_of_timer_Timer0Reset 0005  
                   ??i1_led_SetState 0070                           _INTCONbits 000B  
         __size_of_timer_Timer0Start 0004           __size_of_timer_Timer1Start 0003  
          __end_of_capture_clrIntrpt 081A           __size_of_capture_IsNegEdge 000A  
                           intlevel1 0000                            sprintf@ap 00A2  
                  __CFG_CLKOUTEN$OFF 0000                            strcpy@src 0070  
                         _OSCCONbits 0099                         ?_capture_Set 0070  
                 key_isPressed@pdata 0071                       ??_capture_init 01C5  
                        ??_uart_init 01C4                      ___aomod@divisor 0020  
                    display_set@ison 01C4                          ??_vfpfcnvrt 0050  
                   bpc_Cnt2Qua@pdata 0076                             stoa@nuls 0020  
                    ___aomod@counter 0071                        __pstringtext1 1000  
                      __pstringtext2 101F                        __pstringtext3 1026  
                      __pstringtext4 0000          __size_of_display_write_byte 002B  
        __size_of_display_write_once 0026                             sprintf@f 00A4  
                           sprintf@s 00A3             _display_control595_delay 08A9  
                   ?_capture_handdle 0070                       _display_update 0E92  
                      ?_led_SetState 0070                     ?_capture_setEdge 0070  
                       ___aodiv@sign 0072                         ___aomod@sign 0072  
                     _check_err$1150 0026                       _check_err$1145 0020  
                     _check_err$1146 0022                       _check_err$1149 0024  
