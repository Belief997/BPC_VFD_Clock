

Microchip Technology PIC LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Wed Jun 19 01:31:07 2019

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1                           	processor	16F1786
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK2,global,class=CODE,delta=2
     5                           	psect	stringtext1,global,class=STRCODE,delta=2
     6                           	psect	stringtext2,global,class=STRCODE,delta=2
     7                           	psect	stringtext3,global,class=STRCODE,delta=2
     8                           	psect	stringtext4,global,class=STRCODE,delta=2
     9                           	psect	cinit,global,class=CODE,merge=1,delta=2
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    16                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
    17                           	psect	bssBANK6,global,class=BANK6,space=1,delta=1
    18                           	psect	inittext,global,class=CODE,delta=2
    19                           	psect	clrtext,global,class=CODE,delta=2
    20                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    21                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    22                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    23                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    24                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    25                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    26                           	psect	text1,local,class=CODE,merge=1,delta=2
    27                           	psect	text2,local,class=CODE,merge=1,delta=2
    28                           	psect	text3,local,class=CODE,merge=1,delta=2
    29                           	psect	text4,local,class=CODE,merge=1,delta=2
    30                           	psect	text5,local,class=CODE,merge=1,delta=2
    31                           	psect	text6,local,class=CODE,merge=1,delta=2
    32                           	psect	text7,local,class=CODE,merge=1,delta=2
    33                           	psect	text8,local,class=CODE,merge=1,delta=2
    34                           	psect	text9,local,class=CODE,merge=1,delta=2
    35                           	psect	text10,local,class=CODE,merge=1,delta=2
    36                           	psect	text11,local,class=CODE,merge=1,delta=2
    37                           	psect	text12,local,class=CODE,merge=1,delta=2
    38                           	psect	text13,local,class=CODE,merge=1,delta=2
    39                           	psect	text14,local,class=CODE,merge=1,delta=2,group=1
    40                           	psect	text15,local,class=CODE,merge=1,delta=2,group=1
    41                           	psect	text16,local,class=CODE,merge=1,delta=2
    42                           	psect	text17,local,class=CODE,merge=1,delta=2
    43                           	psect	text18,local,class=CODE,merge=1,delta=2
    44                           	psect	text19,local,class=CODE,merge=1,delta=2
    45                           	psect	intentry,global,class=CODE,delta=2
    46                           	psect	text21,local,class=CODE,merge=1,delta=2
    47                           	psect	text22,local,class=CODE,merge=1,delta=2
    48                           	psect	text23,local,class=CODE,merge=1,delta=2
    49                           	psect	text24,local,class=CODE,merge=1,delta=2
    50                           	psect	text25,local,class=CODE,merge=1,delta=2
    51                           	psect	text26,local,class=CODE,merge=1,delta=2
    52                           	psect	text27,local,class=CODE,merge=1,delta=2
    53                           	psect	text28,local,class=CODE,merge=1,delta=2
    54                           	psect	text29,local,class=CODE,merge=1,delta=2,group=2
    55                           	psect	text30,local,class=CODE,merge=1,delta=2,group=2
    56                           	psect	text31,local,class=CODE,merge=1,delta=2
    57                           	psect	text32,local,class=CODE,merge=1,delta=2
    58                           	psect	text33,local,class=CODE,merge=1,delta=2
    59                           	psect	text34,local,class=CODE,merge=1,delta=2
    60                           	psect	text35,local,class=CODE,merge=1,delta=2
    61                           	psect	text36,local,class=CODE,merge=1,delta=2,group=2
    62                           	psect	text37,local,class=CODE,merge=1,delta=2,group=2
    63                           	psect	text38,local,class=CODE,merge=1,delta=2,group=2
    64                           	psect	text39,local,class=CODE,merge=1,delta=2,group=2
    65                           	psect	text40,local,class=CODE,merge=1,delta=2,group=2
    66                           	psect	text41,local,class=CODE,merge=1,delta=2,group=1
    67                           	psect	text42,local,class=CODE,merge=1,delta=2,group=1
    68                           	psect	text43,local,class=CODE,merge=1,delta=2
    69                           	psect	text44,local,class=CODE,merge=1,delta=2
    70                           	psect	text45,local,class=CODE,merge=1,delta=2
    71                           	psect	text46,local,class=CODE,merge=1,delta=2
    72                           	psect	text47,local,class=CODE,merge=1,delta=2
    73                           	psect	text48,local,class=CODE,merge=1,delta=2
    74                           	psect	text49,local,class=CODE,merge=1,delta=2
    75                           	psect	text50,local,class=CODE,merge=1,delta=2
    76                           	psect	text51,local,class=CODE,merge=1,delta=2
    77                           	psect	text52,local,class=CODE,merge=1,delta=2
    78                           	psect	text53,local,class=CODE,merge=1,delta=2
    79                           	psect	text54,local,class=CODE,merge=1,delta=2
    80                           	psect	text55,local,class=CODE,merge=1,delta=2
    81                           	psect	text56,local,class=CODE,merge=1,delta=2
    82                           	psect	text57,local,class=CODE,merge=1,delta=2
    83                           	psect	text58,local,class=CODE,merge=1,delta=2
    84                           	psect	text59,local,class=CODE,merge=1,delta=2
    85                           	psect	text60,local,class=CODE,merge=1,delta=2
    86                           	psect	text61,local,class=CODE,merge=1,delta=2
    87                           	psect	text62,local,class=CODE,merge=1,delta=2
    88                           	psect	text63,local,class=CODE,merge=1,delta=2,group=1
    89                           	psect	text64,local,class=CODE,merge=1,delta=2
    90                           	psect	text65,local,class=CODE,merge=1,delta=2
    91                           	psect	text66,local,class=CODE,merge=1,delta=2
    92                           	psect	text67,local,class=CODE,merge=1,delta=2
    93                           	psect	text68,local,class=CODE,merge=1,delta=2
    94                           	psect	text69,local,class=CODE,merge=1,delta=2
    95                           	psect	text70,local,class=CODE,merge=1,delta=2
    96                           	psect	text71,local,class=CODE,merge=1,delta=2
    97                           	psect	text72,local,class=CODE,merge=1,delta=2
    98                           	psect	text73,local,class=CODE,merge=1,delta=2
    99                           	dabs	1,0x7E,2
   100  0000                     
   101                           ; Version 2.00
   102                           ; Generated 27/05/2018 GMT
   103                           ; 
   104                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
   105                           ; All rights reserved.
   106                           ; 
   107                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   108                           ; 
   109                           ; Redistribution and use in source and binary forms, with or without modification, are
   110                           ; permitted provided that the following conditions are met:
   111                           ; 
   112                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   113                           ;        conditions and the following disclaimer.
   114                           ; 
   115                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   116                           ;        of conditions and the following disclaimer in the documentation and/or other
   117                           ;        materials provided with the distribution.
   118                           ; 
   119                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   120                           ;        software without specific prior written permission.
   121                           ; 
   122                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   123                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   124                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   125                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   126                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   127                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   128                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   129                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   130                           ; 
   131                           ; 
   132                           ; Code-generator required, PIC16F1786 Definitions
   133                           ; 
   134                           ; SFR Addresses
   135  0000                     	;# 
   136  0001                     	;# 
   137  0002                     	;# 
   138  0003                     	;# 
   139  0004                     	;# 
   140  0005                     	;# 
   141  0006                     	;# 
   142  0007                     	;# 
   143  0008                     	;# 
   144  0009                     	;# 
   145  000A                     	;# 
   146  000B                     	;# 
   147  000C                     	;# 
   148  000D                     	;# 
   149  000E                     	;# 
   150  0010                     	;# 
   151  0011                     	;# 
   152  0012                     	;# 
   153  0013                     	;# 
   154  0014                     	;# 
   155  0015                     	;# 
   156  0016                     	;# 
   157  0016                     	;# 
   158  0017                     	;# 
   159  0018                     	;# 
   160  0019                     	;# 
   161  001A                     	;# 
   162  001B                     	;# 
   163  001C                     	;# 
   164  008C                     	;# 
   165  008D                     	;# 
   166  008E                     	;# 
   167  0090                     	;# 
   168  0091                     	;# 
   169  0092                     	;# 
   170  0093                     	;# 
   171  0094                     	;# 
   172  0095                     	;# 
   173  0096                     	;# 
   174  0097                     	;# 
   175  0098                     	;# 
   176  0099                     	;# 
   177  009A                     	;# 
   178  009B                     	;# 
   179  009B                     	;# 
   180  009C                     	;# 
   181  009D                     	;# 
   182  009E                     	;# 
   183  009F                     	;# 
   184  010C                     	;# 
   185  010D                     	;# 
   186  010E                     	;# 
   187  0111                     	;# 
   188  0112                     	;# 
   189  0113                     	;# 
   190  0114                     	;# 
   191  0115                     	;# 
   192  0116                     	;# 
   193  0117                     	;# 
   194  0118                     	;# 
   195  0119                     	;# 
   196  011A                     	;# 
   197  011B                     	;# 
   198  011C                     	;# 
   199  011D                     	;# 
   200  011D                     	;# 
   201  011D                     	;# 
   202  011E                     	;# 
   203  011F                     	;# 
   204  018C                     	;# 
   205  018D                     	;# 
   206  0191                     	;# 
   207  0191                     	;# 
   208  0192                     	;# 
   209  0193                     	;# 
   210  0193                     	;# 
   211  0193                     	;# 
   212  0194                     	;# 
   213  0195                     	;# 
   214  0196                     	;# 
   215  0197                     	;# 
   216  0199                     	;# 
   217  0199                     	;# 
   218  0199                     	;# 
   219  019A                     	;# 
   220  019A                     	;# 
   221  019A                     	;# 
   222  019B                     	;# 
   223  019B                     	;# 
   224  019B                     	;# 
   225  019B                     	;# 
   226  019B                     	;# 
   227  019C                     	;# 
   228  019C                     	;# 
   229  019C                     	;# 
   230  019D                     	;# 
   231  019D                     	;# 
   232  019D                     	;# 
   233  019E                     	;# 
   234  019E                     	;# 
   235  019E                     	;# 
   236  019F                     	;# 
   237  019F                     	;# 
   238  019F                     	;# 
   239  019F                     	;# 
   240  019F                     	;# 
   241  020C                     	;# 
   242  020D                     	;# 
   243  020E                     	;# 
   244  0210                     	;# 
   245  0211                     	;# 
   246  0211                     	;# 
   247  0212                     	;# 
   248  0212                     	;# 
   249  0213                     	;# 
   250  0213                     	;# 
   251  0214                     	;# 
   252  0214                     	;# 
   253  0215                     	;# 
   254  0215                     	;# 
   255  0215                     	;# 
   256  0215                     	;# 
   257  0216                     	;# 
   258  0216                     	;# 
   259  0217                     	;# 
   260  0217                     	;# 
   261  028C                     	;# 
   262  028D                     	;# 
   263  028E                     	;# 
   264  0291                     	;# 
   265  0291                     	;# 
   266  0292                     	;# 
   267  0293                     	;# 
   268  0298                     	;# 
   269  0298                     	;# 
   270  0299                     	;# 
   271  029A                     	;# 
   272  030C                     	;# 
   273  030D                     	;# 
   274  030E                     	;# 
   275  0311                     	;# 
   276  0311                     	;# 
   277  0312                     	;# 
   278  0313                     	;# 
   279  038C                     	;# 
   280  038D                     	;# 
   281  038E                     	;# 
   282  0390                     	;# 
   283  0391                     	;# 
   284  0392                     	;# 
   285  0393                     	;# 
   286  0394                     	;# 
   287  0395                     	;# 
   288  0396                     	;# 
   289  0397                     	;# 
   290  0398                     	;# 
   291  0399                     	;# 
   292  039D                     	;# 
   293  039E                     	;# 
   294  039F                     	;# 
   295  0511                     	;# 
   296  0513                     	;# 
   297  051A                     	;# 
   298  0811                     	;# 
   299  0812                     	;# 
   300  0813                     	;# 
   301  0814                     	;# 
   302  0815                     	;# 
   303  0816                     	;# 
   304  0817                     	;# 
   305  0818                     	;# 
   306  0819                     	;# 
   307  081A                     	;# 
   308  081B                     	;# 
   309  081C                     	;# 
   310  081D                     	;# 
   311  081E                     	;# 
   312  081F                     	;# 
   313  0820                     	;# 
   314  0821                     	;# 
   315  0821                     	;# 
   316  0822                     	;# 
   317  0823                     	;# 
   318  0823                     	;# 
   319  0824                     	;# 
   320  0825                     	;# 
   321  0825                     	;# 
   322  0826                     	;# 
   323  0827                     	;# 
   324  0827                     	;# 
   325  0828                     	;# 
   326  0829                     	;# 
   327  082A                     	;# 
   328  082B                     	;# 
   329  082C                     	;# 
   330  082D                     	;# 
   331  082E                     	;# 
   332  082F                     	;# 
   333  0831                     	;# 
   334  0832                     	;# 
   335  0833                     	;# 
   336  0834                     	;# 
   337  0835                     	;# 
   338  0836                     	;# 
   339  0837                     	;# 
   340  0838                     	;# 
   341  0839                     	;# 
   342  083A                     	;# 
   343  083B                     	;# 
   344  083C                     	;# 
   345  083D                     	;# 
   346  083E                     	;# 
   347  083F                     	;# 
   348  0840                     	;# 
   349  0841                     	;# 
   350  0841                     	;# 
   351  0842                     	;# 
   352  0843                     	;# 
   353  0843                     	;# 
   354  0844                     	;# 
   355  0845                     	;# 
   356  0845                     	;# 
   357  0846                     	;# 
   358  0847                     	;# 
   359  0847                     	;# 
   360  0848                     	;# 
   361  0849                     	;# 
   362  084A                     	;# 
   363  084B                     	;# 
   364  084C                     	;# 
   365  084D                     	;# 
   366  084E                     	;# 
   367  084F                     	;# 
   368  0851                     	;# 
   369  0852                     	;# 
   370  0853                     	;# 
   371  0854                     	;# 
   372  0855                     	;# 
   373  0856                     	;# 
   374  0857                     	;# 
   375  0858                     	;# 
   376  0859                     	;# 
   377  085A                     	;# 
   378  085B                     	;# 
   379  085C                     	;# 
   380  085D                     	;# 
   381  085E                     	;# 
   382  085F                     	;# 
   383  0860                     	;# 
   384  0861                     	;# 
   385  0861                     	;# 
   386  0862                     	;# 
   387  0863                     	;# 
   388  0863                     	;# 
   389  0864                     	;# 
   390  0865                     	;# 
   391  0865                     	;# 
   392  0866                     	;# 
   393  0867                     	;# 
   394  0867                     	;# 
   395  0868                     	;# 
   396  0869                     	;# 
   397  086A                     	;# 
   398  086B                     	;# 
   399  086C                     	;# 
   400  086D                     	;# 
   401  086E                     	;# 
   402  086F                     	;# 
   403  0FE4                     	;# 
   404  0FE5                     	;# 
   405  0FE6                     	;# 
   406  0FE7                     	;# 
   407  0FE8                     	;# 
   408  0FE9                     	;# 
   409  0FEA                     	;# 
   410  0FEB                     	;# 
   411  0FED                     	;# 
   412  0FEE                     	;# 
   413  0FEF                     	;# 
   414  0000                     	;# 
   415  0001                     	;# 
   416  0002                     	;# 
   417  0003                     	;# 
   418  0004                     	;# 
   419  0005                     	;# 
   420  0006                     	;# 
   421  0007                     	;# 
   422  0008                     	;# 
   423  0009                     	;# 
   424  000A                     	;# 
   425  000B                     	;# 
   426  000C                     	;# 
   427  000D                     	;# 
   428  000E                     	;# 
   429  0010                     	;# 
   430  0011                     	;# 
   431  0012                     	;# 
   432  0013                     	;# 
   433  0014                     	;# 
   434  0015                     	;# 
   435  0016                     	;# 
   436  0016                     	;# 
   437  0017                     	;# 
   438  0018                     	;# 
   439  0019                     	;# 
   440  001A                     	;# 
   441  001B                     	;# 
   442  001C                     	;# 
   443  008C                     	;# 
   444  008D                     	;# 
   445  008E                     	;# 
   446  0090                     	;# 
   447  0091                     	;# 
   448  0092                     	;# 
   449  0093                     	;# 
   450  0094                     	;# 
   451  0095                     	;# 
   452  0096                     	;# 
   453  0097                     	;# 
   454  0098                     	;# 
   455  0099                     	;# 
   456  009A                     	;# 
   457  009B                     	;# 
   458  009B                     	;# 
   459  009C                     	;# 
   460  009D                     	;# 
   461  009E                     	;# 
   462  009F                     	;# 
   463  010C                     	;# 
   464  010D                     	;# 
   465  010E                     	;# 
   466  0111                     	;# 
   467  0112                     	;# 
   468  0113                     	;# 
   469  0114                     	;# 
   470  0115                     	;# 
   471  0116                     	;# 
   472  0117                     	;# 
   473  0118                     	;# 
   474  0119                     	;# 
   475  011A                     	;# 
   476  011B                     	;# 
   477  011C                     	;# 
   478  011D                     	;# 
   479  011D                     	;# 
   480  011D                     	;# 
   481  011E                     	;# 
   482  011F                     	;# 
   483  018C                     	;# 
   484  018D                     	;# 
   485  0191                     	;# 
   486  0191                     	;# 
   487  0192                     	;# 
   488  0193                     	;# 
   489  0193                     	;# 
   490  0193                     	;# 
   491  0194                     	;# 
   492  0195                     	;# 
   493  0196                     	;# 
   494  0197                     	;# 
   495  0199                     	;# 
   496  0199                     	;# 
   497  0199                     	;# 
   498  019A                     	;# 
   499  019A                     	;# 
   500  019A                     	;# 
   501  019B                     	;# 
   502  019B                     	;# 
   503  019B                     	;# 
   504  019B                     	;# 
   505  019B                     	;# 
   506  019C                     	;# 
   507  019C                     	;# 
   508  019C                     	;# 
   509  019D                     	;# 
   510  019D                     	;# 
   511  019D                     	;# 
   512  019E                     	;# 
   513  019E                     	;# 
   514  019E                     	;# 
   515  019F                     	;# 
   516  019F                     	;# 
   517  019F                     	;# 
   518  019F                     	;# 
   519  019F                     	;# 
   520  020C                     	;# 
   521  020D                     	;# 
   522  020E                     	;# 
   523  0210                     	;# 
   524  0211                     	;# 
   525  0211                     	;# 
   526  0212                     	;# 
   527  0212                     	;# 
   528  0213                     	;# 
   529  0213                     	;# 
   530  0214                     	;# 
   531  0214                     	;# 
   532  0215                     	;# 
   533  0215                     	;# 
   534  0215                     	;# 
   535  0215                     	;# 
   536  0216                     	;# 
   537  0216                     	;# 
   538  0217                     	;# 
   539  0217                     	;# 
   540  028C                     	;# 
   541  028D                     	;# 
   542  028E                     	;# 
   543  0291                     	;# 
   544  0291                     	;# 
   545  0292                     	;# 
   546  0293                     	;# 
   547  0298                     	;# 
   548  0298                     	;# 
   549  0299                     	;# 
   550  029A                     	;# 
   551  030C                     	;# 
   552  030D                     	;# 
   553  030E                     	;# 
   554  0311                     	;# 
   555  0311                     	;# 
   556  0312                     	;# 
   557  0313                     	;# 
   558  038C                     	;# 
   559  038D                     	;# 
   560  038E                     	;# 
   561  0390                     	;# 
   562  0391                     	;# 
   563  0392                     	;# 
   564  0393                     	;# 
   565  0394                     	;# 
   566  0395                     	;# 
   567  0396                     	;# 
   568  0397                     	;# 
   569  0398                     	;# 
   570  0399                     	;# 
   571  039D                     	;# 
   572  039E                     	;# 
   573  039F                     	;# 
   574  0511                     	;# 
   575  0513                     	;# 
   576  051A                     	;# 
   577  0811                     	;# 
   578  0812                     	;# 
   579  0813                     	;# 
   580  0814                     	;# 
   581  0815                     	;# 
   582  0816                     	;# 
   583  0817                     	;# 
   584  0818                     	;# 
   585  0819                     	;# 
   586  081A                     	;# 
   587  081B                     	;# 
   588  081C                     	;# 
   589  081D                     	;# 
   590  081E                     	;# 
   591  081F                     	;# 
   592  0820                     	;# 
   593  0821                     	;# 
   594  0821                     	;# 
   595  0822                     	;# 
   596  0823                     	;# 
   597  0823                     	;# 
   598  0824                     	;# 
   599  0825                     	;# 
   600  0825                     	;# 
   601  0826                     	;# 
   602  0827                     	;# 
   603  0827                     	;# 
   604  0828                     	;# 
   605  0829                     	;# 
   606  082A                     	;# 
   607  082B                     	;# 
   608  082C                     	;# 
   609  082D                     	;# 
   610  082E                     	;# 
   611  082F                     	;# 
   612  0831                     	;# 
   613  0832                     	;# 
   614  0833                     	;# 
   615  0834                     	;# 
   616  0835                     	;# 
   617  0836                     	;# 
   618  0837                     	;# 
   619  0838                     	;# 
   620  0839                     	;# 
   621  083A                     	;# 
   622  083B                     	;# 
   623  083C                     	;# 
   624  083D                     	;# 
   625  083E                     	;# 
   626  083F                     	;# 
   627  0840                     	;# 
   628  0841                     	;# 
   629  0841                     	;# 
   630  0842                     	;# 
   631  0843                     	;# 
   632  0843                     	;# 
   633  0844                     	;# 
   634  0845                     	;# 
   635  0845                     	;# 
   636  0846                     	;# 
   637  0847                     	;# 
   638  0847                     	;# 
   639  0848                     	;# 
   640  0849                     	;# 
   641  084A                     	;# 
   642  084B                     	;# 
   643  084C                     	;# 
   644  084D                     	;# 
   645  084E                     	;# 
   646  084F                     	;# 
   647  0851                     	;# 
   648  0852                     	;# 
   649  0853                     	;# 
   650  0854                     	;# 
   651  0855                     	;# 
   652  0856                     	;# 
   653  0857                     	;# 
   654  0858                     	;# 
   655  0859                     	;# 
   656  085A                     	;# 
   657  085B                     	;# 
   658  085C                     	;# 
   659  085D                     	;# 
   660  085E                     	;# 
   661  085F                     	;# 
   662  0860                     	;# 
   663  0861                     	;# 
   664  0861                     	;# 
   665  0862                     	;# 
   666  0863                     	;# 
   667  0863                     	;# 
   668  0864                     	;# 
   669  0865                     	;# 
   670  0865                     	;# 
   671  0866                     	;# 
   672  0867                     	;# 
   673  0867                     	;# 
   674  0868                     	;# 
   675  0869                     	;# 
   676  086A                     	;# 
   677  086B                     	;# 
   678  086C                     	;# 
   679  086D                     	;# 
   680  086E                     	;# 
   681  086F                     	;# 
   682  0FE4                     	;# 
   683  0FE5                     	;# 
   684  0FE6                     	;# 
   685  0FE7                     	;# 
   686  0FE8                     	;# 
   687  0FE9                     	;# 
   688  0FEA                     	;# 
   689  0FEB                     	;# 
   690  0FED                     	;# 
   691  0FEE                     	;# 
   692  0FEF                     	;# 
   693  0000                     	;# 
   694  0001                     	;# 
   695  0002                     	;# 
   696  0003                     	;# 
   697  0004                     	;# 
   698  0005                     	;# 
   699  0006                     	;# 
   700  0007                     	;# 
   701  0008                     	;# 
   702  0009                     	;# 
   703  000A                     	;# 
   704  000B                     	;# 
   705  000C                     	;# 
   706  000D                     	;# 
   707  000E                     	;# 
   708  0010                     	;# 
   709  0011                     	;# 
   710  0012                     	;# 
   711  0013                     	;# 
   712  0014                     	;# 
   713  0015                     	;# 
   714  0016                     	;# 
   715  0016                     	;# 
   716  0017                     	;# 
   717  0018                     	;# 
   718  0019                     	;# 
   719  001A                     	;# 
   720  001B                     	;# 
   721  001C                     	;# 
   722  008C                     	;# 
   723  008D                     	;# 
   724  008E                     	;# 
   725  0090                     	;# 
   726  0091                     	;# 
   727  0092                     	;# 
   728  0093                     	;# 
   729  0094                     	;# 
   730  0095                     	;# 
   731  0096                     	;# 
   732  0097                     	;# 
   733  0098                     	;# 
   734  0099                     	;# 
   735  009A                     	;# 
   736  009B                     	;# 
   737  009B                     	;# 
   738  009C                     	;# 
   739  009D                     	;# 
   740  009E                     	;# 
   741  009F                     	;# 
   742  010C                     	;# 
   743  010D                     	;# 
   744  010E                     	;# 
   745  0111                     	;# 
   746  0112                     	;# 
   747  0113                     	;# 
   748  0114                     	;# 
   749  0115                     	;# 
   750  0116                     	;# 
   751  0117                     	;# 
   752  0118                     	;# 
   753  0119                     	;# 
   754  011A                     	;# 
   755  011B                     	;# 
   756  011C                     	;# 
   757  011D                     	;# 
   758  011D                     	;# 
   759  011D                     	;# 
   760  011E                     	;# 
   761  011F                     	;# 
   762  018C                     	;# 
   763  018D                     	;# 
   764  0191                     	;# 
   765  0191                     	;# 
   766  0192                     	;# 
   767  0193                     	;# 
   768  0193                     	;# 
   769  0193                     	;# 
   770  0194                     	;# 
   771  0195                     	;# 
   772  0196                     	;# 
   773  0197                     	;# 
   774  0199                     	;# 
   775  0199                     	;# 
   776  0199                     	;# 
   777  019A                     	;# 
   778  019A                     	;# 
   779  019A                     	;# 
   780  019B                     	;# 
   781  019B                     	;# 
   782  019B                     	;# 
   783  019B                     	;# 
   784  019B                     	;# 
   785  019C                     	;# 
   786  019C                     	;# 
   787  019C                     	;# 
   788  019D                     	;# 
   789  019D                     	;# 
   790  019D                     	;# 
   791  019E                     	;# 
   792  019E                     	;# 
   793  019E                     	;# 
   794  019F                     	;# 
   795  019F                     	;# 
   796  019F                     	;# 
   797  019F                     	;# 
   798  019F                     	;# 
   799  020C                     	;# 
   800  020D                     	;# 
   801  020E                     	;# 
   802  0210                     	;# 
   803  0211                     	;# 
   804  0211                     	;# 
   805  0212                     	;# 
   806  0212                     	;# 
   807  0213                     	;# 
   808  0213                     	;# 
   809  0214                     	;# 
   810  0214                     	;# 
   811  0215                     	;# 
   812  0215                     	;# 
   813  0215                     	;# 
   814  0215                     	;# 
   815  0216                     	;# 
   816  0216                     	;# 
   817  0217                     	;# 
   818  0217                     	;# 
   819  028C                     	;# 
   820  028D                     	;# 
   821  028E                     	;# 
   822  0291                     	;# 
   823  0291                     	;# 
   824  0292                     	;# 
   825  0293                     	;# 
   826  0298                     	;# 
   827  0298                     	;# 
   828  0299                     	;# 
   829  029A                     	;# 
   830  030C                     	;# 
   831  030D                     	;# 
   832  030E                     	;# 
   833  0311                     	;# 
   834  0311                     	;# 
   835  0312                     	;# 
   836  0313                     	;# 
   837  038C                     	;# 
   838  038D                     	;# 
   839  038E                     	;# 
   840  0390                     	;# 
   841  0391                     	;# 
   842  0392                     	;# 
   843  0393                     	;# 
   844  0394                     	;# 
   845  0395                     	;# 
   846  0396                     	;# 
   847  0397                     	;# 
   848  0398                     	;# 
   849  0399                     	;# 
   850  039D                     	;# 
   851  039E                     	;# 
   852  039F                     	;# 
   853  0511                     	;# 
   854  0513                     	;# 
   855  051A                     	;# 
   856  0811                     	;# 
   857  0812                     	;# 
   858  0813                     	;# 
   859  0814                     	;# 
   860  0815                     	;# 
   861  0816                     	;# 
   862  0817                     	;# 
   863  0818                     	;# 
   864  0819                     	;# 
   865  081A                     	;# 
   866  081B                     	;# 
   867  081C                     	;# 
   868  081D                     	;# 
   869  081E                     	;# 
   870  081F                     	;# 
   871  0820                     	;# 
   872  0821                     	;# 
   873  0821                     	;# 
   874  0822                     	;# 
   875  0823                     	;# 
   876  0823                     	;# 
   877  0824                     	;# 
   878  0825                     	;# 
   879  0825                     	;# 
   880  0826                     	;# 
   881  0827                     	;# 
   882  0827                     	;# 
   883  0828                     	;# 
   884  0829                     	;# 
   885  082A                     	;# 
   886  082B                     	;# 
   887  082C                     	;# 
   888  082D                     	;# 
   889  082E                     	;# 
   890  082F                     	;# 
   891  0831                     	;# 
   892  0832                     	;# 
   893  0833                     	;# 
   894  0834                     	;# 
   895  0835                     	;# 
   896  0836                     	;# 
   897  0837                     	;# 
   898  0838                     	;# 
   899  0839                     	;# 
   900  083A                     	;# 
   901  083B                     	;# 
   902  083C                     	;# 
   903  083D                     	;# 
   904  083E                     	;# 
   905  083F                     	;# 
   906  0840                     	;# 
   907  0841                     	;# 
   908  0841                     	;# 
   909  0842                     	;# 
   910  0843                     	;# 
   911  0843                     	;# 
   912  0844                     	;# 
   913  0845                     	;# 
   914  0845                     	;# 
   915  0846                     	;# 
   916  0847                     	;# 
   917  0847                     	;# 
   918  0848                     	;# 
   919  0849                     	;# 
   920  084A                     	;# 
   921  084B                     	;# 
   922  084C                     	;# 
   923  084D                     	;# 
   924  084E                     	;# 
   925  084F                     	;# 
   926  0851                     	;# 
   927  0852                     	;# 
   928  0853                     	;# 
   929  0854                     	;# 
   930  0855                     	;# 
   931  0856                     	;# 
   932  0857                     	;# 
   933  0858                     	;# 
   934  0859                     	;# 
   935  085A                     	;# 
   936  085B                     	;# 
   937  085C                     	;# 
   938  085D                     	;# 
   939  085E                     	;# 
   940  085F                     	;# 
   941  0860                     	;# 
   942  0861                     	;# 
   943  0861                     	;# 
   944  0862                     	;# 
   945  0863                     	;# 
   946  0863                     	;# 
   947  0864                     	;# 
   948  0865                     	;# 
   949  0865                     	;# 
   950  0866                     	;# 
   951  0867                     	;# 
   952  0867                     	;# 
   953  0868                     	;# 
   954  0869                     	;# 
   955  086A                     	;# 
   956  086B                     	;# 
   957  086C                     	;# 
   958  086D                     	;# 
   959  086E                     	;# 
   960  086F                     	;# 
   961  0FE4                     	;# 
   962  0FE5                     	;# 
   963  0FE6                     	;# 
   964  0FE7                     	;# 
   965  0FE8                     	;# 
   966  0FE9                     	;# 
   967  0FEA                     	;# 
   968  0FEB                     	;# 
   969  0FED                     	;# 
   970  0FEE                     	;# 
   971  0FEF                     	;# 
   972  0000                     	;# 
   973  0001                     	;# 
   974  0002                     	;# 
   975  0003                     	;# 
   976  0004                     	;# 
   977  0005                     	;# 
   978  0006                     	;# 
   979  0007                     	;# 
   980  0008                     	;# 
   981  0009                     	;# 
   982  000A                     	;# 
   983  000B                     	;# 
   984  000C                     	;# 
   985  000D                     	;# 
   986  000E                     	;# 
   987  0010                     	;# 
   988  0011                     	;# 
   989  0012                     	;# 
   990  0013                     	;# 
   991  0014                     	;# 
   992  0015                     	;# 
   993  0016                     	;# 
   994  0016                     	;# 
   995  0017                     	;# 
   996  0018                     	;# 
   997  0019                     	;# 
   998  001A                     	;# 
   999  001B                     	;# 
  1000  001C                     	;# 
  1001  008C                     	;# 
  1002  008D                     	;# 
  1003  008E                     	;# 
  1004  0090                     	;# 
  1005  0091                     	;# 
  1006  0092                     	;# 
  1007  0093                     	;# 
  1008  0094                     	;# 
  1009  0095                     	;# 
  1010  0096                     	;# 
  1011  0097                     	;# 
  1012  0098                     	;# 
  1013  0099                     	;# 
  1014  009A                     	;# 
  1015  009B                     	;# 
  1016  009B                     	;# 
  1017  009C                     	;# 
  1018  009D                     	;# 
  1019  009E                     	;# 
  1020  009F                     	;# 
  1021  010C                     	;# 
  1022  010D                     	;# 
  1023  010E                     	;# 
  1024  0111                     	;# 
  1025  0112                     	;# 
  1026  0113                     	;# 
  1027  0114                     	;# 
  1028  0115                     	;# 
  1029  0116                     	;# 
  1030  0117                     	;# 
  1031  0118                     	;# 
  1032  0119                     	;# 
  1033  011A                     	;# 
  1034  011B                     	;# 
  1035  011C                     	;# 
  1036  011D                     	;# 
  1037  011D                     	;# 
  1038  011D                     	;# 
  1039  011E                     	;# 
  1040  011F                     	;# 
  1041  018C                     	;# 
  1042  018D                     	;# 
  1043  0191                     	;# 
  1044  0191                     	;# 
  1045  0192                     	;# 
  1046  0193                     	;# 
  1047  0193                     	;# 
  1048  0193                     	;# 
  1049  0194                     	;# 
  1050  0195                     	;# 
  1051  0196                     	;# 
  1052  0197                     	;# 
  1053  0199                     	;# 
  1054  0199                     	;# 
  1055  0199                     	;# 
  1056  019A                     	;# 
  1057  019A                     	;# 
  1058  019A                     	;# 
  1059  019B                     	;# 
  1060  019B                     	;# 
  1061  019B                     	;# 
  1062  019B                     	;# 
  1063  019B                     	;# 
  1064  019C                     	;# 
  1065  019C                     	;# 
  1066  019C                     	;# 
  1067  019D                     	;# 
  1068  019D                     	;# 
  1069  019D                     	;# 
  1070  019E                     	;# 
  1071  019E                     	;# 
  1072  019E                     	;# 
  1073  019F                     	;# 
  1074  019F                     	;# 
  1075  019F                     	;# 
  1076  019F                     	;# 
  1077  019F                     	;# 
  1078  020C                     	;# 
  1079  020D                     	;# 
  1080  020E                     	;# 
  1081  0210                     	;# 
  1082  0211                     	;# 
  1083  0211                     	;# 
  1084  0212                     	;# 
  1085  0212                     	;# 
  1086  0213                     	;# 
  1087  0213                     	;# 
  1088  0214                     	;# 
  1089  0214                     	;# 
  1090  0215                     	;# 
  1091  0215                     	;# 
  1092  0215                     	;# 
  1093  0215                     	;# 
  1094  0216                     	;# 
  1095  0216                     	;# 
  1096  0217                     	;# 
  1097  0217                     	;# 
  1098  028C                     	;# 
  1099  028D                     	;# 
  1100  028E                     	;# 
  1101  0291                     	;# 
  1102  0291                     	;# 
  1103  0292                     	;# 
  1104  0293                     	;# 
  1105  0298                     	;# 
  1106  0298                     	;# 
  1107  0299                     	;# 
  1108  029A                     	;# 
  1109  030C                     	;# 
  1110  030D                     	;# 
  1111  030E                     	;# 
  1112  0311                     	;# 
  1113  0311                     	;# 
  1114  0312                     	;# 
  1115  0313                     	;# 
  1116  038C                     	;# 
  1117  038D                     	;# 
  1118  038E                     	;# 
  1119  0390                     	;# 
  1120  0391                     	;# 
  1121  0392                     	;# 
  1122  0393                     	;# 
  1123  0394                     	;# 
  1124  0395                     	;# 
  1125  0396                     	;# 
  1126  0397                     	;# 
  1127  0398                     	;# 
  1128  0399                     	;# 
  1129  039D                     	;# 
  1130  039E                     	;# 
  1131  039F                     	;# 
  1132  0511                     	;# 
  1133  0513                     	;# 
  1134  051A                     	;# 
  1135  0811                     	;# 
  1136  0812                     	;# 
  1137  0813                     	;# 
  1138  0814                     	;# 
  1139  0815                     	;# 
  1140  0816                     	;# 
  1141  0817                     	;# 
  1142  0818                     	;# 
  1143  0819                     	;# 
  1144  081A                     	;# 
  1145  081B                     	;# 
  1146  081C                     	;# 
  1147  081D                     	;# 
  1148  081E                     	;# 
  1149  081F                     	;# 
  1150  0820                     	;# 
  1151  0821                     	;# 
  1152  0821                     	;# 
  1153  0822                     	;# 
  1154  0823                     	;# 
  1155  0823                     	;# 
  1156  0824                     	;# 
  1157  0825                     	;# 
  1158  0825                     	;# 
  1159  0826                     	;# 
  1160  0827                     	;# 
  1161  0827                     	;# 
  1162  0828                     	;# 
  1163  0829                     	;# 
  1164  082A                     	;# 
  1165  082B                     	;# 
  1166  082C                     	;# 
  1167  082D                     	;# 
  1168  082E                     	;# 
  1169  082F                     	;# 
  1170  0831                     	;# 
  1171  0832                     	;# 
  1172  0833                     	;# 
  1173  0834                     	;# 
  1174  0835                     	;# 
  1175  0836                     	;# 
  1176  0837                     	;# 
  1177  0838                     	;# 
  1178  0839                     	;# 
  1179  083A                     	;# 
  1180  083B                     	;# 
  1181  083C                     	;# 
  1182  083D                     	;# 
  1183  083E                     	;# 
  1184  083F                     	;# 
  1185  0840                     	;# 
  1186  0841                     	;# 
  1187  0841                     	;# 
  1188  0842                     	;# 
  1189  0843                     	;# 
  1190  0843                     	;# 
  1191  0844                     	;# 
  1192  0845                     	;# 
  1193  0845                     	;# 
  1194  0846                     	;# 
  1195  0847                     	;# 
  1196  0847                     	;# 
  1197  0848                     	;# 
  1198  0849                     	;# 
  1199  084A                     	;# 
  1200  084B                     	;# 
  1201  084C                     	;# 
  1202  084D                     	;# 
  1203  084E                     	;# 
  1204  084F                     	;# 
  1205  0851                     	;# 
  1206  0852                     	;# 
  1207  0853                     	;# 
  1208  0854                     	;# 
  1209  0855                     	;# 
  1210  0856                     	;# 
  1211  0857                     	;# 
  1212  0858                     	;# 
  1213  0859                     	;# 
  1214  085A                     	;# 
  1215  085B                     	;# 
  1216  085C                     	;# 
  1217  085D                     	;# 
  1218  085E                     	;# 
  1219  085F                     	;# 
  1220  0860                     	;# 
  1221  0861                     	;# 
  1222  0861                     	;# 
  1223  0862                     	;# 
  1224  0863                     	;# 
  1225  0863                     	;# 
  1226  0864                     	;# 
  1227  0865                     	;# 
  1228  0865                     	;# 
  1229  0866                     	;# 
  1230  0867                     	;# 
  1231  0867                     	;# 
  1232  0868                     	;# 
  1233  0869                     	;# 
  1234  086A                     	;# 
  1235  086B                     	;# 
  1236  086C                     	;# 
  1237  086D                     	;# 
  1238  086E                     	;# 
  1239  086F                     	;# 
  1240  0FE4                     	;# 
  1241  0FE5                     	;# 
  1242  0FE6                     	;# 
  1243  0FE7                     	;# 
  1244  0FE8                     	;# 
  1245  0FE9                     	;# 
  1246  0FEA                     	;# 
  1247  0FEB                     	;# 
  1248  0FED                     	;# 
  1249  0FEE                     	;# 
  1250  0FEF                     	;# 
  1251  0000                     	;# 
  1252  0001                     	;# 
  1253  0002                     	;# 
  1254  0003                     	;# 
  1255  0004                     	;# 
  1256  0005                     	;# 
  1257  0006                     	;# 
  1258  0007                     	;# 
  1259  0008                     	;# 
  1260  0009                     	;# 
  1261  000A                     	;# 
  1262  000B                     	;# 
  1263  000C                     	;# 
  1264  000D                     	;# 
  1265  000E                     	;# 
  1266  0010                     	;# 
  1267  0011                     	;# 
  1268  0012                     	;# 
  1269  0013                     	;# 
  1270  0014                     	;# 
  1271  0015                     	;# 
  1272  0016                     	;# 
  1273  0016                     	;# 
  1274  0017                     	;# 
  1275  0018                     	;# 
  1276  0019                     	;# 
  1277  001A                     	;# 
  1278  001B                     	;# 
  1279  001C                     	;# 
  1280  008C                     	;# 
  1281  008D                     	;# 
  1282  008E                     	;# 
  1283  0090                     	;# 
  1284  0091                     	;# 
  1285  0092                     	;# 
  1286  0093                     	;# 
  1287  0094                     	;# 
  1288  0095                     	;# 
  1289  0096                     	;# 
  1290  0097                     	;# 
  1291  0098                     	;# 
  1292  0099                     	;# 
  1293  009A                     	;# 
  1294  009B                     	;# 
  1295  009B                     	;# 
  1296  009C                     	;# 
  1297  009D                     	;# 
  1298  009E                     	;# 
  1299  009F                     	;# 
  1300  010C                     	;# 
  1301  010D                     	;# 
  1302  010E                     	;# 
  1303  0111                     	;# 
  1304  0112                     	;# 
  1305  0113                     	;# 
  1306  0114                     	;# 
  1307  0115                     	;# 
  1308  0116                     	;# 
  1309  0117                     	;# 
  1310  0118                     	;# 
  1311  0119                     	;# 
  1312  011A                     	;# 
  1313  011B                     	;# 
  1314  011C                     	;# 
  1315  011D                     	;# 
  1316  011D                     	;# 
  1317  011D                     	;# 
  1318  011E                     	;# 
  1319  011F                     	;# 
  1320  018C                     	;# 
  1321  018D                     	;# 
  1322  0191                     	;# 
  1323  0191                     	;# 
  1324  0192                     	;# 
  1325  0193                     	;# 
  1326  0193                     	;# 
  1327  0193                     	;# 
  1328  0194                     	;# 
  1329  0195                     	;# 
  1330  0196                     	;# 
  1331  0197                     	;# 
  1332  0199                     	;# 
  1333  0199                     	;# 
  1334  0199                     	;# 
  1335  019A                     	;# 
  1336  019A                     	;# 
  1337  019A                     	;# 
  1338  019B                     	;# 
  1339  019B                     	;# 
  1340  019B                     	;# 
  1341  019B                     	;# 
  1342  019B                     	;# 
  1343  019C                     	;# 
  1344  019C                     	;# 
  1345  019C                     	;# 
  1346  019D                     	;# 
  1347  019D                     	;# 
  1348  019D                     	;# 
  1349  019E                     	;# 
  1350  019E                     	;# 
  1351  019E                     	;# 
  1352  019F                     	;# 
  1353  019F                     	;# 
  1354  019F                     	;# 
  1355  019F                     	;# 
  1356  019F                     	;# 
  1357  020C                     	;# 
  1358  020D                     	;# 
  1359  020E                     	;# 
  1360  0210                     	;# 
  1361  0211                     	;# 
  1362  0211                     	;# 
  1363  0212                     	;# 
  1364  0212                     	;# 
  1365  0213                     	;# 
  1366  0213                     	;# 
  1367  0214                     	;# 
  1368  0214                     	;# 
  1369  0215                     	;# 
  1370  0215                     	;# 
  1371  0215                     	;# 
  1372  0215                     	;# 
  1373  0216                     	;# 
  1374  0216                     	;# 
  1375  0217                     	;# 
  1376  0217                     	;# 
  1377  028C                     	;# 
  1378  028D                     	;# 
  1379  028E                     	;# 
  1380  0291                     	;# 
  1381  0291                     	;# 
  1382  0292                     	;# 
  1383  0293                     	;# 
  1384  0298                     	;# 
  1385  0298                     	;# 
  1386  0299                     	;# 
  1387  029A                     	;# 
  1388  030C                     	;# 
  1389  030D                     	;# 
  1390  030E                     	;# 
  1391  0311                     	;# 
  1392  0311                     	;# 
  1393  0312                     	;# 
  1394  0313                     	;# 
  1395  038C                     	;# 
  1396  038D                     	;# 
  1397  038E                     	;# 
  1398  0390                     	;# 
  1399  0391                     	;# 
  1400  0392                     	;# 
  1401  0393                     	;# 
  1402  0394                     	;# 
  1403  0395                     	;# 
  1404  0396                     	;# 
  1405  0397                     	;# 
  1406  0398                     	;# 
  1407  0399                     	;# 
  1408  039D                     	;# 
  1409  039E                     	;# 
  1410  039F                     	;# 
  1411  0511                     	;# 
  1412  0513                     	;# 
  1413  051A                     	;# 
  1414  0811                     	;# 
  1415  0812                     	;# 
  1416  0813                     	;# 
  1417  0814                     	;# 
  1418  0815                     	;# 
  1419  0816                     	;# 
  1420  0817                     	;# 
  1421  0818                     	;# 
  1422  0819                     	;# 
  1423  081A                     	;# 
  1424  081B                     	;# 
  1425  081C                     	;# 
  1426  081D                     	;# 
  1427  081E                     	;# 
  1428  081F                     	;# 
  1429  0820                     	;# 
  1430  0821                     	;# 
  1431  0821                     	;# 
  1432  0822                     	;# 
  1433  0823                     	;# 
  1434  0823                     	;# 
  1435  0824                     	;# 
  1436  0825                     	;# 
  1437  0825                     	;# 
  1438  0826                     	;# 
  1439  0827                     	;# 
  1440  0827                     	;# 
  1441  0828                     	;# 
  1442  0829                     	;# 
  1443  082A                     	;# 
  1444  082B                     	;# 
  1445  082C                     	;# 
  1446  082D                     	;# 
  1447  082E                     	;# 
  1448  082F                     	;# 
  1449  0831                     	;# 
  1450  0832                     	;# 
  1451  0833                     	;# 
  1452  0834                     	;# 
  1453  0835                     	;# 
  1454  0836                     	;# 
  1455  0837                     	;# 
  1456  0838                     	;# 
  1457  0839                     	;# 
  1458  083A                     	;# 
  1459  083B                     	;# 
  1460  083C                     	;# 
  1461  083D                     	;# 
  1462  083E                     	;# 
  1463  083F                     	;# 
  1464  0840                     	;# 
  1465  0841                     	;# 
  1466  0841                     	;# 
  1467  0842                     	;# 
  1468  0843                     	;# 
  1469  0843                     	;# 
  1470  0844                     	;# 
  1471  0845                     	;# 
  1472  0845                     	;# 
  1473  0846                     	;# 
  1474  0847                     	;# 
  1475  0847                     	;# 
  1476  0848                     	;# 
  1477  0849                     	;# 
  1478  084A                     	;# 
  1479  084B                     	;# 
  1480  084C                     	;# 
  1481  084D                     	;# 
  1482  084E                     	;# 
  1483  084F                     	;# 
  1484  0851                     	;# 
  1485  0852                     	;# 
  1486  0853                     	;# 
  1487  0854                     	;# 
  1488  0855                     	;# 
  1489  0856                     	;# 
  1490  0857                     	;# 
  1491  0858                     	;# 
  1492  0859                     	;# 
  1493  085A                     	;# 
  1494  085B                     	;# 
  1495  085C                     	;# 
  1496  085D                     	;# 
  1497  085E                     	;# 
  1498  085F                     	;# 
  1499  0860                     	;# 
  1500  0861                     	;# 
  1501  0861                     	;# 
  1502  0862                     	;# 
  1503  0863                     	;# 
  1504  0863                     	;# 
  1505  0864                     	;# 
  1506  0865                     	;# 
  1507  0865                     	;# 
  1508  0866                     	;# 
  1509  0867                     	;# 
  1510  0867                     	;# 
  1511  0868                     	;# 
  1512  0869                     	;# 
  1513  086A                     	;# 
  1514  086B                     	;# 
  1515  086C                     	;# 
  1516  086D                     	;# 
  1517  086E                     	;# 
  1518  086F                     	;# 
  1519  0FE4                     	;# 
  1520  0FE5                     	;# 
  1521  0FE6                     	;# 
  1522  0FE7                     	;# 
  1523  0FE8                     	;# 
  1524  0FE9                     	;# 
  1525  0FEA                     	;# 
  1526  0FEB                     	;# 
  1527  0FED                     	;# 
  1528  0FEE                     	;# 
  1529  0FEF                     	;# 
  1530  0000                     	;# 
  1531  0001                     	;# 
  1532  0002                     	;# 
  1533  0003                     	;# 
  1534  0004                     	;# 
  1535  0005                     	;# 
  1536  0006                     	;# 
  1537  0007                     	;# 
  1538  0008                     	;# 
  1539  0009                     	;# 
  1540  000A                     	;# 
  1541  000B                     	;# 
  1542  000C                     	;# 
  1543  000D                     	;# 
  1544  000E                     	;# 
  1545  0010                     	;# 
  1546  0011                     	;# 
  1547  0012                     	;# 
  1548  0013                     	;# 
  1549  0014                     	;# 
  1550  0015                     	;# 
  1551  0016                     	;# 
  1552  0016                     	;# 
  1553  0017                     	;# 
  1554  0018                     	;# 
  1555  0019                     	;# 
  1556  001A                     	;# 
  1557  001B                     	;# 
  1558  001C                     	;# 
  1559  008C                     	;# 
  1560  008D                     	;# 
  1561  008E                     	;# 
  1562  0090                     	;# 
  1563  0091                     	;# 
  1564  0092                     	;# 
  1565  0093                     	;# 
  1566  0094                     	;# 
  1567  0095                     	;# 
  1568  0096                     	;# 
  1569  0097                     	;# 
  1570  0098                     	;# 
  1571  0099                     	;# 
  1572  009A                     	;# 
  1573  009B                     	;# 
  1574  009B                     	;# 
  1575  009C                     	;# 
  1576  009D                     	;# 
  1577  009E                     	;# 
  1578  009F                     	;# 
  1579  010C                     	;# 
  1580  010D                     	;# 
  1581  010E                     	;# 
  1582  0111                     	;# 
  1583  0112                     	;# 
  1584  0113                     	;# 
  1585  0114                     	;# 
  1586  0115                     	;# 
  1587  0116                     	;# 
  1588  0117                     	;# 
  1589  0118                     	;# 
  1590  0119                     	;# 
  1591  011A                     	;# 
  1592  011B                     	;# 
  1593  011C                     	;# 
  1594  011D                     	;# 
  1595  011D                     	;# 
  1596  011D                     	;# 
  1597  011E                     	;# 
  1598  011F                     	;# 
  1599  018C                     	;# 
  1600  018D                     	;# 
  1601  0191                     	;# 
  1602  0191                     	;# 
  1603  0192                     	;# 
  1604  0193                     	;# 
  1605  0193                     	;# 
  1606  0193                     	;# 
  1607  0194                     	;# 
  1608  0195                     	;# 
  1609  0196                     	;# 
  1610  0197                     	;# 
  1611  0199                     	;# 
  1612  0199                     	;# 
  1613  0199                     	;# 
  1614  019A                     	;# 
  1615  019A                     	;# 
  1616  019A                     	;# 
  1617  019B                     	;# 
  1618  019B                     	;# 
  1619  019B                     	;# 
  1620  019B                     	;# 
  1621  019B                     	;# 
  1622  019C                     	;# 
  1623  019C                     	;# 
  1624  019C                     	;# 
  1625  019D                     	;# 
  1626  019D                     	;# 
  1627  019D                     	;# 
  1628  019E                     	;# 
  1629  019E                     	;# 
  1630  019E                     	;# 
  1631  019F                     	;# 
  1632  019F                     	;# 
  1633  019F                     	;# 
  1634  019F                     	;# 
  1635  019F                     	;# 
  1636  020C                     	;# 
  1637  020D                     	;# 
  1638  020E                     	;# 
  1639  0210                     	;# 
  1640  0211                     	;# 
  1641  0211                     	;# 
  1642  0212                     	;# 
  1643  0212                     	;# 
  1644  0213                     	;# 
  1645  0213                     	;# 
  1646  0214                     	;# 
  1647  0214                     	;# 
  1648  0215                     	;# 
  1649  0215                     	;# 
  1650  0215                     	;# 
  1651  0215                     	;# 
  1652  0216                     	;# 
  1653  0216                     	;# 
  1654  0217                     	;# 
  1655  0217                     	;# 
  1656  028C                     	;# 
  1657  028D                     	;# 
  1658  028E                     	;# 
  1659  0291                     	;# 
  1660  0291                     	;# 
  1661  0292                     	;# 
  1662  0293                     	;# 
  1663  0298                     	;# 
  1664  0298                     	;# 
  1665  0299                     	;# 
  1666  029A                     	;# 
  1667  030C                     	;# 
  1668  030D                     	;# 
  1669  030E                     	;# 
  1670  0311                     	;# 
  1671  0311                     	;# 
  1672  0312                     	;# 
  1673  0313                     	;# 
  1674  038C                     	;# 
  1675  038D                     	;# 
  1676  038E                     	;# 
  1677  0390                     	;# 
  1678  0391                     	;# 
  1679  0392                     	;# 
  1680  0393                     	;# 
  1681  0394                     	;# 
  1682  0395                     	;# 
  1683  0396                     	;# 
  1684  0397                     	;# 
  1685  0398                     	;# 
  1686  0399                     	;# 
  1687  039D                     	;# 
  1688  039E                     	;# 
  1689  039F                     	;# 
  1690  0511                     	;# 
  1691  0513                     	;# 
  1692  051A                     	;# 
  1693  0811                     	;# 
  1694  0812                     	;# 
  1695  0813                     	;# 
  1696  0814                     	;# 
  1697  0815                     	;# 
  1698  0816                     	;# 
  1699  0817                     	;# 
  1700  0818                     	;# 
  1701  0819                     	;# 
  1702  081A                     	;# 
  1703  081B                     	;# 
  1704  081C                     	;# 
  1705  081D                     	;# 
  1706  081E                     	;# 
  1707  081F                     	;# 
  1708  0820                     	;# 
  1709  0821                     	;# 
  1710  0821                     	;# 
  1711  0822                     	;# 
  1712  0823                     	;# 
  1713  0823                     	;# 
  1714  0824                     	;# 
  1715  0825                     	;# 
  1716  0825                     	;# 
  1717  0826                     	;# 
  1718  0827                     	;# 
  1719  0827                     	;# 
  1720  0828                     	;# 
  1721  0829                     	;# 
  1722  082A                     	;# 
  1723  082B                     	;# 
  1724  082C                     	;# 
  1725  082D                     	;# 
  1726  082E                     	;# 
  1727  082F                     	;# 
  1728  0831                     	;# 
  1729  0832                     	;# 
  1730  0833                     	;# 
  1731  0834                     	;# 
  1732  0835                     	;# 
  1733  0836                     	;# 
  1734  0837                     	;# 
  1735  0838                     	;# 
  1736  0839                     	;# 
  1737  083A                     	;# 
  1738  083B                     	;# 
  1739  083C                     	;# 
  1740  083D                     	;# 
  1741  083E                     	;# 
  1742  083F                     	;# 
  1743  0840                     	;# 
  1744  0841                     	;# 
  1745  0841                     	;# 
  1746  0842                     	;# 
  1747  0843                     	;# 
  1748  0843                     	;# 
  1749  0844                     	;# 
  1750  0845                     	;# 
  1751  0845                     	;# 
  1752  0846                     	;# 
  1753  0847                     	;# 
  1754  0847                     	;# 
  1755  0848                     	;# 
  1756  0849                     	;# 
  1757  084A                     	;# 
  1758  084B                     	;# 
  1759  084C                     	;# 
  1760  084D                     	;# 
  1761  084E                     	;# 
  1762  084F                     	;# 
  1763  0851                     	;# 
  1764  0852                     	;# 
  1765  0853                     	;# 
  1766  0854                     	;# 
  1767  0855                     	;# 
  1768  0856                     	;# 
  1769  0857                     	;# 
  1770  0858                     	;# 
  1771  0859                     	;# 
  1772  085A                     	;# 
  1773  085B                     	;# 
  1774  085C                     	;# 
  1775  085D                     	;# 
  1776  085E                     	;# 
  1777  085F                     	;# 
  1778  0860                     	;# 
  1779  0861                     	;# 
  1780  0861                     	;# 
  1781  0862                     	;# 
  1782  0863                     	;# 
  1783  0863                     	;# 
  1784  0864                     	;# 
  1785  0865                     	;# 
  1786  0865                     	;# 
  1787  0866                     	;# 
  1788  0867                     	;# 
  1789  0867                     	;# 
  1790  0868                     	;# 
  1791  0869                     	;# 
  1792  086A                     	;# 
  1793  086B                     	;# 
  1794  086C                     	;# 
  1795  086D                     	;# 
  1796  086E                     	;# 
  1797  086F                     	;# 
  1798  0FE4                     	;# 
  1799  0FE5                     	;# 
  1800  0FE6                     	;# 
  1801  0FE7                     	;# 
  1802  0FE8                     	;# 
  1803  0FE9                     	;# 
  1804  0FEA                     	;# 
  1805  0FEB                     	;# 
  1806  0FED                     	;# 
  1807  0FEE                     	;# 
  1808  0FEF                     	;# 
  1809  0000                     	;# 
  1810  0001                     	;# 
  1811  0002                     	;# 
  1812  0003                     	;# 
  1813  0004                     	;# 
  1814  0005                     	;# 
  1815  0006                     	;# 
  1816  0007                     	;# 
  1817  0008                     	;# 
  1818  0009                     	;# 
  1819  000A                     	;# 
  1820  000B                     	;# 
  1821  000C                     	;# 
  1822  000D                     	;# 
  1823  000E                     	;# 
  1824  0010                     	;# 
  1825  0011                     	;# 
  1826  0012                     	;# 
  1827  0013                     	;# 
  1828  0014                     	;# 
  1829  0015                     	;# 
  1830  0016                     	;# 
  1831  0016                     	;# 
  1832  0017                     	;# 
  1833  0018                     	;# 
  1834  0019                     	;# 
  1835  001A                     	;# 
  1836  001B                     	;# 
  1837  001C                     	;# 
  1838  008C                     	;# 
  1839  008D                     	;# 
  1840  008E                     	;# 
  1841  0090                     	;# 
  1842  0091                     	;# 
  1843  0092                     	;# 
  1844  0093                     	;# 
  1845  0094                     	;# 
  1846  0095                     	;# 
  1847  0096                     	;# 
  1848  0097                     	;# 
  1849  0098                     	;# 
  1850  0099                     	;# 
  1851  009A                     	;# 
  1852  009B                     	;# 
  1853  009B                     	;# 
  1854  009C                     	;# 
  1855  009D                     	;# 
  1856  009E                     	;# 
  1857  009F                     	;# 
  1858  010C                     	;# 
  1859  010D                     	;# 
  1860  010E                     	;# 
  1861  0111                     	;# 
  1862  0112                     	;# 
  1863  0113                     	;# 
  1864  0114                     	;# 
  1865  0115                     	;# 
  1866  0116                     	;# 
  1867  0117                     	;# 
  1868  0118                     	;# 
  1869  0119                     	;# 
  1870  011A                     	;# 
  1871  011B                     	;# 
  1872  011C                     	;# 
  1873  011D                     	;# 
  1874  011D                     	;# 
  1875  011D                     	;# 
  1876  011E                     	;# 
  1877  011F                     	;# 
  1878  018C                     	;# 
  1879  018D                     	;# 
  1880  0191                     	;# 
  1881  0191                     	;# 
  1882  0192                     	;# 
  1883  0193                     	;# 
  1884  0193                     	;# 
  1885  0193                     	;# 
  1886  0194                     	;# 
  1887  0195                     	;# 
  1888  0196                     	;# 
  1889  0197                     	;# 
  1890  0199                     	;# 
  1891  0199                     	;# 
  1892  0199                     	;# 
  1893  019A                     	;# 
  1894  019A                     	;# 
  1895  019A                     	;# 
  1896  019B                     	;# 
  1897  019B                     	;# 
  1898  019B                     	;# 
  1899  019B                     	;# 
  1900  019B                     	;# 
  1901  019C                     	;# 
  1902  019C                     	;# 
  1903  019C                     	;# 
  1904  019D                     	;# 
  1905  019D                     	;# 
  1906  019D                     	;# 
  1907  019E                     	;# 
  1908  019E                     	;# 
  1909  019E                     	;# 
  1910  019F                     	;# 
  1911  019F                     	;# 
  1912  019F                     	;# 
  1913  019F                     	;# 
  1914  019F                     	;# 
  1915  020C                     	;# 
  1916  020D                     	;# 
  1917  020E                     	;# 
  1918  0210                     	;# 
  1919  0211                     	;# 
  1920  0211                     	;# 
  1921  0212                     	;# 
  1922  0212                     	;# 
  1923  0213                     	;# 
  1924  0213                     	;# 
  1925  0214                     	;# 
  1926  0214                     	;# 
  1927  0215                     	;# 
  1928  0215                     	;# 
  1929  0215                     	;# 
  1930  0215                     	;# 
  1931  0216                     	;# 
  1932  0216                     	;# 
  1933  0217                     	;# 
  1934  0217                     	;# 
  1935  028C                     	;# 
  1936  028D                     	;# 
  1937  028E                     	;# 
  1938  0291                     	;# 
  1939  0291                     	;# 
  1940  0292                     	;# 
  1941  0293                     	;# 
  1942  0298                     	;# 
  1943  0298                     	;# 
  1944  0299                     	;# 
  1945  029A                     	;# 
  1946  030C                     	;# 
  1947  030D                     	;# 
  1948  030E                     	;# 
  1949  0311                     	;# 
  1950  0311                     	;# 
  1951  0312                     	;# 
  1952  0313                     	;# 
  1953  038C                     	;# 
  1954  038D                     	;# 
  1955  038E                     	;# 
  1956  0390                     	;# 
  1957  0391                     	;# 
  1958  0392                     	;# 
  1959  0393                     	;# 
  1960  0394                     	;# 
  1961  0395                     	;# 
  1962  0396                     	;# 
  1963  0397                     	;# 
  1964  0398                     	;# 
  1965  0399                     	;# 
  1966  039D                     	;# 
  1967  039E                     	;# 
  1968  039F                     	;# 
  1969  0511                     	;# 
  1970  0513                     	;# 
  1971  051A                     	;# 
  1972  0811                     	;# 
  1973  0812                     	;# 
  1974  0813                     	;# 
  1975  0814                     	;# 
  1976  0815                     	;# 
  1977  0816                     	;# 
  1978  0817                     	;# 
  1979  0818                     	;# 
  1980  0819                     	;# 
  1981  081A                     	;# 
  1982  081B                     	;# 
  1983  081C                     	;# 
  1984  081D                     	;# 
  1985  081E                     	;# 
  1986  081F                     	;# 
  1987  0820                     	;# 
  1988  0821                     	;# 
  1989  0821                     	;# 
  1990  0822                     	;# 
  1991  0823                     	;# 
  1992  0823                     	;# 
  1993  0824                     	;# 
  1994  0825                     	;# 
  1995  0825                     	;# 
  1996  0826                     	;# 
  1997  0827                     	;# 
  1998  0827                     	;# 
  1999  0828                     	;# 
  2000  0829                     	;# 
  2001  082A                     	;# 
  2002  082B                     	;# 
  2003  082C                     	;# 
  2004  082D                     	;# 
  2005  082E                     	;# 
  2006  082F                     	;# 
  2007  0831                     	;# 
  2008  0832                     	;# 
  2009  0833                     	;# 
  2010  0834                     	;# 
  2011  0835                     	;# 
  2012  0836                     	;# 
  2013  0837                     	;# 
  2014  0838                     	;# 
  2015  0839                     	;# 
  2016  083A                     	;# 
  2017  083B                     	;# 
  2018  083C                     	;# 
  2019  083D                     	;# 
  2020  083E                     	;# 
  2021  083F                     	;# 
  2022  0840                     	;# 
  2023  0841                     	;# 
  2024  0841                     	;# 
  2025  0842                     	;# 
  2026  0843                     	;# 
  2027  0843                     	;# 
  2028  0844                     	;# 
  2029  0845                     	;# 
  2030  0845                     	;# 
  2031  0846                     	;# 
  2032  0847                     	;# 
  2033  0847                     	;# 
  2034  0848                     	;# 
  2035  0849                     	;# 
  2036  084A                     	;# 
  2037  084B                     	;# 
  2038  084C                     	;# 
  2039  084D                     	;# 
  2040  084E                     	;# 
  2041  084F                     	;# 
  2042  0851                     	;# 
  2043  0852                     	;# 
  2044  0853                     	;# 
  2045  0854                     	;# 
  2046  0855                     	;# 
  2047  0856                     	;# 
  2048  0857                     	;# 
  2049  0858                     	;# 
  2050  0859                     	;# 
  2051  085A                     	;# 
  2052  085B                     	;# 
  2053  085C                     	;# 
  2054  085D                     	;# 
  2055  085E                     	;# 
  2056  085F                     	;# 
  2057  0860                     	;# 
  2058  0861                     	;# 
  2059  0861                     	;# 
  2060  0862                     	;# 
  2061  0863                     	;# 
  2062  0863                     	;# 
  2063  0864                     	;# 
  2064  0865                     	;# 
  2065  0865                     	;# 
  2066  0866                     	;# 
  2067  0867                     	;# 
  2068  0867                     	;# 
  2069  0868                     	;# 
  2070  0869                     	;# 
  2071  086A                     	;# 
  2072  086B                     	;# 
  2073  086C                     	;# 
  2074  086D                     	;# 
  2075  086E                     	;# 
  2076  086F                     	;# 
  2077  0FE4                     	;# 
  2078  0FE5                     	;# 
  2079  0FE6                     	;# 
  2080  0FE7                     	;# 
  2081  0FE8                     	;# 
  2082  0FE9                     	;# 
  2083  0FEA                     	;# 
  2084  0FEB                     	;# 
  2085  0FED                     	;# 
  2086  0FEE                     	;# 
  2087  0FEF                     	;# 
  2088  0000                     	;# 
  2089  0001                     	;# 
  2090  0002                     	;# 
  2091  0003                     	;# 
  2092  0004                     	;# 
  2093  0005                     	;# 
  2094  0006                     	;# 
  2095  0007                     	;# 
  2096  0008                     	;# 
  2097  0009                     	;# 
  2098  000A                     	;# 
  2099  000B                     	;# 
  2100  000C                     	;# 
  2101  000D                     	;# 
  2102  000E                     	;# 
  2103  0010                     	;# 
  2104  0011                     	;# 
  2105  0012                     	;# 
  2106  0013                     	;# 
  2107  0014                     	;# 
  2108  0015                     	;# 
  2109  0016                     	;# 
  2110  0016                     	;# 
  2111  0017                     	;# 
  2112  0018                     	;# 
  2113  0019                     	;# 
  2114  001A                     	;# 
  2115  001B                     	;# 
  2116  001C                     	;# 
  2117  008C                     	;# 
  2118  008D                     	;# 
  2119  008E                     	;# 
  2120  0090                     	;# 
  2121  0091                     	;# 
  2122  0092                     	;# 
  2123  0093                     	;# 
  2124  0094                     	;# 
  2125  0095                     	;# 
  2126  0096                     	;# 
  2127  0097                     	;# 
  2128  0098                     	;# 
  2129  0099                     	;# 
  2130  009A                     	;# 
  2131  009B                     	;# 
  2132  009B                     	;# 
  2133  009C                     	;# 
  2134  009D                     	;# 
  2135  009E                     	;# 
  2136  009F                     	;# 
  2137  010C                     	;# 
  2138  010D                     	;# 
  2139  010E                     	;# 
  2140  0111                     	;# 
  2141  0112                     	;# 
  2142  0113                     	;# 
  2143  0114                     	;# 
  2144  0115                     	;# 
  2145  0116                     	;# 
  2146  0117                     	;# 
  2147  0118                     	;# 
  2148  0119                     	;# 
  2149  011A                     	;# 
  2150  011B                     	;# 
  2151  011C                     	;# 
  2152  011D                     	;# 
  2153  011D                     	;# 
  2154  011D                     	;# 
  2155  011E                     	;# 
  2156  011F                     	;# 
  2157  018C                     	;# 
  2158  018D                     	;# 
  2159  0191                     	;# 
  2160  0191                     	;# 
  2161  0192                     	;# 
  2162  0193                     	;# 
  2163  0193                     	;# 
  2164  0193                     	;# 
  2165  0194                     	;# 
  2166  0195                     	;# 
  2167  0196                     	;# 
  2168  0197                     	;# 
  2169  0199                     	;# 
  2170  0199                     	;# 
  2171  0199                     	;# 
  2172  019A                     	;# 
  2173  019A                     	;# 
  2174  019A                     	;# 
  2175  019B                     	;# 
  2176  019B                     	;# 
  2177  019B                     	;# 
  2178  019B                     	;# 
  2179  019B                     	;# 
  2180  019C                     	;# 
  2181  019C                     	;# 
  2182  019C                     	;# 
  2183  019D                     	;# 
  2184  019D                     	;# 
  2185  019D                     	;# 
  2186  019E                     	;# 
  2187  019E                     	;# 
  2188  019E                     	;# 
  2189  019F                     	;# 
  2190  019F                     	;# 
  2191  019F                     	;# 
  2192  019F                     	;# 
  2193  019F                     	;# 
  2194  020C                     	;# 
  2195  020D                     	;# 
  2196  020E                     	;# 
  2197  0210                     	;# 
  2198  0211                     	;# 
  2199  0211                     	;# 
  2200  0212                     	;# 
  2201  0212                     	;# 
  2202  0213                     	;# 
  2203  0213                     	;# 
  2204  0214                     	;# 
  2205  0214                     	;# 
  2206  0215                     	;# 
  2207  0215                     	;# 
  2208  0215                     	;# 
  2209  0215                     	;# 
  2210  0216                     	;# 
  2211  0216                     	;# 
  2212  0217                     	;# 
  2213  0217                     	;# 
  2214  028C                     	;# 
  2215  028D                     	;# 
  2216  028E                     	;# 
  2217  0291                     	;# 
  2218  0291                     	;# 
  2219  0292                     	;# 
  2220  0293                     	;# 
  2221  0298                     	;# 
  2222  0298                     	;# 
  2223  0299                     	;# 
  2224  029A                     	;# 
  2225  030C                     	;# 
  2226  030D                     	;# 
  2227  030E                     	;# 
  2228  0311                     	;# 
  2229  0311                     	;# 
  2230  0312                     	;# 
  2231  0313                     	;# 
  2232  038C                     	;# 
  2233  038D                     	;# 
  2234  038E                     	;# 
  2235  0390                     	;# 
  2236  0391                     	;# 
  2237  0392                     	;# 
  2238  0393                     	;# 
  2239  0394                     	;# 
  2240  0395                     	;# 
  2241  0396                     	;# 
  2242  0397                     	;# 
  2243  0398                     	;# 
  2244  0399                     	;# 
  2245  039D                     	;# 
  2246  039E                     	;# 
  2247  039F                     	;# 
  2248  0511                     	;# 
  2249  0513                     	;# 
  2250  051A                     	;# 
  2251  0811                     	;# 
  2252  0812                     	;# 
  2253  0813                     	;# 
  2254  0814                     	;# 
  2255  0815                     	;# 
  2256  0816                     	;# 
  2257  0817                     	;# 
  2258  0818                     	;# 
  2259  0819                     	;# 
  2260  081A                     	;# 
  2261  081B                     	;# 
  2262  081C                     	;# 
  2263  081D                     	;# 
  2264  081E                     	;# 
  2265  081F                     	;# 
  2266  0820                     	;# 
  2267  0821                     	;# 
  2268  0821                     	;# 
  2269  0822                     	;# 
  2270  0823                     	;# 
  2271  0823                     	;# 
  2272  0824                     	;# 
  2273  0825                     	;# 
  2274  0825                     	;# 
  2275  0826                     	;# 
  2276  0827                     	;# 
  2277  0827                     	;# 
  2278  0828                     	;# 
  2279  0829                     	;# 
  2280  082A                     	;# 
  2281  082B                     	;# 
  2282  082C                     	;# 
  2283  082D                     	;# 
  2284  082E                     	;# 
  2285  082F                     	;# 
  2286  0831                     	;# 
  2287  0832                     	;# 
  2288  0833                     	;# 
  2289  0834                     	;# 
  2290  0835                     	;# 
  2291  0836                     	;# 
  2292  0837                     	;# 
  2293  0838                     	;# 
  2294  0839                     	;# 
  2295  083A                     	;# 
  2296  083B                     	;# 
  2297  083C                     	;# 
  2298  083D                     	;# 
  2299  083E                     	;# 
  2300  083F                     	;# 
  2301  0840                     	;# 
  2302  0841                     	;# 
  2303  0841                     	;# 
  2304  0842                     	;# 
  2305  0843                     	;# 
  2306  0843                     	;# 
  2307  0844                     	;# 
  2308  0845                     	;# 
  2309  0845                     	;# 
  2310  0846                     	;# 
  2311  0847                     	;# 
  2312  0847                     	;# 
  2313  0848                     	;# 
  2314  0849                     	;# 
  2315  084A                     	;# 
  2316  084B                     	;# 
  2317  084C                     	;# 
  2318  084D                     	;# 
  2319  084E                     	;# 
  2320  084F                     	;# 
  2321  0851                     	;# 
  2322  0852                     	;# 
  2323  0853                     	;# 
  2324  0854                     	;# 
  2325  0855                     	;# 
  2326  0856                     	;# 
  2327  0857                     	;# 
  2328  0858                     	;# 
  2329  0859                     	;# 
  2330  085A                     	;# 
  2331  085B                     	;# 
  2332  085C                     	;# 
  2333  085D                     	;# 
  2334  085E                     	;# 
  2335  085F                     	;# 
  2336  0860                     	;# 
  2337  0861                     	;# 
  2338  0861                     	;# 
  2339  0862                     	;# 
  2340  0863                     	;# 
  2341  0863                     	;# 
  2342  0864                     	;# 
  2343  0865                     	;# 
  2344  0865                     	;# 
  2345  0866                     	;# 
  2346  0867                     	;# 
  2347  0867                     	;# 
  2348  0868                     	;# 
  2349  0869                     	;# 
  2350  086A                     	;# 
  2351  086B                     	;# 
  2352  086C                     	;# 
  2353  086D                     	;# 
  2354  086E                     	;# 
  2355  086F                     	;# 
  2356  0FE4                     	;# 
  2357  0FE5                     	;# 
  2358  0FE6                     	;# 
  2359  0FE7                     	;# 
  2360  0FE8                     	;# 
  2361  0FE9                     	;# 
  2362  0FEA                     	;# 
  2363  0FEB                     	;# 
  2364  0FED                     	;# 
  2365  0FEE                     	;# 
  2366  0FEF                     	;# 
  2367  0000                     	;# 
  2368  0001                     	;# 
  2369  0002                     	;# 
  2370  0003                     	;# 
  2371  0004                     	;# 
  2372  0005                     	;# 
  2373  0006                     	;# 
  2374  0007                     	;# 
  2375  0008                     	;# 
  2376  0009                     	;# 
  2377  000A                     	;# 
  2378  000B                     	;# 
  2379  000C                     	;# 
  2380  000D                     	;# 
  2381  000E                     	;# 
  2382  0010                     	;# 
  2383  0011                     	;# 
  2384  0012                     	;# 
  2385  0013                     	;# 
  2386  0014                     	;# 
  2387  0015                     	;# 
  2388  0016                     	;# 
  2389  0016                     	;# 
  2390  0017                     	;# 
  2391  0018                     	;# 
  2392  0019                     	;# 
  2393  001A                     	;# 
  2394  001B                     	;# 
  2395  001C                     	;# 
  2396  008C                     	;# 
  2397  008D                     	;# 
  2398  008E                     	;# 
  2399  0090                     	;# 
  2400  0091                     	;# 
  2401  0092                     	;# 
  2402  0093                     	;# 
  2403  0094                     	;# 
  2404  0095                     	;# 
  2405  0096                     	;# 
  2406  0097                     	;# 
  2407  0098                     	;# 
  2408  0099                     	;# 
  2409  009A                     	;# 
  2410  009B                     	;# 
  2411  009B                     	;# 
  2412  009C                     	;# 
  2413  009D                     	;# 
  2414  009E                     	;# 
  2415  009F                     	;# 
  2416  010C                     	;# 
  2417  010D                     	;# 
  2418  010E                     	;# 
  2419  0111                     	;# 
  2420  0112                     	;# 
  2421  0113                     	;# 
  2422  0114                     	;# 
  2423  0115                     	;# 
  2424  0116                     	;# 
  2425  0117                     	;# 
  2426  0118                     	;# 
  2427  0119                     	;# 
  2428  011A                     	;# 
  2429  011B                     	;# 
  2430  011C                     	;# 
  2431  011D                     	;# 
  2432  011D                     	;# 
  2433  011D                     	;# 
  2434  011E                     	;# 
  2435  011F                     	;# 
  2436  018C                     	;# 
  2437  018D                     	;# 
  2438  0191                     	;# 
  2439  0191                     	;# 
  2440  0192                     	;# 
  2441  0193                     	;# 
  2442  0193                     	;# 
  2443  0193                     	;# 
  2444  0194                     	;# 
  2445  0195                     	;# 
  2446  0196                     	;# 
  2447  0197                     	;# 
  2448  0199                     	;# 
  2449  0199                     	;# 
  2450  0199                     	;# 
  2451  019A                     	;# 
  2452  019A                     	;# 
  2453  019A                     	;# 
  2454  019B                     	;# 
  2455  019B                     	;# 
  2456  019B                     	;# 
  2457  019B                     	;# 
  2458  019B                     	;# 
  2459  019C                     	;# 
  2460  019C                     	;# 
  2461  019C                     	;# 
  2462  019D                     	;# 
  2463  019D                     	;# 
  2464  019D                     	;# 
  2465  019E                     	;# 
  2466  019E                     	;# 
  2467  019E                     	;# 
  2468  019F                     	;# 
  2469  019F                     	;# 
  2470  019F                     	;# 
  2471  019F                     	;# 
  2472  019F                     	;# 
  2473  020C                     	;# 
  2474  020D                     	;# 
  2475  020E                     	;# 
  2476  0210                     	;# 
  2477  0211                     	;# 
  2478  0211                     	;# 
  2479  0212                     	;# 
  2480  0212                     	;# 
  2481  0213                     	;# 
  2482  0213                     	;# 
  2483  0214                     	;# 
  2484  0214                     	;# 
  2485  0215                     	;# 
  2486  0215                     	;# 
  2487  0215                     	;# 
  2488  0215                     	;# 
  2489  0216                     	;# 
  2490  0216                     	;# 
  2491  0217                     	;# 
  2492  0217                     	;# 
  2493  028C                     	;# 
  2494  028D                     	;# 
  2495  028E                     	;# 
  2496  0291                     	;# 
  2497  0291                     	;# 
  2498  0292                     	;# 
  2499  0293                     	;# 
  2500  0298                     	;# 
  2501  0298                     	;# 
  2502  0299                     	;# 
  2503  029A                     	;# 
  2504  030C                     	;# 
  2505  030D                     	;# 
  2506  030E                     	;# 
  2507  0311                     	;# 
  2508  0311                     	;# 
  2509  0312                     	;# 
  2510  0313                     	;# 
  2511  038C                     	;# 
  2512  038D                     	;# 
  2513  038E                     	;# 
  2514  0390                     	;# 
  2515  0391                     	;# 
  2516  0392                     	;# 
  2517  0393                     	;# 
  2518  0394                     	;# 
  2519  0395                     	;# 
  2520  0396                     	;# 
  2521  0397                     	;# 
  2522  0398                     	;# 
  2523  0399                     	;# 
  2524  039D                     	;# 
  2525  039E                     	;# 
  2526  039F                     	;# 
  2527  0511                     	;# 
  2528  0513                     	;# 
  2529  051A                     	;# 
  2530  0811                     	;# 
  2531  0812                     	;# 
  2532  0813                     	;# 
  2533  0814                     	;# 
  2534  0815                     	;# 
  2535  0816                     	;# 
  2536  0817                     	;# 
  2537  0818                     	;# 
  2538  0819                     	;# 
  2539  081A                     	;# 
  2540  081B                     	;# 
  2541  081C                     	;# 
  2542  081D                     	;# 
  2543  081E                     	;# 
  2544  081F                     	;# 
  2545  0820                     	;# 
  2546  0821                     	;# 
  2547  0821                     	;# 
  2548  0822                     	;# 
  2549  0823                     	;# 
  2550  0823                     	;# 
  2551  0824                     	;# 
  2552  0825                     	;# 
  2553  0825                     	;# 
  2554  0826                     	;# 
  2555  0827                     	;# 
  2556  0827                     	;# 
  2557  0828                     	;# 
  2558  0829                     	;# 
  2559  082A                     	;# 
  2560  082B                     	;# 
  2561  082C                     	;# 
  2562  082D                     	;# 
  2563  082E                     	;# 
  2564  082F                     	;# 
  2565  0831                     	;# 
  2566  0832                     	;# 
  2567  0833                     	;# 
  2568  0834                     	;# 
  2569  0835                     	;# 
  2570  0836                     	;# 
  2571  0837                     	;# 
  2572  0838                     	;# 
  2573  0839                     	;# 
  2574  083A                     	;# 
  2575  083B                     	;# 
  2576  083C                     	;# 
  2577  083D                     	;# 
  2578  083E                     	;# 
  2579  083F                     	;# 
  2580  0840                     	;# 
  2581  0841                     	;# 
  2582  0841                     	;# 
  2583  0842                     	;# 
  2584  0843                     	;# 
  2585  0843                     	;# 
  2586  0844                     	;# 
  2587  0845                     	;# 
  2588  0845                     	;# 
  2589  0846                     	;# 
  2590  0847                     	;# 
  2591  0847                     	;# 
  2592  0848                     	;# 
  2593  0849                     	;# 
  2594  084A                     	;# 
  2595  084B                     	;# 
  2596  084C                     	;# 
  2597  084D                     	;# 
  2598  084E                     	;# 
  2599  084F                     	;# 
  2600  0851                     	;# 
  2601  0852                     	;# 
  2602  0853                     	;# 
  2603  0854                     	;# 
  2604  0855                     	;# 
  2605  0856                     	;# 
  2606  0857                     	;# 
  2607  0858                     	;# 
  2608  0859                     	;# 
  2609  085A                     	;# 
  2610  085B                     	;# 
  2611  085C                     	;# 
  2612  085D                     	;# 
  2613  085E                     	;# 
  2614  085F                     	;# 
  2615  0860                     	;# 
  2616  0861                     	;# 
  2617  0861                     	;# 
  2618  0862                     	;# 
  2619  0863                     	;# 
  2620  0863                     	;# 
  2621  0864                     	;# 
  2622  0865                     	;# 
  2623  0865                     	;# 
  2624  0866                     	;# 
  2625  0867                     	;# 
  2626  0867                     	;# 
  2627  0868                     	;# 
  2628  0869                     	;# 
  2629  086A                     	;# 
  2630  086B                     	;# 
  2631  086C                     	;# 
  2632  086D                     	;# 
  2633  086E                     	;# 
  2634  086F                     	;# 
  2635  0FE4                     	;# 
  2636  0FE5                     	;# 
  2637  0FE6                     	;# 
  2638  0FE7                     	;# 
  2639  0FE8                     	;# 
  2640  0FE9                     	;# 
  2641  0FEA                     	;# 
  2642  0FEB                     	;# 
  2643  0FED                     	;# 
  2644  0FEE                     	;# 
  2645  0FEF                     	;# 
  2646  0000                     	;# 
  2647  0001                     	;# 
  2648  0002                     	;# 
  2649  0003                     	;# 
  2650  0004                     	;# 
  2651  0005                     	;# 
  2652  0006                     	;# 
  2653  0007                     	;# 
  2654  0008                     	;# 
  2655  0009                     	;# 
  2656  000A                     	;# 
  2657  000B                     	;# 
  2658  000C                     	;# 
  2659  000D                     	;# 
  2660  000E                     	;# 
  2661  0010                     	;# 
  2662  0011                     	;# 
  2663  0012                     	;# 
  2664  0013                     	;# 
  2665  0014                     	;# 
  2666  0015                     	;# 
  2667  0016                     	;# 
  2668  0016                     	;# 
  2669  0017                     	;# 
  2670  0018                     	;# 
  2671  0019                     	;# 
  2672  001A                     	;# 
  2673  001B                     	;# 
  2674  001C                     	;# 
  2675  008C                     	;# 
  2676  008D                     	;# 
  2677  008E                     	;# 
  2678  0090                     	;# 
  2679  0091                     	;# 
  2680  0092                     	;# 
  2681  0093                     	;# 
  2682  0094                     	;# 
  2683  0095                     	;# 
  2684  0096                     	;# 
  2685  0097                     	;# 
  2686  0098                     	;# 
  2687  0099                     	;# 
  2688  009A                     	;# 
  2689  009B                     	;# 
  2690  009B                     	;# 
  2691  009C                     	;# 
  2692  009D                     	;# 
  2693  009E                     	;# 
  2694  009F                     	;# 
  2695  010C                     	;# 
  2696  010D                     	;# 
  2697  010E                     	;# 
  2698  0111                     	;# 
  2699  0112                     	;# 
  2700  0113                     	;# 
  2701  0114                     	;# 
  2702  0115                     	;# 
  2703  0116                     	;# 
  2704  0117                     	;# 
  2705  0118                     	;# 
  2706  0119                     	;# 
  2707  011A                     	;# 
  2708  011B                     	;# 
  2709  011C                     	;# 
  2710  011D                     	;# 
  2711  011D                     	;# 
  2712  011D                     	;# 
  2713  011E                     	;# 
  2714  011F                     	;# 
  2715  018C                     	;# 
  2716  018D                     	;# 
  2717  0191                     	;# 
  2718  0191                     	;# 
  2719  0192                     	;# 
  2720  0193                     	;# 
  2721  0193                     	;# 
  2722  0193                     	;# 
  2723  0194                     	;# 
  2724  0195                     	;# 
  2725  0196                     	;# 
  2726  0197                     	;# 
  2727  0199                     	;# 
  2728  0199                     	;# 
  2729  0199                     	;# 
  2730  019A                     	;# 
  2731  019A                     	;# 
  2732  019A                     	;# 
  2733  019B                     	;# 
  2734  019B                     	;# 
  2735  019B                     	;# 
  2736  019B                     	;# 
  2737  019B                     	;# 
  2738  019C                     	;# 
  2739  019C                     	;# 
  2740  019C                     	;# 
  2741  019D                     	;# 
  2742  019D                     	;# 
  2743  019D                     	;# 
  2744  019E                     	;# 
  2745  019E                     	;# 
  2746  019E                     	;# 
  2747  019F                     	;# 
  2748  019F                     	;# 
  2749  019F                     	;# 
  2750  019F                     	;# 
  2751  019F                     	;# 
  2752  020C                     	;# 
  2753  020D                     	;# 
  2754  020E                     	;# 
  2755  0210                     	;# 
  2756  0211                     	;# 
  2757  0211                     	;# 
  2758  0212                     	;# 
  2759  0212                     	;# 
  2760  0213                     	;# 
  2761  0213                     	;# 
  2762  0214                     	;# 
  2763  0214                     	;# 
  2764  0215                     	;# 
  2765  0215                     	;# 
  2766  0215                     	;# 
  2767  0215                     	;# 
  2768  0216                     	;# 
  2769  0216                     	;# 
  2770  0217                     	;# 
  2771  0217                     	;# 
  2772  028C                     	;# 
  2773  028D                     	;# 
  2774  028E                     	;# 
  2775  0291                     	;# 
  2776  0291                     	;# 
  2777  0292                     	;# 
  2778  0293                     	;# 
  2779  0298                     	;# 
  2780  0298                     	;# 
  2781  0299                     	;# 
  2782  029A                     	;# 
  2783  030C                     	;# 
  2784  030D                     	;# 
  2785  030E                     	;# 
  2786  0311                     	;# 
  2787  0311                     	;# 
  2788  0312                     	;# 
  2789  0313                     	;# 
  2790  038C                     	;# 
  2791  038D                     	;# 
  2792  038E                     	;# 
  2793  0390                     	;# 
  2794  0391                     	;# 
  2795  0392                     	;# 
  2796  0393                     	;# 
  2797  0394                     	;# 
  2798  0395                     	;# 
  2799  0396                     	;# 
  2800  0397                     	;# 
  2801  0398                     	;# 
  2802  0399                     	;# 
  2803  039D                     	;# 
  2804  039E                     	;# 
  2805  039F                     	;# 
  2806  0511                     	;# 
  2807  0513                     	;# 
  2808  051A                     	;# 
  2809  0811                     	;# 
  2810  0812                     	;# 
  2811  0813                     	;# 
  2812  0814                     	;# 
  2813  0815                     	;# 
  2814  0816                     	;# 
  2815  0817                     	;# 
  2816  0818                     	;# 
  2817  0819                     	;# 
  2818  081A                     	;# 
  2819  081B                     	;# 
  2820  081C                     	;# 
  2821  081D                     	;# 
  2822  081E                     	;# 
  2823  081F                     	;# 
  2824  0820                     	;# 
  2825  0821                     	;# 
  2826  0821                     	;# 
  2827  0822                     	;# 
  2828  0823                     	;# 
  2829  0823                     	;# 
  2830  0824                     	;# 
  2831  0825                     	;# 
  2832  0825                     	;# 
  2833  0826                     	;# 
  2834  0827                     	;# 
  2835  0827                     	;# 
  2836  0828                     	;# 
  2837  0829                     	;# 
  2838  082A                     	;# 
  2839  082B                     	;# 
  2840  082C                     	;# 
  2841  082D                     	;# 
  2842  082E                     	;# 
  2843  082F                     	;# 
  2844  0831                     	;# 
  2845  0832                     	;# 
  2846  0833                     	;# 
  2847  0834                     	;# 
  2848  0835                     	;# 
  2849  0836                     	;# 
  2850  0837                     	;# 
  2851  0838                     	;# 
  2852  0839                     	;# 
  2853  083A                     	;# 
  2854  083B                     	;# 
  2855  083C                     	;# 
  2856  083D                     	;# 
  2857  083E                     	;# 
  2858  083F                     	;# 
  2859  0840                     	;# 
  2860  0841                     	;# 
  2861  0841                     	;# 
  2862  0842                     	;# 
  2863  0843                     	;# 
  2864  0843                     	;# 
  2865  0844                     	;# 
  2866  0845                     	;# 
  2867  0845                     	;# 
  2868  0846                     	;# 
  2869  0847                     	;# 
  2870  0847                     	;# 
  2871  0848                     	;# 
  2872  0849                     	;# 
  2873  084A                     	;# 
  2874  084B                     	;# 
  2875  084C                     	;# 
  2876  084D                     	;# 
  2877  084E                     	;# 
  2878  084F                     	;# 
  2879  0851                     	;# 
  2880  0852                     	;# 
  2881  0853                     	;# 
  2882  0854                     	;# 
  2883  0855                     	;# 
  2884  0856                     	;# 
  2885  0857                     	;# 
  2886  0858                     	;# 
  2887  0859                     	;# 
  2888  085A                     	;# 
  2889  085B                     	;# 
  2890  085C                     	;# 
  2891  085D                     	;# 
  2892  085E                     	;# 
  2893  085F                     	;# 
  2894  0860                     	;# 
  2895  0861                     	;# 
  2896  0861                     	;# 
  2897  0862                     	;# 
  2898  0863                     	;# 
  2899  0863                     	;# 
  2900  0864                     	;# 
  2901  0865                     	;# 
  2902  0865                     	;# 
  2903  0866                     	;# 
  2904  0867                     	;# 
  2905  0867                     	;# 
  2906  0868                     	;# 
  2907  0869                     	;# 
  2908  086A                     	;# 
  2909  086B                     	;# 
  2910  086C                     	;# 
  2911  086D                     	;# 
  2912  086E                     	;# 
  2913  086F                     	;# 
  2914  0FE4                     	;# 
  2915  0FE5                     	;# 
  2916  0FE6                     	;# 
  2917  0FE7                     	;# 
  2918  0FE8                     	;# 
  2919  0FE9                     	;# 
  2920  0FEA                     	;# 
  2921  0FEB                     	;# 
  2922  0FED                     	;# 
  2923  0FEE                     	;# 
  2924  0FEF                     	;# 
  2925  0000                     	;# 
  2926  0001                     	;# 
  2927  0002                     	;# 
  2928  0003                     	;# 
  2929  0004                     	;# 
  2930  0005                     	;# 
  2931  0006                     	;# 
  2932  0007                     	;# 
  2933  0008                     	;# 
  2934  0009                     	;# 
  2935  000A                     	;# 
  2936  000B                     	;# 
  2937  000C                     	;# 
  2938  000D                     	;# 
  2939  000E                     	;# 
  2940  0010                     	;# 
  2941  0011                     	;# 
  2942  0012                     	;# 
  2943  0013                     	;# 
  2944  0014                     	;# 
  2945  0015                     	;# 
  2946  0016                     	;# 
  2947  0016                     	;# 
  2948  0017                     	;# 
  2949  0018                     	;# 
  2950  0019                     	;# 
  2951  001A                     	;# 
  2952  001B                     	;# 
  2953  001C                     	;# 
  2954  008C                     	;# 
  2955  008D                     	;# 
  2956  008E                     	;# 
  2957  0090                     	;# 
  2958  0091                     	;# 
  2959  0092                     	;# 
  2960  0093                     	;# 
  2961  0094                     	;# 
  2962  0095                     	;# 
  2963  0096                     	;# 
  2964  0097                     	;# 
  2965  0098                     	;# 
  2966  0099                     	;# 
  2967  009A                     	;# 
  2968  009B                     	;# 
  2969  009B                     	;# 
  2970  009C                     	;# 
  2971  009D                     	;# 
  2972  009E                     	;# 
  2973  009F                     	;# 
  2974  010C                     	;# 
  2975  010D                     	;# 
  2976  010E                     	;# 
  2977  0111                     	;# 
  2978  0112                     	;# 
  2979  0113                     	;# 
  2980  0114                     	;# 
  2981  0115                     	;# 
  2982  0116                     	;# 
  2983  0117                     	;# 
  2984  0118                     	;# 
  2985  0119                     	;# 
  2986  011A                     	;# 
  2987  011B                     	;# 
  2988  011C                     	;# 
  2989  011D                     	;# 
  2990  011D                     	;# 
  2991  011D                     	;# 
  2992  011E                     	;# 
  2993  011F                     	;# 
  2994  018C                     	;# 
  2995  018D                     	;# 
  2996  0191                     	;# 
  2997  0191                     	;# 
  2998  0192                     	;# 
  2999  0193                     	;# 
  3000  0193                     	;# 
  3001  0193                     	;# 
  3002  0194                     	;# 
  3003  0195                     	;# 
  3004  0196                     	;# 
  3005  0197                     	;# 
  3006  0199                     	;# 
  3007  0199                     	;# 
  3008  0199                     	;# 
  3009  019A                     	;# 
  3010  019A                     	;# 
  3011  019A                     	;# 
  3012  019B                     	;# 
  3013  019B                     	;# 
  3014  019B                     	;# 
  3015  019B                     	;# 
  3016  019B                     	;# 
  3017  019C                     	;# 
  3018  019C                     	;# 
  3019  019C                     	;# 
  3020  019D                     	;# 
  3021  019D                     	;# 
  3022  019D                     	;# 
  3023  019E                     	;# 
  3024  019E                     	;# 
  3025  019E                     	;# 
  3026  019F                     	;# 
  3027  019F                     	;# 
  3028  019F                     	;# 
  3029  019F                     	;# 
  3030  019F                     	;# 
  3031  020C                     	;# 
  3032  020D                     	;# 
  3033  020E                     	;# 
  3034  0210                     	;# 
  3035  0211                     	;# 
  3036  0211                     	;# 
  3037  0212                     	;# 
  3038  0212                     	;# 
  3039  0213                     	;# 
  3040  0213                     	;# 
  3041  0214                     	;# 
  3042  0214                     	;# 
  3043  0215                     	;# 
  3044  0215                     	;# 
  3045  0215                     	;# 
  3046  0215                     	;# 
  3047  0216                     	;# 
  3048  0216                     	;# 
  3049  0217                     	;# 
  3050  0217                     	;# 
  3051  028C                     	;# 
  3052  028D                     	;# 
  3053  028E                     	;# 
  3054  0291                     	;# 
  3055  0291                     	;# 
  3056  0292                     	;# 
  3057  0293                     	;# 
  3058  0298                     	;# 
  3059  0298                     	;# 
  3060  0299                     	;# 
  3061  029A                     	;# 
  3062  030C                     	;# 
  3063  030D                     	;# 
  3064  030E                     	;# 
  3065  0311                     	;# 
  3066  0311                     	;# 
  3067  0312                     	;# 
  3068  0313                     	;# 
  3069  038C                     	;# 
  3070  038D                     	;# 
  3071  038E                     	;# 
  3072  0390                     	;# 
  3073  0391                     	;# 
  3074  0392                     	;# 
  3075  0393                     	;# 
  3076  0394                     	;# 
  3077  0395                     	;# 
  3078  0396                     	;# 
  3079  0397                     	;# 
  3080  0398                     	;# 
  3081  0399                     	;# 
  3082  039D                     	;# 
  3083  039E                     	;# 
  3084  039F                     	;# 
  3085  0511                     	;# 
  3086  0513                     	;# 
  3087  051A                     	;# 
  3088  0811                     	;# 
  3089  0812                     	;# 
  3090  0813                     	;# 
  3091  0814                     	;# 
  3092  0815                     	;# 
  3093  0816                     	;# 
  3094  0817                     	;# 
  3095  0818                     	;# 
  3096  0819                     	;# 
  3097  081A                     	;# 
  3098  081B                     	;# 
  3099  081C                     	;# 
  3100  081D                     	;# 
  3101  081E                     	;# 
  3102  081F                     	;# 
  3103  0820                     	;# 
  3104  0821                     	;# 
  3105  0821                     	;# 
  3106  0822                     	;# 
  3107  0823                     	;# 
  3108  0823                     	;# 
  3109  0824                     	;# 
  3110  0825                     	;# 
  3111  0825                     	;# 
  3112  0826                     	;# 
  3113  0827                     	;# 
  3114  0827                     	;# 
  3115  0828                     	;# 
  3116  0829                     	;# 
  3117  082A                     	;# 
  3118  082B                     	;# 
  3119  082C                     	;# 
  3120  082D                     	;# 
  3121  082E                     	;# 
  3122  082F                     	;# 
  3123  0831                     	;# 
  3124  0832                     	;# 
  3125  0833                     	;# 
  3126  0834                     	;# 
  3127  0835                     	;# 
  3128  0836                     	;# 
  3129  0837                     	;# 
  3130  0838                     	;# 
  3131  0839                     	;# 
  3132  083A                     	;# 
  3133  083B                     	;# 
  3134  083C                     	;# 
  3135  083D                     	;# 
  3136  083E                     	;# 
  3137  083F                     	;# 
  3138  0840                     	;# 
  3139  0841                     	;# 
  3140  0841                     	;# 
  3141  0842                     	;# 
  3142  0843                     	;# 
  3143  0843                     	;# 
  3144  0844                     	;# 
  3145  0845                     	;# 
  3146  0845                     	;# 
  3147  0846                     	;# 
  3148  0847                     	;# 
  3149  0847                     	;# 
  3150  0848                     	;# 
  3151  0849                     	;# 
  3152  084A                     	;# 
  3153  084B                     	;# 
  3154  084C                     	;# 
  3155  084D                     	;# 
  3156  084E                     	;# 
  3157  084F                     	;# 
  3158  0851                     	;# 
  3159  0852                     	;# 
  3160  0853                     	;# 
  3161  0854                     	;# 
  3162  0855                     	;# 
  3163  0856                     	;# 
  3164  0857                     	;# 
  3165  0858                     	;# 
  3166  0859                     	;# 
  3167  085A                     	;# 
  3168  085B                     	;# 
  3169  085C                     	;# 
  3170  085D                     	;# 
  3171  085E                     	;# 
  3172  085F                     	;# 
  3173  0860                     	;# 
  3174  0861                     	;# 
  3175  0861                     	;# 
  3176  0862                     	;# 
  3177  0863                     	;# 
  3178  0863                     	;# 
  3179  0864                     	;# 
  3180  0865                     	;# 
  3181  0865                     	;# 
  3182  0866                     	;# 
  3183  0867                     	;# 
  3184  0867                     	;# 
  3185  0868                     	;# 
  3186  0869                     	;# 
  3187  086A                     	;# 
  3188  086B                     	;# 
  3189  086C                     	;# 
  3190  086D                     	;# 
  3191  086E                     	;# 
  3192  086F                     	;# 
  3193  0FE4                     	;# 
  3194  0FE5                     	;# 
  3195  0FE6                     	;# 
  3196  0FE7                     	;# 
  3197  0FE8                     	;# 
  3198  0FE9                     	;# 
  3199  0FEA                     	;# 
  3200  0FEB                     	;# 
  3201  0FED                     	;# 
  3202  0FEE                     	;# 
  3203  0FEF                     	;# 
  3204                           
  3205                           	psect	idataBANK2
  3206  17B4                     __pidataBANK2:	
  3207                           
  3208                           ;initializer for stoa@F1129
  3209  17B4  3428               	retlw	40
  3210  17B5  346E               	retlw	110
  3211  17B6  3475               	retlw	117
  3212  17B7  346C               	retlw	108
  3213  17B8  346C               	retlw	108
  3214  17B9  3429               	retlw	41
  3215  17BA  3400               	retlw	0
  3216                           
  3217                           	psect	stringtext1
  3218  1000                     __pstringtext1:	
  3219  1000                     _segmcode:	
  3220  1000  3408               	retlw	8
  3221  1001  347C               	retlw	124
  3222  1002  3411               	retlw	17
  3223  1003  3430               	retlw	48
  3224  1004  3464               	retlw	100
  3225  1005  3422               	retlw	34
  3226  1006  3402               	retlw	2
  3227  1007  3478               	retlw	120
  3228  1008  3400               	retlw	0
  3229  1009  3420               	retlw	32
  3230  100A  34FF               	retlw	255
  3231  100B                     __end_of_segmcode:	
  3232  000C                     _PORTAbits	set	12
  3233  0012                     _PIR2bits	set	18
  3234  0015                     _TMR0	set	21
  3235  0018                     _T1CONbits	set	24
  3236  0016                     _TMR1L	set	22
  3237  0017                     _TMR1H	set	23
  3238  0011                     _PIR1bits	set	17
  3239  000E                     _PORTCbits	set	14
  3240  000B                     _INTCONbits	set	11
  3241  005E                     _PEIE	set	94
  3242  005F                     _GIE	set	95
  3243  0074                     _RC4	set	116
  3244  0092                     _PIE2bits	set	146
  3245  0091                     _PIE1bits	set	145
  3246  008E                     _TRISCbits	set	142
  3247  008E                     _TRISC	set	142
  3248  008D                     _TRISB	set	141
  3249  008C                     _TRISA	set	140
  3250  0095                     _OPTION_REGbits	set	149
  3251  0099                     _OSCCONbits	set	153
  3252  048D                     _RCIE	set	1165
  3253  0473                     _TRISC3	set	1139
  3254  0474                     _TRISC4	set	1140
  3255  048C                     _TXIE	set	1164
  3256  010D                     _LATBbits	set	269
  3257  010E                     _LATC	set	270
  3258  010D                     _LATB	set	269
  3259  010C                     _LATA	set	268
  3260  08E9                     _RXSEL	set	2281
  3261  08EA                     _TXSEL	set	2282
  3262  0874                     _LATC4	set	2164
  3263  0873                     _LATC3	set	2163
  3264  0199                     _RCREG	set	409
  3265  019B                     _SPBRGL	set	411
  3266  019C                     _SPBRGH	set	412
  3267  019A                     _TXREG	set	410
  3268  019E                     _TXSTAbits	set	414
  3269  0CEC                     _CREN	set	3308
  3270  0CFB                     _BRG16	set	3323
  3271  0CF2                     _BRGH	set	3314
  3272  0CEF                     _SPEN	set	3311
  3273  0CF4                     _SYNC	set	3316
  3274  0CF5                     _TXEN	set	3317
  3275  020E                     _WPUCbits	set	526
  3276  020E                     _WPUC	set	526
  3277  020D                     _WPUB	set	525
  3278  020C                     _WPUA	set	524
  3279  1073                     _WPUC3	set	4211
  3280  1074                     _WPUC4	set	4212
  3281  029A                     _CCP2CONbits	set	666
  3282  0298                     _CCPR2L	set	664
  3283  0299                     _CCPR2H	set	665
  3284  1474                     _ODCONC4	set	5236
  3285  1473                     _ODCONC3	set	5235
  3286  0399                     _IOCCFbits	set	921
  3287  0397                     _IOCCPbits	set	919
  3288  0398                     _IOCCN	set	920
  3289  0397                     _IOCCP	set	919
  3290  0395                     _IOCBN	set	917
  3291  0394                     _IOCBP	set	916
  3292  0392                     _IOCAN	set	914
  3293  0391                     _IOCAP	set	913
  3294  100B                     STR_1:	
  3295  100B  345B               	retlw	91	;'['
  3296  100C  3425               	retlw	37	;'%'
  3297  100D  3473               	retlw	115	;'s'
  3298  100E  343A               	retlw	58	;':'
  3299  100F  3425               	retlw	37	;'%'
  3300  1010  3464               	retlw	100	;'d'
  3301  1011  3420               	retlw	32	;' '
  3302  1012  3425               	retlw	37	;'%'
  3303  1013  3473               	retlw	115	;'s'
  3304  1014  345D               	retlw	93	;']'
  3305  1015  3420               	retlw	32	;' '
  3306  1016  3444               	retlw	68	;'D'
  3307  1017  3441               	retlw	65	;'A'
  3308  1018  343A               	retlw	58	;':'
  3309  1019  3420               	retlw	32	;' '
  3310  101A  3425               	retlw	37	;'%'
  3311  101B  3464               	retlw	100	;'d'
  3312  101C  340A               	retlw	10
  3313  101D  340D               	retlw	13
  3314  101E  3400               	retlw	0
  3315                           
  3316                           	psect	stringtext2
  3317  1800                     __pstringtext2:	
  3318  1800                     STR_2:	
  3319  1800  346D               	retlw	109	;'m'
  3320  1801  3461               	retlw	97	;'a'
  3321  1802  3469               	retlw	105	;'i'
  3322  1803  346E               	retlw	110	;'n'
  3323  1804  342E               	retlw	46	;'.'
  3324  1805  3463               	retlw	99	;'c'
  3325  1806  3400               	retlw	0
  3326                           
  3327                           	psect	stringtext3
  3328  1807                     __pstringtext3:	
  3329  1807                     STR_3:	
  3330  1807  3449               	retlw	73	;'I'
  3331  1808  3453               	retlw	83	;'S'
  3332  1809  3452               	retlw	82	;'R'
  3333  180A  3400               	retlw	0
  3334                           
  3335                           	psect	stringtext4
  3336  0000                     __pstringtext4:	
  3337                           
  3338                           ; #config settings
  3339  0000                     
  3340                           	psect	cinit
  3341  00E8                     start_initialization:	
  3342  00E8                     __initialization:	
  3343                           
  3344                           ; Initialize objects allocated to BANK2
  3345  00E8  30B4               	movlw	low __pidataBANK2
  3346  00E9  0084               	movwf	4
  3347  00EA  3097               	movlw	(high __pidataBANK2)| (0+128)
  3348  00EB  0085               	movwf	5
  3349  00EC  3060               	movlw	low __pdataBANK2
  3350  00ED  0086               	movwf	6
  3351  00EE  3001               	movlw	high __pdataBANK2
  3352  00EF  0087               	movwf	7
  3353  00F0  3007               	movlw	7
  3354  00F1  3197  27AE  3180   	fcall	init_ram
  3355                           
  3356                           ; Clear objects allocated to BANK0
  3357  00F4  01EF               	clrf	__pbssBANK0& (0+127)
  3358                           
  3359                           ; Clear objects allocated to BANK1
  3360  00F5  30E0               	movlw	low __pbssBANK1
  3361  00F6  0084               	movwf	4
  3362  00F7  3000               	movlw	high __pbssBANK1
  3363  00F8  0085               	movwf	5
  3364  00F9  3010               	movlw	16
  3365  00FA  3197  27A8  3180   	fcall	clear_ram0
  3366                           
  3367                           ; Clear objects allocated to BANK2
  3368  00FD  0022               	movlb	2	; select bank2
  3369  00FE  01E7               	clrf	__pbssBANK2& (0+127)
  3370  00FF  01E8               	clrf	(__pbssBANK2+1)& (0+127)
  3371  0100  01E9               	clrf	(__pbssBANK2+2)& (0+127)
  3372  0101  01EA               	clrf	(__pbssBANK2+3)& (0+127)
  3373                           
  3374                           ; Clear objects allocated to BANK3
  3375  0102  30A0               	movlw	low __pbssBANK3
  3376  0103  0084               	movwf	4
  3377  0104  3001               	movlw	high __pbssBANK3
  3378  0105  0085               	movwf	5
  3379  0106  3020               	movlw	32
  3380  0107  3197  27A8  3180   	fcall	clear_ram0
  3381                           
  3382                           ; Clear objects allocated to BANK4
  3383  010A  3020               	movlw	low __pbssBANK4
  3384  010B  0084               	movwf	4
  3385  010C  3002               	movlw	high __pbssBANK4
  3386  010D  0085               	movwf	5
  3387  010E  3027               	movlw	39
  3388  010F  3197  27A8  3180   	fcall	clear_ram0
  3389                           
  3390                           ; Clear objects allocated to BANK5
  3391  0112  30A0               	movlw	low __pbssBANK5
  3392  0113  0084               	movwf	4
  3393  0114  3002               	movlw	high __pbssBANK5
  3394  0115  0085               	movwf	5
  3395  0116  3040               	movlw	64
  3396  0117  3197  27A8  3180   	fcall	clear_ram0
  3397                           
  3398                           ; Clear objects allocated to BANK6
  3399  011A  3020               	movlw	low __pbssBANK6
  3400  011B  0084               	movwf	4
  3401  011C  3003               	movlw	high __pbssBANK6
  3402  011D  0085               	movwf	5
  3403  011E  3040               	movlw	64
  3404  011F  3197  27A8         	fcall	clear_ram0
  3405  0121                     end_of_initialization:	
  3406                           ;End of C runtime variable initialization code
  3407                           
  3408  0121                     __end_of__initialization:	
  3409  0121  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  3410  0122  0020               	movlb	0
  3411  0123  3189  2959         	ljmp	_main	;jump to C main() function
  3412                           
  3413                           	psect	bssBANK0
  3414  006F                     __pbssBANK0:	
  3415  006F                     tmp_change@history_key:	
  3416  006F                     	ds	1
  3417                           
  3418                           	psect	bssBANK1
  3419  00E0                     __pbssBANK1:	
  3420  00E0                     _width:	
  3421  00E0                     	ds	2
  3422  00E2                     _prec:	
  3423  00E2                     	ds	2
  3424  00E4                     _flags:	
  3425  00E4                     	ds	2
  3426  00E6                     capture_handdle@last_cnt:	
  3427  00E6                     	ds	2
  3428  00E8                     tmp_change@key_time_cnt:	
  3429  00E8                     	ds	2
  3430  00EA                     led_Blink@State:	
  3431  00EA                     	ds	1
  3432  00EB                     _flg_rc:	
  3433  00EB                     	ds	1
  3434  00EC                     _TX_en:	
  3435  00EC                     	ds	1
  3436  00ED                     _RX_data:	
  3437  00ED                     	ds	1
  3438  00EE                     _TX_data:	
  3439  00EE                     	ds	1
  3440  00EF                     _ENUM:	
  3441  00EF                     	ds	1
  3442                           
  3443                           	psect	bssBANK2
  3444  0167                     __pbssBANK2:	
  3445  0167                     _nout:	
  3446  0167                     	ds	2
  3447  0169                     ISR@cnt:	
  3448  0169                     	ds	2
  3449                           
  3450                           	psect	dataBANK2
  3451  0160                     __pdataBANK2:	
  3452  0160                     stoa@F1129:	
  3453  0160                     	ds	7
  3454                           
  3455                           	psect	bssBANK3
  3456  01A0                     __pbssBANK3:	
  3457  01A0                     _dbuf:	
  3458  01A0                     	ds	32
  3459                           
  3460                           	psect	bssBANK4
  3461  0220                     __pbssBANK4:	
  3462  0220                     _g_data:	
  3463  0220                     	ds	39
  3464                           
  3465                           	psect	bssBANK5
  3466  02A0                     __pbssBANK5:	
  3467  02A0                     ISR@F5514:	
  3468  02A0                     	ds	64
  3469                           
  3470                           	psect	bssBANK6
  3471  0320                     __pbssBANK6:	
  3472  0320                     ISR@F5517:	
  3473  0320                     	ds	64
  3474                           
  3475                           	psect	inittext
  3476  17AE                     init_ram:	
  3477  17AE  00FE               	movwf	126
  3478  17AF                     initloop:	
  3479  17AF  0012               	moviw fsr0++
  3480  17B0  001E               	movwi fsr1++
  3481  17B1  0BFE               	decfsz	126,f
  3482  17B2  2FAF               	goto	initloop
  3483  17B3  3400               	retlw	0
  3484                           
  3485                           	psect	clrtext
  3486  17A8                     clear_ram0:	
  3487                           ;	Called with FSR0 containing the base address, and
  3488                           ;	WREG with the size to clear
  3489                           
  3490  17A8  0064               	clrwdt	;clear the watchdog before getting into this loop
  3491  17A9                     clrloop0:	
  3492  17A9  0180               	clrf	0	;clear RAM location pointed to by FSR
  3493  17AA  3101               	addfsr 0,1
  3494  17AB  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  3495  17AC  2FA9               	goto	clrloop0	;have we reached the end yet?
  3496  17AD  3400               	retlw	0	;all done for this memory range, return
  3497                           
  3498                           	psect	cstackBANK3
  3499  01C0                     __pcstackBANK3:	
  3500  01C0                     ??_data_getdata:	
  3501  01C0                     ??_display_set:	
  3502                           ; 1 bytes @ 0x0
  3503                           
  3504  01C0                     ??_timer_Timer0Start:	
  3505                           ; 1 bytes @ 0x0
  3506                           
  3507  01C0                     ??_timer_Timer0Reset:	
  3508                           ; 1 bytes @ 0x0
  3509                           
  3510  01C0                     ??_timer_Timer0Init:	
  3511                           ; 1 bytes @ 0x0
  3512                           
  3513  01C0                     ??_timer_Timer1Init:	
  3514                           ; 1 bytes @ 0x0
  3515                           
  3516  01C0                     ??_timer_Timer1Start:	
  3517                           ; 1 bytes @ 0x0
  3518                           
  3519  01C0                     ??_uart_init:	
  3520                           ; 1 bytes @ 0x0
  3521                           
  3522  01C0                     ??_IIC_Init:	
  3523                           ; 1 bytes @ 0x0
  3524                           
  3525  01C0                     ??_led_SetState:	
  3526                           ; 1 bytes @ 0x0
  3527                           
  3528  01C0                     ??_capture_setEdge:	
  3529                           ; 1 bytes @ 0x0
  3530                           
  3531  01C0                     ??_display_control595_delay:	
  3532                           ; 1 bytes @ 0x0
  3533                           
  3534  01C0                     ?___awdiv:	
  3535                           ; 1 bytes @ 0x0
  3536                           
  3537  01C0                     ?___awmod:	
  3538                           ; 2 bytes @ 0x0
  3539                           
  3540  01C0                     capture_setEdge@edge:	
  3541                           ; 2 bytes @ 0x0
  3542                           
  3543  01C0                     led_SetState@isOn:	
  3544                           ; 1 bytes @ 0x0
  3545                           
  3546  01C0                     display_set@ison:	
  3547                           ; 1 bytes @ 0x0
  3548                           
  3549  01C0                     ___awdiv@divisor:	
  3550                           ; 1 bytes @ 0x0
  3551                           
  3552  01C0                     ___awmod@divisor:	
  3553                           ; 2 bytes @ 0x0
  3554                           
  3555                           
  3556                           ; 2 bytes @ 0x0
  3557  01C0                     	ds	1
  3558  01C1                     ??_capture_init:	
  3559  01C1                     display_control595_delay@times:	
  3560                           ; 1 bytes @ 0x1
  3561                           
  3562                           
  3563                           ; 1 bytes @ 0x1
  3564  01C1                     	ds	1
  3565  01C2                     ??_display_write_byte:	
  3566  01C2                     ___awdiv@dividend:	
  3567                           ; 1 bytes @ 0x2
  3568                           
  3569  01C2                     ___awmod@dividend:	
  3570                           ; 2 bytes @ 0x2
  3571                           
  3572                           
  3573                           ; 2 bytes @ 0x2
  3574  01C2                     	ds	2
  3575  01C4                     ??___awdiv:	
  3576  01C4                     ??___awmod:	
  3577                           ; 1 bytes @ 0x4
  3578                           
  3579  01C4                     display_write_byte@data:	
  3580                           ; 1 bytes @ 0x4
  3581                           
  3582                           
  3583                           ; 1 bytes @ 0x4
  3584  01C4                     	ds	1
  3585  01C5                     display_write_byte@i:	
  3586  01C5                     ___awdiv@counter:	
  3587                           ; 1 bytes @ 0x5
  3588                           
  3589  01C5                     ___awmod@counter:	
  3590                           ; 1 bytes @ 0x5
  3591                           
  3592                           
  3593                           ; 1 bytes @ 0x5
  3594  01C5                     	ds	1
  3595  01C6                     ___awdiv@sign:	
  3596  01C6                     ___awmod@sign:	
  3597                           ; 1 bytes @ 0x6
  3598                           
  3599                           
  3600                           ; 1 bytes @ 0x6
  3601  01C6                     	ds	1
  3602  01C7                     ___awdiv@quotient:	
  3603                           
  3604                           ; 2 bytes @ 0x7
  3605  01C7                     	ds	2
  3606  01C9                     ?_display_write_once:	
  3607  01C9                     display_write_once@HR:	
  3608                           ; 1 bytes @ 0x9
  3609                           
  3610                           
  3611                           ; 1 bytes @ 0x9
  3612  01C9                     	ds	1
  3613  01CA                     display_write_once@ML:	
  3614                           
  3615                           ; 1 bytes @ 0xA
  3616  01CA                     	ds	1
  3617  01CB                     display_write_once@MR:	
  3618                           
  3619                           ; 1 bytes @ 0xB
  3620  01CB                     	ds	1
  3621  01CC                     ??_display_write_once:	
  3622  01CC                     display_write_once@HL:	
  3623                           ; 1 bytes @ 0xC
  3624                           
  3625                           
  3626                           ; 1 bytes @ 0xC
  3627  01CC                     	ds	1
  3628  01CD                     ??_display_update:	
  3629                           
  3630                           ; 1 bytes @ 0xD
  3631  01CD                     	ds	9
  3632  01D6                     _display_update$1570:	
  3633                           
  3634                           ; 2 bytes @ 0x16
  3635  01D6                     	ds	2
  3636  01D8                     display_update@pdata:	
  3637                           
  3638                           ; 1 bytes @ 0x18
  3639  01D8                     	ds	1
  3640  01D9                     ??_init_env:	
  3641                           
  3642                           ; 1 bytes @ 0x19
  3643  01D9                     	ds	2
  3644  01DB                     init_env@i:	
  3645                           
  3646                           ; 2 bytes @ 0x1B
  3647  01DB                     	ds	2
  3648  01DD                     init_env@pdata:	
  3649                           
  3650                           ; 1 bytes @ 0x1D
  3651  01DD                     	ds	1
  3652  01DE                     ??_main:	
  3653                           
  3654                           	psect	cstackBANK2
  3655  0120                     __pcstackBANK2:	
  3656                           ; 1 bytes @ 0x1E
  3657                           
  3658  0120                     ISR@send:	
  3659                           
  3660                           ; 64 bytes @ 0x0
  3661  0120                     	ds	64
  3662                           
  3663                           	psect	cstackBANK1
  3664  00A0                     __pcstackBANK1:	
  3665  00A0                     ISR@buf:	
  3666                           
  3667                           ; 64 bytes @ 0x0
  3668  00A0                     	ds	64
  3669                           
  3670                           	psect	cstackCOMMON
  3671  0070                     __pcstackCOMMON:	
  3672  0070                     ?_data_getdata:	
  3673  0070                     ?_display_update:	
  3674                           ; 1 bytes @ 0x0
  3675                           
  3676  0070                     ?_display_set:	
  3677                           ; 1 bytes @ 0x0
  3678                           
  3679  0070                     ?_timer_Timer0Start:	
  3680                           ; 1 bytes @ 0x0
  3681                           
  3682  0070                     ?_timer_Timer0Reset:	
  3683                           ; 1 bytes @ 0x0
  3684                           
  3685  0070                     ?_timer_IsTimer1Itrpt:	
  3686                           ; 1 bytes @ 0x0
  3687                           
  3688  0070                     ??_timer_IsTimer1Itrpt:	
  3689                           ; 1 bytes @ 0x0
  3690                           
  3691  0070                     ?_timer_Timer1ClrIntrpt:	
  3692                           ; 1 bytes @ 0x0
  3693                           
  3694  0070                     ??_timer_Timer1ClrIntrpt:	
  3695                           ; 1 bytes @ 0x0
  3696                           
  3697  0070                     ?_timer_IsTimer0Itrpt:	
  3698                           ; 1 bytes @ 0x0
  3699                           
  3700  0070                     ??_timer_IsTimer0Itrpt:	
  3701                           ; 1 bytes @ 0x0
  3702                           
  3703  0070                     ?_key_isPressed:	
  3704                           ; 1 bytes @ 0x0
  3705                           
  3706  0070                     ??_key_isPressed:	
  3707                           ; 1 bytes @ 0x0
  3708                           
  3709  0070                     ?_capture_Set:	
  3710                           ; 1 bytes @ 0x0
  3711                           
  3712  0070                     ??_capture_Set:	
  3713                           ; 1 bytes @ 0x0
  3714                           
  3715  0070                     ?_led_Blink:	
  3716                           ; 1 bytes @ 0x0
  3717                           
  3718  0070                     ?_strcpy:	
  3719                           ; 1 bytes @ 0x0
  3720                           
  3721  0070                     ?_capture_IsEnable:	
  3722                           ; 1 bytes @ 0x0
  3723                           
  3724  0070                     ??_capture_IsEnable:	
  3725                           ; 1 bytes @ 0x0
  3726                           
  3727  0070                     ?_capture_IsIntrpt:	
  3728                           ; 1 bytes @ 0x0
  3729                           
  3730  0070                     ??_capture_IsIntrpt:	
  3731                           ; 1 bytes @ 0x0
  3732                           
  3733  0070                     ?_capture_clrIntrpt:	
  3734                           ; 1 bytes @ 0x0
  3735                           
  3736  0070                     ??_capture_clrIntrpt:	
  3737                           ; 1 bytes @ 0x0
  3738                           
  3739  0070                     ?_timer_Timer0Init:	
  3740                           ; 1 bytes @ 0x0
  3741                           
  3742  0070                     ?_timer_Timer1Init:	
  3743                           ; 1 bytes @ 0x0
  3744                           
  3745  0070                     ?_timer_Timer1Start:	
  3746                           ; 1 bytes @ 0x0
  3747                           
  3748  0070                     ?_capture_init:	
  3749                           ; 1 bytes @ 0x0
  3750                           
  3751  0070                     ?_uart_init:	
  3752                           ; 1 bytes @ 0x0
  3753                           
  3754  0070                     ?_IIC_Init:	
  3755                           ; 1 bytes @ 0x0
  3756                           
  3757  0070                     ?_led_SetState:	
  3758                           ; 1 bytes @ 0x0
  3759                           
  3760  0070                     ?_key_checkPressed:	
  3761                           ; 1 bytes @ 0x0
  3762                           
  3763  0070                     ?_update_time:	
  3764                           ; 1 bytes @ 0x0
  3765                           
  3766  0070                     ?_capture_IsNegEdge:	
  3767                           ; 1 bytes @ 0x0
  3768                           
  3769  0070                     ??_capture_IsNegEdge:	
  3770                           ; 1 bytes @ 0x0
  3771                           
  3772  0070                     ?_putch:	
  3773                           ; 1 bytes @ 0x0
  3774                           
  3775  0070                     ??_putch:	
  3776                           ; 1 bytes @ 0x0
  3777                           
  3778  0070                     ?_init_env:	
  3779                           ; 1 bytes @ 0x0
  3780                           
  3781  0070                     ?_ISR:	
  3782                           ; 1 bytes @ 0x0
  3783                           
  3784  0070                     ?_main:	
  3785                           ; 1 bytes @ 0x0
  3786                           
  3787  0070                     ?_delay_4us:	
  3788                           ; 1 bytes @ 0x0
  3789                           
  3790  0070                     ??_delay_4us:	
  3791                           ; 1 bytes @ 0x0
  3792                           
  3793  0070                     ?_IIC_Start:	
  3794                           ; 1 bytes @ 0x0
  3795                           
  3796  0070                     ??_IIC_Start:	
  3797                           ; 1 bytes @ 0x0
  3798                           
  3799  0070                     ?_IIC_Stop:	
  3800                           ; 1 bytes @ 0x0
  3801                           
  3802  0070                     ??_IIC_Stop:	
  3803                           ; 1 bytes @ 0x0
  3804                           
  3805  0070                     ?_IIC_Wait_Ack:	
  3806                           ; 1 bytes @ 0x0
  3807                           
  3808  0070                     ??_IIC_Wait_Ack:	
  3809                           ; 1 bytes @ 0x0
  3810                           
  3811  0070                     ?_IIC_Ack:	
  3812                           ; 1 bytes @ 0x0
  3813                           
  3814  0070                     ??_IIC_Ack:	
  3815                           ; 1 bytes @ 0x0
  3816                           
  3817  0070                     ?_IIC_NAck:	
  3818                           ; 1 bytes @ 0x0
  3819                           
  3820  0070                     ??_IIC_NAck:	
  3821                           ; 1 bytes @ 0x0
  3822                           
  3823  0070                     ?_IIC_Send_Byte:	
  3824                           ; 1 bytes @ 0x0
  3825                           
  3826  0070                     ??_IIC_Send_Byte:	
  3827                           ; 1 bytes @ 0x0
  3828                           
  3829  0070                     ?_IIC_Read_Byte:	
  3830                           ; 1 bytes @ 0x0
  3831                           
  3832  0070                     ??_IIC_Read_Byte:	
  3833                           ; 1 bytes @ 0x0
  3834                           
  3835  0070                     ?_bpc_Cnt2Qua:	
  3836                           ; 1 bytes @ 0x0
  3837                           
  3838  0070                     ?_display_control595_delay:	
  3839                           ; 1 bytes @ 0x0
  3840                           
  3841  0070                     ?_display_write_byte:	
  3842                           ; 1 bytes @ 0x0
  3843                           
  3844  0070                     ?i1_timer_Timer0Reset:	
  3845                           ; 1 bytes @ 0x0
  3846                           
  3847  0070                     ??i1_timer_Timer0Reset:	
  3848                           ; 1 bytes @ 0x0
  3849                           
  3850  0070                     ?i1_data_getdata:	
  3851                           ; 1 bytes @ 0x0
  3852                           
  3853  0070                     ??i1_data_getdata:	
  3854                           ; 1 bytes @ 0x0
  3855                           
  3856  0070                     ??i1_capture_setEdge:	
  3857                           ; 1 bytes @ 0x0
  3858                           
  3859  0070                     ?i1_led_SetState:	
  3860                           ; 1 bytes @ 0x0
  3861                           
  3862  0070                     ??i1_led_SetState:	
  3863                           ; 1 bytes @ 0x0
  3864                           
  3865  0070                     ?i1_display_control595_delay:	
  3866                           ; 1 bytes @ 0x0
  3867                           
  3868  0070                     ??i1_display_control595_delay:	
  3869                           ; 1 bytes @ 0x0
  3870                           
  3871  0070                     ?i1_display_write_byte:	
  3872                           ; 1 bytes @ 0x0
  3873                           
  3874  0070                     ?i1_display_update:	
  3875                           ; 1 bytes @ 0x0
  3876                           
  3877  0070                     ?_timer_Timer0Handdle:	
  3878                           ; 1 bytes @ 0x0
  3879                           
  3880  0070                     ?_strlen:	
  3881                           ; 2 bytes @ 0x0
  3882                           
  3883  0070                     ?_capture_handdle:	
  3884                           ; 2 bytes @ 0x0
  3885                           
  3886  0070                     ?_bpc_proc:	
  3887                           ; 2 bytes @ 0x0
  3888                           
  3889  0070                     ?_fputc:	
  3890                           ; 2 bytes @ 0x0
  3891                           
  3892  0070                     ?_cnt_abs:	
  3893                           ; 2 bytes @ 0x0
  3894                           
  3895  0070                     ?_check_err:	
  3896                           ; 2 bytes @ 0x0
  3897                           
  3898  0070                     ?_capture_setEdge:	
  3899                           ; 2 bytes @ 0x0
  3900                           
  3901  0070                     ?___lwmod:	
  3902                           ; 2 bytes @ 0x0
  3903                           
  3904  0070                     ?i1_capture_setEdge:	
  3905                           ; 2 bytes @ 0x0
  3906                           
  3907  0070                     ?i1___awdiv:	
  3908                           ; 2 bytes @ 0x0
  3909                           
  3910  0070                     ?i1___awmod:	
  3911                           ; 2 bytes @ 0x0
  3912                           
  3913  0070                     ?___aldiv:	
  3914                           ; 2 bytes @ 0x0
  3915                           
  3916  0070                     ?___almod:	
  3917                           ; 4 bytes @ 0x0
  3918                           
  3919  0070                     capture_Set@isON:	
  3920                           ; 4 bytes @ 0x0
  3921                           
  3922  0070                     putch@c:	
  3923                           ; 1 bytes @ 0x0
  3924                           
  3925  0070                     strcpy@src:	
  3926                           ; 1 bytes @ 0x0
  3927                           
  3928  0070                     i1capture_setEdge@edge:	
  3929                           ; 1 bytes @ 0x0
  3930                           
  3931  0070                     i1led_SetState@isOn:	
  3932                           ; 1 bytes @ 0x0
  3933                           
  3934  0070                     cnt_abs@a:	
  3935                           ; 1 bytes @ 0x0
  3936                           
  3937  0070                     ___lwmod@divisor:	
  3938                           ; 2 bytes @ 0x0
  3939                           
  3940  0070                     fputc@c:	
  3941                           ; 2 bytes @ 0x0
  3942                           
  3943  0070                     strlen@s:	
  3944                           ; 2 bytes @ 0x0
  3945                           
  3946  0070                     i1___awdiv@divisor:	
  3947                           ; 2 bytes @ 0x0
  3948                           
  3949  0070                     i1___awmod@divisor:	
  3950                           ; 2 bytes @ 0x0
  3951                           
  3952  0070                     ___aldiv@divisor:	
  3953                           ; 2 bytes @ 0x0
  3954                           
  3955  0070                     ___almod@divisor:	
  3956                           ; 4 bytes @ 0x0
  3957                           
  3958                           
  3959                           ; 4 bytes @ 0x0
  3960  0070                     	ds	1
  3961  0071                     ??_led_Blink:	
  3962  0071                     ??_strcpy:	
  3963                           ; 1 bytes @ 0x1
  3964                           
  3965  0071                     ??_capture_handdle:	
  3966                           ; 1 bytes @ 0x1
  3967                           
  3968  0071                     IIC_Wait_Ack@ucErrTime:	
  3969                           ; 1 bytes @ 0x1
  3970                           
  3971  0071                     IIC_Send_Byte@txd:	
  3972                           ; 1 bytes @ 0x1
  3973                           
  3974  0071                     IIC_Read_Byte@ack:	
  3975                           ; 1 bytes @ 0x1
  3976                           
  3977  0071                     key_isPressed@pdata:	
  3978                           ; 1 bytes @ 0x1
  3979                           
  3980  0071                     i1display_control595_delay@times:	
  3981                           ; 1 bytes @ 0x1
  3982                           
  3983                           
  3984                           ; 1 bytes @ 0x1
  3985  0071                     	ds	1
  3986  0072                     ??_strlen:	
  3987  0072                     ??_key_checkPressed:	
  3988                           ; 1 bytes @ 0x2
  3989                           
  3990  0072                     ??_check_err:	
  3991                           ; 1 bytes @ 0x2
  3992                           
  3993  0072                     ??i1_display_write_byte:	
  3994                           ; 1 bytes @ 0x2
  3995                           
  3996  0072                     IIC_Send_Byte@t:	
  3997                           ; 1 bytes @ 0x2
  3998                           
  3999  0072                     IIC_Read_Byte@receive:	
  4000                           ; 1 bytes @ 0x2
  4001                           
  4002  0072                     fputc@fp:	
  4003                           ; 1 bytes @ 0x2
  4004                           
  4005  0072                     strcpy@s:	
  4006                           ; 1 bytes @ 0x2
  4007                           
  4008  0072                     cnt_abs@b:	
  4009                           ; 1 bytes @ 0x2
  4010                           
  4011  0072                     ___lwmod@dividend:	
  4012                           ; 2 bytes @ 0x2
  4013                           
  4014  0072                     i1___awdiv@dividend:	
  4015                           ; 2 bytes @ 0x2
  4016                           
  4017  0072                     i1___awmod@dividend:	
  4018                           ; 2 bytes @ 0x2
  4019                           
  4020                           
  4021                           ; 2 bytes @ 0x2
  4022  0072                     	ds	1
  4023  0073                     ?_IIC_WtRTCReg:	
  4024  0073                     ??_fputc:	
  4025                           ; 1 bytes @ 0x3
  4026                           
  4027  0073                     IIC_Read_Byte@i:	
  4028                           ; 1 bytes @ 0x3
  4029                           
  4030  0073                     IIC_WtRTCReg@value:	
  4031                           ; 1 bytes @ 0x3
  4032                           
  4033  0073                     key_checkPressed@pdata:	
  4034                           ; 1 bytes @ 0x3
  4035                           
  4036  0073                     strcpy@d:	
  4037                           ; 1 bytes @ 0x3
  4038                           
  4039                           
  4040                           ; 1 bytes @ 0x3
  4041  0073                     	ds	1
  4042  0074                     ??_IIC_WtRTCReg:	
  4043  0074                     ?_IIC_RdRTCReg:	
  4044                           ; 1 bytes @ 0x4
  4045                           
  4046  0074                     ??_cnt_abs:	
  4047                           ; 1 bytes @ 0x4
  4048                           
  4049  0074                     ??___lwmod:	
  4050                           ; 1 bytes @ 0x4
  4051                           
  4052  0074                     ??i1___awdiv:	
  4053                           ; 1 bytes @ 0x4
  4054                           
  4055  0074                     ??i1___awmod:	
  4056                           ; 1 bytes @ 0x4
  4057                           
  4058  0074                     IIC_RdRTCReg@value:	
  4059                           ; 1 bytes @ 0x4
  4060                           
  4061  0074                     IIC_WtRTCReg@regAddr:	
  4062                           ; 1 bytes @ 0x4
  4063                           
  4064  0074                     strcpy@dest:	
  4065                           ; 1 bytes @ 0x4
  4066                           
  4067  0074                     i1display_write_byte@data:	
  4068                           ; 1 bytes @ 0x4
  4069                           
  4070  0074                     strlen@a:	
  4071                           ; 1 bytes @ 0x4
  4072                           
  4073  0074                     ___aldiv@dividend:	
  4074                           ; 2 bytes @ 0x4
  4075                           
  4076  0074                     ___almod@dividend:	
  4077                           ; 4 bytes @ 0x4
  4078                           
  4079                           
  4080                           ; 4 bytes @ 0x4
  4081  0074                     	ds	1
  4082  0075                     ??_IIC_RdRTCReg:	
  4083  0075                     ___lwmod@counter:	
  4084                           ; 1 bytes @ 0x5
  4085                           
  4086  0075                     i1display_write_byte@i:	
  4087                           ; 1 bytes @ 0x5
  4088                           
  4089  0075                     i1___awdiv@counter:	
  4090                           ; 1 bytes @ 0x5
  4091                           
  4092  0075                     i1___awmod@counter:	
  4093                           ; 1 bytes @ 0x5
  4094                           
  4095                           
  4096                           ; 1 bytes @ 0x5
  4097  0075                     	ds	1
  4098  0076                     ??_bpc_Cnt2Qua:	
  4099  0076                     IIC_RdRTCReg@regAddr:	
  4100                           ; 1 bytes @ 0x6
  4101                           
  4102  0076                     i1___awdiv@sign:	
  4103                           ; 1 bytes @ 0x6
  4104                           
  4105  0076                     i1___awmod@sign:	
  4106                           ; 1 bytes @ 0x6
  4107                           
  4108                           
  4109                           ; 1 bytes @ 0x6
  4110  0076                     	ds	1
  4111  0077                     _capture_handdle$1403:	
  4112  0077                     i1___awdiv@quotient:	
  4113                           ; 2 bytes @ 0x7
  4114                           
  4115                           
  4116                           ; 2 bytes @ 0x7
  4117  0077                     	ds	1
  4118  0078                     ??___aldiv:	
  4119  0078                     ??___almod:	
  4120                           ; 1 bytes @ 0x8
  4121                           
  4122  0078                     ?_fputs:	
  4123                           ; 1 bytes @ 0x8
  4124                           
  4125  0078                     ?_stoa:	
  4126                           ; 2 bytes @ 0x8
  4127                           
  4128  0078                     bpc_Cnt2Qua@pdata:	
  4129                           ; 2 bytes @ 0x8
  4130                           
  4131  0078                     fputs@fp:	
  4132                           ; 1 bytes @ 0x8
  4133                           
  4134  0078                     stoa@s:	
  4135                           ; 1 bytes @ 0x8
  4136                           
  4137                           
  4138                           ; 2 bytes @ 0x8
  4139  0078                     	ds	1
  4140  0079                     ??_fputs:	
  4141  0079                     ?i1_display_write_once:	
  4142                           ; 1 bytes @ 0x9
  4143                           
  4144  0079                     capture_handdle@pdata:	
  4145                           ; 1 bytes @ 0x9
  4146                           
  4147  0079                     ___almod@counter:	
  4148                           ; 1 bytes @ 0x9
  4149                           
  4150  0079                     i1display_write_once@HR:	
  4151                           ; 1 bytes @ 0x9
  4152                           
  4153                           
  4154                           ; 1 bytes @ 0x9
  4155  0079                     	ds	1
  4156  007A                     ??_stoa:	
  4157  007A                     ___almod@sign:	
  4158                           ; 1 bytes @ 0xA
  4159                           
  4160  007A                     i1display_write_once@ML:	
  4161                           ; 1 bytes @ 0xA
  4162                           
  4163  007A                     capture_handdle@cnt_int:	
  4164                           ; 1 bytes @ 0xA
  4165                           
  4166                           
  4167                           ; 2 bytes @ 0xA
  4168  007A                     	ds	1
  4169  007B                     ?_abs:	
  4170  007B                     i1display_write_once@MR:	
  4171                           ; 2 bytes @ 0xB
  4172                           
  4173  007B                     abs@a:	
  4174                           ; 1 bytes @ 0xB
  4175                           
  4176                           
  4177                           ; 2 bytes @ 0xB
  4178  007B                     	ds	1
  4179  007C                     ??_pad:	
  4180  007C                     ??i1_display_write_once:	
  4181                           ; 1 bytes @ 0xC
  4182                           
  4183  007C                     i1display_write_once@HL:	
  4184                           ; 1 bytes @ 0xC
  4185                           
  4186  007C                     capture_handdle@cnt_tmp:	
  4187                           ; 1 bytes @ 0xC
  4188                           
  4189                           
  4190                           ; 2 bytes @ 0xC
  4191  007C                     	ds	1
  4192  007D                     ??_sprintf:	
  4193  007D                     update_time@pdata:	
  4194                           ; 1 bytes @ 0xD
  4195                           
  4196                           
  4197                           ; 1 bytes @ 0xD
  4198  007D                     	ds	1
  4199  007E                     ??_timer_Timer0Handdle:	
  4200                           
  4201                           	psect	cstackBANK0
  4202  0020                     __pcstackBANK0:	
  4203                           ; 1 bytes @ 0xE
  4204                           
  4205  0020                     ??_abs:	
  4206  0020                     ??i1_display_update:	
  4207                           ; 1 bytes @ 0x0
  4208                           
  4209  0020                     ___aldiv@counter:	
  4210                           ; 1 bytes @ 0x0
  4211                           
  4212  0020                     fputs@c:	
  4213                           ; 1 bytes @ 0x0
  4214                           
  4215  0020                     _check_err$1166:	
  4216                           ; 1 bytes @ 0x0
  4217                           
  4218  0020                     stoa@nuls:	
  4219                           ; 2 bytes @ 0x0
  4220                           
  4221                           
  4222                           ; 7 bytes @ 0x0
  4223  0020                     	ds	1
  4224  0021                     ___aldiv@sign:	
  4225  0021                     fputs@i:	
  4226                           ; 1 bytes @ 0x1
  4227                           
  4228                           
  4229                           ; 2 bytes @ 0x1
  4230  0021                     	ds	1
  4231  0022                     _check_err$1167:	
  4232  0022                     ___aldiv@quotient:	
  4233                           ; 2 bytes @ 0x2
  4234                           
  4235                           
  4236                           ; 4 bytes @ 0x2
  4237  0022                     	ds	1
  4238  0023                     fputs@s:	
  4239                           
  4240                           ; 1 bytes @ 0x3
  4241  0023                     	ds	1
  4242  0024                     ?_pad:	
  4243  0024                     pad@buf:	
  4244                           ; 2 bytes @ 0x4
  4245                           
  4246  0024                     _check_err$1170:	
  4247                           ; 1 bytes @ 0x4
  4248                           
  4249                           
  4250                           ; 2 bytes @ 0x4
  4251  0024                     	ds	1
  4252  0025                     pad@p:	
  4253                           
  4254                           ; 2 bytes @ 0x5
  4255  0025                     	ds	1
  4256  0026                     _check_err$1171:	
  4257                           
  4258                           ; 2 bytes @ 0x6
  4259  0026                     	ds	1
  4260  0027                     pad@i:	
  4261  0027                     stoa@i:	
  4262                           ; 2 bytes @ 0x7
  4263                           
  4264                           
  4265                           ; 2 bytes @ 0x7
  4266  0027                     	ds	1
  4267  0028                     check_err@i:	
  4268                           
  4269                           ; 1 bytes @ 0x8
  4270  0028                     	ds	1
  4271  0029                     check_err@check:	
  4272  0029                     pad@w:	
  4273                           ; 1 bytes @ 0x9
  4274                           
  4275  0029                     stoa@w:	
  4276                           ; 2 bytes @ 0x9
  4277                           
  4278  0029                     i1_display_update$1570:	
  4279                           ; 2 bytes @ 0x9
  4280                           
  4281                           
  4282                           ; 2 bytes @ 0x9
  4283  0029                     	ds	1
  4284  002A                     check_err@pdata:	
  4285                           
  4286                           ; 1 bytes @ 0xA
  4287  002A                     	ds	1
  4288  002B                     pad@fp:	
  4289  002B                     stoa@fp:	
  4290                           ; 1 bytes @ 0xB
  4291                           
  4292  002B                     i1display_update@pdata:	
  4293                           ; 1 bytes @ 0xB
  4294                           
  4295                           
  4296                           ; 1 bytes @ 0xB
  4297  002B                     	ds	1
  4298  002C                     ??_bpc_proc:	
  4299  002C                     ??_update_time:	
  4300                           ; 1 bytes @ 0xC
  4301                           
  4302  002C                     ?_dtoa:	
  4303                           ; 1 bytes @ 0xC
  4304                           
  4305  002C                     stoa@cp:	
  4306                           ; 2 bytes @ 0xC
  4307                           
  4308  002C                     dtoa@d:	
  4309                           ; 2 bytes @ 0xC
  4310                           
  4311                           
  4312                           ; 4 bytes @ 0xC
  4313  002C                     	ds	2
  4314  002E                     bpc_proc@last_time_s:	
  4315  002E                     stoa@p:	
  4316                           ; 2 bytes @ 0xE
  4317                           
  4318                           
  4319                           ; 2 bytes @ 0xE
  4320  002E                     	ds	2
  4321  0030                     ??_dtoa:	
  4322  0030                     bpc_proc@last_time_h:	
  4323                           ; 1 bytes @ 0x10
  4324                           
  4325  0030                     stoa@l:	
  4326                           ; 2 bytes @ 0x10
  4327                           
  4328                           
  4329                           ; 2 bytes @ 0x10
  4330  0030                     	ds	2
  4331  0032                     bpc_proc@last_time_m:	
  4332  0032                     _dtoa$1762:	
  4333                           ; 2 bytes @ 0x12
  4334                           
  4335                           
  4336                           ; 2 bytes @ 0x12
  4337  0032                     	ds	2
  4338  0034                     dtoa@fp:	
  4339  0034                     bpc_proc@i:	
  4340                           ; 1 bytes @ 0x14
  4341                           
  4342                           
  4343                           ; 2 bytes @ 0x14
  4344  0034                     	ds	1
  4345  0035                     dtoa@p:	
  4346                           
  4347                           ; 2 bytes @ 0x15
  4348  0035                     	ds	1
  4349  0036                     bpc_proc@number:	
  4350                           
  4351                           ; 1 bytes @ 0x16
  4352  0036                     	ds	1
  4353  0037                     bpc_proc@pdata:	
  4354  0037                     dtoa@w:	
  4355                           ; 1 bytes @ 0x17
  4356                           
  4357                           
  4358                           ; 2 bytes @ 0x17
  4359  0037                     	ds	2
  4360  0039                     dtoa@s:	
  4361                           
  4362                           ; 2 bytes @ 0x19
  4363  0039                     	ds	2
  4364  003B                     dtoa@n:	
  4365                           
  4366                           ; 4 bytes @ 0x1B
  4367  003B                     	ds	4
  4368  003F                     dtoa@i:	
  4369                           
  4370                           ; 2 bytes @ 0x1F
  4371  003F                     	ds	2
  4372  0041                     ?_vfpfcnvrt:	
  4373  0041                     vfpfcnvrt@fmt:	
  4374                           ; 2 bytes @ 0x21
  4375                           
  4376                           
  4377                           ; 1 bytes @ 0x21
  4378  0041                     	ds	1
  4379  0042                     vfpfcnvrt@ap:	
  4380                           
  4381                           ; 1 bytes @ 0x22
  4382  0042                     	ds	1
  4383  0043                     ??_vfpfcnvrt:	
  4384                           
  4385                           ; 1 bytes @ 0x23
  4386  0043                     	ds	5
  4387  0048                     vfpfcnvrt@ll:	
  4388                           
  4389                           ; 4 bytes @ 0x28
  4390  0048                     	ds	4
  4391  004C                     vfpfcnvrt@cp:	
  4392                           
  4393                           ; 2 bytes @ 0x2C
  4394  004C                     	ds	2
  4395  004E                     vfpfcnvrt@fp:	
  4396                           
  4397                           ; 1 bytes @ 0x2E
  4398  004E                     	ds	1
  4399  004F                     ?_vfprintf:	
  4400  004F                     vfprintf@fmt:	
  4401                           ; 2 bytes @ 0x2F
  4402                           
  4403                           
  4404                           ; 2 bytes @ 0x2F
  4405  004F                     	ds	2
  4406  0051                     vfprintf@ap:	
  4407                           
  4408                           ; 1 bytes @ 0x31
  4409  0051                     	ds	1
  4410  0052                     ??_vfprintf:	
  4411                           
  4412                           ; 1 bytes @ 0x32
  4413  0052                     	ds	2
  4414  0054                     vfprintf@fp:	
  4415                           
  4416                           ; 1 bytes @ 0x34
  4417  0054                     	ds	1
  4418  0055                     vfprintf@cfmt:	
  4419                           
  4420                           ; 2 bytes @ 0x35
  4421  0055                     	ds	2
  4422  0057                     ?_sprintf:	
  4423  0057                     sprintf@fmt:	
  4424                           ; 2 bytes @ 0x37
  4425                           
  4426                           
  4427                           ; 2 bytes @ 0x37
  4428  0057                     	ds	10
  4429  0061                     sprintf@ret:	
  4430                           
  4431                           ; 2 bytes @ 0x41
  4432  0061                     	ds	2
  4433  0063                     sprintf@ap:	
  4434                           
  4435                           ; 1 bytes @ 0x43
  4436  0063                     	ds	1
  4437  0064                     sprintf@s:	
  4438                           
  4439                           ; 1 bytes @ 0x44
  4440  0064                     	ds	1
  4441  0065                     sprintf@f:	
  4442                           
  4443                           ; 5 bytes @ 0x45
  4444  0065                     	ds	5
  4445  006A                     ??_ISR:	
  4446                           
  4447                           ; 1 bytes @ 0x4A
  4448  006A                     	ds	2
  4449  006C                     ISR@value:	
  4450                           
  4451                           ; 1 bytes @ 0x4C
  4452  006C                     	ds	1
  4453  006D                     ISR@i:	
  4454                           
  4455                           ; 1 bytes @ 0x4D
  4456  006D                     	ds	1
  4457  006E                     ISR@data:	
  4458                           
  4459                           ; 1 bytes @ 0x4E
  4460  006E                     	ds	1
  4461                           
  4462                           	psect	maintext
  4463  0959                     __pmaintext:	
  4464 ;;
  4465 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  4466 ;;
  4467 ;; *************** function _main *****************
  4468 ;; Defined at:
  4469 ;;		line 247 in file "main.c"
  4470 ;; Parameters:    Size  Location     Type
  4471 ;;		None
  4472 ;; Auto vars:     Size  Location     Type
  4473 ;;		None
  4474 ;; Return value:  Size  Location     Type
  4475 ;;                  1    wreg      void 
  4476 ;; Registers used:
  4477 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4478 ;; Tracked objects:
  4479 ;;		On entry : B1F/0
  4480 ;;		On exit  : 0/0
  4481 ;;		Unchanged: 0/0
  4482 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4483 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4484 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4485 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4486 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4487 ;;Total ram usage:        0 bytes
  4488 ;; Hardware stack levels required when called:   14
  4489 ;; This function calls:
  4490 ;;		_IIC_Init
  4491 ;;		_capture_init
  4492 ;;		_display_update
  4493 ;;		_init_env
  4494 ;;		_led_SetState
  4495 ;;		_timer_Timer0Init
  4496 ;;		_timer_Timer0Start
  4497 ;;		_timer_Timer1Init
  4498 ;;		_timer_Timer1Start
  4499 ;;		_uart_init
  4500 ;; This function is called by:
  4501 ;;		Startup code after reset
  4502 ;; This function uses a non-reentrant model
  4503 ;;
  4504                           
  4505                           
  4506                           ;psect for function _main
  4507  0959                     _main:	
  4508                           
  4509                           ;incstack = 0
  4510                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4511  0959  318E  26E7  3189   	fcall	_init_env
  4512  095C  3188  200E  3189   	fcall	_timer_Timer0Init
  4513  095F  3197  2794  3189   	fcall	_timer_Timer0Start
  4514  0962  3188  203F  3189   	fcall	_timer_Timer1Init
  4515  0965  3188  2000  3189   	fcall	_timer_Timer1Start
  4516  0968  3197  27BB  3189   	fcall	_capture_init
  4517  096B  3188  20FF  3189   	fcall	_uart_init
  4518  096E  3188  2025  3189   	fcall	_IIC_Init
  4519  0971  3186  26E9  3189   	fcall	_display_update
  4520  0974  3000               	movlw	0
  4521  0975  3188  2003  3189   	fcall	_led_SetState
  4522  0978                     l179:	
  4523                           
  4524                           ;main.c: 290:     }
  4525  0978  2978               	goto	l179
  4526  0979                     __end_of_main:	
  4527                           ;main.c: 291:     return;
  4528                           
  4529                           
  4530                           	psect	text1
  4531  08FF                     __ptext1:	
  4532 ;; *************** function _uart_init *****************
  4533 ;; Defined at:
  4534 ;;		line 14 in file "uart.c"
  4535 ;; Parameters:    Size  Location     Type
  4536 ;;		None
  4537 ;; Auto vars:     Size  Location     Type
  4538 ;;		None
  4539 ;; Return value:  Size  Location     Type
  4540 ;;                  1    wreg      void 
  4541 ;; Registers used:
  4542 ;;		wreg, status,2
  4543 ;; Tracked objects:
  4544 ;;		On entry : 0/0
  4545 ;;		On exit  : 0/0
  4546 ;;		Unchanged: 0/0
  4547 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4548 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4549 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4550 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4551 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4552 ;;Total ram usage:        0 bytes
  4553 ;; Hardware stack levels used:    1
  4554 ;; Hardware stack levels required when called:    9
  4555 ;; This function calls:
  4556 ;;		Nothing
  4557 ;; This function is called by:
  4558 ;;		_main
  4559 ;; This function uses a non-reentrant model
  4560 ;;
  4561                           
  4562                           
  4563                           ;psect for function _uart_init
  4564  08FF                     _uart_init:	
  4565                           
  4566                           ;uart.c: 17:     TXSEL = 0;
  4567                           
  4568                           ;incstack = 0
  4569                           ; Regs used in _uart_init: [wreg+status,2]
  4570  08FF  0022               	movlb	2	; select bank2
  4571  0900  111D               	bcf	29,2	;volatile
  4572                           
  4573                           ;uart.c: 18:     RXSEL = 0;
  4574  0901  109D               	bcf	29,1	;volatile
  4575                           
  4576                           ;uart.c: 19:     TRISCbits.TRISC7 = 1;
  4577  0902  0021               	movlb	1	; select bank1
  4578  0903  178E               	bsf	14,7	;volatile
  4579                           
  4580                           ;uart.c: 20:     TRISCbits.TRISC6 = 0;
  4581  0904  130E               	bcf	14,6	;volatile
  4582                           
  4583                           ;uart.c: 21:     WPUCbits.WPUC7 = 0;
  4584  0905  0024               	movlb	4	; select bank4
  4585  0906  138E               	bcf	14,7	;volatile
  4586                           
  4587                           ;uart.c: 22:     WPUCbits.WPUC6 = 0;
  4588  0907  130E               	bcf	14,6	;volatile
  4589                           
  4590                           ;uart.c: 26:     SYNC = 0;
  4591  0908  0023               	movlb	3	; select bank3
  4592  0909  121E               	bcf	30,4	;volatile
  4593                           
  4594                           ;uart.c: 27:     BRGH = 1;
  4595  090A  151E               	bsf	30,2	;volatile
  4596                           
  4597                           ;uart.c: 28:     BRG16 = 1;
  4598  090B  159F               	bsf	31,3	;volatile
  4599                           
  4600                           ;uart.c: 30:     SPBRGH = 0x00;
  4601  090C  019C               	clrf	28	;volatile
  4602                           
  4603                           ;uart.c: 31:     SPBRGL = 23;
  4604  090D  3017               	movlw	23
  4605  090E  009B               	movwf	27	;volatile
  4606                           
  4607                           ;uart.c: 34:     TXEN = 1;
  4608  090F  169E               	bsf	30,5	;volatile
  4609                           
  4610                           ;uart.c: 35:     SYNC = 0;
  4611  0910  121E               	bcf	30,4	;volatile
  4612                           
  4613                           ;uart.c: 36:     SPEN = 1;
  4614  0911  179D               	bsf	29,7	;volatile
  4615                           
  4616                           ;uart.c: 39:     TXIE = 1;
  4617  0912  0021               	movlb	1	; select bank1
  4618  0913  1611               	bsf	17,4	;volatile
  4619                           
  4620                           ;uart.c: 40:     GIE = 1;
  4621  0914  178B               	bsf	11,7	;volatile
  4622                           
  4623                           ;uart.c: 41:     PEIE = 1;
  4624  0915  170B               	bsf	11,6	;volatile
  4625                           
  4626                           ;uart.c: 44:     CREN = 1;
  4627  0916  0023               	movlb	3	; select bank3
  4628  0917  161D               	bsf	29,4	;volatile
  4629                           
  4630                           ;uart.c: 47:     RCIE = 1;
  4631  0918  0021               	movlb	1	; select bank1
  4632  0919  1691               	bsf	17,5	;volatile
  4633  091A  0008               	return
  4634  091B                     __end_of_uart_init:	
  4635                           
  4636                           	psect	text2
  4637  0800                     __ptext2:	
  4638 ;; *************** function _timer_Timer1Start *****************
  4639 ;; Defined at:
  4640 ;;		line 40 in file "timer.c"
  4641 ;; Parameters:    Size  Location     Type
  4642 ;;		None
  4643 ;; Auto vars:     Size  Location     Type
  4644 ;;		None
  4645 ;; Return value:  Size  Location     Type
  4646 ;;                  1    wreg      void 
  4647 ;; Registers used:
  4648 ;;		None
  4649 ;; Tracked objects:
  4650 ;;		On entry : 0/0
  4651 ;;		On exit  : 0/0
  4652 ;;		Unchanged: 0/0
  4653 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4654 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4655 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4656 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4657 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4658 ;;Total ram usage:        0 bytes
  4659 ;; Hardware stack levels used:    1
  4660 ;; Hardware stack levels required when called:    9
  4661 ;; This function calls:
  4662 ;;		Nothing
  4663 ;; This function is called by:
  4664 ;;		_main
  4665 ;; This function uses a non-reentrant model
  4666 ;;
  4667                           
  4668                           
  4669                           ;psect for function _timer_Timer1Start
  4670  0800                     _timer_Timer1Start:	
  4671                           
  4672                           ;timer.c: 43:     T1CONbits.TMR1ON = 0b1;
  4673                           
  4674                           ;incstack = 0
  4675                           ; Regs used in _timer_Timer1Start: []
  4676  0800  0020               	movlb	0	; select bank0
  4677  0801  1418               	bsf	24,0	;volatile
  4678  0802  0008               	return
  4679  0803                     __end_of_timer_Timer1Start:	
  4680                           
  4681                           	psect	text3
  4682  083F                     __ptext3:	
  4683 ;; *************** function _timer_Timer1Init *****************
  4684 ;; Defined at:
  4685 ;;		line 9 in file "timer.c"
  4686 ;; Parameters:    Size  Location     Type
  4687 ;;		None
  4688 ;; Auto vars:     Size  Location     Type
  4689 ;;		None
  4690 ;; Return value:  Size  Location     Type
  4691 ;;                  1    wreg      void 
  4692 ;; Registers used:
  4693 ;;		wreg, status,2, status,0
  4694 ;; Tracked objects:
  4695 ;;		On entry : 0/0
  4696 ;;		On exit  : 0/0
  4697 ;;		Unchanged: 0/0
  4698 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4699 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4700 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4701 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4702 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4703 ;;Total ram usage:        0 bytes
  4704 ;; Hardware stack levels used:    1
  4705 ;; Hardware stack levels required when called:    9
  4706 ;; This function calls:
  4707 ;;		Nothing
  4708 ;; This function is called by:
  4709 ;;		_main
  4710 ;; This function uses a non-reentrant model
  4711 ;;
  4712                           
  4713                           
  4714                           ;psect for function _timer_Timer1Init
  4715  083F                     _timer_Timer1Init:	
  4716                           
  4717                           ;timer.c: 12:     INTCONbits.GIE = 0b1;
  4718                           
  4719                           ;incstack = 0
  4720                           ; Regs used in _timer_Timer1Init: [wreg+status,2+status,0]
  4721  083F  178B               	bsf	11,7	;volatile
  4722                           
  4723                           ;timer.c: 14:     INTCONbits.PEIE = 0b1;
  4724  0840  170B               	bsf	11,6	;volatile
  4725                           
  4726                           ;timer.c: 15:     PIE1bits.TMR1IE = 0b1;
  4727  0841  0021               	movlb	1	; select bank1
  4728  0842  1411               	bsf	17,0	;volatile
  4729                           
  4730                           ;timer.c: 17:     PIR1bits.TMR1IF = 0b0;
  4731  0843  0020               	movlb	0	; select bank0
  4732  0844  1011               	bcf	17,0	;volatile
  4733                           
  4734                           ;timer.c: 19:     TMR1H = 0b0;
  4735  0845  0197               	clrf	23	;volatile
  4736                           
  4737                           ;timer.c: 20:     TMR1L = 0b0;
  4738  0846  0196               	clrf	22	;volatile
  4739                           
  4740                           ;timer.c: 30:     T1CONbits.TMR1CS = 0b00;
  4741  0847  303F               	movlw	-193
  4742  0848  0598               	andwf	24,f	;volatile
  4743                           
  4744                           ;timer.c: 33:     T1CONbits.T1CKPS = 0b11;
  4745  0849  3030               	movlw	48
  4746  084A  0498               	iorwf	24,f	;volatile
  4747  084B  0008               	return
  4748  084C                     __end_of_timer_Timer1Init:	
  4749                           
  4750                           	psect	text4
  4751  1794                     __ptext4:	
  4752 ;; *************** function _timer_Timer0Start *****************
  4753 ;; Defined at:
  4754 ;;		line 97 in file "timer.c"
  4755 ;; Parameters:    Size  Location     Type
  4756 ;;		None
  4757 ;; Auto vars:     Size  Location     Type
  4758 ;;		None
  4759 ;; Return value:  Size  Location     Type
  4760 ;;                  1    wreg      void 
  4761 ;; Registers used:
  4762 ;;		wreg, status,2, status,0, pclath, cstack
  4763 ;; Tracked objects:
  4764 ;;		On entry : 0/0
  4765 ;;		On exit  : 0/0
  4766 ;;		Unchanged: 0/0
  4767 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4768 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4769 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4770 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4771 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4772 ;;Total ram usage:        0 bytes
  4773 ;; Hardware stack levels used:    1
  4774 ;; Hardware stack levels required when called:   10
  4775 ;; This function calls:
  4776 ;;		_timer_Timer0Reset
  4777 ;; This function is called by:
  4778 ;;		_main
  4779 ;;		_tmp_change
  4780 ;; This function uses a non-reentrant model
  4781 ;;
  4782                           
  4783                           
  4784                           ;psect for function _timer_Timer0Start
  4785  1794                     _timer_Timer0Start:	
  4786                           
  4787                           ;timer.c: 99:     timer_Timer0Reset();
  4788                           
  4789                           ;incstack = 0
  4790                           ; Regs used in _timer_Timer0Start: [wreg+status,2+status,0+pclath+cstack]
  4791  1794  3197  279D         	fcall	_timer_Timer0Reset
  4792                           
  4793                           ;timer.c: 100:     INTCONbits.TMR0IE = 0b1;
  4794  1796  168B               	bsf	11,5	;volatile
  4795  1797  0008               	return
  4796  1798                     __end_of_timer_Timer0Start:	
  4797                           
  4798                           	psect	text5
  4799  179D                     __ptext5:	
  4800 ;; *************** function _timer_Timer0Reset *****************
  4801 ;; Defined at:
  4802 ;;		line 92 in file "timer.c"
  4803 ;; Parameters:    Size  Location     Type
  4804 ;;		None
  4805 ;; Auto vars:     Size  Location     Type
  4806 ;;		None
  4807 ;; Return value:  Size  Location     Type
  4808 ;;                  1    wreg      void 
  4809 ;; Registers used:
  4810 ;;		wreg
  4811 ;; Tracked objects:
  4812 ;;		On entry : 0/0
  4813 ;;		On exit  : 0/0
  4814 ;;		Unchanged: 0/0
  4815 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4816 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4817 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4818 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4819 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4820 ;;Total ram usage:        0 bytes
  4821 ;; Hardware stack levels used:    1
  4822 ;; Hardware stack levels required when called:    9
  4823 ;; This function calls:
  4824 ;;		Nothing
  4825 ;; This function is called by:
  4826 ;;		_timer_Timer0Start
  4827 ;;		_tmp_change
  4828 ;; This function uses a non-reentrant model
  4829 ;;
  4830                           
  4831                           
  4832                           ;psect for function _timer_Timer0Reset
  4833  179D                     _timer_Timer0Reset:	
  4834                           
  4835                           ;timer.c: 94:     INTCONbits.TMR0IF = 0;
  4836                           
  4837                           ;incstack = 0
  4838                           ; Regs used in _timer_Timer0Reset: [wreg]
  4839  179D  110B               	bcf	11,2	;volatile
  4840                           
  4841                           ;timer.c: 95:     TMR0 = (158 + 0);
  4842  179E  309E               	movlw	158
  4843  179F  0020               	movlb	0	; select bank0
  4844  17A0  0095               	movwf	21	;volatile
  4845  17A1  0008               	return
  4846  17A2                     __end_of_timer_Timer0Reset:	
  4847                           
  4848                           	psect	text6
  4849  080E                     __ptext6:	
  4850 ;; *************** function _timer_Timer0Init *****************
  4851 ;; Defined at:
  4852 ;;		line 63 in file "timer.c"
  4853 ;; Parameters:    Size  Location     Type
  4854 ;;		None
  4855 ;; Auto vars:     Size  Location     Type
  4856 ;;		None
  4857 ;; Return value:  Size  Location     Type
  4858 ;;                  1    wreg      void 
  4859 ;; Registers used:
  4860 ;;		wreg, status,2, status,0
  4861 ;; Tracked objects:
  4862 ;;		On entry : 0/0
  4863 ;;		On exit  : 0/0
  4864 ;;		Unchanged: 0/0
  4865 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4866 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4867 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4868 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4869 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4870 ;;Total ram usage:        0 bytes
  4871 ;; Hardware stack levels used:    1
  4872 ;; Hardware stack levels required when called:    9
  4873 ;; This function calls:
  4874 ;;		Nothing
  4875 ;; This function is called by:
  4876 ;;		_main
  4877 ;; This function uses a non-reentrant model
  4878 ;;
  4879                           
  4880                           
  4881                           ;psect for function _timer_Timer0Init
  4882  080E                     _timer_Timer0Init:	
  4883                           
  4884                           ;timer.c: 66:     INTCONbits.GIE = 0b1;
  4885                           
  4886                           ;incstack = 0
  4887                           ; Regs used in _timer_Timer0Init: [wreg+status,2+status,0]
  4888  080E  178B               	bsf	11,7	;volatile
  4889                           
  4890                           ;timer.c: 69:     INTCONbits.TMR0IE = 0b0;
  4891  080F  128B               	bcf	11,5	;volatile
  4892                           
  4893                           ;timer.c: 76:     OPTION_REGbits.PSA = 0;
  4894  0810  0021               	movlb	1	; select bank1
  4895  0811  1195               	bcf	21,3	;volatile
  4896                           
  4897                           ;timer.c: 77:     OPTION_REGbits.TMR0CS = 0;
  4898  0812  1295               	bcf	21,5	;volatile
  4899                           
  4900                           ;timer.c: 78:     OPTION_REGbits.PS = 7;
  4901  0813  3007               	movlw	7
  4902  0814  0495               	iorwf	21,f	;volatile
  4903                           
  4904                           ;timer.c: 79:     TMR0 = (158 + 0);
  4905  0815  309E               	movlw	158
  4906  0816  0020               	movlb	0	; select bank0
  4907  0817  0095               	movwf	21	;volatile
  4908  0818  0008               	return
  4909  0819                     __end_of_timer_Timer0Init:	
  4910                           
  4911                           	psect	text7
  4912  0803                     __ptext7:	
  4913 ;; *************** function _led_SetState *****************
  4914 ;; Defined at:
  4915 ;;		line 110 in file "hardware.c"
  4916 ;; Parameters:    Size  Location     Type
  4917 ;;  isOn            1    wreg     unsigned char 
  4918 ;; Auto vars:     Size  Location     Type
  4919 ;;  isOn            1    0[BANK3 ] unsigned char 
  4920 ;; Return value:  Size  Location     Type
  4921 ;;                  1    wreg      unsigned char 
  4922 ;; Registers used:
  4923 ;;		wreg, status,2, status,0
  4924 ;; Tracked objects:
  4925 ;;		On entry : 0/0
  4926 ;;		On exit  : 0/0
  4927 ;;		Unchanged: 0/0
  4928 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4929 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4930 ;;      Locals:         0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0
  4931 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4932 ;;      Totals:         0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0
  4933 ;;Total ram usage:        1 bytes
  4934 ;; Hardware stack levels used:    1
  4935 ;; Hardware stack levels required when called:    9
  4936 ;; This function calls:
  4937 ;;		Nothing
  4938 ;; This function is called by:
  4939 ;;		_main
  4940 ;; This function uses a non-reentrant model
  4941 ;;
  4942                           
  4943                           
  4944                           ;psect for function _led_SetState
  4945  0803                     _led_SetState:	
  4946                           
  4947                           ;incstack = 0
  4948                           ; Regs used in _led_SetState: [wreg+status,2+status,0]
  4949                           ;led_SetState@isOn stored from wreg
  4950  0803  0023               	movlb	3	; select bank3
  4951  0804  00C0               	movwf	led_SetState@isOn^(0+384)
  4952                           
  4953                           ;hardware.c: 110: u8 led_SetState(u8 isOn);hardware.c: 111: {;hardware.c: 112:     LATBb
      +                          its.LATB3 = (isOn)? LED_STATE_ON : LED_STATE_OFF;
  4954  0805  0840               	movf	led_SetState@isOn^(0+384),w
  4955  0806  1D03               	btfss	3,2
  4956  0807  280B               	goto	u4070
  4957  0808  0022               	movlb	2	; select bank2
  4958  0809  158D               	bsf	13,3	;volatile
  4959  080A  0008               	return
  4960  080B                     u4070:	
  4961  080B  0022               	movlb	2	; select bank2
  4962  080C  118D               	bcf	13,3	;volatile
  4963  080D  0008               	return
  4964  080E                     __end_of_led_SetState:	
  4965                           ;hardware.c: 113:     return 0;;	Return value of _led_SetState is never used
  4966                           
  4967                           
  4968                           	psect	text8
  4969  0EE7                     __ptext8:	
  4970 ;; *************** function _init_env *****************
  4971 ;; Defined at:
  4972 ;;		line 44 in file "main.c"
  4973 ;; Parameters:    Size  Location     Type
  4974 ;;		None
  4975 ;; Auto vars:     Size  Location     Type
  4976 ;;  i               2   27[BANK3 ] int 
  4977 ;;  pdata           1   29[BANK3 ] PTR volatile struct .
  4978 ;;		 -> g_data(39), 
  4979 ;; Return value:  Size  Location     Type
  4980 ;;                  1    wreg      void 
  4981 ;; Registers used:
  4982 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4983 ;; Tracked objects:
  4984 ;;		On entry : 0/0
  4985 ;;		On exit  : 0/0
  4986 ;;		Unchanged: 0/0
  4987 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4988 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4989 ;;      Locals:         0       0       0       0       3       0       0       0       0       0       0       0       
      +0       0
  4990 ;;      Temps:          0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0
  4991 ;;      Totals:         0       0       0       0       5       0       0       0       0       0       0       0       
      +0       0
  4992 ;;Total ram usage:        5 bytes
  4993 ;; Hardware stack levels used:    1
  4994 ;; Hardware stack levels required when called:   13
  4995 ;; This function calls:
  4996 ;;		_data_getdata
  4997 ;;		_display_set
  4998 ;;		_display_update
  4999 ;; This function is called by:
  5000 ;;		_main
  5001 ;; This function uses a non-reentrant model
  5002 ;;
  5003                           
  5004                           
  5005                           ;psect for function _init_env
  5006  0EE7                     _init_env:	
  5007                           
  5008                           ;main.c: 45:     IOCCP = 0;
  5009                           
  5010                           ;incstack = 0
  5011                           ; Regs used in _init_env: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5012  0EE7  3187  27FE  318E   	fcall	_data_getdata
  5013  0EEA  0023               	movlb	3	; select bank3
  5014  0EEB  00D9               	movwf	??_init_env^(0+384)
  5015  0EEC  0859               	movf	??_init_env^(0+384),w
  5016  0EED  00DD               	movwf	init_env@pdata^(0+384)
  5017                           
  5018                           ;main.c: 51:     TRISCbits.TRISC5 = 1;
  5019  0EEE  178B               	bsf	11,7	;volatile
  5020                           
  5021                           ;main.c: 58: 
  5022  0EEF  0021               	movlb	1	; select bank1
  5023  0EF0  0819               	movf	25,w	;volatile
  5024  0EF1  39FC               	andlw	-4
  5025  0EF2  3802               	iorlw	2
  5026  0EF3  0099               	movwf	25	;volatile
  5027                           
  5028                           ;main.c: 62:     pdata->g_time_h = 23;
  5029  0EF4  0819               	movf	25,w	;volatile
  5030  0EF5  3987               	andlw	-121
  5031  0EF6  3858               	iorlw	88
  5032  0EF7  0099               	movwf	25	;volatile
  5033                           
  5034                           ;main.c: 70:     LATBbits.LATB2 = PIN_LOW;
  5035  0EF8  1395               	bcf	21,7	;volatile
  5036                           
  5037                           ;main.c: 72: 
  5038  0EF9  018C               	clrf	12	;volatile
  5039                           
  5040                           ;main.c: 73:     PORTCbits.RC2 = BPC_PWR_ON;
  5041  0EFA  0022               	movlb	2	; select bank2
  5042  0EFB  018C               	clrf	12	;volatile
  5043                           
  5044                           ;main.c: 74: 
  5045  0EFC  0024               	movlb	4	; select bank4
  5046  0EFD  018C               	clrf	12	;volatile
  5047                           
  5048                           ;main.c: 75: 
  5049  0EFE  0027               	movlb	7	; select bank7
  5050  0EFF  0191               	clrf	17	;volatile
  5051                           
  5052                           ;main.c: 76:     TRISCbits.TRISC0 = 1;
  5053  0F00  0192               	clrf	18	;volatile
  5054                           
  5055                           ;main.c: 78: 
  5056  0F01  0021               	movlb	1	; select bank1
  5057  0F02  018D               	clrf	13	;volatile
  5058                           
  5059                           ;main.c: 79: 
  5060  0F03  0022               	movlb	2	; select bank2
  5061  0F04  018D               	clrf	13	;volatile
  5062                           
  5063                           ;main.c: 80: 
  5064  0F05  0024               	movlb	4	; select bank4
  5065  0F06  018D               	clrf	13	;volatile
  5066                           
  5067                           ;main.c: 81:     display_set(TRUE);
  5068  0F07  0027               	movlb	7	; select bank7
  5069  0F08  0194               	clrf	20	;volatile
  5070                           
  5071                           ;main.c: 82: }
  5072  0F09  0195               	clrf	21	;volatile
  5073                           
  5074                           ;main.c: 84: 
  5075  0F0A  0021               	movlb	1	; select bank1
  5076  0F0B  018E               	clrf	14	;volatile
  5077                           
  5078                           ;main.c: 85: void tmp_change(void)
  5079  0F0C  0022               	movlb	2	; select bank2
  5080  0F0D  018E               	clrf	14	;volatile
  5081                           
  5082                           ;main.c: 86: {
  5083  0F0E  3001               	movlw	1
  5084  0F0F  0024               	movlb	4	; select bank4
  5085  0F10  008E               	movwf	14	;volatile
  5086                           
  5087                           ;main.c: 87:     static u8 history_key = 0;
  5088  0F11  0027               	movlb	7	; select bank7
  5089  0F12  0197               	clrf	23	;volatile
  5090                           
  5091                           ;main.c: 88:     static u16 key_time_cnt = 0;
  5092  0F13  0198               	clrf	24	;volatile
  5093                           
  5094                           ;main.c: 93: 
  5095  0F14  0021               	movlb	1	; select bank1
  5096  0F15  168E               	bsf	14,5	;volatile
  5097                           
  5098                           ;main.c: 94:     if( pdata->g_isDecoding == FALSE && ((pdata->g_flg_switch == TRUE)||(pd
      +                          ata->cnt_update >= 30)) )
  5099  0F16  0024               	movlb	4	; select bank4
  5100  0F17  168E               	bsf	14,5	;volatile
  5101                           
  5102                           ;main.c: 96:     {
  5103  0F18  0021               	movlb	1	; select bank1
  5104  0F19  148E               	bsf	14,1	;volatile
  5105                           
  5106                           ;main.c: 97: 
  5107  0F1A  0024               	movlb	4	; select bank4
  5108  0F1B  108E               	bcf	14,1	;volatile
  5109                           
  5110                           ;main.c: 98:         pdata->g_find_recv_start = FALSE;
  5111  0F1C  0027               	movlb	7	; select bank7
  5112  0F1D  1497               	bsf	23,1	;volatile
  5113                           
  5114                           ;main.c: 101:         pdata->cnt_update = 0;
  5115  0F1E  0023               	movlb	3	; select bank3
  5116  0F1F  01DB               	clrf	init_env@i^(0+384)
  5117  0F20  01DC               	clrf	(init_env@i+1)^(0+384)
  5118  0F21  085C               	movf	(init_env@i+1)^(0+384),w
  5119  0F22  3A80               	xorlw	128
  5120  0F23  00D9               	movwf	??_init_env^(0+384)
  5121  0F24  3080               	movlw	128
  5122  0F25  0259               	subwf	??_init_env^(0+384),w
  5123  0F26  1D03               	skipz
  5124  0F27  2F2A               	goto	u3825
  5125  0F28  3014               	movlw	20
  5126  0F29  025B               	subwf	init_env@i^(0+384),w
  5127  0F2A                     u3825:	
  5128  0F2A  1803               	btfsc	3,0
  5129  0F2B  2F48               	goto	l3678
  5130  0F2C                     l3672:	
  5131                           
  5132                           ;main.c: 102:         pdata->g_recv_count = CODE_P0;
  5133  0F2C  3005               	movlw	5
  5134  0F2D  0023               	movlb	3	; select bank3
  5135  0F2E  00D9               	movwf	??_init_env^(0+384)
  5136  0F2F  085B               	movf	init_env@i^(0+384),w
  5137  0F30  3E0D               	addlw	13
  5138  0F31  075D               	addwf	init_env@pdata^(0+384),w
  5139  0F32  00DA               	movwf	(??_init_env+1)^(0+384)
  5140  0F33  085A               	movf	(??_init_env+1)^(0+384),w
  5141  0F34  0086               	movwf	6
  5142  0F35  3002               	movlw	2	; select bank4/5
  5143  0F36  0087               	movwf	7
  5144  0F37  0859               	movf	??_init_env^(0+384),w
  5145  0F38  0081               	movwf	1
  5146                           
  5147                           ;main.c: 103:         PORTCbits.RC2 = BPC_PWR_ON;
  5148  0F39  3001               	movlw	1
  5149  0F3A  07DB               	addwf	init_env@i^(0+384),f
  5150  0F3B  3000               	movlw	0
  5151  0F3C  3DDC               	addwfc	(init_env@i+1)^(0+384),f
  5152  0F3D  085C               	movf	(init_env@i+1)^(0+384),w
  5153  0F3E  3A80               	xorlw	128
  5154  0F3F  00D9               	movwf	??_init_env^(0+384)
  5155  0F40  3080               	movlw	128
  5156  0F41  0259               	subwf	??_init_env^(0+384),w
  5157  0F42  1D03               	skipz
  5158  0F43  2F46               	goto	u3835
  5159  0F44  3014               	movlw	20
  5160  0F45  025B               	subwf	init_env@i^(0+384),w
  5161  0F46                     u3835:	
  5162  0F46  1C03               	skipc
  5163  0F47  2F2C               	goto	l3672
  5164  0F48                     l3678:	
  5165                           
  5166                           ;main.c: 104: 
  5167  0F48  3017               	movlw	23
  5168  0F49  0023               	movlb	3	; select bank3
  5169  0F4A  00D9               	movwf	??_init_env^(0+384)
  5170  0F4B  085D               	movf	init_env@pdata^(0+384),w
  5171  0F4C  3E03               	addlw	3
  5172  0F4D  0086               	movwf	6
  5173  0F4E  3002               	movlw	2	; select bank4/5
  5174  0F4F  0087               	movwf	7
  5175  0F50  0859               	movf	??_init_env^(0+384),w
  5176  0F51  0081               	movwf	1
  5177                           
  5178                           ;main.c: 105:         INTCONbits.IOCIF = FALSE;
  5179  0F52  3037               	movlw	55
  5180  0F53  00D9               	movwf	??_init_env^(0+384)
  5181  0F54  085D               	movf	init_env@pdata^(0+384),w
  5182  0F55  3E04               	addlw	4
  5183  0F56  0086               	movwf	6
  5184  0F57  3002               	movlw	2	; select bank4/5
  5185  0F58  0087               	movwf	7
  5186  0F59  0859               	movf	??_init_env^(0+384),w
  5187  0F5A  0081               	movwf	1
  5188                           
  5189                           ;main.c: 106:         IOCCFbits.IOCCF1 = FALSE;
  5190  0F5B  085D               	movf	init_env@pdata^(0+384),w
  5191  0F5C  3E05               	addlw	5
  5192  0F5D  0086               	movwf	6
  5193  0F5E  3002               	movlw	2	; select bank4/5
  5194  0F5F  0087               	movwf	7
  5195  0F60  0181               	clrf	1
  5196                           
  5197                           ;main.c: 108:     }
  5198  0F61  3186  26E9  318E   	fcall	_display_update
  5199                           
  5200                           ;main.c: 112:         {
  5201  0F64  0022               	movlb	2	; select bank2
  5202  0F65  110D               	bcf	13,2	;volatile
  5203                           
  5204                           ;main.c: 115:         timer_Timer0Start();
  5205  0F66  0020               	movlb	0	; select bank0
  5206  0F67  110E               	bcf	14,2	;volatile
  5207                           
  5208                           ;main.c: 118:     {
  5209  0F68  0021               	movlb	1	; select bank1
  5210  0F69  140E               	bsf	14,0	;volatile
  5211                           
  5212                           ;main.c: 119:         INTCONbits.IOCIF = FALSE;
  5213  0F6A  0024               	movlb	4	; select bank4
  5214  0F6B  140E               	bsf	14,0	;volatile
  5215                           
  5216                           ;main.c: 123: 
  5217  0F6C  3001               	movlw	1
  5218  0F6D  3197  27C3         	fcall	_display_set
  5219  0F6F  0008               	return
  5220  0F70                     __end_of_init_env:	
  5221                           
  5222                           	psect	text9
  5223  06E9                     __ptext9:	
  5224 ;; *************** function _display_update *****************
  5225 ;; Defined at:
  5226 ;;		line 74 in file "display.c"
  5227 ;; Parameters:    Size  Location     Type
  5228 ;;		None
  5229 ;; Auto vars:     Size  Location     Type
  5230 ;;  pdata           1   24[BANK3 ] PTR volatile struct .
  5231 ;;		 -> g_data(39), 
  5232 ;; Return value:  Size  Location     Type
  5233 ;;                  1    wreg      void 
  5234 ;; Registers used:
  5235 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5236 ;; Tracked objects:
  5237 ;;		On entry : 0/0
  5238 ;;		On exit  : 0/0
  5239 ;;		Unchanged: 0/0
  5240 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5241 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5242 ;;      Locals:         0       0       0       0       3       0       0       0       0       0       0       0       
      +0       0
  5243 ;;      Temps:          0       0       0       0       9       0       0       0       0       0       0       0       
      +0       0
  5244 ;;      Totals:         0       0       0       0      12       0       0       0       0       0       0       0       
      +0       0
  5245 ;;Total ram usage:       12 bytes
  5246 ;; Hardware stack levels used:    1
  5247 ;; Hardware stack levels required when called:   12
  5248 ;; This function calls:
  5249 ;;		___awdiv
  5250 ;;		___awmod
  5251 ;;		_data_getdata
  5252 ;;		_display_write_once
  5253 ;; This function is called by:
  5254 ;;		_init_env
  5255 ;;		_main
  5256 ;; This function uses a non-reentrant model
  5257 ;;
  5258                           
  5259                           
  5260                           ;psect for function _display_update
  5261  06E9                     _display_update:	
  5262                           
  5263                           ;display.c: 88:     G_DATA *pdata = data_getdata();
  5264                           
  5265                           ;incstack = 0
  5266                           ; Regs used in _display_update: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5267  06E9  3187  27FE  3186   	fcall	_data_getdata
  5268  06EC  0023               	movlb	3	; select bank3
  5269  06ED  00CD               	movwf	??_display_update^(0+384)
  5270  06EE  084D               	movf	??_display_update^(0+384),w
  5271  06EF  00D8               	movwf	display_update@pdata^(0+384)
  5272                           
  5273                           ;display.c: 89:     display_write_once(segmcode[(pdata->g_time_h/10 == 0? 10:pdata->g_ti
      +                          me_h/10)], segmcode[pdata->g_time_h%10], segmcode[pdata->g_time_m/10], segmcode[pdata->g
      +                          _time_m%10]);
  5274  06F0  300A               	movlw	10
  5275  06F1  00C0               	movwf	___awdiv@divisor^(0+384)
  5276  06F2  3000               	movlw	0
  5277  06F3  00C1               	movwf	(___awdiv@divisor^(0+384)+1)
  5278  06F4  0858               	movf	display_update@pdata^(0+384),w
  5279  06F5  3E03               	addlw	3
  5280  06F6  0086               	movwf	6
  5281  06F7  3002               	movlw	2	; select bank4/5
  5282  06F8  0087               	movwf	7
  5283  06F9  0801               	movf	1,w
  5284  06FA  00CD               	movwf	??_display_update^(0+384)
  5285  06FB  01CE               	clrf	(??_display_update^(0+384)+1)
  5286  06FC  084D               	movf	??_display_update^(0+384),w
  5287  06FD  00C2               	movwf	___awdiv@dividend^(0+384)
  5288  06FE  084E               	movf	(??_display_update+1)^(0+384),w
  5289  06FF  00C3               	movwf	(___awdiv@dividend+1)^(0+384)
  5290  0700  318C  24BD  3186   	fcall	___awdiv
  5291  0703  0023               	movlb	3	; select bank3
  5292  0704  0840               	movf	?___awdiv^(0+384),w
  5293  0705  0441               	iorwf	(?___awdiv+1)^(0+384),w
  5294  0706  1903               	btfsc	3,2
  5295  0707  2F21               	goto	l3320
  5296  0708  300A               	movlw	10
  5297  0709  00C0               	movwf	___awdiv@divisor^(0+384)
  5298  070A  3000               	movlw	0
  5299  070B  00C1               	movwf	(___awdiv@divisor^(0+384)+1)
  5300  070C  0858               	movf	display_update@pdata^(0+384),w
  5301  070D  3E03               	addlw	3
  5302  070E  0086               	movwf	6
  5303  070F  3002               	movlw	2	; select bank4/5
  5304  0710  0087               	movwf	7
  5305  0711  0801               	movf	1,w
  5306  0712  00CD               	movwf	??_display_update^(0+384)
  5307  0713  01CE               	clrf	(??_display_update^(0+384)+1)
  5308  0714  084D               	movf	??_display_update^(0+384),w
  5309  0715  00C2               	movwf	___awdiv@dividend^(0+384)
  5310  0716  084E               	movf	(??_display_update+1)^(0+384),w
  5311  0717  00C3               	movwf	(___awdiv@dividend+1)^(0+384)
  5312  0718  318C  24BD  3186   	fcall	___awdiv
  5313  071B  0023               	movlb	3	; select bank3
  5314  071C  0841               	movf	(?___awdiv+1)^(0+384),w
  5315  071D  00D7               	movwf	(_display_update$1570+1)^(0+384)
  5316  071E  0840               	movf	?___awdiv^(0+384),w
  5317  071F  00D6               	movwf	_display_update$1570^(0+384)
  5318  0720  2F25               	goto	l3322
  5319  0721                     l3320:	
  5320  0721  300A               	movlw	10
  5321  0722  00D6               	movwf	_display_update$1570^(0+384)
  5322  0723  3000               	movlw	0
  5323  0724  00D7               	movwf	(_display_update$1570^(0+384)+1)
  5324  0725                     l3322:	
  5325  0725  300A               	movlw	10
  5326  0726  00C0               	movwf	___awmod@divisor^(0+384)
  5327  0727  3000               	movlw	0
  5328  0728  00C1               	movwf	(___awmod@divisor^(0+384)+1)
  5329  0729  0858               	movf	display_update@pdata^(0+384),w
  5330  072A  3E03               	addlw	3
  5331  072B  0086               	movwf	6
  5332  072C  3002               	movlw	2	; select bank4/5
  5333  072D  0087               	movwf	7
  5334  072E  0801               	movf	1,w
  5335  072F  00CD               	movwf	??_display_update^(0+384)
  5336  0730  01CE               	clrf	(??_display_update^(0+384)+1)
  5337  0731  084D               	movf	??_display_update^(0+384),w
  5338  0732  00C2               	movwf	___awmod@dividend^(0+384)
  5339  0733  084E               	movf	(??_display_update+1)^(0+384),w
  5340  0734  00C3               	movwf	(___awmod@dividend+1)^(0+384)
  5341  0735  318C  2426  3186   	fcall	___awmod
  5342  0738  0023               	movlb	3	; select bank3
  5343  0739  0841               	movf	(?___awmod+1)^(0+384),w
  5344  073A  0085               	movwf	5
  5345  073B  0840               	movf	?___awmod^(0+384),w
  5346  073C  0084               	movwf	4
  5347  073D  3000               	movlw	low (_segmcode| (0+32768))
  5348  073E  0784               	addwf	4,f
  5349  073F  3090               	movlw	high (_segmcode| (0+32768))
  5350  0740  3D85               	addwfc	5,f
  5351  0741  0800               	movf	0,w	;code access
  5352  0742  00CF               	movwf	(??_display_update+2)^(0+384)
  5353  0743  084F               	movf	(??_display_update+2)^(0+384),w
  5354  0744  00C9               	movwf	display_write_once@HR^(0+384)
  5355  0745  300A               	movlw	10
  5356  0746  00C0               	movwf	___awdiv@divisor^(0+384)
  5357  0747  3000               	movlw	0
  5358  0748  00C1               	movwf	(___awdiv@divisor^(0+384)+1)
  5359  0749  0858               	movf	display_update@pdata^(0+384),w
  5360  074A  3E04               	addlw	4
  5361  074B  0086               	movwf	6
  5362  074C  3002               	movlw	2	; select bank4/5
  5363  074D  0087               	movwf	7
  5364  074E  0801               	movf	1,w
  5365  074F  00D0               	movwf	(??_display_update+3)^(0+384)
  5366  0750  01D1               	clrf	((??_display_update+3)^(0+384)+1)
  5367  0751  0850               	movf	(??_display_update+3)^(0+384),w
  5368  0752  00C2               	movwf	___awdiv@dividend^(0+384)
  5369  0753  0851               	movf	(??_display_update+4)^(0+384),w
  5370  0754  00C3               	movwf	(___awdiv@dividend+1)^(0+384)
  5371  0755  318C  24BD  3186   	fcall	___awdiv
  5372  0758  0023               	movlb	3	; select bank3
  5373  0759  0841               	movf	(?___awdiv+1)^(0+384),w
  5374  075A  0085               	movwf	5
  5375  075B  0840               	movf	?___awdiv^(0+384),w
  5376  075C  0084               	movwf	4
  5377  075D  3000               	movlw	low (_segmcode| (0+32768))
  5378  075E  0784               	addwf	4,f
  5379  075F  3090               	movlw	high (_segmcode| (0+32768))
  5380  0760  3D85               	addwfc	5,f
  5381  0761  0800               	movf	0,w	;code access
  5382  0762  00D2               	movwf	(??_display_update+5)^(0+384)
  5383  0763  0852               	movf	(??_display_update+5)^(0+384),w
  5384  0764  00CA               	movwf	display_write_once@ML^(0+384)
  5385  0765  300A               	movlw	10
  5386  0766  00C0               	movwf	___awmod@divisor^(0+384)
  5387  0767  3000               	movlw	0
  5388  0768  00C1               	movwf	(___awmod@divisor^(0+384)+1)
  5389  0769  0858               	movf	display_update@pdata^(0+384),w
  5390  076A  3E04               	addlw	4
  5391  076B  0086               	movwf	6
  5392  076C  3002               	movlw	2	; select bank4/5
  5393  076D  0087               	movwf	7
  5394  076E  0801               	movf	1,w
  5395  076F  00D3               	movwf	(??_display_update+6)^(0+384)
  5396  0770  01D4               	clrf	((??_display_update+6)^(0+384)+1)
  5397  0771  0853               	movf	(??_display_update+6)^(0+384),w
  5398  0772  00C2               	movwf	___awmod@dividend^(0+384)
  5399  0773  0854               	movf	(??_display_update+7)^(0+384),w
  5400  0774  00C3               	movwf	(___awmod@dividend+1)^(0+384)
  5401  0775  318C  2426  3186   	fcall	___awmod
  5402  0778  0023               	movlb	3	; select bank3
  5403  0779  0841               	movf	(?___awmod+1)^(0+384),w
  5404  077A  0085               	movwf	5
  5405  077B  0840               	movf	?___awmod^(0+384),w
  5406  077C  0084               	movwf	4
  5407  077D  3000               	movlw	low (_segmcode| (0+32768))
  5408  077E  0784               	addwf	4,f
  5409  077F  3090               	movlw	high (_segmcode| (0+32768))
  5410  0780  3D85               	addwfc	5,f
  5411  0781  0800               	movf	0,w	;code access
  5412  0782  00D5               	movwf	(??_display_update+8)^(0+384)
  5413  0783  0855               	movf	(??_display_update+8)^(0+384),w
  5414  0784  00CB               	movwf	display_write_once@MR^(0+384)
  5415  0785  0857               	movf	(_display_update$1570+1)^(0+384),w
  5416  0786  0085               	movwf	5
  5417  0787  0856               	movf	_display_update$1570^(0+384),w
  5418  0788  0084               	movwf	4
  5419  0789  3000               	movlw	low (_segmcode| (0+32768))
  5420  078A  0784               	addwf	4,f
  5421  078B  3090               	movlw	high (_segmcode| (0+32768))
  5422  078C  3D85               	addwfc	5,f
  5423  078D  0800               	movf	0,w	;code access
  5424  078E  318A  220B         	fcall	_display_write_once
  5425  0790  0008               	return
  5426  0791                     __end_of_display_update:	
  5427                           ;display.c: 94:     return;
  5428                           
  5429                           
  5430                           	psect	text10
  5431  0A0B                     __ptext10:	
  5432 ;; *************** function _display_write_once *****************
  5433 ;; Defined at:
  5434 ;;		line 56 in file "display.c"
  5435 ;; Parameters:    Size  Location     Type
  5436 ;;  HL              1    wreg     unsigned char 
  5437 ;;  HR              1    9[BANK3 ] unsigned char 
  5438 ;;  ML              1   10[BANK3 ] unsigned char 
  5439 ;;  MR              1   11[BANK3 ] unsigned char 
  5440 ;; Auto vars:     Size  Location     Type
  5441 ;;  HL              1   12[BANK3 ] unsigned char 
  5442 ;; Return value:  Size  Location     Type
  5443 ;;                  1    wreg      void 
  5444 ;; Registers used:
  5445 ;;		wreg, status,2, status,0, pclath, cstack
  5446 ;; Tracked objects:
  5447 ;;		On entry : 0/0
  5448 ;;		On exit  : 0/0
  5449 ;;		Unchanged: 0/0
  5450 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5451 ;;      Params:         0       0       0       0       3       0       0       0       0       0       0       0       
      +0       0
  5452 ;;      Locals:         0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0
  5453 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5454 ;;      Totals:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  5455 ;;Total ram usage:        4 bytes
  5456 ;; Hardware stack levels used:    1
  5457 ;; Hardware stack levels required when called:   11
  5458 ;; This function calls:
  5459 ;;		_display_control595_delay
  5460 ;;		_display_write_byte
  5461 ;; This function is called by:
  5462 ;;		_display_update
  5463 ;; This function uses a non-reentrant model
  5464 ;;
  5465                           
  5466                           
  5467                           ;psect for function _display_write_once
  5468  0A0B                     _display_write_once:	
  5469                           
  5470                           ;incstack = 0
  5471                           ; Regs used in _display_write_once: [wreg+status,2+status,0+pclath+cstack]
  5472                           ;display_write_once@HL stored from wreg
  5473  0A0B  0023               	movlb	3	; select bank3
  5474  0A0C  00CC               	movwf	display_write_once@HL^(0+384)
  5475                           
  5476                           ;display.c: 58:     display_write_byte(HL);
  5477  0A0D  084C               	movf	display_write_once@HL^(0+384),w
  5478  0A0E  318A  22AD  318A   	fcall	_display_write_byte
  5479                           
  5480                           ;display.c: 59:     display_write_byte(HR);
  5481  0A11  0023               	movlb	3	; select bank3
  5482  0A12  0849               	movf	display_write_once@HR^(0+384),w
  5483  0A13  318A  22AD  318A   	fcall	_display_write_byte
  5484                           
  5485                           ;display.c: 60:     display_write_byte(ML);
  5486  0A16  0023               	movlb	3	; select bank3
  5487  0A17  084A               	movf	display_write_once@ML^(0+384),w
  5488  0A18  318A  22AD  318A   	fcall	_display_write_byte
  5489                           
  5490                           ;display.c: 61:     display_write_byte(MR);
  5491  0A1B  0023               	movlb	3	; select bank3
  5492  0A1C  084B               	movf	display_write_once@MR^(0+384),w
  5493  0A1D  318A  22AD  318A   	fcall	_display_write_byte
  5494                           
  5495                           ;display.c: 64:     LATBbits.LATB0 = PIN_LOW;
  5496  0A20  0022               	movlb	2	; select bank2
  5497  0A21  100D               	bcf	13,0	;volatile
  5498                           
  5499                           ;display.c: 65:     display_control595_delay();
  5500  0A22  3188  2032  318A   	fcall	_display_control595_delay
  5501                           
  5502                           ;display.c: 66:     LATBbits.LATB0 = PIN_HIGH;
  5503  0A25  0022               	movlb	2	; select bank2
  5504  0A26  140D               	bsf	13,0	;volatile
  5505                           
  5506                           ;display.c: 67:     display_control595_delay();
  5507  0A27  3188  2032  318A   	fcall	_display_control595_delay
  5508                           
  5509                           ;display.c: 69:     LATBbits.LATB1 = PIN_HIGH;
  5510  0A2A  0022               	movlb	2	; select bank2
  5511  0A2B  148D               	bsf	13,1	;volatile
  5512                           
  5513                           ;display.c: 70:  display_control595_delay();
  5514  0A2C  3188  2032         	fcall	_display_control595_delay
  5515                           
  5516                           ;display.c: 71:     LATBbits.LATB1 = PIN_LOW;
  5517  0A2E  0022               	movlb	2	; select bank2
  5518  0A2F  108D               	bcf	13,1	;volatile
  5519  0A30  0008               	return
  5520  0A31                     __end_of_display_write_once:	
  5521                           
  5522                           	psect	text11
  5523  0AAD                     __ptext11:	
  5524 ;; *************** function _display_write_byte *****************
  5525 ;; Defined at:
  5526 ;;		line 44 in file "display.c"
  5527 ;; Parameters:    Size  Location     Type
  5528 ;;  data            1    wreg     unsigned char 
  5529 ;; Auto vars:     Size  Location     Type
  5530 ;;  data            1    4[BANK3 ] unsigned char 
  5531 ;;  i               1    5[BANK3 ] unsigned char 
  5532 ;; Return value:  Size  Location     Type
  5533 ;;                  1    wreg      void 
  5534 ;; Registers used:
  5535 ;;		wreg, status,2, status,0, pclath, cstack
  5536 ;; Tracked objects:
  5537 ;;		On entry : 0/0
  5538 ;;		On exit  : 0/0
  5539 ;;		Unchanged: 0/0
  5540 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5541 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5542 ;;      Locals:         0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0
  5543 ;;      Temps:          0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0
  5544 ;;      Totals:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  5545 ;;Total ram usage:        4 bytes
  5546 ;; Hardware stack levels used:    1
  5547 ;; Hardware stack levels required when called:   10
  5548 ;; This function calls:
  5549 ;;		_display_control595_delay
  5550 ;; This function is called by:
  5551 ;;		_display_write_once
  5552 ;; This function uses a non-reentrant model
  5553 ;;
  5554                           
  5555                           
  5556                           ;psect for function _display_write_byte
  5557  0AAD                     _display_write_byte:	
  5558                           
  5559                           ;incstack = 0
  5560                           ; Regs used in _display_write_byte: [wreg+status,2+status,0+pclath+cstack]
  5561                           ;display_write_byte@data stored from wreg
  5562  0AAD  0023               	movlb	3	; select bank3
  5563  0AAE  00C4               	movwf	display_write_byte@data^(0+384)
  5564                           
  5565                           ;display.c: 45:     u8 i;;display.c: 46:     for(i = 0; i < 8; i++){
  5566  0AAF  01C5               	clrf	display_write_byte@i^(0+384)
  5567  0AB0                     L1:	
  5568  0AB0  3008               	movlw	8
  5569  0AB1  0245               	subwf	display_write_byte@i^(0+384),w
  5570  0AB2  1803               	btfsc	3,0
  5571  0AB3  0008               	return
  5572                           
  5573                           ;display.c: 47:   LATBbits.LATB5 = (data & 0x80) >> 7;
  5574  0AB4  0844               	movf	display_write_byte@data^(0+384),w
  5575  0AB5  00C2               	movwf	??_display_write_byte^(0+384)
  5576  0AB6  3007               	movlw	7
  5577  0AB7                     u2595:	
  5578  0AB7  36C2               	lsrf	??_display_write_byte^(0+384),f
  5579  0AB8  0B89               	decfsz	9,f
  5580  0AB9  2AB7               	goto	u2595
  5581  0ABA  0842               	movf	??_display_write_byte^(0+384),w
  5582  0ABB  3901               	andlw	1
  5583  0ABC  00C3               	movwf	(??_display_write_byte+1)^(0+384)
  5584  0ABD  0EC3               	swapf	(??_display_write_byte+1)^(0+384),f
  5585  0ABE  0DC3               	rlf	(??_display_write_byte+1)^(0+384),f
  5586  0ABF  0022               	movlb	2	; select bank2
  5587  0AC0  080D               	movf	13,w	;volatile
  5588  0AC1  0023               	movlb	3	; select bank3
  5589  0AC2  0643               	xorwf	(??_display_write_byte+1)^(0+384),w
  5590  0AC3  39DF               	andlw	-33
  5591  0AC4  0643               	xorwf	(??_display_write_byte+1)^(0+384),w
  5592  0AC5  0022               	movlb	2	; select bank2
  5593  0AC6  008D               	movwf	13	;volatile
  5594                           
  5595                           ;display.c: 48:         LATBbits.LATB0 = PIN_LOW;
  5596  0AC7  100D               	bcf	13,0	;volatile
  5597                           
  5598                           ;display.c: 49:   display_control595_delay();
  5599  0AC8  3188  2032  318A   	fcall	_display_control595_delay
  5600                           
  5601                           ;display.c: 50:         LATBbits.LATB0 = PIN_HIGH;
  5602  0ACB  0022               	movlb	2	; select bank2
  5603  0ACC  140D               	bsf	13,0	;volatile
  5604                           
  5605                           ;display.c: 51:   display_control595_delay();
  5606  0ACD  3188  2032  318A   	fcall	_display_control595_delay
  5607                           
  5608                           ;display.c: 52:         data <<= 1;
  5609  0AD0  1003               	clrc
  5610  0AD1  0023               	movlb	3	; select bank3
  5611  0AD2  0DC4               	rlf	display_write_byte@data^(0+384),f
  5612                           
  5613                           ;display.c: 53:     }
  5614  0AD3  3001               	movlw	1
  5615  0AD4  00C2               	movwf	??_display_write_byte^(0+384)
  5616  0AD5  0842               	movf	??_display_write_byte^(0+384),w
  5617  0AD6  07C5               	addwf	display_write_byte@i^(0+384),f
  5618  0AD7  2AB0               	goto	L1
  5619  0AD8                     __end_of_display_write_byte:	
  5620                           
  5621                           	psect	text12
  5622  0832                     __ptext12:	
  5623 ;; *************** function _display_control595_delay *****************
  5624 ;; Defined at:
  5625 ;;		line 28 in file "display.c"
  5626 ;; Parameters:    Size  Location     Type
  5627 ;;		None
  5628 ;; Auto vars:     Size  Location     Type
  5629 ;;  times           1    1[BANK3 ] unsigned char 
  5630 ;; Return value:  Size  Location     Type
  5631 ;;                  1    wreg      void 
  5632 ;; Registers used:
  5633 ;;		wreg, status,2, status,0
  5634 ;; Tracked objects:
  5635 ;;		On entry : 0/0
  5636 ;;		On exit  : 0/0
  5637 ;;		Unchanged: 0/0
  5638 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5639 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5640 ;;      Locals:         0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0
  5641 ;;      Temps:          0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0
  5642 ;;      Totals:         0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0
  5643 ;;Total ram usage:        2 bytes
  5644 ;; Hardware stack levels used:    1
  5645 ;; Hardware stack levels required when called:    9
  5646 ;; This function calls:
  5647 ;;		Nothing
  5648 ;; This function is called by:
  5649 ;;		_display_write_byte
  5650 ;;		_display_write_once
  5651 ;; This function uses a non-reentrant model
  5652 ;;
  5653                           
  5654                           
  5655                           ;psect for function _display_control595_delay
  5656  0832                     _display_control595_delay:	
  5657                           
  5658                           ;display.c: 29:    u8 times = 10;
  5659                           
  5660                           ;incstack = 0
  5661                           ; Regs used in _display_control595_delay: [wreg+status,2+status,0]
  5662  0832  300A               	movlw	10
  5663  0833  0023               	movlb	3	; select bank3
  5664  0834  00C0               	movwf	??_display_control595_delay^(0+384)
  5665  0835  0840               	movf	??_display_control595_delay^(0+384),w
  5666  0836  00C1               	movwf	display_control595_delay@times^(0+384)
  5667  0837                     l566:	
  5668                           ;display.c: 33:    }
  5669                           
  5670                           ;display.c: 30:    while(times > 0){
  5671                           
  5672                           
  5673                           ;display.c: 30:    while(times > 0){
  5674  0837  0841               	movf	display_control595_delay@times^(0+384),w
  5675  0838  1903               	btfsc	3,2
  5676  0839  0008               	return
  5677                           
  5678                           ;display.c: 31:     __nop();
  5679  083A  0000               	nop
  5680                           
  5681                           ;display.c: 32:        times--;
  5682  083B  3001               	movlw	1
  5683  083C  0023               	movlb	3	; select bank3
  5684  083D  02C1               	subwf	display_control595_delay@times^(0+384),f
  5685  083E  2837               	goto	l566
  5686  083F                     __end_of_display_control595_delay:	
  5687                           
  5688                           	psect	text13
  5689  07FE                     __ptext13:	
  5690 ;; *************** function _data_getdata *****************
  5691 ;; Defined at:
  5692 ;;		line 9 in file "data.c"
  5693 ;; Parameters:    Size  Location     Type
  5694 ;;		None
  5695 ;; Auto vars:     Size  Location     Type
  5696 ;;		None
  5697 ;; Return value:  Size  Location     Type
  5698 ;;                  1    wreg      PTR volatile struct .
  5699 ;; Registers used:
  5700 ;;		wreg
  5701 ;; Tracked objects:
  5702 ;;		On entry : 0/0
  5703 ;;		On exit  : 0/0
  5704 ;;		Unchanged: 0/0
  5705 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5706 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5707 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5708 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5709 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5710 ;;Total ram usage:        0 bytes
  5711 ;; Hardware stack levels used:    1
  5712 ;; Hardware stack levels required when called:    9
  5713 ;; This function calls:
  5714 ;;		Nothing
  5715 ;; This function is called by:
  5716 ;;		_init_env
  5717 ;;		_display_update
  5718 ;;		_tmp_change
  5719 ;; This function uses a non-reentrant model
  5720 ;;
  5721                           
  5722                           
  5723                           ;psect for function _data_getdata
  5724  07FE                     _data_getdata:	
  5725                           
  5726                           ;data.c: 11:     return &g_data;
  5727                           
  5728                           ;incstack = 0
  5729                           ; Regs used in _data_getdata: [wreg]
  5730  07FE  3020               	movlw	(low (_g_data| (0+512)))& (0+255)
  5731  07FF  0008               	return
  5732  0800                     __end_of_data_getdata:	
  5733                           
  5734                           	psect	text14
  5735  0C26                     __ptext14:	
  5736 ;; *************** function ___awmod *****************
  5737 ;; Defined at:
  5738 ;;		line 5 in file "F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\awmod.c"
  5739 ;; Parameters:    Size  Location     Type
  5740 ;;  divisor         2    0[BANK3 ] int 
  5741 ;;  dividend        2    2[BANK3 ] int 
  5742 ;; Auto vars:     Size  Location     Type
  5743 ;;  sign            1    6[BANK3 ] unsigned char 
  5744 ;;  counter         1    5[BANK3 ] unsigned char 
  5745 ;; Return value:  Size  Location     Type
  5746 ;;                  2    0[BANK3 ] int 
  5747 ;; Registers used:
  5748 ;;		wreg, status,2, status,0
  5749 ;; Tracked objects:
  5750 ;;		On entry : 0/0
  5751 ;;		On exit  : 0/0
  5752 ;;		Unchanged: 0/0
  5753 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5754 ;;      Params:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  5755 ;;      Locals:         0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0
  5756 ;;      Temps:          0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0
  5757 ;;      Totals:         0       0       0       0       7       0       0       0       0       0       0       0       
      +0       0
  5758 ;;Total ram usage:        7 bytes
  5759 ;; Hardware stack levels used:    1
  5760 ;; Hardware stack levels required when called:    9
  5761 ;; This function calls:
  5762 ;;		Nothing
  5763 ;; This function is called by:
  5764 ;;		_display_update
  5765 ;; This function uses a non-reentrant model
  5766 ;;
  5767                           
  5768                           
  5769                           ;psect for function ___awmod
  5770  0C26                     ___awmod:	
  5771                           
  5772                           ;incstack = 0
  5773                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  5774  0C26  0023               	movlb	3	; select bank3
  5775  0C27  01C6               	clrf	___awmod@sign^(0+384)
  5776  0C28  1FC3               	btfss	(___awmod@dividend+1)^(0+384),7
  5777  0C29  2C31               	goto	l3272
  5778  0C2A  09C2               	comf	___awmod@dividend^(0+384),f
  5779  0C2B  09C3               	comf	(___awmod@dividend+1)^(0+384),f
  5780  0C2C  0AC2               	incf	___awmod@dividend^(0+384),f
  5781  0C2D  1903               	skipnz
  5782  0C2E  0AC3               	incf	(___awmod@dividend+1)^(0+384),f
  5783  0C2F  01C6               	clrf	___awmod@sign^(0+384)
  5784  0C30  0AC6               	incf	___awmod@sign^(0+384),f
  5785  0C31                     l3272:	
  5786  0C31  1FC1               	btfss	(___awmod@divisor+1)^(0+384),7
  5787  0C32  2C38               	goto	l3276
  5788  0C33  09C0               	comf	___awmod@divisor^(0+384),f
  5789  0C34  09C1               	comf	(___awmod@divisor+1)^(0+384),f
  5790  0C35  0AC0               	incf	___awmod@divisor^(0+384),f
  5791  0C36  1903               	skipnz
  5792  0C37  0AC1               	incf	(___awmod@divisor+1)^(0+384),f
  5793  0C38                     l3276:	
  5794  0C38  0840               	movf	___awmod@divisor^(0+384),w
  5795  0C39  0441               	iorwf	(___awmod@divisor+1)^(0+384),w
  5796  0C3A  1903               	btfsc	3,2
  5797  0C3B  2C5F               	goto	l3294
  5798  0C3C  01C5               	clrf	___awmod@counter^(0+384)
  5799  0C3D  0AC5               	incf	___awmod@counter^(0+384),f
  5800  0C3E                     l3284:	
  5801  0C3E  1BC1               	btfsc	(___awmod@divisor+1)^(0+384),7
  5802  0C3F  2C4A               	goto	l3286
  5803  0C40  3001               	movlw	1
  5804  0C41                     u3295:	
  5805  0C41  35C0               	lslf	___awmod@divisor^(0+384),f
  5806  0C42  0DC1               	rlf	(___awmod@divisor+1)^(0+384),f
  5807  0C43  0B89               	decfsz	9,f
  5808  0C44  2C41               	goto	u3295
  5809  0C45  3001               	movlw	1
  5810  0C46  00C4               	movwf	??___awmod^(0+384)
  5811  0C47  0844               	movf	??___awmod^(0+384),w
  5812  0C48  07C5               	addwf	___awmod@counter^(0+384),f
  5813  0C49  2C3E               	goto	l3284
  5814  0C4A                     l3286:	
  5815  0C4A  0841               	movf	(___awmod@divisor+1)^(0+384),w
  5816  0C4B  0243               	subwf	(___awmod@dividend+1)^(0+384),w
  5817  0C4C  1D03               	skipz
  5818  0C4D  2C50               	goto	u3315
  5819  0C4E  0840               	movf	___awmod@divisor^(0+384),w
  5820  0C4F  0242               	subwf	___awmod@dividend^(0+384),w
  5821  0C50                     u3315:	
  5822  0C50  1C03               	skipc
  5823  0C51  2C56               	goto	l3290
  5824  0C52  0840               	movf	___awmod@divisor^(0+384),w
  5825  0C53  02C2               	subwf	___awmod@dividend^(0+384),f
  5826  0C54  0841               	movf	(___awmod@divisor+1)^(0+384),w
  5827  0C55  3BC3               	subwfb	(___awmod@dividend+1)^(0+384),f
  5828  0C56                     l3290:	
  5829  0C56  3001               	movlw	1
  5830  0C57                     u3325:	
  5831  0C57  36C1               	lsrf	(___awmod@divisor+1)^(0+384),f
  5832  0C58  0CC0               	rrf	___awmod@divisor^(0+384),f
  5833  0C59  0B89               	decfsz	9,f
  5834  0C5A  2C57               	goto	u3325
  5835  0C5B  3001               	movlw	1
  5836  0C5C  02C5               	subwf	___awmod@counter^(0+384),f
  5837  0C5D  1D03               	btfss	3,2
  5838  0C5E  2C4A               	goto	l3286
  5839  0C5F                     l3294:	
  5840  0C5F  0846               	movf	___awmod@sign^(0+384),w
  5841  0C60  1903               	btfsc	3,2
  5842  0C61  2C67               	goto	l3298
  5843  0C62  09C2               	comf	___awmod@dividend^(0+384),f
  5844  0C63  09C3               	comf	(___awmod@dividend+1)^(0+384),f
  5845  0C64  0AC2               	incf	___awmod@dividend^(0+384),f
  5846  0C65  1903               	skipnz
  5847  0C66  0AC3               	incf	(___awmod@dividend+1)^(0+384),f
  5848  0C67                     l3298:	
  5849  0C67  0843               	movf	(___awmod@dividend+1)^(0+384),w
  5850  0C68  00C1               	movwf	(?___awmod+1)^(0+384)
  5851  0C69  0842               	movf	___awmod@dividend^(0+384),w
  5852  0C6A  00C0               	movwf	?___awmod^(0+384)
  5853  0C6B  0008               	return
  5854  0C6C                     __end_of___awmod:	
  5855                           
  5856                           	psect	text15
  5857  0CBD                     __ptext15:	
  5858 ;; *************** function ___awdiv *****************
  5859 ;; Defined at:
  5860 ;;		line 5 in file "F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\awdiv.c"
  5861 ;; Parameters:    Size  Location     Type
  5862 ;;  divisor         2    0[BANK3 ] int 
  5863 ;;  dividend        2    2[BANK3 ] int 
  5864 ;; Auto vars:     Size  Location     Type
  5865 ;;  quotient        2    7[BANK3 ] int 
  5866 ;;  sign            1    6[BANK3 ] unsigned char 
  5867 ;;  counter         1    5[BANK3 ] unsigned char 
  5868 ;; Return value:  Size  Location     Type
  5869 ;;                  2    0[BANK3 ] int 
  5870 ;; Registers used:
  5871 ;;		wreg, status,2, status,0
  5872 ;; Tracked objects:
  5873 ;;		On entry : 0/0
  5874 ;;		On exit  : 0/0
  5875 ;;		Unchanged: 0/0
  5876 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5877 ;;      Params:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  5878 ;;      Locals:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  5879 ;;      Temps:          0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0
  5880 ;;      Totals:         0       0       0       0       9       0       0       0       0       0       0       0       
      +0       0
  5881 ;;Total ram usage:        9 bytes
  5882 ;; Hardware stack levels used:    1
  5883 ;; Hardware stack levels required when called:    9
  5884 ;; This function calls:
  5885 ;;		Nothing
  5886 ;; This function is called by:
  5887 ;;		_display_update
  5888 ;; This function uses a non-reentrant model
  5889 ;;
  5890                           
  5891                           
  5892                           ;psect for function ___awdiv
  5893  0CBD                     ___awdiv:	
  5894                           
  5895                           ;incstack = 0
  5896                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  5897  0CBD  0023               	movlb	3	; select bank3
  5898  0CBE  01C6               	clrf	___awdiv@sign^(0+384)
  5899  0CBF  1FC1               	btfss	(___awdiv@divisor+1)^(0+384),7
  5900  0CC0  2CC8               	goto	l3228
  5901  0CC1  09C0               	comf	___awdiv@divisor^(0+384),f
  5902  0CC2  09C1               	comf	(___awdiv@divisor+1)^(0+384),f
  5903  0CC3  0AC0               	incf	___awdiv@divisor^(0+384),f
  5904  0CC4  1903               	skipnz
  5905  0CC5  0AC1               	incf	(___awdiv@divisor+1)^(0+384),f
  5906  0CC6  01C6               	clrf	___awdiv@sign^(0+384)
  5907  0CC7  0AC6               	incf	___awdiv@sign^(0+384),f
  5908  0CC8                     l3228:	
  5909  0CC8  1FC3               	btfss	(___awdiv@dividend+1)^(0+384),7
  5910  0CC9  2CD3               	goto	l3234
  5911  0CCA  09C2               	comf	___awdiv@dividend^(0+384),f
  5912  0CCB  09C3               	comf	(___awdiv@dividend+1)^(0+384),f
  5913  0CCC  0AC2               	incf	___awdiv@dividend^(0+384),f
  5914  0CCD  1903               	skipnz
  5915  0CCE  0AC3               	incf	(___awdiv@dividend+1)^(0+384),f
  5916  0CCF  3001               	movlw	1
  5917  0CD0  00C4               	movwf	??___awdiv^(0+384)
  5918  0CD1  0844               	movf	??___awdiv^(0+384),w
  5919  0CD2  06C6               	xorwf	___awdiv@sign^(0+384),f
  5920  0CD3                     l3234:	
  5921  0CD3  01C7               	clrf	___awdiv@quotient^(0+384)
  5922  0CD4  01C8               	clrf	(___awdiv@quotient+1)^(0+384)
  5923  0CD5  0840               	movf	___awdiv@divisor^(0+384),w
  5924  0CD6  0441               	iorwf	(___awdiv@divisor+1)^(0+384),w
  5925  0CD7  1903               	btfsc	3,2
  5926  0CD8  2D02               	goto	l3256
  5927  0CD9  01C5               	clrf	___awdiv@counter^(0+384)
  5928  0CDA  0AC5               	incf	___awdiv@counter^(0+384),f
  5929  0CDB                     l3244:	
  5930  0CDB  1BC1               	btfsc	(___awdiv@divisor+1)^(0+384),7
  5931  0CDC  2CE7               	goto	l3246
  5932  0CDD  3001               	movlw	1
  5933  0CDE                     u3195:	
  5934  0CDE  35C0               	lslf	___awdiv@divisor^(0+384),f
  5935  0CDF  0DC1               	rlf	(___awdiv@divisor+1)^(0+384),f
  5936  0CE0  0B89               	decfsz	9,f
  5937  0CE1  2CDE               	goto	u3195
  5938  0CE2  3001               	movlw	1
  5939  0CE3  00C4               	movwf	??___awdiv^(0+384)
  5940  0CE4  0844               	movf	??___awdiv^(0+384),w
  5941  0CE5  07C5               	addwf	___awdiv@counter^(0+384),f
  5942  0CE6  2CDB               	goto	l3244
  5943  0CE7                     l3246:	
  5944  0CE7  3001               	movlw	1
  5945  0CE8                     u3215:	
  5946  0CE8  35C7               	lslf	___awdiv@quotient^(0+384),f
  5947  0CE9  0DC8               	rlf	(___awdiv@quotient+1)^(0+384),f
  5948  0CEA  0B89               	decfsz	9,f
  5949  0CEB  2CE8               	goto	u3215
  5950  0CEC  0841               	movf	(___awdiv@divisor+1)^(0+384),w
  5951  0CED  0243               	subwf	(___awdiv@dividend+1)^(0+384),w
  5952  0CEE  1D03               	skipz
  5953  0CEF  2CF2               	goto	u3225
  5954  0CF0  0840               	movf	___awdiv@divisor^(0+384),w
  5955  0CF1  0242               	subwf	___awdiv@dividend^(0+384),w
  5956  0CF2                     u3225:	
  5957  0CF2  1C03               	skipc
  5958  0CF3  2CF9               	goto	l3252
  5959  0CF4  0840               	movf	___awdiv@divisor^(0+384),w
  5960  0CF5  02C2               	subwf	___awdiv@dividend^(0+384),f
  5961  0CF6  0841               	movf	(___awdiv@divisor+1)^(0+384),w
  5962  0CF7  3BC3               	subwfb	(___awdiv@dividend+1)^(0+384),f
  5963  0CF8  1447               	bsf	___awdiv@quotient^(0+384),0
  5964  0CF9                     l3252:	
  5965  0CF9  3001               	movlw	1
  5966  0CFA                     u3235:	
  5967  0CFA  36C1               	lsrf	(___awdiv@divisor+1)^(0+384),f
  5968  0CFB  0CC0               	rrf	___awdiv@divisor^(0+384),f
  5969  0CFC  0B89               	decfsz	9,f
  5970  0CFD  2CFA               	goto	u3235
  5971  0CFE  3001               	movlw	1
  5972  0CFF  02C5               	subwf	___awdiv@counter^(0+384),f
  5973  0D00  1D03               	btfss	3,2
  5974  0D01  2CE7               	goto	l3246
  5975  0D02                     l3256:	
  5976  0D02  0846               	movf	___awdiv@sign^(0+384),w
  5977  0D03  1903               	btfsc	3,2
  5978  0D04  2D0A               	goto	l3260
  5979  0D05  09C7               	comf	___awdiv@quotient^(0+384),f
  5980  0D06  09C8               	comf	(___awdiv@quotient+1)^(0+384),f
  5981  0D07  0AC7               	incf	___awdiv@quotient^(0+384),f
  5982  0D08  1903               	skipnz
  5983  0D09  0AC8               	incf	(___awdiv@quotient+1)^(0+384),f
  5984  0D0A                     l3260:	
  5985  0D0A  0848               	movf	(___awdiv@quotient+1)^(0+384),w
  5986  0D0B  00C1               	movwf	(?___awdiv+1)^(0+384)
  5987  0D0C  0847               	movf	___awdiv@quotient^(0+384),w
  5988  0D0D  00C0               	movwf	?___awdiv^(0+384)
  5989  0D0E  0008               	return
  5990  0D0F                     __end_of___awdiv:	
  5991                           
  5992                           	psect	text16
  5993  17C3                     __ptext16:	
  5994 ;; *************** function _display_set *****************
  5995 ;; Defined at:
  5996 ;;		line 16 in file "display.c"
  5997 ;; Parameters:    Size  Location     Type
  5998 ;;  ison            1    wreg     enum E5222
  5999 ;; Auto vars:     Size  Location     Type
  6000 ;;  ison            1    0[BANK3 ] enum E5222
  6001 ;; Return value:  Size  Location     Type
  6002 ;;                  1    wreg      void 
  6003 ;; Registers used:
  6004 ;;		wreg, status,0
  6005 ;; Tracked objects:
  6006 ;;		On entry : 0/0
  6007 ;;		On exit  : 0/0
  6008 ;;		Unchanged: 0/0
  6009 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6010 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6011 ;;      Locals:         0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0
  6012 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6013 ;;      Totals:         0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0
  6014 ;;Total ram usage:        1 bytes
  6015 ;; Hardware stack levels used:    1
  6016 ;; Hardware stack levels required when called:    9
  6017 ;; This function calls:
  6018 ;;		Nothing
  6019 ;; This function is called by:
  6020 ;;		_init_env
  6021 ;; This function uses a non-reentrant model
  6022 ;;
  6023                           
  6024                           
  6025                           ;psect for function _display_set
  6026  17C3                     _display_set:	
  6027                           
  6028                           ;incstack = 0
  6029                           ; Regs used in _display_set: [wreg+status,0]
  6030                           ;display_set@ison stored from wreg
  6031  17C3  0023               	movlb	3	; select bank3
  6032  17C4  00C0               	movwf	display_set@ison^(0+384)
  6033                           
  6034                           ;display.c: 16: void display_set(BOOL ison);display.c: 17: {;display.c: 18:     PORTAbit
      +                          s.RA0 = ison;
  6035  17C5  0C40               	rrf	display_set@ison^(0+384),w
  6036  17C6  0020               	movlb	0	; select bank0
  6037  17C7  1C03               	skipc
  6038  17C8  100C               	bcf	12,0	;volatile
  6039  17C9  1803               	skipnc
  6040  17CA  140C               	bsf	12,0	;volatile
  6041  17CB  0008               	return
  6042  17CC                     __end_of_display_set:	
  6043                           
  6044                           	psect	text17
  6045  17BB                     __ptext17:	
  6046 ;; *************** function _capture_init *****************
  6047 ;; Defined at:
  6048 ;;		line 25 in file "hardware.c"
  6049 ;; Parameters:    Size  Location     Type
  6050 ;;		None
  6051 ;; Auto vars:     Size  Location     Type
  6052 ;;		None
  6053 ;; Return value:  Size  Location     Type
  6054 ;;                  1    wreg      unsigned char 
  6055 ;; Registers used:
  6056 ;;		wreg, status,2, status,0, pclath, cstack
  6057 ;; Tracked objects:
  6058 ;;		On entry : 0/0
  6059 ;;		On exit  : 0/0
  6060 ;;		Unchanged: 0/0
  6061 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6062 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6063 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6064 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6065 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6066 ;;Total ram usage:        0 bytes
  6067 ;; Hardware stack levels used:    1
  6068 ;; Hardware stack levels required when called:   10
  6069 ;; This function calls:
  6070 ;;		_capture_setEdge
  6071 ;; This function is called by:
  6072 ;;		_main
  6073 ;; This function uses a non-reentrant model
  6074 ;;
  6075                           
  6076                           
  6077                           ;psect for function _capture_init
  6078  17BB                     _capture_init:	
  6079                           
  6080                           ;hardware.c: 30:     capture_setEdge((0b0100));
  6081                           
  6082                           ;incstack = 0
  6083                           ; Regs used in _capture_init: [wreg+status,2+status,0+pclath+cstack]
  6084  17BB  3004               	movlw	4
  6085  17BC  3188  208A         	fcall	_capture_setEdge
  6086                           
  6087                           ;hardware.c: 31:     TRISCbits.TRISC1 = 1;
  6088  17BE  0021               	movlb	1	; select bank1
  6089  17BF  148E               	bsf	14,1	;volatile
  6090                           
  6091                           ;hardware.c: 33:     PIR2bits.CCP2IF = 0;
  6092  17C0  0020               	movlb	0	; select bank0
  6093  17C1  1012               	bcf	18,0	;volatile
  6094  17C2  0008               	return
  6095  17C3                     __end_of_capture_init:	
  6096                           ;hardware.c: 35:     return 0;;	Return value of _capture_init is never used
  6097                           
  6098                           
  6099                           	psect	text18
  6100  088A                     __ptext18:	
  6101 ;; *************** function _capture_setEdge *****************
  6102 ;; Defined at:
  6103 ;;		line 12 in file "hardware.c"
  6104 ;; Parameters:    Size  Location     Type
  6105 ;;  edge            1    wreg     unsigned char 
  6106 ;; Auto vars:     Size  Location     Type
  6107 ;;  edge            1    0[BANK3 ] unsigned char 
  6108 ;; Return value:  Size  Location     Type
  6109 ;;                  2  493[None  ] int 
  6110 ;; Registers used:
  6111 ;;		wreg, status,2, status,0
  6112 ;; Tracked objects:
  6113 ;;		On entry : 0/0
  6114 ;;		On exit  : 0/0
  6115 ;;		Unchanged: 0/0
  6116 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6117 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6118 ;;      Locals:         0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0
  6119 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6120 ;;      Totals:         0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0
  6121 ;;Total ram usage:        1 bytes
  6122 ;; Hardware stack levels used:    1
  6123 ;; Hardware stack levels required when called:    9
  6124 ;; This function calls:
  6125 ;;		Nothing
  6126 ;; This function is called by:
  6127 ;;		_capture_init
  6128 ;; This function uses a non-reentrant model
  6129 ;;
  6130                           
  6131                           
  6132                           ;psect for function _capture_setEdge
  6133  088A                     _capture_setEdge:	
  6134                           
  6135                           ;incstack = 0
  6136                           ; Regs used in _capture_setEdge: [wreg+status,2+status,0]
  6137                           ;capture_setEdge@edge stored from wreg
  6138  088A  0023               	movlb	3	; select bank3
  6139  088B  00C0               	movwf	capture_setEdge@edge^(0+384)
  6140                           
  6141                           ;hardware.c: 12: static int capture_setEdge(u8 edge);hardware.c: 13: {;hardware.c: 14:  
      +                             if((edge == (0b0101)) || (edge == (0b0100)))
  6142  088C  3005               	movlw	5
  6143  088D  0640               	xorwf	capture_setEdge@edge^(0+384),w
  6144  088E  1903               	btfsc	3,2
  6145  088F  2894               	goto	l3588
  6146  0890  3004               	movlw	4
  6147  0891  0640               	xorwf	capture_setEdge@edge^(0+384),w
  6148  0892  1D03               	btfss	3,2
  6149  0893  0008               	return
  6150  0894                     l3588:	
  6151                           
  6152                           ;hardware.c: 15:     {;hardware.c: 16:         CCP2CONbits.CCP2M = edge;
  6153  0894  0025               	movlb	5	; select bank5
  6154  0895  081A               	movf	26,w	;volatile
  6155  0896  0023               	movlb	3	; select bank3
  6156  0897  0640               	xorwf	capture_setEdge@edge^(0+384),w
  6157  0898  39F0               	andlw	-16
  6158  0899  0640               	xorwf	capture_setEdge@edge^(0+384),w
  6159  089A  0025               	movlb	5	; select bank5
  6160  089B  009A               	movwf	26	;volatile
  6161                           
  6162                           ;hardware.c: 20:     {;hardware.c: 21:         return -1;;	Return value of _capture_setE
      +                          dge is never used
  6163                           
  6164                           ;hardware.c: 19:     else
  6165                           
  6166                           ;hardware.c: 18:     }
  6167                           
  6168                           ;hardware.c: 17:         return 0;;	Return value of _capture_setEdge is never used
  6169  089C  0008               	return
  6170  089D                     __end_of_capture_setEdge:	
  6171                           ;hardware.c: 22:     }
  6172                           
  6173                           
  6174                           	psect	text19
  6175  0825                     __ptext19:	
  6176 ;; *************** function _IIC_Init *****************
  6177 ;; Defined at:
  6178 ;;		line 9 in file "myiic.c"
  6179 ;; Parameters:    Size  Location     Type
  6180 ;;		None
  6181 ;; Auto vars:     Size  Location     Type
  6182 ;;		None
  6183 ;; Return value:  Size  Location     Type
  6184 ;;                  1    wreg      void 
  6185 ;; Registers used:
  6186 ;;		None
  6187 ;; Tracked objects:
  6188 ;;		On entry : 0/0
  6189 ;;		On exit  : 0/0
  6190 ;;		Unchanged: 0/0
  6191 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6192 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6193 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6194 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6195 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6196 ;;Total ram usage:        0 bytes
  6197 ;; Hardware stack levels used:    1
  6198 ;; Hardware stack levels required when called:    9
  6199 ;; This function calls:
  6200 ;;		Nothing
  6201 ;; This function is called by:
  6202 ;;		_main
  6203 ;; This function uses a non-reentrant model
  6204 ;;
  6205                           
  6206                           
  6207                           ;psect for function _IIC_Init
  6208  0825                     _IIC_Init:	
  6209                           
  6210                           ;myiic.c: 11:     LATC3=1;
  6211                           
  6212                           ;incstack = 0
  6213                           ; Regs used in _IIC_Init: []
  6214  0825  0022               	movlb	2	; select bank2
  6215  0826  158E               	bsf	14,3	;volatile
  6216                           
  6217                           ;myiic.c: 12:  LATC4=1;
  6218  0827  160E               	bsf	14,4	;volatile
  6219                           
  6220                           ;myiic.c: 14:     ODCONC3 = 1;
  6221  0828  0025               	movlb	5	; select bank5
  6222  0829  158E               	bsf	14,3	;volatile
  6223                           
  6224                           ;myiic.c: 15:     ODCONC4 = 1;
  6225  082A  160E               	bsf	14,4	;volatile
  6226                           
  6227                           ;myiic.c: 17:     TRISC4 = 0;
  6228  082B  0021               	movlb	1	; select bank1
  6229  082C  120E               	bcf	14,4	;volatile
  6230                           
  6231                           ;myiic.c: 18:     TRISC3 = 0;
  6232  082D  118E               	bcf	14,3	;volatile
  6233                           
  6234                           ;myiic.c: 20:  WPUC4 = 1;
  6235  082E  0024               	movlb	4	; select bank4
  6236  082F  160E               	bsf	14,4	;volatile
  6237                           
  6238                           ;myiic.c: 21:     WPUC3 = 1;
  6239  0830  158E               	bsf	14,3	;volatile
  6240  0831  0008               	return
  6241  0832                     __end_of_IIC_Init:	
  6242                           
  6243                           	psect	intentry
  6244  0004                     __pintentry:	
  6245 ;; *************** function _ISR *****************
  6246 ;; Defined at:
  6247 ;;		line 194 in file "main.c"
  6248 ;; Parameters:    Size  Location     Type
  6249 ;;		None
  6250 ;; Auto vars:     Size  Location     Type
  6251 ;;  send           64    0[BANK2 ] unsigned char [64]
  6252 ;;  i               1   77[BANK0 ] unsigned char 
  6253 ;;  buf            64    0[BANK1 ] unsigned char [64]
  6254 ;;  data            1   78[BANK0 ] unsigned char 
  6255 ;;  value           1   76[BANK0 ] unsigned char 
  6256 ;; Return value:  Size  Location     Type
  6257 ;;                  1    wreg      void 
  6258 ;; Registers used:
  6259 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6260 ;; Tracked objects:
  6261 ;;		On entry : 0/0
  6262 ;;		On exit  : 0/0
  6263 ;;		Unchanged: 0/0
  6264 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6265 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6266 ;;      Locals:         0       3      64      64       0       0       0       0       0       0       0       0       
      +0       0
  6267 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6268 ;;      Totals:         0       5      64      64       0       0       0       0       0       0       0       0       
      +0       0
  6269 ;;Total ram usage:      133 bytes
  6270 ;; Hardware stack levels used:    1
  6271 ;; Hardware stack levels required when called:    8
  6272 ;; This function calls:
  6273 ;;		_IIC_RdRTCReg
  6274 ;;		_IIC_WtRTCReg
  6275 ;;		___lwmod
  6276 ;;		_bpc_proc
  6277 ;;		_capture_IsEnable
  6278 ;;		_capture_IsIntrpt
  6279 ;;		_capture_Set
  6280 ;;		_capture_clrIntrpt
  6281 ;;		_capture_handdle
  6282 ;;		_key_isPressed
  6283 ;;		_led_Blink
  6284 ;;		_sprintf
  6285 ;;		_strcpy
  6286 ;;		_strlen
  6287 ;;		_timer_IsTimer0Itrpt
  6288 ;;		_timer_IsTimer1Itrpt
  6289 ;;		_timer_Timer0Handdle
  6290 ;;		_timer_Timer1ClrIntrpt
  6291 ;;		i1_timer_Timer0Reset
  6292 ;; This function is called by:
  6293 ;;		Interrupt level 1
  6294 ;; This function uses a non-reentrant model
  6295 ;;
  6296                           
  6297  0004                     _ISR:	
  6298                           
  6299                           ;incstack = 0
  6300  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  6301                           
  6302                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6303  0005  3180               	pagesel	$
  6304                           
  6305                           ;main.c: 196:     {;main.c: 197:         capture_handdle();
  6306  0006  3197  2790  3180   	fcall	_timer_IsTimer1Itrpt
  6307  0009  3A00               	xorlw	0
  6308  000A  1903               	skipnz
  6309  000B  280F               	goto	i1l4078
  6310                           
  6311                           ;main.c: 198: ;main.c: 201:         capture_clrIntrpt();
  6312  000C  3197  2781  3180   	fcall	_timer_Timer1ClrIntrpt
  6313  000F                     i1l4078:	
  6314                           ;main.c: 202:     }
  6315                           
  6316                           
  6317                           ;main.c: 204: 
  6318  000F  3197  278C  3180   	fcall	_timer_IsTimer0Itrpt
  6319  0012  3A00               	xorlw	0
  6320  0013  1903               	skipnz
  6321  0014  28D0               	goto	i1l158
  6322                           
  6323                           ;main.c: 205: void main(void);main.c: 206: {
  6324  0015  3197  27A2  3180   	fcall	_timer_Timer0Handdle
  6325                           
  6326                           ;main.c: 208: 
  6327  0018  3188  209D  3180   	fcall	_key_isPressed
  6328  001B  3A00               	xorlw	0
  6329  001C  1903               	skipnz
  6330  001D  2822               	goto	i1l159
  6331                           
  6332                           ;main.c: 209: ;main.c: 211: 
  6333  001E  3001               	movlw	1
  6334  001F  3188  2019  3180   	fcall	_capture_Set
  6335  0022                     i1l159:	
  6336                           ;main.c: 212:     init_env();
  6337                           
  6338                           
  6339                           ;main.c: 214: 
  6340  0022  300A               	movlw	10
  6341  0023  00F0               	movwf	___lwmod@divisor
  6342  0024  3000               	movlw	0
  6343  0025  00F1               	movwf	___lwmod@divisor+1
  6344  0026  0022               	movlb	2	; select bank2
  6345  0027  086A               	movf	(ISR@cnt+1)^(0+256),w
  6346  0028  0020               	movlb	0	; select bank0
  6347  0029  00EB               	movwf	??_ISR+1
  6348  002A  0022               	movlb	2	; select bank2
  6349  002B  0869               	movf	ISR@cnt^(0+256),w
  6350  002C  0020               	movlb	0	; select bank0
  6351  002D  00EA               	movwf	??_ISR
  6352  002E  0022               	movlb	2	; select bank2
  6353  002F  0AE9               	incf	ISR@cnt^(0+256),f
  6354  0030  1903               	skipnz
  6355  0031  0AEA               	incf	(ISR@cnt+1)^(0+256),f
  6356  0032  0020               	movlb	0	; select bank0
  6357  0033  086A               	movf	??_ISR,w
  6358  0034  00F2               	movwf	___lwmod@dividend
  6359  0035  086B               	movf	??_ISR+1,w
  6360  0036  00F3               	movwf	___lwmod@dividend+1
  6361  0037  318A  22D8  3180   	fcall	___lwmod
  6362  003A  0870               	movf	?___lwmod,w
  6363  003B  0471               	iorwf	?___lwmod+1,w
  6364  003C  1D03               	btfss	3,2
  6365  003D  28CD               	goto	i1l4114
  6366                           
  6367                           ;main.c: 215:     timer_Timer0Init();;main.c: 217: 
  6368  003E  0020               	movlb	0	; select bank0
  6369  003F  01EC               	clrf	ISR@value
  6370                           
  6371                           ;main.c: 218: 
  6372  0040  01EE               	clrf	ISR@data
  6373                           
  6374                           ;main.c: 223:     capture_init();
  6375  0041  3055               	movlw	85
  6376  0042  00EA               	movwf	??_ISR
  6377  0043  086A               	movf	??_ISR,w
  6378  0044  00F3               	movwf	IIC_WtRTCReg@value
  6379  0045  3003               	movlw	3
  6380  0046  318A  2258  3180   	fcall	_IIC_WtRTCReg
  6381  0049  3A00               	xorlw	0
  6382  004A  1903               	skipnz
  6383  004B  284F               	goto	i1l4092
  6384                           
  6385                           ;main.c: 224: ;main.c: 225: 
  6386  004C  3197  27E0  3180   	fcall	_led_Blink
  6387  004F                     i1l4092:	
  6388                           ;main.c: 226: 
  6389                           
  6390                           
  6391                           ;main.c: 227:     uart_init();
  6392  004F  306E               	movlw	(low (ISR@data| 0))& (0+255)
  6393  0050  0020               	movlb	0	; select bank0
  6394  0051  00EA               	movwf	??_ISR
  6395  0052  086A               	movf	??_ISR,w
  6396  0053  00F4               	movwf	IIC_RdRTCReg@value
  6397  0054  3003               	movlw	3
  6398  0055  318B  2363  3180   	fcall	_IIC_RdRTCReg
  6399  0058  3A00               	xorlw	0
  6400  0059  1903               	skipnz
  6401  005A  285E               	goto	i1l4096
  6402                           
  6403                           ;main.c: 228: ;main.c: 229: 
  6404  005B  3197  27E0  3180   	fcall	_led_Blink
  6405  005E                     i1l4096:	
  6406                           ;main.c: 230:     IIC_Init();
  6407                           
  6408                           
  6409                           ;main.c: 231: 
  6410  005E  30A0               	movlw	low ISR@F5514
  6411  005F  0086               	movwf	6
  6412  0060  3002               	movlw	high ISR@F5514
  6413  0061  0087               	movwf	7
  6414  0062  30A0               	movlw	low ISR@buf
  6415  0063  0084               	movwf	4
  6416  0064  3000               	movlw	high ISR@buf
  6417  0065  0085               	movwf	5
  6418  0066  3040               	movlw	64
  6419  0067  0020               	movlb	0	; select bank0
  6420  0068  00EA               	movwf	??_ISR
  6421  0069                     u437_20:	
  6422  0069  0016               	moviw fsr1++
  6423  006A  001A               	movwi fsr0++
  6424  006B  0BEA               	decfsz	??_ISR,f
  6425  006C  2869               	goto	u437_20
  6426  006D  300B               	movlw	low (STR_1| (0+32768))
  6427  006E  00D7               	movwf	sprintf@fmt
  6428  006F  3090               	movlw	high (STR_1| (0+32768))
  6429  0070  00D8               	movwf	sprintf@fmt+1
  6430  0071  3000               	movlw	low (STR_2| (0+32768))
  6431  0072  00D9               	movwf	low ((?_sprintf| 0+2))
  6432  0073  3098               	movlw	high (STR_2| (0+32768))
  6433  0074  00DA               	movwf	(low ((?_sprintf| 0+2))+1)
  6434  0075  30E7               	movlw	231
  6435  0076  00DB               	movwf	?_sprintf+4
  6436  0077  3000               	movlw	0
  6437  0078  00DC               	movwf	?_sprintf+5
  6438  0079  3007               	movlw	low (STR_3| (0+32768))
  6439  007A  00DD               	movwf	low ((?_sprintf| 0+6))
  6440  007B  3098               	movlw	high (STR_3| (0+32768))
  6441  007C  00DE               	movwf	(low ((?_sprintf| 0+6))+1)
  6442  007D  086E               	movf	ISR@data,w
  6443  007E  00EA               	movwf	??_ISR
  6444  007F  01EB               	clrf	??_ISR+1
  6445  0080  086A               	movf	??_ISR,w
  6446  0081  00DF               	movwf	?_sprintf+8
  6447  0082  086B               	movf	??_ISR+1,w
  6448  0083  00E0               	movwf	?_sprintf+9
  6449  0084  30A0               	movlw	(low (ISR@buf| 0))& (0+255)
  6450  0085  3189  21E5  3180   	fcall	_sprintf
  6451  0088  0020               	movlb	0	; select bank0
  6452  0089  01ED               	clrf	ISR@i
  6453  008A  3020               	movlw	low ISR@F5517
  6454  008B  0086               	movwf	6
  6455  008C  3003               	movlw	high ISR@F5517
  6456  008D  0087               	movwf	7
  6457  008E  3020               	movlw	low ISR@send
  6458  008F  0084               	movwf	4
  6459  0090  3001               	movlw	high ISR@send
  6460  0091  0085               	movwf	5
  6461  0092  3040               	movlw	64
  6462  0093  00EA               	movwf	??_ISR
  6463  0094                     u438_20:	
  6464  0094  0016               	moviw fsr1++
  6465  0095  001A               	movwi fsr0++
  6466  0096  0BEA               	decfsz	??_ISR,f
  6467  0097  2894               	goto	u438_20
  6468  0098  30A0               	movlw	(low (ISR@buf| 0))& (0+255)
  6469  0099  00EA               	movwf	??_ISR
  6470  009A  086A               	movf	??_ISR,w
  6471  009B  00F0               	movwf	strcpy@src
  6472  009C  3020               	movlw	(low (ISR@send| (0+256)))& (0+255)
  6473  009D  3188  20B3  3180   	fcall	_strcpy
  6474  00A0                     i1l4112:	
  6475  00A0  3020               	movlw	low ISR@send
  6476  00A1  00F0               	movwf	strlen@s
  6477  00A2  3001               	movlw	high ISR@send
  6478  00A3  00F1               	movwf	strlen@s+1
  6479  00A4  3189  211B  3180   	fcall	_strlen
  6480  00A7  0870               	movf	?_strlen,w
  6481  00A8  3E01               	addlw	1
  6482  00A9  0020               	movlb	0	; select bank0
  6483  00AA  00EA               	movwf	??_ISR
  6484  00AB  3000               	movlw	0
  6485  00AC  3D71               	addwfc	?_strlen+1,w
  6486  00AD  00EB               	movwf	??_ISR+1
  6487  00AE  086D               	movf	ISR@i,w
  6488  00AF  066A               	xorwf	??_ISR,w
  6489  00B0  046B               	iorwf	??_ISR+1,w
  6490  00B1  1903               	btfsc	3,2
  6491  00B2  28CD               	goto	i1l4114
  6492  00B3  0023               	movlb	3	; select bank3
  6493  00B4  169E               	bsf	30,5	;volatile
  6494  00B5  121E               	bcf	30,4	;volatile
  6495  00B6  179D               	bsf	29,7	;volatile
  6496  00B7  0021               	movlb	1	; select bank1
  6497  00B8  1611               	bsf	17,4	;volatile
  6498  00B9                     i1l169:	
  6499  00B9  0023               	movlb	3	; select bank3
  6500  00BA  1C9E               	btfss	30,1	;volatile
  6501  00BB  28B9               	goto	i1l169
  6502  00BC  0020               	movlb	0	; select bank0
  6503  00BD  086D               	movf	ISR@i,w
  6504  00BE  3E20               	addlw	(low (ISR@send| (0+256)))& (0+255)
  6505  00BF  0086               	movwf	6
  6506  00C0  3001               	movlw	1	; select bank2/3
  6507  00C1  0087               	movwf	7
  6508  00C2  0801               	movf	1,w
  6509  00C3  0023               	movlb	3	; select bank3
  6510  00C4  009A               	movwf	26	;volatile
  6511  00C5  3001               	movlw	1
  6512  00C6  0020               	movlb	0	; select bank0
  6513  00C7  00EA               	movwf	??_ISR
  6514  00C8  086A               	movf	??_ISR,w
  6515  00C9  07ED               	addwf	ISR@i,f
  6516  00CA  0021               	movlb	1	; select bank1
  6517  00CB  1211               	bcf	17,4	;volatile
  6518  00CC  28A0               	goto	i1l4112
  6519  00CD                     i1l4114:	
  6520                           ;main.c: 232: 
  6521                           
  6522                           
  6523                           ;main.c: 234: 
  6524  00CD  3197  2798  3180   	fcall	i1_timer_Timer0Reset
  6525  00D0                     i1l158:	
  6526                           ;main.c: 235:     display_update();
  6527                           
  6528                           
  6529                           ;main.c: 237: 
  6530  00D0  3197  2784  3180   	fcall	_capture_IsEnable
  6531  00D3  3A00               	xorlw	0
  6532  00D4  1903               	skipnz
  6533  00D5  28E4               	goto	i1l174
  6534  00D6  3197  2788  3180   	fcall	_capture_IsIntrpt
  6535  00D9  3A00               	xorlw	0
  6536  00DA  1903               	skipnz
  6537  00DB  28E4               	goto	i1l174
  6538                           
  6539                           ;main.c: 238:     while(1);main.c: 239:     {
  6540  00DC  318D  2562  3180   	fcall	_capture_handdle
  6541  00DF  3181  2125  3180   	fcall	_bpc_proc
  6542  00E2  3197  277E         	fcall	_capture_clrIntrpt
  6543  00E4                     i1l174:	
  6544  00E4  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  6545  00E5  0009               	retfie
  6546  00E6                     __end_of_ISR:	
  6547                           
  6548                           	psect	text21
  6549  1798                     __ptext21:	
  6550 ;; *************** function i1_timer_Timer0Reset *****************
  6551 ;; Defined at:
  6552 ;;		line 92 in file "timer.c"
  6553 ;; Parameters:    Size  Location     Type
  6554 ;;		None
  6555 ;; Auto vars:     Size  Location     Type
  6556 ;;		None
  6557 ;; Return value:  Size  Location     Type
  6558 ;;                  1    wreg      void 
  6559 ;; Registers used:
  6560 ;;		wreg
  6561 ;; Tracked objects:
  6562 ;;		On entry : 0/0
  6563 ;;		On exit  : 0/0
  6564 ;;		Unchanged: 0/0
  6565 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6566 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6567 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6568 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6569 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6570 ;;Total ram usage:        0 bytes
  6571 ;; Hardware stack levels used:    1
  6572 ;; This function calls:
  6573 ;;		Nothing
  6574 ;; This function is called by:
  6575 ;;		_ISR
  6576 ;; This function uses a non-reentrant model
  6577 ;;
  6578                           
  6579                           
  6580                           ;psect for function i1_timer_Timer0Reset
  6581  1798                     i1_timer_Timer0Reset:	
  6582                           
  6583                           ;timer.c: 94:     INTCONbits.TMR0IF = 0;
  6584                           
  6585                           ;incstack = 0
  6586                           ; Regs used in i1_timer_Timer0Reset: [wreg]
  6587  1798  110B               	bcf	11,2	;volatile
  6588                           
  6589                           ;timer.c: 95:     TMR0 = (158 + 0);
  6590  1799  309E               	movlw	158
  6591  179A  0020               	movlb	0	; select bank0
  6592  179B  0095               	movwf	21	;volatile
  6593  179C  0008               	return
  6594  179D                     __end_ofi1_timer_Timer0Reset:	
  6595                           
  6596                           	psect	text22
  6597  1781                     __ptext22:	
  6598 ;; *************** function _timer_Timer1ClrIntrpt *****************
  6599 ;; Defined at:
  6600 ;;		line 51 in file "timer.c"
  6601 ;; Parameters:    Size  Location     Type
  6602 ;;		None
  6603 ;; Auto vars:     Size  Location     Type
  6604 ;;		None
  6605 ;; Return value:  Size  Location     Type
  6606 ;;                  1    wreg      void 
  6607 ;; Registers used:
  6608 ;;		None
  6609 ;; Tracked objects:
  6610 ;;		On entry : 0/0
  6611 ;;		On exit  : 0/0
  6612 ;;		Unchanged: 0/0
  6613 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6614 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6615 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6616 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6617 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6618 ;;Total ram usage:        0 bytes
  6619 ;; Hardware stack levels used:    1
  6620 ;; This function calls:
  6621 ;;		Nothing
  6622 ;; This function is called by:
  6623 ;;		_ISR
  6624 ;; This function uses a non-reentrant model
  6625 ;;
  6626                           
  6627                           
  6628                           ;psect for function _timer_Timer1ClrIntrpt
  6629  1781                     _timer_Timer1ClrIntrpt:	
  6630                           
  6631                           ;timer.c: 53:     PIR1bits.TMR1IF = 0b0;
  6632                           
  6633                           ;incstack = 0
  6634                           ; Regs used in _timer_Timer1ClrIntrpt: []
  6635  1781  0020               	movlb	0	; select bank0
  6636  1782  1011               	bcf	17,0	;volatile
  6637  1783  0008               	return
  6638  1784                     __end_of_timer_Timer1ClrIntrpt:	
  6639                           
  6640                           	psect	text23
  6641  17A2                     __ptext23:	
  6642 ;; *************** function _timer_Timer0Handdle *****************
  6643 ;; Defined at:
  6644 ;;		line 110 in file "timer.c"
  6645 ;; Parameters:    Size  Location     Type
  6646 ;;		None
  6647 ;; Auto vars:     Size  Location     Type
  6648 ;;		None
  6649 ;; Return value:  Size  Location     Type
  6650 ;;                  2   68[None  ] int 
  6651 ;; Registers used:
  6652 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6653 ;; Tracked objects:
  6654 ;;		On entry : 0/0
  6655 ;;		On exit  : 0/0
  6656 ;;		Unchanged: 0/0
  6657 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6658 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6659 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6660 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6661 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6662 ;;Total ram usage:        0 bytes
  6663 ;; Hardware stack levels used:    1
  6664 ;; Hardware stack levels required when called:    5
  6665 ;; This function calls:
  6666 ;;		_key_checkPressed
  6667 ;;		_update_time
  6668 ;; This function is called by:
  6669 ;;		_ISR
  6670 ;; This function uses a non-reentrant model
  6671 ;;
  6672                           
  6673                           
  6674                           ;psect for function _timer_Timer0Handdle
  6675  17A2                     _timer_Timer0Handdle:	
  6676                           
  6677                           ;timer.c: 112:     key_checkPressed();
  6678                           
  6679                           ;incstack = 0
  6680                           ; Regs used in _timer_Timer0Handdle: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6681  17A2  3188  20E4  3197   	fcall	_key_checkPressed
  6682                           
  6683                           ;timer.c: 114:     update_time();
  6684  17A5  318F  2770         	fcall	_update_time
  6685  17A7  0008               	return
  6686  17A8                     __end_of_timer_Timer0Handdle:	
  6687                           ;timer.c: 116:     return 0;;	Return value of _timer_Timer0Handdle is never used
  6688                           
  6689                           
  6690                           	psect	text24
  6691  0F70                     __ptext24:	
  6692 ;; *************** function _update_time *****************
  6693 ;; Defined at:
  6694 ;;		line 97 in file "display.c"
  6695 ;; Parameters:    Size  Location     Type
  6696 ;;		None
  6697 ;; Auto vars:     Size  Location     Type
  6698 ;;  pdata           1   13[COMMON] PTR volatile struct .
  6699 ;;		 -> g_data(39), 
  6700 ;; Return value:  Size  Location     Type
  6701 ;;                  1    wreg      void 
  6702 ;; Registers used:
  6703 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6704 ;; Tracked objects:
  6705 ;;		On entry : 0/0
  6706 ;;		On exit  : 0/0
  6707 ;;		Unchanged: 0/0
  6708 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6709 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6710 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6711 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6712 ;;      Totals:         1       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6713 ;;Total ram usage:        3 bytes
  6714 ;; Hardware stack levels used:    1
  6715 ;; Hardware stack levels required when called:    4
  6716 ;; This function calls:
  6717 ;;		_capture_Set
  6718 ;;		i1___awmod
  6719 ;;		i1_data_getdata
  6720 ;;		i1_display_update
  6721 ;; This function is called by:
  6722 ;;		_timer_Timer0Handdle
  6723 ;; This function uses a non-reentrant model
  6724 ;;
  6725                           
  6726                           
  6727                           ;psect for function _update_time
  6728  0F70                     _update_time:	
  6729                           
  6730                           ;display.c: 99:     G_DATA *pdata = data_getdata();
  6731                           
  6732                           ;incstack = 0
  6733                           ; Regs used in _update_time: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6734  0F70  3180  2002  318F   	fcall	i1_data_getdata
  6735  0F73  0020               	movlb	0	; select bank0
  6736  0F74  00AC               	movwf	??_update_time
  6737  0F75  082C               	movf	??_update_time,w
  6738  0F76  00FD               	movwf	update_time@pdata
  6739                           
  6740                           ;display.c: 100:     pdata->g_time_100ms++;
  6741  0F77  3001               	movlw	1
  6742  0F78  00AC               	movwf	??_update_time
  6743  0F79  087D               	movf	update_time@pdata,w
  6744  0F7A  3E06               	addlw	6
  6745  0F7B  0086               	movwf	6
  6746  0F7C  3002               	movlw	2	; select bank4/5
  6747  0F7D  0087               	movwf	7
  6748  0F7E  082C               	movf	??_update_time,w
  6749  0F7F  0781               	addwf	1,f
  6750                           
  6751                           ;display.c: 101:     if(pdata->g_time_100ms == 10)
  6752  0F80  087D               	movf	update_time@pdata,w
  6753  0F81  3E06               	addlw	6
  6754  0F82  0086               	movwf	6
  6755  0F83  3002               	movlw	2	; select bank4/5
  6756  0F84  0087               	movwf	7
  6757  0F85  300A               	movlw	10
  6758  0F86  0601               	xorwf	1,w
  6759  0F87  1D03               	btfss	3,2
  6760  0F88  0008               	return
  6761                           
  6762                           ;display.c: 102:     {;display.c: 103:         pdata->g_time_100ms = 0;
  6763  0F89  087D               	movf	update_time@pdata,w
  6764  0F8A  3E06               	addlw	6
  6765  0F8B  0086               	movwf	6
  6766  0F8C  3002               	movlw	2	; select bank4/5
  6767  0F8D  0087               	movwf	7
  6768  0F8E  0181               	clrf	1
  6769                           
  6770                           ;display.c: 104:         pdata->g_time_s++;
  6771  0F8F  3001               	movlw	1
  6772  0F90  00AC               	movwf	??_update_time
  6773  0F91  087D               	movf	update_time@pdata,w
  6774  0F92  3E05               	addlw	5
  6775  0F93  0086               	movwf	6
  6776  0F94  3002               	movlw	2	; select bank4/5
  6777  0F95  0087               	movwf	7
  6778  0F96  082C               	movf	??_update_time,w
  6779  0F97  0781               	addwf	1,f
  6780                           
  6781                           ;display.c: 106:         if(pdata->g_time_s == 60)
  6782  0F98  087D               	movf	update_time@pdata,w
  6783  0F99  3E05               	addlw	5
  6784  0F9A  0086               	movwf	6
  6785  0F9B  3002               	movlw	2	; select bank4/5
  6786  0F9C  0087               	movwf	7
  6787  0F9D  303C               	movlw	60
  6788  0F9E  0601               	xorwf	1,w
  6789  0F9F  1D03               	btfss	3,2
  6790  0FA0  0008               	return
  6791                           
  6792                           ;display.c: 107:         {;display.c: 108:             pdata->g_time_m++;
  6793  0FA1  3001               	movlw	1
  6794  0FA2  00AC               	movwf	??_update_time
  6795  0FA3  087D               	movf	update_time@pdata,w
  6796  0FA4  3E04               	addlw	4
  6797  0FA5  0086               	movwf	6
  6798  0FA6  3002               	movlw	2	; select bank4/5
  6799  0FA7  0087               	movwf	7
  6800  0FA8  082C               	movf	??_update_time,w
  6801  0FA9  0781               	addwf	1,f
  6802                           
  6803                           ;display.c: 109:             pdata->g_time_s = 0;
  6804  0FAA  087D               	movf	update_time@pdata,w
  6805  0FAB  3E05               	addlw	5
  6806  0FAC  0086               	movwf	6
  6807  0FAD  3002               	movlw	2	; select bank4/5
  6808  0FAE  0087               	movwf	7
  6809  0FAF  0181               	clrf	1
  6810                           
  6811                           ;display.c: 110:             pdata->cnt_update++;
  6812  0FB0  087D               	movf	update_time@pdata,w
  6813  0FB1  3E21               	addlw	33
  6814  0FB2  0086               	movwf	6
  6815  0FB3  3002               	movlw	2	; select bank4/5
  6816  0FB4  0087               	movwf	7
  6817  0FB5  3001               	movlw	1
  6818  0FB6  0781               	addwf	1,f
  6819  0FB7  3141               	addfsr 1,1
  6820  0FB8  1803               	skipnc
  6821  0FB9  0A81               	incf	1,f
  6822                           
  6823                           ;display.c: 111:             if(pdata->g_time_m % 30 == 0){
  6824  0FBA  301E               	movlw	30
  6825  0FBB  00F0               	movwf	i1___awmod@divisor
  6826  0FBC  3000               	movlw	0
  6827  0FBD  00F1               	movwf	i1___awmod@divisor+1
  6828  0FBE  087D               	movf	update_time@pdata,w
  6829  0FBF  3E04               	addlw	4
  6830  0FC0  0086               	movwf	6
  6831  0FC1  3002               	movlw	2	; select bank4/5
  6832  0FC2  0087               	movwf	7
  6833  0FC3  0801               	movf	1,w
  6834  0FC4  00AC               	movwf	??_update_time
  6835  0FC5  01AD               	clrf	??_update_time+1
  6836  0FC6  082C               	movf	??_update_time,w
  6837  0FC7  00F2               	movwf	i1___awmod@dividend
  6838  0FC8  082D               	movf	??_update_time+1,w
  6839  0FC9  00F3               	movwf	i1___awmod@dividend+1
  6840  0FCA  318B  239C  318F   	fcall	i1___awmod
  6841  0FCD  0870               	movf	?i1___awmod,w
  6842  0FCE  0471               	iorwf	?i1___awmod+1,w
  6843  0FCF  1D03               	btfss	3,2
  6844  0FD0  2FD5               	goto	i1l3450
  6845                           
  6846                           ;display.c: 112:                 capture_Set(TRUE);
  6847  0FD1  3001               	movlw	1
  6848  0FD2  3188  2019  318F   	fcall	_capture_Set
  6849  0FD5                     i1l3450:	
  6850                           ;display.c: 113:             }
  6851                           
  6852                           
  6853                           ;display.c: 114:             if(pdata->g_time_m == 60)
  6854  0FD5  087D               	movf	update_time@pdata,w
  6855  0FD6  3E04               	addlw	4
  6856  0FD7  0086               	movwf	6
  6857  0FD8  3002               	movlw	2	; select bank4/5
  6858  0FD9  0087               	movwf	7
  6859  0FDA  303C               	movlw	60
  6860  0FDB  0601               	xorwf	1,w
  6861  0FDC  1D03               	btfss	3,2
  6862  0FDD  2FFD               	goto	i1l3456
  6863                           
  6864                           ;display.c: 115:             {;display.c: 116:                 pdata->g_time_h++;
  6865  0FDE  3001               	movlw	1
  6866  0FDF  0020               	movlb	0	; select bank0
  6867  0FE0  00AC               	movwf	??_update_time
  6868  0FE1  087D               	movf	update_time@pdata,w
  6869  0FE2  3E03               	addlw	3
  6870  0FE3  0086               	movwf	6
  6871  0FE4  3002               	movlw	2	; select bank4/5
  6872  0FE5  0087               	movwf	7
  6873  0FE6  082C               	movf	??_update_time,w
  6874  0FE7  0781               	addwf	1,f
  6875                           
  6876                           ;display.c: 117:                 pdata->g_time_m = 0;
  6877  0FE8  087D               	movf	update_time@pdata,w
  6878  0FE9  3E04               	addlw	4
  6879  0FEA  0086               	movwf	6
  6880  0FEB  3002               	movlw	2	; select bank4/5
  6881  0FEC  0087               	movwf	7
  6882  0FED  0181               	clrf	1
  6883                           
  6884                           ;display.c: 119:                 if(pdata->g_time_h == 24)
  6885  0FEE  087D               	movf	update_time@pdata,w
  6886  0FEF  3E03               	addlw	3
  6887  0FF0  0086               	movwf	6
  6888  0FF1  3002               	movlw	2	; select bank4/5
  6889  0FF2  0087               	movwf	7
  6890  0FF3  3018               	movlw	24
  6891  0FF4  0601               	xorwf	1,w
  6892  0FF5  1D03               	btfss	3,2
  6893  0FF6  2FFD               	goto	i1l3456
  6894                           
  6895                           ;display.c: 120:                 {;display.c: 121:                     pdata->g_time_h =
      +                           0;
  6896  0FF7  087D               	movf	update_time@pdata,w
  6897  0FF8  3E03               	addlw	3
  6898  0FF9  0086               	movwf	6
  6899  0FFA  3002               	movlw	2	; select bank4/5
  6900  0FFB  0087               	movwf	7
  6901  0FFC  0181               	clrf	1
  6902  0FFD                     i1l3456:	
  6903                           ;display.c: 123:             }
  6904                           
  6905                           ;display.c: 122:                 }
  6906                           
  6907                           
  6908                           ;display.c: 125:             display_update();
  6909  0FFD  3186  2640         	fcall	i1_display_update
  6910                           
  6911                           ;display.c: 127:     }
  6912                           
  6913                           ;display.c: 126:         }
  6914  0FFF  0008               	return
  6915  1000                     __end_of_update_time:	
  6916                           ;display.c: 128:     return;
  6917                           
  6918                           
  6919                           	psect	text25
  6920  08E4                     __ptext25:	
  6921 ;; *************** function _key_checkPressed *****************
  6922 ;; Defined at:
  6923 ;;		line 126 in file "hardware.c"
  6924 ;; Parameters:    Size  Location     Type
  6925 ;;		None
  6926 ;; Auto vars:     Size  Location     Type
  6927 ;;  pdata           1    3[COMMON] PTR volatile struct .
  6928 ;;		 -> g_data(39), 
  6929 ;; Return value:  Size  Location     Type
  6930 ;;                  1    wreg      void 
  6931 ;; Registers used:
  6932 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6933 ;; Tracked objects:
  6934 ;;		On entry : 0/0
  6935 ;;		On exit  : 0/0
  6936 ;;		Unchanged: 0/0
  6937 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6938 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6939 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6940 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6941 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6942 ;;Total ram usage:        2 bytes
  6943 ;; Hardware stack levels used:    1
  6944 ;; Hardware stack levels required when called:    2
  6945 ;; This function calls:
  6946 ;;		_led_Blink
  6947 ;;		i1_data_getdata
  6948 ;; This function is called by:
  6949 ;;		_timer_Timer0Handdle
  6950 ;; This function uses a non-reentrant model
  6951 ;;
  6952                           
  6953                           
  6954                           ;psect for function _key_checkPressed
  6955  08E4                     _key_checkPressed:	
  6956                           
  6957                           ;hardware.c: 146:     G_DATA *pdata = data_getdata();
  6958                           
  6959                           ;incstack = 0
  6960                           ; Regs used in _key_checkPressed: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6961  08E4  3180  2002  3188   	fcall	i1_data_getdata
  6962  08E7  00F2               	movwf	??_key_checkPressed
  6963  08E8  0872               	movf	??_key_checkPressed,w
  6964  08E9  00F3               	movwf	key_checkPressed@pdata
  6965                           
  6966                           ;hardware.c: 148:     if(PORTCbits.RC5 == PIN_HIGH && FALSE == pdata->g_flg_switch)
  6967  08EA  0020               	movlb	0	; select bank0
  6968  08EB  1E8E               	btfss	14,5	;volatile
  6969  08EC  0008               	return
  6970  08ED  0873               	movf	key_checkPressed@pdata,w
  6971  08EE  0086               	movwf	6
  6972  08EF  3002               	movlw	2	; select bank4/5
  6973  08F0  0087               	movwf	7
  6974  08F1  0801               	movf	1,w
  6975  08F2  1D03               	btfss	3,2
  6976  08F3  0008               	return
  6977                           
  6978                           ;hardware.c: 149:     {;hardware.c: 151:         pdata->g_flg_switch = TRUE;
  6979  08F4  3001               	movlw	1
  6980  08F5  00F2               	movwf	??_key_checkPressed
  6981  08F6  0873               	movf	key_checkPressed@pdata,w
  6982  08F7  0086               	movwf	6
  6983  08F8  3002               	movlw	2	; select bank4/5
  6984  08F9  0087               	movwf	7
  6985  08FA  0872               	movf	??_key_checkPressed,w
  6986  08FB  0081               	movwf	1
  6987                           
  6988                           ;hardware.c: 153:         led_Blink();
  6989  08FC  3197  27E0         	fcall	_led_Blink
  6990  08FE  0008               	return
  6991  08FF                     __end_of_key_checkPressed:	
  6992                           ;hardware.c: 154:     }
  6993                           
  6994                           
  6995                           	psect	text26
  6996  17E0                     __ptext26:	
  6997 ;; *************** function _led_Blink *****************
  6998 ;; Defined at:
  6999 ;;		line 116 in file "hardware.c"
  7000 ;; Parameters:    Size  Location     Type
  7001 ;;		None
  7002 ;; Auto vars:     Size  Location     Type
  7003 ;;		None
  7004 ;; Return value:  Size  Location     Type
  7005 ;;                  1    wreg      unsigned char 
  7006 ;; Registers used:
  7007 ;;		wreg, status,2, status,0, pclath, cstack
  7008 ;; Tracked objects:
  7009 ;;		On entry : 0/0
  7010 ;;		On exit  : 0/0
  7011 ;;		Unchanged: 0/0
  7012 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7013 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7014 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7015 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7016 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7017 ;;Total ram usage:        1 bytes
  7018 ;; Hardware stack levels used:    1
  7019 ;; Hardware stack levels required when called:    1
  7020 ;; This function calls:
  7021 ;;		i1_led_SetState
  7022 ;; This function is called by:
  7023 ;;		_ISR
  7024 ;;		_key_checkPressed
  7025 ;; This function uses a non-reentrant model
  7026 ;;
  7027                           
  7028                           
  7029                           ;psect for function _led_Blink
  7030  17E0                     _led_Blink:	
  7031                           
  7032                           ;hardware.c: 118:     static u8 State = 0;;hardware.c: 119:     led_SetState(++State & 0
      +                          x01);
  7033                           
  7034                           ;incstack = 0
  7035                           ; Regs used in _led_Blink: [wreg+status,2+status,0+pclath+cstack]
  7036  17E0  3001               	movlw	1
  7037  17E1  00F1               	movwf	??_led_Blink
  7038  17E2  0871               	movf	??_led_Blink,w
  7039  17E3  0021               	movlb	1	; select bank1
  7040  17E4  07EA               	addwf	led_Blink@State^(0+128),f
  7041  17E5  086A               	movf	led_Blink@State^(0+128),w
  7042  17E6  3901               	andlw	1
  7043  17E7  3197  27D6         	fcall	i1_led_SetState
  7044  17E9  0008               	return
  7045  17EA                     __end_of_led_Blink:	
  7046                           ;hardware.c: 120:     return 0;;	Return value of _led_Blink is never used
  7047                           
  7048                           
  7049                           	psect	text27
  7050  1790                     __ptext27:	
  7051 ;; *************** function _timer_IsTimer1Itrpt *****************
  7052 ;; Defined at:
  7053 ;;		line 46 in file "timer.c"
  7054 ;; Parameters:    Size  Location     Type
  7055 ;;		None
  7056 ;; Auto vars:     Size  Location     Type
  7057 ;;		None
  7058 ;; Return value:  Size  Location     Type
  7059 ;;                  1    wreg      enum E5222
  7060 ;; Registers used:
  7061 ;;		wreg, status,2, status,0
  7062 ;; Tracked objects:
  7063 ;;		On entry : 0/0
  7064 ;;		On exit  : 0/0
  7065 ;;		Unchanged: 0/0
  7066 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7067 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7068 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7069 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7070 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7071 ;;Total ram usage:        0 bytes
  7072 ;; Hardware stack levels used:    1
  7073 ;; This function calls:
  7074 ;;		Nothing
  7075 ;; This function is called by:
  7076 ;;		_ISR
  7077 ;; This function uses a non-reentrant model
  7078 ;;
  7079                           
  7080                           
  7081                           ;psect for function _timer_IsTimer1Itrpt
  7082  1790                     _timer_IsTimer1Itrpt:	
  7083                           
  7084                           ;timer.c: 48:     return (PIR1bits.TMR1IF == 0b1)? TRUE : FALSE;
  7085                           
  7086                           ;incstack = 0
  7087                           ; Regs used in _timer_IsTimer1Itrpt: [wreg+status,2+status,0]
  7088  1790  0020               	movlb	0	; select bank0
  7089  1791  0811               	movf	17,w	;volatile
  7090  1792  3901               	andlw	1
  7091  1793  0008               	return
  7092  1794                     __end_of_timer_IsTimer1Itrpt:	
  7093                           
  7094                           	psect	text28
  7095  178C                     __ptext28:	
  7096 ;; *************** function _timer_IsTimer0Itrpt *****************
  7097 ;; Defined at:
  7098 ;;		line 103 in file "timer.c"
  7099 ;; Parameters:    Size  Location     Type
  7100 ;;		None
  7101 ;; Auto vars:     Size  Location     Type
  7102 ;;		None
  7103 ;; Return value:  Size  Location     Type
  7104 ;;                  1    wreg      enum E5222
  7105 ;; Registers used:
  7106 ;;		wreg, status,2, status,0
  7107 ;; Tracked objects:
  7108 ;;		On entry : 0/0
  7109 ;;		On exit  : 0/0
  7110 ;;		Unchanged: 0/0
  7111 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7112 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7113 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7114 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7115 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7116 ;;Total ram usage:        0 bytes
  7117 ;; Hardware stack levels used:    1
  7118 ;; This function calls:
  7119 ;;		Nothing
  7120 ;; This function is called by:
  7121 ;;		_ISR
  7122 ;; This function uses a non-reentrant model
  7123 ;;
  7124                           
  7125                           
  7126                           ;psect for function _timer_IsTimer0Itrpt
  7127  178C                     _timer_IsTimer0Itrpt:	
  7128                           
  7129                           ;timer.c: 105:     return (INTCONbits.TMR0IF == 0b1)? TRUE : FALSE;
  7130                           
  7131                           ;incstack = 0
  7132                           ; Regs used in _timer_IsTimer0Itrpt: [wreg+status,2+status,0]
  7133  178C  0C0B               	rrf	11,w	;volatile
  7134  178D  0C89               	rrf	9,f
  7135  178E  3901               	andlw	1
  7136  178F  0008               	return
  7137  1790                     __end_of_timer_IsTimer0Itrpt:	
  7138                           
  7139                           	psect	text29
  7140  08B3                     __ptext29:	
  7141 ;; *************** function _strcpy *****************
  7142 ;; Defined at:
  7143 ;;		line 7 in file "F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\strcpy.c"
  7144 ;; Parameters:    Size  Location     Type
  7145 ;;  dest            1    wreg     PTR unsigned char 
  7146 ;;		 -> ISR@send(64), 
  7147 ;;  src             1    0[COMMON] PTR const unsigned char 
  7148 ;;		 -> ISR@buf(64), 
  7149 ;; Auto vars:     Size  Location     Type
  7150 ;;  dest            1    4[COMMON] PTR unsigned char 
  7151 ;;		 -> ISR@send(64), 
  7152 ;;  d               1    3[COMMON] PTR unsigned char 
  7153 ;;		 -> ISR@send(64), 
  7154 ;;  s               1    2[COMMON] PTR const unsigned char 
  7155 ;;		 -> ISR@buf(64), 
  7156 ;; Return value:  Size  Location     Type
  7157 ;;                  1    wreg      PTR unsigned char 
  7158 ;; Registers used:
  7159 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  7160 ;; Tracked objects:
  7161 ;;		On entry : 0/0
  7162 ;;		On exit  : 0/0
  7163 ;;		Unchanged: 0/0
  7164 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7165 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7166 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7167 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7168 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7169 ;;Total ram usage:        5 bytes
  7170 ;; Hardware stack levels used:    1
  7171 ;; This function calls:
  7172 ;;		Nothing
  7173 ;; This function is called by:
  7174 ;;		_ISR
  7175 ;; This function uses a non-reentrant model
  7176 ;;
  7177                           
  7178                           
  7179                           ;psect for function _strcpy
  7180  08B3                     _strcpy:	
  7181                           
  7182                           ;incstack = 0
  7183                           ; Regs used in _strcpy: [wreg-fsr1h+status,2+status,0]
  7184                           ;strcpy@dest stored from wreg
  7185  08B3  00F4               	movwf	strcpy@dest
  7186  08B4  0870               	movf	strcpy@src,w
  7187  08B5  00F1               	movwf	??_strcpy
  7188  08B6  0871               	movf	??_strcpy,w
  7189  08B7  00F2               	movwf	strcpy@s
  7190  08B8  0874               	movf	strcpy@dest,w
  7191  08B9  00F1               	movwf	??_strcpy
  7192  08BA  0871               	movf	??_strcpy,w
  7193  08BB  00F3               	movwf	strcpy@d
  7194  08BC                     i1l3800:	
  7195  08BC  0873               	movf	strcpy@d,w
  7196  08BD  0086               	movwf	6
  7197  08BE  3001               	movlw	1	; select bank2/3
  7198  08BF  0087               	movwf	7
  7199  08C0  0AF3               	incf	strcpy@d,f
  7200  08C1  0872               	movf	strcpy@s,w
  7201  08C2  0084               	movwf	4
  7202  08C3  0185               	clrf	5
  7203  08C4  0AF2               	incf	strcpy@s,f
  7204  08C5  0800               	movf	0,w
  7205  08C6  3FC0               	movwi [0]fsr1
  7206  08C7  0889               	movf	9,f
  7207  08C8  1903               	btfsc	3,2
  7208  08C9  0008               	return
  7209  08CA  28BC               	goto	i1l3800
  7210  08CB                     __end_of_strcpy:	
  7211                           ;	Return value of _strcpy is never used
  7212                           
  7213                           
  7214                           	psect	text30
  7215  09E5                     __ptext30:	
  7216 ;; *************** function _sprintf *****************
  7217 ;; Defined at:
  7218 ;;		line 9 in file "F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\nf_sprintf.c"
  7219 ;; Parameters:    Size  Location     Type
  7220 ;;  s               1    wreg     PTR unsigned char 
  7221 ;;		 -> ISR@buf(64), 
  7222 ;;  fmt             2   55[BANK0 ] PTR const unsigned char 
  7223 ;;		 -> STR_1(20), 
  7224 ;; Auto vars:     Size  Location     Type
  7225 ;;  s               1   68[BANK0 ] PTR unsigned char 
  7226 ;;		 -> ISR@buf(64), 
  7227 ;;  f               5   69[BANK0 ] struct _IO_FILE
  7228 ;;  ret             2   65[BANK0 ] int 
  7229 ;;  ap              1   67[BANK0 ] PTR void [1]
  7230 ;;		 -> ?_sprintf(2), 
  7231 ;; Return value:  Size  Location     Type
  7232 ;;                  2   55[BANK0 ] int 
  7233 ;; Registers used:
  7234 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7235 ;; Tracked objects:
  7236 ;;		On entry : 0/0
  7237 ;;		On exit  : 0/0
  7238 ;;		Unchanged: 0/0
  7239 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7240 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7241 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7242 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7243 ;;      Totals:         1      19       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7244 ;;Total ram usage:       20 bytes
  7245 ;; Hardware stack levels used:    1
  7246 ;; Hardware stack levels required when called:    7
  7247 ;; This function calls:
  7248 ;;		_vfprintf
  7249 ;; This function is called by:
  7250 ;;		_ISR
  7251 ;; This function uses a non-reentrant model
  7252 ;;
  7253                           
  7254                           
  7255                           ;psect for function _sprintf
  7256  09E5                     _sprintf:	
  7257                           
  7258                           ;incstack = 0
  7259                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7260                           ;sprintf@s stored from wreg
  7261  09E5  0020               	movlb	0	; select bank0
  7262  09E6  00E4               	movwf	sprintf@s
  7263  09E7  3059               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  7264  09E8  00FD               	movwf	??_sprintf
  7265  09E9  087D               	movf	??_sprintf,w
  7266  09EA  00E3               	movwf	sprintf@ap
  7267  09EB  0864               	movf	sprintf@s,w
  7268  09EC  00FD               	movwf	??_sprintf
  7269  09ED  087D               	movf	??_sprintf,w
  7270  09EE  00E5               	movwf	sprintf@f
  7271  09EF  01E6               	clrf	sprintf@f+1
  7272  09F0  01E7               	clrf	sprintf@f+2
  7273  09F1  01E8               	clrf	sprintf@f+3
  7274  09F2  01E9               	clrf	sprintf@f+4
  7275  09F3  0858               	movf	sprintf@fmt+1,w
  7276  09F4  00D0               	movwf	vfprintf@fmt+1
  7277  09F5  0857               	movf	sprintf@fmt,w
  7278  09F6  00CF               	movwf	vfprintf@fmt
  7279  09F7  3063               	movlw	(low (sprintf@ap| 0))& (0+255)
  7280  09F8  00FD               	movwf	??_sprintf
  7281  09F9  087D               	movf	??_sprintf,w
  7282  09FA  00D1               	movwf	vfprintf@ap
  7283  09FB  3065               	movlw	(low (sprintf@f| 0))& (0+255)
  7284  09FC  318B  2333         	fcall	_vfprintf
  7285  09FE  0020               	movlb	0	; select bank0
  7286  09FF  0850               	movf	?_vfprintf+1,w
  7287  0A00  00E2               	movwf	sprintf@ret+1
  7288  0A01  084F               	movf	?_vfprintf,w
  7289  0A02  00E1               	movwf	sprintf@ret
  7290  0A03  0866               	movf	sprintf@f+1,w
  7291  0A04  0764               	addwf	sprintf@s,w
  7292  0A05  00FD               	movwf	??_sprintf
  7293  0A06  087D               	movf	??_sprintf,w
  7294  0A07  0086               	movwf	6
  7295  0A08  0187               	clrf	7
  7296  0A09  0181               	clrf	1
  7297  0A0A  0008               	return
  7298  0A0B                     __end_of_sprintf:	
  7299                           ;	Return value of _sprintf is never used
  7300                           
  7301                           
  7302                           	psect	text31
  7303  0B33                     __ptext31:	
  7304 ;; *************** function _vfprintf *****************
  7305 ;; Defined at:
  7306 ;;		line 1368 in file "F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c"
  7307 ;; Parameters:    Size  Location     Type
  7308 ;;  fp              1    wreg     PTR struct _IO_FILE
  7309 ;;		 -> sprintf@f(5), 
  7310 ;;  fmt             2   47[BANK0 ] PTR const unsigned char 
  7311 ;;		 -> STR_1(20), 
  7312 ;;  ap              1   49[BANK0 ] PTR PTR void 
  7313 ;;		 -> sprintf@ap(1), 
  7314 ;; Auto vars:     Size  Location     Type
  7315 ;;  fp              1   52[BANK0 ] PTR struct _IO_FILE
  7316 ;;		 -> sprintf@f(5), 
  7317 ;;  cfmt            2   53[BANK0 ] PTR unsigned char 
  7318 ;;		 -> STR_1(20), 
  7319 ;; Return value:  Size  Location     Type
  7320 ;;                  2   47[BANK0 ] int 
  7321 ;; Registers used:
  7322 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7323 ;; Tracked objects:
  7324 ;;		On entry : 0/0
  7325 ;;		On exit  : 0/0
  7326 ;;		Unchanged: 0/0
  7327 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7328 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7329 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7330 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7331 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7332 ;;Total ram usage:        8 bytes
  7333 ;; Hardware stack levels used:    1
  7334 ;; Hardware stack levels required when called:    6
  7335 ;; This function calls:
  7336 ;;		_vfpfcnvrt
  7337 ;; This function is called by:
  7338 ;;		_sprintf
  7339 ;; This function uses a non-reentrant model
  7340 ;;
  7341                           
  7342                           
  7343                           ;psect for function _vfprintf
  7344  0B33                     _vfprintf:	
  7345                           
  7346                           ;incstack = 0
  7347                           ; Regs used in _vfprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7348                           ;vfprintf@fp stored from wreg
  7349  0B33  0020               	movlb	0	; select bank0
  7350  0B34  00D4               	movwf	vfprintf@fp
  7351                           
  7352                           ;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c: 1368: int vfpr
      +                          intf(FILE *fp, const char *fmt, va_list ap);F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\
      +                          sources\c99\common\doprnt.c: 1369: {;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources
      +                          \c99\common\doprnt.c: 1371:     char *cfmt;;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\
      +                          sources\c99\common\doprnt.c: 1373:     cfmt = (char *)fmt;
  7353  0B35  0850               	movf	vfprintf@fmt+1,w
  7354  0B36  00D6               	movwf	vfprintf@cfmt+1
  7355  0B37  084F               	movf	vfprintf@fmt,w
  7356  0B38  00D5               	movwf	vfprintf@cfmt
  7357                           
  7358                           ;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c: 1374:     nout
      +                           = 0;
  7359  0B39  0022               	movlb	2	; select bank2
  7360  0B3A  01E7               	clrf	_nout^(0+256)
  7361  0B3B  01E8               	clrf	(_nout+1)^(0+256)
  7362  0B3C                     i1l3600:	
  7363                           ;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c: 1377:     }
  7364                           
  7365                           ;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c: 1375:     whil
      +                          e (*cfmt) {
  7366                           
  7367                           
  7368                           ;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c: 1375:     whil
      +                          e (*cfmt) {
  7369  0B3C  0020               	movlb	0	; select bank0
  7370  0B3D  0855               	movf	vfprintf@cfmt,w
  7371  0B3E  0084               	movwf	4
  7372  0B3F  0856               	movf	vfprintf@cfmt+1,w
  7373  0B40  0085               	movwf	5
  7374  0B41  0012               	moviw fsr0++
  7375  0B42  1903               	btfsc	3,2
  7376  0B43  2B5A               	goto	i1l3602
  7377                           
  7378                           ;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c: 1376:         
      +                          nout += vfpfcnvrt(fp, &cfmt, ap);
  7379  0B44  3055               	movlw	(low (vfprintf@cfmt| 0))& (0+255)
  7380  0B45  0020               	movlb	0	; select bank0
  7381  0B46  00D2               	movwf	??_vfprintf
  7382  0B47  0852               	movf	??_vfprintf,w
  7383  0B48  00C1               	movwf	vfpfcnvrt@fmt
  7384  0B49  0851               	movf	vfprintf@ap,w
  7385  0B4A  00D3               	movwf	??_vfprintf+1
  7386  0B4B  0853               	movf	??_vfprintf+1,w
  7387  0B4C  00C2               	movwf	vfpfcnvrt@ap
  7388  0B4D  0854               	movf	vfprintf@fp,w
  7389  0B4E  3183  238C  318B   	fcall	_vfpfcnvrt
  7390  0B51  0020               	movlb	0	; select bank0
  7391  0B52  0841               	movf	?_vfpfcnvrt,w
  7392  0B53  0022               	movlb	2	; select bank2
  7393  0B54  07E7               	addwf	_nout^(0+256),f
  7394  0B55  0020               	movlb	0	; select bank0
  7395  0B56  0842               	movf	?_vfpfcnvrt+1,w
  7396  0B57  0022               	movlb	2	; select bank2
  7397  0B58  3DE8               	addwfc	(_nout+1)^(0+256),f
  7398  0B59  2B3C               	goto	i1l3600
  7399  0B5A                     i1l3602:	
  7400                           
  7401                           ;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c: 1378:     retu
      +                          rn nout;
  7402  0B5A  0022               	movlb	2	; select bank2
  7403  0B5B  0868               	movf	(_nout+1)^(0+256),w
  7404  0B5C  0020               	movlb	0	; select bank0
  7405  0B5D  00D0               	movwf	?_vfprintf+1
  7406  0B5E  0022               	movlb	2	; select bank2
  7407  0B5F  0867               	movf	_nout^(0+256),w
  7408  0B60  0020               	movlb	0	; select bank0
  7409  0B61  00CF               	movwf	?_vfprintf
  7410  0B62  0008               	return
  7411  0B63                     __end_of_vfprintf:	
  7412                           
  7413                           	psect	text32
  7414  038C                     __ptext32:	
  7415 ;; *************** function _vfpfcnvrt *****************
  7416 ;; Defined at:
  7417 ;;		line 670 in file "F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c"
  7418 ;; Parameters:    Size  Location     Type
  7419 ;;  fp              1    wreg     PTR struct _IO_FILE
  7420 ;;		 -> sprintf@f(5), 
  7421 ;;  fmt             1   33[BANK0 ] PTR PTR unsigned char 
  7422 ;;		 -> vfprintf@cfmt(2), 
  7423 ;;  ap              1   34[BANK0 ] PTR PTR void 
  7424 ;;		 -> sprintf@ap(1), 
  7425 ;; Auto vars:     Size  Location     Type
  7426 ;;  fp              1   46[BANK0 ] PTR struct _IO_FILE
  7427 ;;		 -> sprintf@f(5), 
  7428 ;;  ll              4   40[BANK0 ] long 
  7429 ;;  f               4    0        long 
  7430 ;;  llu             4    0        unsigned long 
  7431 ;;  ct              3    0        unsigned char [3]
  7432 ;;  cp              2   44[BANK0 ] PTR unsigned char 
  7433 ;;		 -> ?_sprintf(2), STR_3(4), STR_2(7), 
  7434 ;;  vp              2    0        PTR void 
  7435 ;;  i               2    0        int 
  7436 ;;  done            2    0        int 
  7437 ;;  c               1    0        unsigned char 
  7438 ;; Return value:  Size  Location     Type
  7439 ;;                  2   33[BANK0 ] int 
  7440 ;; Registers used:
  7441 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7442 ;; Tracked objects:
  7443 ;;		On entry : 0/0
  7444 ;;		On exit  : 0/0
  7445 ;;		Unchanged: 0/0
  7446 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7447 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7448 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7449 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7450 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7451 ;;Total ram usage:       14 bytes
  7452 ;; Hardware stack levels used:    1
  7453 ;; Hardware stack levels required when called:    5
  7454 ;; This function calls:
  7455 ;;		_dtoa
  7456 ;;		_fputc
  7457 ;;		_stoa
  7458 ;; This function is called by:
  7459 ;;		_vfprintf
  7460 ;; This function uses a non-reentrant model
  7461 ;;
  7462                           
  7463                           
  7464                           ;psect for function _vfpfcnvrt
  7465  038C                     _vfpfcnvrt:	
  7466                           
  7467                           ;incstack = 0
  7468                           ; Regs used in _vfpfcnvrt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7469                           ;vfpfcnvrt@fp stored from wreg
  7470  038C  0020               	movlb	0	; select bank0
  7471  038D  00CE               	movwf	vfpfcnvrt@fp
  7472                           
  7473                           ;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c: 670: static in
      +                          t vfpfcnvrt(FILE *fp, char *fmt[], va_list ap);F:\other_software\MPLAB_X_IDE\xc8\v2.00\p
      +                          ic\sources\c99\common\doprnt.c: 671: {;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sourc
      +                          es\c99\common\doprnt.c: 672:     char c, *cp, ct[3];;F:\other_software\MPLAB_X_IDE\xc8\v
      +                          2.00\pic\sources\c99\common\doprnt.c: 673:     int done, i;;F:\other_software\MPLAB_X_ID
      +                          E\xc8\v2.00\pic\sources\c99\common\doprnt.c: 674:     long long ll;;F:\other_software\MP
      +                          LAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c: 675:     unsigned long long llu;
  7474  038E  0841               	movf	vfpfcnvrt@fmt,w
  7475  038F  0086               	movwf	6
  7476  0390  0187               	clrf	7
  7477  0391  3F40               	moviw [0]fsr1
  7478  0392  00C3               	movwf	??_vfpfcnvrt
  7479  0393  3F41               	moviw [1]fsr1
  7480  0394  00C4               	movwf	??_vfpfcnvrt+1
  7481  0395  0843               	movf	??_vfpfcnvrt,w
  7482  0396  0084               	movwf	4
  7483  0397  0844               	movf	??_vfpfcnvrt+1,w
  7484  0398  0085               	movwf	5
  7485  0399  0012               	moviw fsr0++
  7486  039A  3A25               	xorlw	37
  7487  039B  1D03               	btfss	3,2
  7488  039C  2C5D               	goto	i1l3212
  7489                           
  7490                           ;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c: 681:         +
      +                          +*fmt;
  7491  039D  0841               	movf	vfpfcnvrt@fmt,w
  7492  039E  0086               	movwf	6
  7493  039F  0187               	clrf	7
  7494  03A0  3001               	movlw	1
  7495  03A1  0781               	addwf	1,f
  7496  03A2  3141               	addfsr 1,1
  7497  03A3  1803               	skipnc
  7498  03A4  0A81               	incf	1,f
  7499                           
  7500                           ;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c: 683:         f
      +                          lags = width = 0;
  7501  03A5  0021               	movlb	1	; select bank1
  7502  03A6  01E0               	clrf	_width^(0+128)
  7503  03A7  01E1               	clrf	(_width+1)^(0+128)
  7504  03A8  01E4               	clrf	_flags^(0+128)
  7505  03A9  01E5               	clrf	(_flags+1)^(0+128)
  7506                           
  7507                           ;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c: 684:         p
      +                          rec = -1;
  7508  03AA  30FF               	movlw	255
  7509  03AB  00E2               	movwf	_prec^(0+128)
  7510  03AC  30FF               	movlw	255
  7511  03AD  00E3               	movwf	(_prec^(0+128)+1)
  7512                           
  7513                           ;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c: 825:         i
      +                          f ((*fmt[0] == 'd') || (*fmt[0] == 'i')) {
  7514  03AE  0020               	movlb	0	; select bank0
  7515  03AF  0841               	movf	vfpfcnvrt@fmt,w
  7516  03B0  0086               	movwf	6
  7517  03B1  0187               	clrf	7
  7518  03B2  3F40               	moviw [0]fsr1
  7519  03B3  00C3               	movwf	??_vfpfcnvrt
  7520  03B4  3F41               	moviw [1]fsr1
  7521  03B5  00C4               	movwf	??_vfpfcnvrt+1
  7522  03B6  0843               	movf	??_vfpfcnvrt,w
  7523  03B7  0084               	movwf	4
  7524  03B8  0844               	movf	??_vfpfcnvrt+1,w
  7525  03B9  0085               	movwf	5
  7526  03BA  0012               	moviw fsr0++
  7527  03BB  3A64               	xorlw	100
  7528  03BC  1903               	btfsc	3,2
  7529  03BD  2BCD               	goto	i1l3178
  7530  03BE  0841               	movf	vfpfcnvrt@fmt,w
  7531  03BF  0086               	movwf	6
  7532  03C0  0187               	clrf	7
  7533  03C1  3F40               	moviw [0]fsr1
  7534  03C2  00C3               	movwf	??_vfpfcnvrt
  7535  03C3  3F41               	moviw [1]fsr1
  7536  03C4  00C4               	movwf	??_vfpfcnvrt+1
  7537  03C5  0843               	movf	??_vfpfcnvrt,w
  7538  03C6  0084               	movwf	4
  7539  03C7  0844               	movf	??_vfpfcnvrt+1,w
  7540  03C8  0085               	movwf	5
  7541  03C9  0012               	moviw fsr0++
  7542  03CA  3A69               	xorlw	105
  7543  03CB  1D03               	btfss	3,2
  7544  03CC  2BFB               	goto	i1l3186
  7545  03CD                     i1l3178:	
  7546                           
  7547                           ;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c: 827:          
      +                             ++*fmt;
  7548  03CD  0841               	movf	vfpfcnvrt@fmt,w
  7549  03CE  0086               	movwf	6
  7550  03CF  0187               	clrf	7
  7551  03D0  3001               	movlw	1
  7552  03D1  0781               	addwf	1,f
  7553  03D2  3141               	addfsr 1,1
  7554  03D3  1803               	skipnc
  7555  03D4  0A81               	incf	1,f
  7556                           
  7557                           ;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c: 828:          
      +                             ll = (long long)(*(int *)__va_arg(*(int **)ap, (int)0));
  7558  03D5  0842               	movf	vfpfcnvrt@ap,w
  7559  03D6  0086               	movwf	6
  7560  03D7  0187               	clrf	7
  7561  03D8  0801               	movf	1,w
  7562  03D9  0084               	movwf	4
  7563  03DA  0185               	clrf	5
  7564  03DB  3002               	movlw	2
  7565  03DC  0781               	addwf	1,f
  7566  03DD  3F00               	moviw [0]fsr0
  7567  03DE  00C3               	movwf	??_vfpfcnvrt
  7568  03DF  3F01               	moviw [1]fsr0
  7569  03E0  00C4               	movwf	??_vfpfcnvrt+1
  7570  03E1  0843               	movf	??_vfpfcnvrt,w
  7571  03E2  00C8               	movwf	vfpfcnvrt@ll
  7572  03E3  0844               	movf	??_vfpfcnvrt+1,w
  7573  03E4  00C9               	movwf	vfpfcnvrt@ll+1
  7574  03E5  0D89               	rlf	9,f
  7575  03E6  3B89               	subwfb	9,f
  7576  03E7  0989               	comf	9,f
  7577  03E8  00CA               	movwf	vfpfcnvrt@ll+2
  7578  03E9  00CB               	movwf	vfpfcnvrt@ll+3
  7579                           
  7580                           ;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c: 830:          
      +                             return dtoa(fp, ll);
  7581  03EA  084B               	movf	vfpfcnvrt@ll+3,w
  7582  03EB  00AF               	movwf	dtoa@d+3
  7583  03EC  084A               	movf	vfpfcnvrt@ll+2,w
  7584  03ED  00AE               	movwf	dtoa@d+2
  7585  03EE  0849               	movf	vfpfcnvrt@ll+1,w
  7586  03EF  00AD               	movwf	dtoa@d+1
  7587  03F0  0848               	movf	vfpfcnvrt@ll,w
  7588  03F1  00AC               	movwf	dtoa@d
  7589  03F2  084E               	movf	vfpfcnvrt@fp,w
  7590  03F3  3182  2279         	fcall	_dtoa
  7591  03F5  0020               	movlb	0	; select bank0
  7592  03F6  082D               	movf	?_dtoa+1,w
  7593  03F7  00C2               	movwf	?_vfpfcnvrt+1
  7594  03F8  082C               	movf	?_dtoa,w
  7595  03F9  00C1               	movwf	?_vfpfcnvrt
  7596  03FA  0008               	return
  7597  03FB                     i1l3186:	
  7598                           ;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c: 831:         }
  7599                           
  7600                           
  7601                           ;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c: 1149:         
      +                          if (*fmt[0] == 's') {
  7602  03FB  0841               	movf	vfpfcnvrt@fmt,w
  7603  03FC  0086               	movwf	6
  7604  03FD  0187               	clrf	7
  7605  03FE  3F40               	moviw [0]fsr1
  7606  03FF  00C3               	movwf	??_vfpfcnvrt
  7607  0400  3F41               	moviw [1]fsr1
  7608  0401  00C4               	movwf	??_vfpfcnvrt+1
  7609  0402  0843               	movf	??_vfpfcnvrt,w
  7610  0403  0084               	movwf	4
  7611  0404  0844               	movf	??_vfpfcnvrt+1,w
  7612  0405  0085               	movwf	5
  7613  0406  0012               	moviw fsr0++
  7614  0407  3A73               	xorlw	115
  7615  0408  1D03               	btfss	3,2
  7616  0409  2C2B               	goto	i1l3196
  7617                           
  7618                           ;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c: 1151:         
      +                              ++*fmt;
  7619  040A  0841               	movf	vfpfcnvrt@fmt,w
  7620  040B  0086               	movwf	6
  7621  040C  0187               	clrf	7
  7622  040D  3001               	movlw	1
  7623  040E  0781               	addwf	1,f
  7624  040F  3141               	addfsr 1,1
  7625  0410  1803               	skipnc
  7626  0411  0A81               	incf	1,f
  7627                           
  7628                           ;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c: 1152:         
      +                              cp = (*(char * *)__va_arg(*(char * **)ap, (char *)0));
  7629  0412  0842               	movf	vfpfcnvrt@ap,w
  7630  0413  0086               	movwf	6
  7631  0414  0187               	clrf	7
  7632  0415  0801               	movf	1,w
  7633  0416  0084               	movwf	4
  7634  0417  0185               	clrf	5
  7635  0418  3002               	movlw	2
  7636  0419  0781               	addwf	1,f
  7637  041A  3F00               	moviw [0]fsr0
  7638  041B  00CC               	movwf	vfpfcnvrt@cp
  7639  041C  3F01               	moviw [1]fsr0
  7640  041D  00CD               	movwf	vfpfcnvrt@cp+1
  7641                           
  7642                           ;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c: 1154:         
      +                              return stoa(fp, cp);
  7643  041E  084D               	movf	vfpfcnvrt@cp+1,w
  7644  041F  00F9               	movwf	stoa@s+1
  7645  0420  084C               	movf	vfpfcnvrt@cp,w
  7646  0421  00F8               	movwf	stoa@s
  7647  0422  084E               	movf	vfpfcnvrt@fp,w
  7648  0423  3185  257A         	fcall	_stoa
  7649  0425  0879               	movf	?_stoa+1,w
  7650  0426  0020               	movlb	0	; select bank0
  7651  0427  00C2               	movwf	?_vfpfcnvrt+1
  7652  0428  0878               	movf	?_stoa,w
  7653  0429  00C1               	movwf	?_vfpfcnvrt
  7654  042A  0008               	return
  7655  042B                     i1l3196:	
  7656                           ;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c: 1155:         
      +                          }
  7657                           
  7658                           
  7659                           ;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c: 1350:         
      +                          if ((*fmt)[0] == '%') {
  7660  042B  0841               	movf	vfpfcnvrt@fmt,w
  7661  042C  0086               	movwf	6
  7662  042D  0187               	clrf	7
  7663  042E  3F40               	moviw [0]fsr1
  7664  042F  00C3               	movwf	??_vfpfcnvrt
  7665  0430  3F41               	moviw [1]fsr1
  7666  0431  00C4               	movwf	??_vfpfcnvrt+1
  7667  0432  0843               	movf	??_vfpfcnvrt,w
  7668  0433  0084               	movwf	4
  7669  0434  0844               	movf	??_vfpfcnvrt+1,w
  7670  0435  0085               	movwf	5
  7671  0436  0012               	moviw fsr0++
  7672  0437  3A25               	xorlw	37
  7673  0438  1D03               	btfss	3,2
  7674  0439  2C52               	goto	i1l3206
  7675                           
  7676                           ;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c: 1351:         
      +                              ++*fmt;
  7677  043A  0841               	movf	vfpfcnvrt@fmt,w
  7678  043B  0086               	movwf	6
  7679  043C  0187               	clrf	7
  7680  043D  3001               	movlw	1
  7681  043E  0781               	addwf	1,f
  7682  043F  3141               	addfsr 1,1
  7683  0440  1803               	skipnc
  7684  0441  0A81               	incf	1,f
  7685                           
  7686                           ;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c: 1352:         
      +                              fputc((int)'%', fp);
  7687  0442  3025               	movlw	37
  7688  0443  00F0               	movwf	fputc@c
  7689  0444  3000               	movlw	0
  7690  0445  00F1               	movwf	fputc@c+1
  7691  0446  084E               	movf	vfpfcnvrt@fp,w
  7692  0447  00C3               	movwf	??_vfpfcnvrt
  7693  0448  0843               	movf	??_vfpfcnvrt,w
  7694  0449  00F2               	movwf	fputc@fp
  7695  044A  318B  23E1         	fcall	_fputc
  7696                           
  7697                           ;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c: 1353:         
      +                              return 1;
  7698  044C  3001               	movlw	1
  7699  044D  0020               	movlb	0	; select bank0
  7700  044E  00C1               	movwf	?_vfpfcnvrt
  7701  044F  3000               	movlw	0
  7702  0450  00C2               	movwf	?_vfpfcnvrt+1
  7703  0451  0008               	return
  7704  0452                     i1l3206:	
  7705                           ;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c: 1354:         
      +                          }
  7706                           
  7707                           
  7708                           ;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c: 1357:         
      +                          ++*fmt;
  7709  0452  0841               	movf	vfpfcnvrt@fmt,w
  7710  0453  0086               	movwf	6
  7711  0454  0187               	clrf	7
  7712  0455  3001               	movlw	1
  7713  0456  0781               	addwf	1,f
  7714  0457  3141               	addfsr 1,1
  7715  0458  1803               	skipnc
  7716  0459  0A81               	incf	1,f
  7717                           
  7718                           ;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c: 1358:         
      +                          return 0;
  7719  045A  01C1               	clrf	?_vfpfcnvrt
  7720  045B  01C2               	clrf	?_vfpfcnvrt+1
  7721  045C  0008               	return
  7722  045D                     i1l3212:	
  7723                           ;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c: 1359:     }
  7724                           
  7725                           
  7726                           ;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c: 1362:     fput
      +                          c((int)(*fmt)[0], fp);
  7727  045D  0841               	movf	vfpfcnvrt@fmt,w
  7728  045E  0086               	movwf	6
  7729  045F  0187               	clrf	7
  7730  0460  3F40               	moviw [0]fsr1
  7731  0461  00C3               	movwf	??_vfpfcnvrt
  7732  0462  3F41               	moviw [1]fsr1
  7733  0463  00C4               	movwf	??_vfpfcnvrt+1
  7734  0464  0843               	movf	??_vfpfcnvrt,w
  7735  0465  0084               	movwf	4
  7736  0466  0844               	movf	??_vfpfcnvrt+1,w
  7737  0467  0085               	movwf	5
  7738  0468  0800               	movf	0,w	;code access
  7739  0469  00C5               	movwf	??_vfpfcnvrt+2
  7740  046A  01C6               	clrf	??_vfpfcnvrt+3
  7741  046B  0845               	movf	??_vfpfcnvrt+2,w
  7742  046C  00F0               	movwf	fputc@c
  7743  046D  0846               	movf	??_vfpfcnvrt+3,w
  7744  046E  00F1               	movwf	fputc@c+1
  7745  046F  084E               	movf	vfpfcnvrt@fp,w
  7746  0470  00C7               	movwf	??_vfpfcnvrt+4
  7747  0471  0847               	movf	??_vfpfcnvrt+4,w
  7748  0472  00F2               	movwf	fputc@fp
  7749  0473  318B  23E1         	fcall	_fputc
  7750                           
  7751                           ;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c: 1363:     ++*f
      +                          mt;
  7752  0475  0020               	movlb	0	; select bank0
  7753  0476  0841               	movf	vfpfcnvrt@fmt,w
  7754  0477  0086               	movwf	6
  7755  0478  0187               	clrf	7
  7756  0479  3001               	movlw	1
  7757  047A  0781               	addwf	1,f
  7758  047B  3141               	addfsr 1,1
  7759  047C  1803               	skipnc
  7760  047D  0A81               	incf	1,f
  7761                           
  7762                           ;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c: 1364:     retu
      +                          rn 1;
  7763  047E  3001               	movlw	1
  7764  047F  00C1               	movwf	?_vfpfcnvrt
  7765  0480  3000               	movlw	0
  7766  0481  00C2               	movwf	?_vfpfcnvrt+1
  7767  0482  0008               	return
  7768  0483                     __end_of_vfpfcnvrt:	
  7769                           
  7770                           	psect	text33
  7771  057A                     __ptext33:	
  7772 ;; *************** function _stoa *****************
  7773 ;; Defined at:
  7774 ;;		line 546 in file "F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c"
  7775 ;; Parameters:    Size  Location     Type
  7776 ;;  fp              1    wreg     PTR struct _IO_FILE
  7777 ;;		 -> sprintf@f(5), 
  7778 ;;  s               2    8[COMMON] PTR unsigned char 
  7779 ;;		 -> ?_sprintf(2), STR_3(4), STR_2(7), 
  7780 ;; Auto vars:     Size  Location     Type
  7781 ;;  fp              1   11[BANK0 ] PTR struct _IO_FILE
  7782 ;;		 -> sprintf@f(5), 
  7783 ;;  nuls            7    0[BANK0 ] unsigned char [7]
  7784 ;;  l               2   16[BANK0 ] int 
  7785 ;;  p               2   14[BANK0 ] int 
  7786 ;;  cp              2   12[BANK0 ] PTR unsigned char 
  7787 ;;		 -> ?_sprintf(2), stoa@nuls(7), STR_3(4), STR_2(7), 
  7788 ;;  w               2    9[BANK0 ] int 
  7789 ;;  i               2    7[BANK0 ] int 
  7790 ;; Return value:  Size  Location     Type
  7791 ;;                  2    8[COMMON] int 
  7792 ;; Registers used:
  7793 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7794 ;; Tracked objects:
  7795 ;;		On entry : 0/0
  7796 ;;		On exit  : 0/0
  7797 ;;		Unchanged: 0/0
  7798 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7799 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7800 ;;      Locals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7801 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7802 ;;      Totals:         5      18       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7803 ;;Total ram usage:       23 bytes
  7804 ;; Hardware stack levels used:    1
  7805 ;; Hardware stack levels required when called:    2
  7806 ;; This function calls:
  7807 ;;		_fputc
  7808 ;;		_strlen
  7809 ;; This function is called by:
  7810 ;;		_vfpfcnvrt
  7811 ;; This function uses a non-reentrant model
  7812 ;;
  7813                           
  7814                           
  7815                           ;psect for function _stoa
  7816  057A                     _stoa:	
  7817                           
  7818                           ;incstack = 0
  7819                           ; Regs used in _stoa: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7820                           ;stoa@fp stored from wreg
  7821  057A  0020               	movlb	0	; select bank0
  7822  057B  00AB               	movwf	stoa@fp
  7823                           
  7824                           ;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c: 546: static in
      +                          t stoa(FILE *fp, char *s);F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common
      +                          \doprnt.c: 547: {;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.
      +                          c: 548:     char *cp, nuls[] = "(null)";
  7825  057C  3060               	movlw	low stoa@F1129
  7826  057D  0086               	movwf	6
  7827  057E  3001               	movlw	high stoa@F1129
  7828  057F  0087               	movwf	7
  7829  0580  3020               	movlw	low stoa@nuls
  7830  0581  0084               	movwf	4
  7831  0582  3000               	movlw	high stoa@nuls
  7832  0583  0085               	movwf	5
  7833  0584  3007               	movlw	7
  7834  0585  00FA               	movwf	??_stoa
  7835  0586                     u276_20:	
  7836  0586  0016               	moviw fsr1++
  7837  0587  001A               	movwi fsr0++
  7838  0588  0BFA               	decfsz	??_stoa,f
  7839  0589  2D86               	goto	u276_20
  7840                           
  7841                           ;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c: 549:     int i
      +                          , l, p, w;;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c: 552:
      +                               cp = s;
  7842  058A  0879               	movf	stoa@s+1,w
  7843  058B  00AD               	movwf	stoa@cp+1
  7844  058C  0878               	movf	stoa@s,w
  7845  058D  00AC               	movwf	stoa@cp
  7846                           
  7847                           ;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c: 553:     if (!
      +                          cp) {
  7848  058E  082C               	movf	stoa@cp,w
  7849  058F  042D               	iorwf	stoa@cp+1,w
  7850  0590  1D03               	btfss	3,2
  7851  0591  2D96               	goto	i1l2964
  7852                           
  7853                           ;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c: 554:         c
      +                          p = nuls;
  7854  0592  3020               	movlw	low stoa@nuls
  7855  0593  00AC               	movwf	stoa@cp
  7856  0594  3000               	movlw	high stoa@nuls
  7857  0595  00AD               	movwf	stoa@cp+1
  7858  0596                     i1l2964:	
  7859                           ;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c: 555:     }
  7860                           
  7861                           
  7862                           ;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c: 558:     l = s
      +                          trlen(cp);
  7863  0596  082D               	movf	stoa@cp+1,w
  7864  0597  00F1               	movwf	strlen@s+1
  7865  0598  082C               	movf	stoa@cp,w
  7866  0599  00F0               	movwf	strlen@s
  7867  059A  3189  211B  3185   	fcall	_strlen
  7868  059D  0871               	movf	?_strlen+1,w
  7869  059E  0020               	movlb	0	; select bank0
  7870  059F  00B1               	movwf	stoa@l+1
  7871  05A0  0870               	movf	?_strlen,w
  7872  05A1  00B0               	movwf	stoa@l
  7873                           
  7874                           ;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c: 559:     p = p
      +                          rec;
  7875  05A2  0021               	movlb	1	; select bank1
  7876  05A3  0863               	movf	(_prec+1)^(0+128),w
  7877  05A4  0020               	movlb	0	; select bank0
  7878  05A5  00AF               	movwf	stoa@p+1
  7879  05A6  0021               	movlb	1	; select bank1
  7880  05A7  0862               	movf	_prec^(0+128),w
  7881  05A8  0020               	movlb	0	; select bank0
  7882  05A9  00AE               	movwf	stoa@p
  7883                           
  7884                           ;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c: 560:     l = (
      +                          !(p < 0) && (p < l)) ? p : l;
  7885  05AA  1BAF               	btfsc	stoa@p+1,7
  7886  05AB  2DBD               	goto	i1l741
  7887  05AC  082F               	movf	stoa@p+1,w
  7888  05AD  3A80               	xorlw	128
  7889  05AE  00FA               	movwf	??_stoa
  7890  05AF  0831               	movf	stoa@l+1,w
  7891  05B0  3A80               	xorlw	128
  7892  05B1  027A               	subwf	??_stoa,w
  7893  05B2  1D03               	skipz
  7894  05B3  2DB6               	goto	u279_25
  7895  05B4  0830               	movf	stoa@l,w
  7896  05B5  022E               	subwf	stoa@p,w
  7897  05B6                     u279_25:	
  7898  05B6  1803               	btfsc	3,0
  7899  05B7  2DBD               	goto	i1l741
  7900  05B8  0020               	movlb	0	; select bank0
  7901  05B9  082F               	movf	stoa@p+1,w
  7902  05BA  00B1               	movwf	stoa@l+1
  7903  05BB  082E               	movf	stoa@p,w
  7904  05BC  00B0               	movwf	stoa@l
  7905  05BD                     i1l741:	
  7906                           
  7907                           ;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c: 561:     p = l
      +                          ;
  7908  05BD  0020               	movlb	0	; select bank0
  7909  05BE  0831               	movf	stoa@l+1,w
  7910  05BF  00AF               	movwf	stoa@p+1
  7911  05C0  0830               	movf	stoa@l,w
  7912  05C1  00AE               	movwf	stoa@p
  7913                           
  7914                           ;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c: 562:     w = w
      +                          idth;
  7915  05C2  0021               	movlb	1	; select bank1
  7916  05C3  0861               	movf	(_width+1)^(0+128),w
  7917  05C4  0020               	movlb	0	; select bank0
  7918  05C5  00AA               	movwf	stoa@w+1
  7919  05C6  0021               	movlb	1	; select bank1
  7920  05C7  0860               	movf	_width^(0+128),w
  7921  05C8  0020               	movlb	0	; select bank0
  7922  05C9  00A9               	movwf	stoa@w
  7923                           
  7924                           ;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c: 565:     if (!
      +                          (flags & (1 << 0))) {
  7925  05CA  0021               	movlb	1	; select bank1
  7926  05CB  1C64               	btfss	_flags^(0+128),0
  7927  05CC  2DDF               	goto	i1l2982
  7928  05CD  2DEC               	goto	i1l2984
  7929  05CE                     i1l2978:	
  7930                           ;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c: 566:         w
      +                          hile (l < w) {
  7931                           
  7932                           
  7933                           ;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c: 567:          
      +                             fputc(' ', fp);
  7934  05CE  3020               	movlw	32
  7935  05CF  00F0               	movwf	fputc@c
  7936  05D0  3000               	movlw	0
  7937  05D1  00F1               	movwf	fputc@c+1
  7938  05D2  0020               	movlb	0	; select bank0
  7939  05D3  082B               	movf	stoa@fp,w
  7940  05D4  00FA               	movwf	??_stoa
  7941  05D5  087A               	movf	??_stoa,w
  7942  05D6  00F2               	movwf	fputc@fp
  7943  05D7  318B  23E1  3185   	fcall	_fputc
  7944                           
  7945                           ;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c: 568:          
      +                             ++l;
  7946  05DA  3001               	movlw	1
  7947  05DB  0020               	movlb	0	; select bank0
  7948  05DC  07B0               	addwf	stoa@l,f
  7949  05DD  3000               	movlw	0
  7950  05DE  3DB1               	addwfc	stoa@l+1,f
  7951  05DF                     i1l2982:	
  7952                           ;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c: 569:         }
  7953                           
  7954                           
  7955                           ;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c: 566:         w
      +                          hile (l < w) {
  7956  05DF  0020               	movlb	0	; select bank0
  7957  05E0  0831               	movf	stoa@l+1,w
  7958  05E1  3A80               	xorlw	128
  7959  05E2  00FA               	movwf	??_stoa
  7960  05E3  082A               	movf	stoa@w+1,w
  7961  05E4  3A80               	xorlw	128
  7962  05E5  027A               	subwf	??_stoa,w
  7963  05E6  1D03               	skipz
  7964  05E7  2DEA               	goto	u281_25
  7965  05E8  0829               	movf	stoa@w,w
  7966  05E9  0230               	subwf	stoa@l,w
  7967  05EA                     u281_25:	
  7968  05EA  1C03               	skipc
  7969  05EB  2DCE               	goto	i1l2978
  7970  05EC                     i1l2984:	
  7971                           ;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c: 570:     }
  7972                           
  7973                           
  7974                           ;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c: 573:     i = 0
      +                          ;
  7975  05EC  0020               	movlb	0	; select bank0
  7976  05ED  01A7               	clrf	stoa@i
  7977  05EE  01A8               	clrf	stoa@i+1
  7978  05EF                     i1l2992:	
  7979                           ;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c: 578:     }
  7980                           
  7981                           ;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c: 574:     while
      +                           (i < p) {
  7982                           
  7983                           
  7984                           ;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c: 574:     while
      +                           (i < p) {
  7985  05EF  0828               	movf	stoa@i+1,w
  7986  05F0  3A80               	xorlw	128
  7987  05F1  00FA               	movwf	??_stoa
  7988  05F2  082F               	movf	stoa@p+1,w
  7989  05F3  3A80               	xorlw	128
  7990  05F4  027A               	subwf	??_stoa,w
  7991  05F5  1D03               	skipz
  7992  05F6  2DF9               	goto	u282_25
  7993  05F7  082E               	movf	stoa@p,w
  7994  05F8  0227               	subwf	stoa@i,w
  7995  05F9                     u282_25:	
  7996  05F9  1803               	btfsc	3,0
  7997  05FA  2E18               	goto	i1l750
  7998                           
  7999                           ;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c: 575:         f
      +                          putc(*cp, fp);
  8000  05FB  0020               	movlb	0	; select bank0
  8001  05FC  082C               	movf	stoa@cp,w
  8002  05FD  0084               	movwf	4
  8003  05FE  082D               	movf	stoa@cp+1,w
  8004  05FF  0085               	movwf	5
  8005  0600  0800               	movf	0,w	;code access
  8006  0601  00FA               	movwf	??_stoa
  8007  0602  01FB               	clrf	??_stoa+1
  8008  0603  087A               	movf	??_stoa,w
  8009  0604  00F0               	movwf	fputc@c
  8010  0605  087B               	movf	??_stoa+1,w
  8011  0606  00F1               	movwf	fputc@c+1
  8012  0607  082B               	movf	stoa@fp,w
  8013  0608  00FC               	movwf	??_stoa+2
  8014  0609  087C               	movf	??_stoa+2,w
  8015  060A  00F2               	movwf	fputc@fp
  8016  060B  318B  23E1  3185   	fcall	_fputc
  8017                           
  8018                           ;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c: 576:         +
      +                          +cp;
  8019  060E  3001               	movlw	1
  8020  060F  0020               	movlb	0	; select bank0
  8021  0610  07AC               	addwf	stoa@cp,f
  8022  0611  3000               	movlw	0
  8023  0612  3DAD               	addwfc	stoa@cp+1,f
  8024                           
  8025                           ;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c: 577:         +
      +                          +i;
  8026  0613  3001               	movlw	1
  8027  0614  07A7               	addwf	stoa@i,f
  8028  0615  3000               	movlw	0
  8029  0616  3DA8               	addwfc	stoa@i+1,f
  8030  0617  2DEF               	goto	i1l2992
  8031  0618                     i1l750:	
  8032                           
  8033                           ;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c: 581:     if (f
      +                          lags & (1 << 0)) {
  8034  0618  0021               	movlb	1	; select bank1
  8035  0619  1864               	btfsc	_flags^(0+128),0
  8036  061A  2E2D               	goto	i1l3000
  8037  061B  2E3A               	goto	i1l3002
  8038  061C                     i1l2996:	
  8039                           ;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c: 582:         w
      +                          hile (l < w) {
  8040                           
  8041                           
  8042                           ;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c: 583:          
      +                             fputc(' ', fp);
  8043  061C  3020               	movlw	32
  8044  061D  00F0               	movwf	fputc@c
  8045  061E  3000               	movlw	0
  8046  061F  00F1               	movwf	fputc@c+1
  8047  0620  0020               	movlb	0	; select bank0
  8048  0621  082B               	movf	stoa@fp,w
  8049  0622  00FA               	movwf	??_stoa
  8050  0623  087A               	movf	??_stoa,w
  8051  0624  00F2               	movwf	fputc@fp
  8052  0625  318B  23E1  3185   	fcall	_fputc
  8053                           
  8054                           ;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c: 584:          
      +                             ++l;
  8055  0628  3001               	movlw	1
  8056  0629  0020               	movlb	0	; select bank0
  8057  062A  07B0               	addwf	stoa@l,f
  8058  062B  3000               	movlw	0
  8059  062C  3DB1               	addwfc	stoa@l+1,f
  8060  062D                     i1l3000:	
  8061                           ;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c: 585:         }
  8062                           
  8063                           
  8064                           ;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c: 582:         w
      +                          hile (l < w) {
  8065  062D  0020               	movlb	0	; select bank0
  8066  062E  0831               	movf	stoa@l+1,w
  8067  062F  3A80               	xorlw	128
  8068  0630  00FA               	movwf	??_stoa
  8069  0631  082A               	movf	stoa@w+1,w
  8070  0632  3A80               	xorlw	128
  8071  0633  027A               	subwf	??_stoa,w
  8072  0634  1D03               	skipz
  8073  0635  2E38               	goto	u284_25
  8074  0636  0829               	movf	stoa@w,w
  8075  0637  0230               	subwf	stoa@l,w
  8076  0638                     u284_25:	
  8077  0638  1C03               	skipc
  8078  0639  2E1C               	goto	i1l2996
  8079  063A                     i1l3002:	
  8080                           ;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c: 586:     }
  8081                           
  8082                           
  8083                           ;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c: 588:     retur
      +                          n l;
  8084  063A  0020               	movlb	0	; select bank0
  8085  063B  0831               	movf	stoa@l+1,w
  8086  063C  00F9               	movwf	?_stoa+1
  8087  063D  0830               	movf	stoa@l,w
  8088  063E  00F8               	movwf	?_stoa
  8089  063F  0008               	return
  8090  0640                     __end_of_stoa:	
  8091                           
  8092                           	psect	text34
  8093  0279                     __ptext34:	
  8094 ;; *************** function _dtoa *****************
  8095 ;; Defined at:
  8096 ;;		line 274 in file "F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c"
  8097 ;; Parameters:    Size  Location     Type
  8098 ;;  fp              1    wreg     PTR struct _IO_FILE
  8099 ;;		 -> sprintf@f(5), 
  8100 ;;  d               4   12[BANK0 ] long 
  8101 ;; Auto vars:     Size  Location     Type
  8102 ;;  fp              1   20[BANK0 ] PTR struct _IO_FILE
  8103 ;;		 -> sprintf@f(5), 
  8104 ;;  n               4   27[BANK0 ] long 
  8105 ;;  i               2   31[BANK0 ] int 
  8106 ;;  s               2   25[BANK0 ] int 
  8107 ;;  w               2   23[BANK0 ] int 
  8108 ;;  p               2   21[BANK0 ] int 
  8109 ;; Return value:  Size  Location     Type
  8110 ;;                  2   12[BANK0 ] int 
  8111 ;; Registers used:
  8112 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8113 ;; Tracked objects:
  8114 ;;		On entry : 0/0
  8115 ;;		On exit  : 0/0
  8116 ;;		Unchanged: 0/0
  8117 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8118 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8119 ;;      Locals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8120 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8121 ;;      Totals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8122 ;;Total ram usage:       21 bytes
  8123 ;; Hardware stack levels used:    1
  8124 ;; Hardware stack levels required when called:    4
  8125 ;; This function calls:
  8126 ;;		___aldiv
  8127 ;;		___almod
  8128 ;;		_abs
  8129 ;;		_pad
  8130 ;; This function is called by:
  8131 ;;		_vfpfcnvrt
  8132 ;; This function uses a non-reentrant model
  8133 ;;
  8134                           
  8135                           
  8136                           ;psect for function _dtoa
  8137  0279                     _dtoa:	
  8138                           
  8139                           ;incstack = 0
  8140                           ; Regs used in _dtoa: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8141                           ;dtoa@fp stored from wreg
  8142  0279  0020               	movlb	0	; select bank0
  8143  027A  00B4               	movwf	dtoa@fp
  8144                           
  8145                           ;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c: 274: static in
      +                          t dtoa(FILE *fp, long long d);F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\co
      +                          mmon\doprnt.c: 275: {;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\dop
      +                          rnt.c: 276:     int i, p, s, w;;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\
      +                          common\doprnt.c: 277:     long long n;;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sourc
      +                          es\c99\common\doprnt.c: 280:     n = d;
  8146  027B  082F               	movf	dtoa@d+3,w
  8147  027C  00BE               	movwf	dtoa@n+3
  8148  027D  082E               	movf	dtoa@d+2,w
  8149  027E  00BD               	movwf	dtoa@n+2
  8150  027F  082D               	movf	dtoa@d+1,w
  8151  0280  00BC               	movwf	dtoa@n+1
  8152  0281  082C               	movf	dtoa@d,w
  8153  0282  00BB               	movwf	dtoa@n
  8154                           
  8155                           ;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c: 281:     s = n
      +                           < 0 ? 1 : 0;
  8156  0283  1FBE               	btfss	dtoa@n+3,7
  8157  0284  2A87               	goto	u261_20
  8158  0285  3001               	movlw	1
  8159  0286  2A88               	goto	u262_20
  8160  0287                     u261_20:	
  8161  0287  3000               	movlw	0
  8162  0288                     u262_20:	
  8163  0288  00B0               	movwf	??_dtoa
  8164  0289  01B1               	clrf	??_dtoa+1
  8165  028A  0830               	movf	??_dtoa,w
  8166  028B  00B9               	movwf	dtoa@s
  8167  028C  0831               	movf	??_dtoa+1,w
  8168  028D  00BA               	movwf	dtoa@s+1
  8169                           
  8170                           ;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c: 282:     if (s
      +                          ) {
  8171  028E  0839               	movf	dtoa@s,w
  8172  028F  043A               	iorwf	dtoa@s+1,w
  8173  0290  1903               	btfsc	3,2
  8174  0291  2A9D               	goto	i1l709
  8175                           
  8176                           ;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c: 283:         n
      +                           = -n;
  8177  0292  09BB               	comf	dtoa@n,f
  8178  0293  09BC               	comf	dtoa@n+1,f
  8179  0294  09BD               	comf	dtoa@n+2,f
  8180  0295  09BE               	comf	dtoa@n+3,f
  8181  0296  0ABB               	incf	dtoa@n,f
  8182  0297  1903               	skipnz
  8183  0298  0ABC               	incf	dtoa@n+1,f
  8184  0299  1903               	skipnz
  8185  029A  0ABD               	incf	dtoa@n+2,f
  8186  029B  1903               	skipnz
  8187  029C  0ABE               	incf	dtoa@n+3,f
  8188  029D                     i1l709:	
  8189                           ;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c: 284:     }
  8190                           
  8191                           
  8192                           ;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c: 287:     if (!
      +                          (prec < 0)) {
  8193  029D  0021               	movlb	1	; select bank1
  8194  029E  1BE3               	btfsc	(_prec+1)^(0+128),7
  8195  029F  2AA4               	goto	i1l710
  8196                           
  8197                           ;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c: 288:         f
      +                          lags &= ~(1 << 1);
  8198  02A0  30FD               	movlw	253
  8199  02A1  05E4               	andwf	_flags^(0+128),f
  8200  02A2  30FF               	movlw	255
  8201  02A3  05E5               	andwf	(_flags+1)^(0+128),f
  8202  02A4                     i1l710:	
  8203                           ;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c: 289:     }
  8204                           
  8205                           
  8206                           ;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c: 290:     p = (
      +                          0 < prec) ? prec : 1;
  8207  02A4  0863               	movf	(_prec+1)^(0+128),w
  8208  02A5  3A80               	xorlw	128
  8209  02A6  0020               	movlb	0	; select bank0
  8210  02A7  00B0               	movwf	??_dtoa
  8211  02A8  3080               	movlw	128
  8212  02A9  0230               	subwf	??_dtoa,w
  8213  02AA  1D03               	skipz
  8214  02AB  2AAF               	goto	u265_25
  8215  02AC  3001               	movlw	1
  8216  02AD  0021               	movlb	1	; select bank1
  8217  02AE  0262               	subwf	_prec^(0+128),w
  8218  02AF                     u265_25:	
  8219  02AF  1803               	skipnc
  8220  02B0  2AB7               	goto	i1l2908
  8221  02B1  3001               	movlw	1
  8222  02B2  0020               	movlb	0	; select bank0
  8223  02B3  00B5               	movwf	dtoa@p
  8224  02B4  3000               	movlw	0
  8225  02B5  00B6               	movwf	dtoa@p+1
  8226  02B6  2ABF               	goto	i1l714
  8227  02B7                     i1l2908:	
  8228  02B7  0021               	movlb	1	; select bank1
  8229  02B8  0863               	movf	(_prec+1)^(0+128),w
  8230  02B9  0020               	movlb	0	; select bank0
  8231  02BA  00B6               	movwf	dtoa@p+1
  8232  02BB  0021               	movlb	1	; select bank1
  8233  02BC  0862               	movf	_prec^(0+128),w
  8234  02BD  0020               	movlb	0	; select bank0
  8235  02BE  00B5               	movwf	dtoa@p
  8236  02BF                     i1l714:	
  8237                           
  8238                           ;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c: 291:     w = w
      +                          idth;
  8239  02BF  0021               	movlb	1	; select bank1
  8240  02C0  0861               	movf	(_width+1)^(0+128),w
  8241  02C1  0020               	movlb	0	; select bank0
  8242  02C2  00B8               	movwf	dtoa@w+1
  8243  02C3  0021               	movlb	1	; select bank1
  8244  02C4  0860               	movf	_width^(0+128),w
  8245  02C5  0020               	movlb	0	; select bank0
  8246  02C6  00B7               	movwf	dtoa@w
  8247                           
  8248                           ;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c: 292:     if (s
      +                           || (flags & (1 << 2))) {
  8249  02C7  0839               	movf	dtoa@s,w
  8250  02C8  043A               	iorwf	dtoa@s+1,w
  8251  02C9  1D03               	btfss	3,2
  8252  02CA  2ACE               	goto	i1l2914
  8253  02CB  0021               	movlb	1	; select bank1
  8254  02CC  1D64               	btfss	_flags^(0+128),2
  8255  02CD  2AD3               	goto	i1l715
  8256  02CE                     i1l2914:	
  8257                           
  8258                           ;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c: 293:         -
      +                          -w;
  8259  02CE  30FF               	movlw	255
  8260  02CF  0020               	movlb	0	; select bank0
  8261  02D0  07B7               	addwf	dtoa@w,f
  8262  02D1  30FF               	movlw	255
  8263  02D2  3DB8               	addwfc	dtoa@w+1,f
  8264  02D3                     i1l715:	
  8265                           ;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c: 294:     }
  8266                           
  8267                           
  8268                           ;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c: 297:     i = s
      +                          izeof(dbuf) - 1;
  8269  02D3  301F               	movlw	31
  8270  02D4  0020               	movlb	0	; select bank0
  8271  02D5  00BF               	movwf	dtoa@i
  8272  02D6  3000               	movlw	0
  8273  02D7  00C0               	movwf	dtoa@i+1
  8274                           
  8275                           ;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c: 298:     dbuf[
      +                          i] = '\0';
  8276  02D8  083F               	movf	dtoa@i,w
  8277  02D9  3EA0               	addlw	(low (_dbuf| (0+256)))& (0+255)
  8278  02DA  0086               	movwf	6
  8279  02DB  3001               	movlw	1	; select bank3/4
  8280  02DC  0087               	movwf	7
  8281  02DD  0181               	clrf	1
  8282                           
  8283                           ;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c: 299:     while
      +                           (!(i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  8284  02DE  2B2D               	goto	i1l2928
  8285  02DF                     i1l2918:	
  8286                           
  8287                           ;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c: 300:         -
      +                          -i;
  8288  02DF  30FF               	movlw	255
  8289  02E0  0020               	movlb	0	; select bank0
  8290  02E1  07BF               	addwf	dtoa@i,f
  8291  02E2  30FF               	movlw	255
  8292  02E3  3DC0               	addwfc	dtoa@i+1,f
  8293                           
  8294                           ;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c: 301:         d
      +                          buf[i] = '0' + abs(n % 10);
  8295  02E4  3000               	movlw	0
  8296  02E5  00F3               	movwf	___almod@divisor+3
  8297  02E6  3000               	movlw	0
  8298  02E7  00F2               	movwf	___almod@divisor+2
  8299  02E8  3000               	movlw	0
  8300  02E9  00F1               	movwf	___almod@divisor+1
  8301  02EA  300A               	movlw	10
  8302  02EB  00F0               	movwf	___almod@divisor
  8303  02EC  083E               	movf	dtoa@n+3,w
  8304  02ED  00F7               	movwf	___almod@dividend+3
  8305  02EE  083D               	movf	dtoa@n+2,w
  8306  02EF  00F6               	movwf	___almod@dividend+2
  8307  02F0  083C               	movf	dtoa@n+1,w
  8308  02F1  00F5               	movwf	___almod@dividend+1
  8309  02F2  083B               	movf	dtoa@n,w
  8310  02F3  00F4               	movwf	___almod@dividend
  8311  02F4  3187  2791  3182   	fcall	___almod
  8312  02F7  0871               	movf	?___almod+1,w
  8313  02F8  00FC               	movwf	abs@a+1
  8314  02F9  0870               	movf	?___almod,w
  8315  02FA  00FB               	movwf	abs@a
  8316  02FB  3188  20CB  3182   	fcall	_abs
  8317  02FE  087B               	movf	?_abs,w
  8318  02FF  3E30               	addlw	48
  8319  0300  0020               	movlb	0	; select bank0
  8320  0301  00B0               	movwf	??_dtoa
  8321  0302  083F               	movf	dtoa@i,w
  8322  0303  3EA0               	addlw	(low (_dbuf| (0+256)))& (0+255)
  8323  0304  0086               	movwf	6
  8324  0305  3001               	movlw	1	; select bank3/4
  8325  0306  0087               	movwf	7
  8326  0307  0830               	movf	??_dtoa,w
  8327  0308  0081               	movwf	1
  8328                           
  8329                           ;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c: 302:         -
      +                          -p;
  8330  0309  30FF               	movlw	255
  8331  030A  07B5               	addwf	dtoa@p,f
  8332  030B  30FF               	movlw	255
  8333  030C  3DB6               	addwfc	dtoa@p+1,f
  8334                           
  8335                           ;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c: 303:         -
      +                          -w;
  8336  030D  30FF               	movlw	255
  8337  030E  07B7               	addwf	dtoa@w,f
  8338  030F  30FF               	movlw	255
  8339  0310  3DB8               	addwfc	dtoa@w+1,f
  8340                           
  8341                           ;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c: 304:         n
      +                           = n / 10;
  8342  0311  3000               	movlw	0
  8343  0312  00F3               	movwf	___aldiv@divisor+3
  8344  0313  3000               	movlw	0
  8345  0314  00F2               	movwf	___aldiv@divisor+2
  8346  0315  3000               	movlw	0
  8347  0316  00F1               	movwf	___aldiv@divisor+1
  8348  0317  300A               	movlw	10
  8349  0318  00F0               	movwf	___aldiv@divisor
  8350  0319  083E               	movf	dtoa@n+3,w
  8351  031A  00F7               	movwf	___aldiv@dividend+3
  8352  031B  083D               	movf	dtoa@n+2,w
  8353  031C  00F6               	movwf	___aldiv@dividend+2
  8354  031D  083C               	movf	dtoa@n+1,w
  8355  031E  00F5               	movwf	___aldiv@dividend+1
  8356  031F  083B               	movf	dtoa@n,w
  8357  0320  00F4               	movwf	___aldiv@dividend
  8358  0321  318D  25DF  3182   	fcall	___aldiv
  8359  0324  0873               	movf	?___aldiv+3,w
  8360  0325  0020               	movlb	0	; select bank0
  8361  0326  00BE               	movwf	dtoa@n+3
  8362  0327  0872               	movf	?___aldiv+2,w
  8363  0328  00BD               	movwf	dtoa@n+2
  8364  0329  0871               	movf	?___aldiv+1,w
  8365  032A  00BC               	movwf	dtoa@n+1
  8366  032B  0870               	movf	?___aldiv,w
  8367  032C  00BB               	movwf	dtoa@n
  8368  032D                     i1l2928:	
  8369                           ;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c: 305:     }
  8370                           
  8371                           
  8372                           ;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c: 299:     while
      +                           (!(i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  8373  032D  0840               	movf	dtoa@i+1,w
  8374  032E  3A80               	xorlw	128
  8375  032F  00B0               	movwf	??_dtoa
  8376  0330  3080               	movlw	128
  8377  0331  0230               	subwf	??_dtoa,w
  8378  0332  1D03               	skipz
  8379  0333  2B36               	goto	u268_25
  8380  0334  3001               	movlw	1
  8381  0335  023F               	subwf	dtoa@i,w
  8382  0336                     u268_25:	
  8383  0336  1C03               	skipc
  8384  0337  2B59               	goto	i1l2938
  8385  0338  0020               	movlb	0	; select bank0
  8386  0339  083E               	movf	dtoa@n+3,w
  8387  033A  043D               	iorwf	dtoa@n+2,w
  8388  033B  043C               	iorwf	dtoa@n+1,w
  8389  033C  043B               	iorwf	dtoa@n,w
  8390  033D  1D03               	skipz
  8391  033E  2ADF               	goto	i1l2918
  8392  033F  0836               	movf	dtoa@p+1,w
  8393  0340  3A80               	xorlw	128
  8394  0341  00B0               	movwf	??_dtoa
  8395  0342  3080               	movlw	128
  8396  0343  0230               	subwf	??_dtoa,w
  8397  0344  1D03               	skipz
  8398  0345  2B48               	goto	u270_25
  8399  0346  3001               	movlw	1
  8400  0347  0235               	subwf	dtoa@p,w
  8401  0348                     u270_25:	
  8402  0348  1803               	skipnc
  8403  0349  2ADF               	goto	i1l2918
  8404  034A  0020               	movlb	0	; select bank0
  8405  034B  0838               	movf	dtoa@w+1,w
  8406  034C  3A80               	xorlw	128
  8407  034D  00B0               	movwf	??_dtoa
  8408  034E  3080               	movlw	128
  8409  034F  0230               	subwf	??_dtoa,w
  8410  0350  1D03               	skipz
  8411  0351  2B54               	goto	u271_25
  8412  0352  3001               	movlw	1
  8413  0353  0237               	subwf	dtoa@w,w
  8414  0354                     u271_25:	
  8415  0354  1C03               	skipc
  8416  0355  2B59               	goto	i1l2938
  8417  0356  0021               	movlb	1	; select bank1
  8418  0357  18E4               	btfsc	_flags^(0+128),1
  8419  0358  2ADF               	goto	i1l2918
  8420  0359                     i1l2938:	
  8421                           
  8422                           ;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c: 308:     if (s
      +                           || (flags & (1 << 2))) {
  8423  0359  0020               	movlb	0	; select bank0
  8424  035A  0839               	movf	dtoa@s,w
  8425  035B  043A               	iorwf	dtoa@s+1,w
  8426  035C  1D03               	btfss	3,2
  8427  035D  2B61               	goto	i1l2942
  8428  035E  0021               	movlb	1	; select bank1
  8429  035F  1D64               	btfss	_flags^(0+128),2
  8430  0360  2B79               	goto	i1l2952
  8431  0361                     i1l2942:	
  8432                           
  8433                           ;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c: 309:         -
      +                          -i;
  8434  0361  30FF               	movlw	255
  8435  0362  0020               	movlb	0	; select bank0
  8436  0363  07BF               	addwf	dtoa@i,f
  8437  0364  30FF               	movlw	255
  8438  0365  3DC0               	addwfc	dtoa@i+1,f
  8439                           
  8440                           ;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c: 310:         d
      +                          buf[i] = s ? '-' : '+';
  8441  0366  0839               	movf	dtoa@s,w
  8442  0367  043A               	iorwf	dtoa@s+1,w
  8443  0368  1D03               	btfss	3,2
  8444  0369  2B6C               	goto	i1l2948
  8445  036A  302B               	movlw	43
  8446  036B  2B6D               	goto	L2
  8447  036C                     i1l2948:	
  8448  036C  302D               	movlw	45
  8449  036D                     L2:	
  8450  036D  00B2               	movwf	_dtoa$1762
  8451  036E  3000               	movlw	0
  8452  036F  00B3               	movwf	_dtoa$1762+1
  8453  0370  0832               	movf	_dtoa$1762,w
  8454  0371  00B0               	movwf	??_dtoa
  8455  0372  083F               	movf	dtoa@i,w
  8456  0373  3EA0               	addlw	(low (_dbuf| (0+256)))& (0+255)
  8457  0374  0086               	movwf	6
  8458  0375  3001               	movlw	1	; select bank3/4
  8459  0376  0087               	movwf	7
  8460  0377  0830               	movf	??_dtoa,w
  8461  0378  0081               	movwf	1
  8462  0379                     i1l2952:	
  8463                           ;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c: 311:     }
  8464                           
  8465                           
  8466                           ;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c: 314:     retur
      +                          n pad(fp, &dbuf[i], w);
  8467  0379  0020               	movlb	0	; select bank0
  8468  037A  083F               	movf	dtoa@i,w
  8469  037B  3EA0               	addlw	(low (_dbuf| (0+256)))& (0+255)
  8470  037C  00B0               	movwf	??_dtoa
  8471  037D  0830               	movf	??_dtoa,w
  8472  037E  00A4               	movwf	pad@buf
  8473  037F  0838               	movf	dtoa@w+1,w
  8474  0380  00A6               	movwf	pad@p+1
  8475  0381  0837               	movf	dtoa@w,w
  8476  0382  00A5               	movwf	pad@p
  8477  0383  0834               	movf	dtoa@fp,w
  8478  0384  318D  250F         	fcall	_pad
  8479  0386  0020               	movlb	0	; select bank0
  8480  0387  0825               	movf	?_pad+1,w
  8481  0388  00AD               	movwf	?_dtoa+1
  8482  0389  0824               	movf	?_pad,w
  8483  038A  00AC               	movwf	?_dtoa
  8484  038B  0008               	return
  8485  038C                     __end_of_dtoa:	
  8486                           
  8487                           	psect	text35
  8488  0D0F                     __ptext35:	
  8489 ;; *************** function _pad *****************
  8490 ;; Defined at:
  8491 ;;		line 72 in file "F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c"
  8492 ;; Parameters:    Size  Location     Type
  8493 ;;  fp              1    wreg     PTR struct _IO_FILE
  8494 ;;		 -> sprintf@f(5), 
  8495 ;;  buf             1    4[BANK0 ] PTR unsigned char 
  8496 ;;		 -> dbuf(32), 
  8497 ;;  p               2    5[BANK0 ] int 
  8498 ;; Auto vars:     Size  Location     Type
  8499 ;;  fp              1   11[BANK0 ] PTR struct _IO_FILE
  8500 ;;		 -> sprintf@f(5), 
  8501 ;;  w               2    9[BANK0 ] int 
  8502 ;;  i               2    7[BANK0 ] int 
  8503 ;; Return value:  Size  Location     Type
  8504 ;;                  2    4[BANK0 ] int 
  8505 ;; Registers used:
  8506 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8507 ;; Tracked objects:
  8508 ;;		On entry : 0/0
  8509 ;;		On exit  : 0/0
  8510 ;;		Unchanged: 0/0
  8511 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8512 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8513 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8514 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8515 ;;      Totals:         1       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8516 ;;Total ram usage:        9 bytes
  8517 ;; Hardware stack levels used:    1
  8518 ;; Hardware stack levels required when called:    3
  8519 ;; This function calls:
  8520 ;;		_fputc
  8521 ;;		_fputs
  8522 ;;		_strlen
  8523 ;; This function is called by:
  8524 ;;		_dtoa
  8525 ;; This function uses a non-reentrant model
  8526 ;;
  8527                           
  8528                           
  8529                           ;psect for function _pad
  8530  0D0F                     _pad:	
  8531                           
  8532                           ;incstack = 0
  8533                           ; Regs used in _pad: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8534                           ;pad@fp stored from wreg
  8535  0D0F  0020               	movlb	0	; select bank0
  8536  0D10  00AB               	movwf	pad@fp
  8537                           
  8538                           ;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c: 72: static int
      +                           pad(FILE *fp, char *buf, int p);F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99
      +                          \common\doprnt.c: 73: {;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\d
      +                          oprnt.c: 74:     int i, w;;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\commo
      +                          n\doprnt.c: 77:     if (flags & (1 << 0)) {
  8539  0D11  0021               	movlb	1	; select bank1
  8540  0D12  1C64               	btfss	_flags^(0+128),0
  8541  0D13  2D1D               	goto	i1l2762
  8542                           
  8543                           ;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c: 78:         fp
      +                          uts((const char *)buf, fp);
  8544  0D14  0020               	movlb	0	; select bank0
  8545  0D15  082B               	movf	pad@fp,w
  8546  0D16  00FC               	movwf	??_pad
  8547  0D17  087C               	movf	??_pad,w
  8548  0D18  00F8               	movwf	fputs@fp
  8549  0D19  0824               	movf	pad@buf,w
  8550  0D1A  3189  21BF  318D   	fcall	_fputs
  8551  0D1D                     i1l2762:	
  8552                           ;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c: 79:     }
  8553                           
  8554                           
  8555                           ;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c: 82:     w = (p
      +                           < 0) ? 0 : p;
  8556  0D1D  0020               	movlb	0	; select bank0
  8557  0D1E  1BA6               	btfsc	pad@p+1,7
  8558  0D1F  2D25               	goto	i1l2766
  8559  0D20  0826               	movf	pad@p+1,w
  8560  0D21  00AA               	movwf	pad@w+1
  8561  0D22  0825               	movf	pad@p,w
  8562  0D23  00A9               	movwf	pad@w
  8563  0D24  2D27               	goto	i1l701
  8564  0D25                     i1l2766:	
  8565  0D25  01A9               	clrf	pad@w
  8566  0D26  01AA               	clrf	pad@w+1
  8567  0D27                     i1l701:	
  8568                           
  8569                           ;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c: 83:     i = 0;
  8570  0D27  01A7               	clrf	pad@i
  8571  0D28  01A8               	clrf	pad@i+1
  8572  0D29                     i1l2772:	
  8573                           ;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c: 87:     }
  8574                           
  8575                           ;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c: 84:     while 
      +                          (i < w) {
  8576                           
  8577                           
  8578                           ;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c: 84:     while 
      +                          (i < w) {
  8579  0D29  0828               	movf	pad@i+1,w
  8580  0D2A  3A80               	xorlw	128
  8581  0D2B  00FC               	movwf	??_pad
  8582  0D2C  082A               	movf	pad@w+1,w
  8583  0D2D  3A80               	xorlw	128
  8584  0D2E  027C               	subwf	??_pad,w
  8585  0D2F  1D03               	skipz
  8586  0D30  2D33               	goto	u233_25
  8587  0D31  0829               	movf	pad@w,w
  8588  0D32  0227               	subwf	pad@i,w
  8589  0D33                     u233_25:	
  8590  0D33  1803               	btfsc	3,0
  8591  0D34  2D47               	goto	i1l704
  8592                           
  8593                           ;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c: 85:         fp
      +                          utc(' ', fp);
  8594  0D35  3020               	movlw	32
  8595  0D36  00F0               	movwf	fputc@c
  8596  0D37  3000               	movlw	0
  8597  0D38  00F1               	movwf	fputc@c+1
  8598  0D39  0020               	movlb	0	; select bank0
  8599  0D3A  082B               	movf	pad@fp,w
  8600  0D3B  00FC               	movwf	??_pad
  8601  0D3C  087C               	movf	??_pad,w
  8602  0D3D  00F2               	movwf	fputc@fp
  8603  0D3E  318B  23E1  318D   	fcall	_fputc
  8604                           
  8605                           ;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c: 86:         ++
      +                          i;
  8606  0D41  3001               	movlw	1
  8607  0D42  0020               	movlb	0	; select bank0
  8608  0D43  07A7               	addwf	pad@i,f
  8609  0D44  3000               	movlw	0
  8610  0D45  3DA8               	addwfc	pad@i+1,f
  8611  0D46  2D29               	goto	i1l2772
  8612  0D47                     i1l704:	
  8613                           
  8614                           ;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c: 90:     if (!(
      +                          flags & (1 << 0))) {
  8615  0D47  0021               	movlb	1	; select bank1
  8616  0D48  1864               	btfsc	_flags^(0+128),0
  8617  0D49  2D53               	goto	i1l2776
  8618                           
  8619                           ;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c: 91:         fp
      +                          uts((const char *)buf, fp);
  8620  0D4A  0020               	movlb	0	; select bank0
  8621  0D4B  082B               	movf	pad@fp,w
  8622  0D4C  00FC               	movwf	??_pad
  8623  0D4D  087C               	movf	??_pad,w
  8624  0D4E  00F8               	movwf	fputs@fp
  8625  0D4F  0824               	movf	pad@buf,w
  8626  0D50  3189  21BF  318D   	fcall	_fputs
  8627  0D53                     i1l2776:	
  8628                           ;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c: 92:     }
  8629                           
  8630                           
  8631                           ;F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\doprnt.c: 94:     return
      +                           strlen(buf) + w;
  8632  0D53  0020               	movlb	0	; select bank0
  8633  0D54  0824               	movf	pad@buf,w
  8634  0D55  00F0               	movwf	strlen@s
  8635  0D56  3001               	movlw	1
  8636  0D57  00F1               	movwf	strlen@s+1
  8637  0D58  3189  211B         	fcall	_strlen
  8638  0D5A  0020               	movlb	0	; select bank0
  8639  0D5B  0829               	movf	pad@w,w
  8640  0D5C  0770               	addwf	?_strlen,w
  8641  0D5D  00A4               	movwf	?_pad
  8642  0D5E  082A               	movf	pad@w+1,w
  8643  0D5F  3D71               	addwfc	?_strlen+1,w
  8644  0D60  00A5               	movwf	?_pad+1
  8645  0D61  0008               	return
  8646  0D62                     __end_of_pad:	
  8647                           
  8648                           	psect	text36
  8649  091B                     __ptext36:	
  8650 ;; *************** function _strlen *****************
  8651 ;; Defined at:
  8652 ;;		line 12 in file "F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\strlen.c"
  8653 ;; Parameters:    Size  Location     Type
  8654 ;;  s               2    0[COMMON] PTR const unsigned char 
  8655 ;;		 -> ?_sprintf(2), stoa@nuls(7), dbuf(32), ISR@send(64), 
  8656 ;;		 -> STR_3(4), STR_2(7), 
  8657 ;; Auto vars:     Size  Location     Type
  8658 ;;  a               2    4[COMMON] PTR const unsigned char 
  8659 ;;		 -> ?_sprintf(2), stoa@nuls(7), dbuf(32), ISR@send(64), 
  8660 ;;		 -> STR_3(4), STR_2(7), 
  8661 ;; Return value:  Size  Location     Type
  8662 ;;                  2    0[COMMON] unsigned int 
  8663 ;; Registers used:
  8664 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  8665 ;; Tracked objects:
  8666 ;;		On entry : 0/0
  8667 ;;		On exit  : 0/0
  8668 ;;		Unchanged: 0/0
  8669 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8670 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8671 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8672 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8673 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8674 ;;Total ram usage:        6 bytes
  8675 ;; Hardware stack levels used:    1
  8676 ;; This function calls:
  8677 ;;		Nothing
  8678 ;; This function is called by:
  8679 ;;		_ISR
  8680 ;;		_pad
  8681 ;;		_stoa
  8682 ;; This function uses a non-reentrant model
  8683 ;;
  8684                           
  8685                           
  8686                           ;psect for function _strlen
  8687  091B                     _strlen:	
  8688                           
  8689                           ;incstack = 0
  8690                           ; Regs used in _strlen: [wreg-fsr0h+status,2+status,0]
  8691  091B  0871               	movf	strlen@s+1,w
  8692  091C  00F5               	movwf	strlen@a+1
  8693  091D  0870               	movf	strlen@s,w
  8694  091E  00F4               	movwf	strlen@a
  8695  091F                     i1l2736:	
  8696  091F  0870               	movf	strlen@s,w
  8697  0920  0084               	movwf	4
  8698  0921  0871               	movf	strlen@s+1,w
  8699  0922  0085               	movwf	5
  8700  0923  0012               	moviw fsr0++
  8701  0924  1903               	btfsc	3,2
  8702  0925  292B               	goto	i1l2738
  8703  0926  3001               	movlw	1
  8704  0927  07F0               	addwf	strlen@s,f
  8705  0928  3000               	movlw	0
  8706  0929  3DF1               	addwfc	strlen@s+1,f
  8707  092A  291F               	goto	i1l2736
  8708  092B                     i1l2738:	
  8709  092B  0974               	comf	strlen@a,w
  8710  092C  00F2               	movwf	??_strlen
  8711  092D  0975               	comf	strlen@a+1,w
  8712  092E  00F3               	movwf	??_strlen+1
  8713  092F  0AF2               	incf	??_strlen,f
  8714  0930  1903               	skipnz
  8715  0931  0AF3               	incf	??_strlen+1,f
  8716  0932  0870               	movf	strlen@s,w
  8717  0933  0772               	addwf	??_strlen,w
  8718  0934  00F0               	movwf	?_strlen
  8719  0935  0871               	movf	strlen@s+1,w
  8720  0936  3D73               	addwfc	??_strlen+1,w
  8721  0937  00F1               	movwf	?_strlen+1
  8722  0938  0008               	return
  8723  0939                     __end_of_strlen:	
  8724                           
  8725                           	psect	text37
  8726  09BF                     __ptext37:	
  8727 ;; *************** function _fputs *****************
  8728 ;; Defined at:
  8729 ;;		line 8 in file "F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\nf_fputs.c"
  8730 ;; Parameters:    Size  Location     Type
  8731 ;;  s               1    wreg     PTR const unsigned char 
  8732 ;;		 -> dbuf(32), 
  8733 ;;  fp              1    8[COMMON] PTR struct _IO_FILE
  8734 ;;		 -> sprintf@f(5), 
  8735 ;; Auto vars:     Size  Location     Type
  8736 ;;  s               1    3[BANK0 ] PTR const unsigned char 
  8737 ;;		 -> dbuf(32), 
  8738 ;;  i               2    1[BANK0 ] int 
  8739 ;;  c               1    0[BANK0 ] unsigned char 
  8740 ;; Return value:  Size  Location     Type
  8741 ;;                  2    8[COMMON] int 
  8742 ;; Registers used:
  8743 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8744 ;; Tracked objects:
  8745 ;;		On entry : 0/0
  8746 ;;		On exit  : 0/0
  8747 ;;		Unchanged: 0/0
  8748 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8749 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8750 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8751 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8752 ;;      Totals:         4       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8753 ;;Total ram usage:        8 bytes
  8754 ;; Hardware stack levels used:    1
  8755 ;; Hardware stack levels required when called:    2
  8756 ;; This function calls:
  8757 ;;		_fputc
  8758 ;; This function is called by:
  8759 ;;		_pad
  8760 ;; This function uses a non-reentrant model
  8761 ;;
  8762                           
  8763                           
  8764                           ;psect for function _fputs
  8765  09BF                     _fputs:	
  8766                           
  8767                           ;incstack = 0
  8768                           ; Regs used in _fputs: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8769                           ;fputs@s stored from wreg
  8770  09BF  0020               	movlb	0	; select bank0
  8771  09C0  00A3               	movwf	fputs@s
  8772  09C1  01A1               	clrf	fputs@i
  8773  09C2  01A2               	clrf	fputs@i+1
  8774  09C3                     i1l2748:	
  8775  09C3  0821               	movf	fputs@i,w
  8776  09C4  0723               	addwf	fputs@s,w
  8777  09C5  00F9               	movwf	??_fputs
  8778  09C6  0879               	movf	??_fputs,w
  8779  09C7  0086               	movwf	6
  8780  09C8  3001               	movlw	1	; select bank2/3
  8781  09C9  0087               	movwf	7
  8782  09CA  0801               	movf	1,w
  8783  09CB  00FA               	movwf	??_fputs+1
  8784  09CC  087A               	movf	??_fputs+1,w
  8785  09CD  00A0               	movwf	fputs@c
  8786  09CE  0820               	movf	fputs@c,w
  8787  09CF  1903               	btfsc	3,2
  8788  09D0  0008               	return
  8789  09D1  0820               	movf	fputs@c,w
  8790  09D2  00F9               	movwf	??_fputs
  8791  09D3  01FA               	clrf	??_fputs+1
  8792  09D4  0879               	movf	??_fputs,w
  8793  09D5  00F0               	movwf	fputc@c
  8794  09D6  087A               	movf	??_fputs+1,w
  8795  09D7  00F1               	movwf	fputc@c+1
  8796  09D8  0878               	movf	fputs@fp,w
  8797  09D9  00FB               	movwf	??_fputs+2
  8798  09DA  087B               	movf	??_fputs+2,w
  8799  09DB  00F2               	movwf	fputc@fp
  8800  09DC  318B  23E1  3189   	fcall	_fputc
  8801  09DF  3001               	movlw	1
  8802  09E0  0020               	movlb	0	; select bank0
  8803  09E1  07A1               	addwf	fputs@i,f
  8804  09E2  3000               	movlw	0
  8805  09E3  3DA2               	addwfc	fputs@i+1,f
  8806  09E4  29C3               	goto	i1l2748
  8807  09E5                     __end_of_fputs:	
  8808                           ;	Return value of _fputs is never used
  8809                           
  8810                           
  8811                           	psect	text38
  8812  0BE1                     __ptext38:	
  8813 ;; *************** function _fputc *****************
  8814 ;; Defined at:
  8815 ;;		line 8 in file "F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\nf_fputc.c"
  8816 ;; Parameters:    Size  Location     Type
  8817 ;;  c               2    0[COMMON] int 
  8818 ;;  fp              1    2[COMMON] PTR struct _IO_FILE
  8819 ;;		 -> sprintf@f(5), 
  8820 ;; Auto vars:     Size  Location     Type
  8821 ;;		None
  8822 ;; Return value:  Size  Location     Type
  8823 ;;                  2    0[COMMON] int 
  8824 ;; Registers used:
  8825 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8826 ;; Tracked objects:
  8827 ;;		On entry : 0/0
  8828 ;;		On exit  : 0/0
  8829 ;;		Unchanged: 0/0
  8830 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8831 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8832 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8833 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8834 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8835 ;;Total ram usage:        8 bytes
  8836 ;; Hardware stack levels used:    1
  8837 ;; Hardware stack levels required when called:    1
  8838 ;; This function calls:
  8839 ;;		_putch
  8840 ;; This function is called by:
  8841 ;;		_pad
  8842 ;;		_stoa
  8843 ;;		_vfpfcnvrt
  8844 ;;		_fputs
  8845 ;; This function uses a non-reentrant model
  8846 ;;
  8847                           
  8848                           
  8849                           ;psect for function _fputc
  8850  0BE1                     _fputc:	
  8851                           
  8852                           ;incstack = 0
  8853                           ; Regs used in _fputc: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8854  0BE1  0872               	movf	fputc@fp,w
  8855  0BE2  1D03               	btfss	3,2
  8856  0BE3  0872               	movf	fputc@fp,w
  8857  0BE4  1D03               	btfss	3,2
  8858  0BE5  2BEA               	goto	i1l2722
  8859  0BE6  0870               	movf	fputc@c,w
  8860  0BE7  3197  277B         	fcall	_putch
  8861  0BE9  0008               	return
  8862  0BEA                     i1l2722:	
  8863  0BEA  0872               	movf	fputc@fp,w
  8864  0BEB  3E03               	addlw	3
  8865  0BEC  0086               	movwf	6
  8866  0BED  0187               	clrf	7
  8867  0BEE  0016               	moviw fsr1++
  8868  0BEF  0401               	iorwf	1,w
  8869  0BF0  1903               	btfsc	3,2
  8870  0BF1  2C0D               	goto	i1l2726
  8871  0BF2  0872               	movf	fputc@fp,w
  8872  0BF3  3E03               	addlw	3
  8873  0BF4  0086               	movwf	6
  8874  0BF5  0187               	clrf	7
  8875  0BF6  3F40               	moviw [0]fsr1
  8876  0BF7  00F3               	movwf	??_fputc
  8877  0BF8  3F41               	moviw [1]fsr1
  8878  0BF9  00F4               	movwf	??_fputc+1
  8879  0BFA  0A72               	incf	fputc@fp,w
  8880  0BFB  0086               	movwf	6
  8881  0BFC  0187               	clrf	7
  8882  0BFD  3F40               	moviw [0]fsr1
  8883  0BFE  00F5               	movwf	??_fputc+2
  8884  0BFF  3F41               	moviw [1]fsr1
  8885  0C00  00F6               	movwf	??_fputc+3
  8886  0C01  0876               	movf	??_fputc+3,w
  8887  0C02  3A80               	xorlw	128
  8888  0C03  00F7               	movwf	??_fputc+4
  8889  0C04  0874               	movf	??_fputc+1,w
  8890  0C05  3A80               	xorlw	128
  8891  0C06  0277               	subwf	??_fputc+4,w
  8892  0C07  1D03               	skipz
  8893  0C08  2C0B               	goto	u226_25
  8894  0C09  0873               	movf	??_fputc,w
  8895  0C0A  0275               	subwf	??_fputc+2,w
  8896  0C0B                     u226_25:	
  8897  0C0B  1803               	skipnc
  8898  0C0C  0008               	return
  8899  0C0D                     i1l2726:	
  8900  0C0D  0870               	movf	fputc@c,w
  8901  0C0E  00F3               	movwf	??_fputc
  8902  0C0F  0872               	movf	fputc@fp,w
  8903  0C10  0086               	movwf	6
  8904  0C11  0187               	clrf	7
  8905  0C12  0A72               	incf	fputc@fp,w
  8906  0C13  0084               	movwf	4
  8907  0C14  0185               	clrf	5
  8908  0C15  0800               	movf	0,w
  8909  0C16  0701               	addwf	1,w
  8910  0C17  00F4               	movwf	??_fputc+1
  8911  0C18  0874               	movf	??_fputc+1,w
  8912  0C19  0086               	movwf	6
  8913  0C1A  0187               	clrf	7
  8914  0C1B  0873               	movf	??_fputc,w
  8915  0C1C  0081               	movwf	1
  8916  0C1D  0A72               	incf	fputc@fp,w
  8917  0C1E  0086               	movwf	6
  8918  0C1F  0187               	clrf	7
  8919  0C20  3001               	movlw	1
  8920  0C21  0781               	addwf	1,f
  8921  0C22  3141               	addfsr 1,1
  8922  0C23  1803               	skipnc
  8923  0C24  0A81               	incf	1,f
  8924  0C25  0008               	return
  8925  0C26                     __end_of_fputc:	
  8926                           ;	Return value of _fputc is never used
  8927                           
  8928                           
  8929                           	psect	text39
  8930  177B                     __ptext39:	
  8931 ;; *************** function _putch *****************
  8932 ;; Defined at:
  8933 ;;		line 7 in file "F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\putch.c"
  8934 ;; Parameters:    Size  Location     Type
  8935 ;;  c               1    wreg     unsigned char 
  8936 ;; Auto vars:     Size  Location     Type
  8937 ;;  c               1    0[COMMON] unsigned char 
  8938 ;; Return value:  Size  Location     Type
  8939 ;;                  1    wreg      void 
  8940 ;; Registers used:
  8941 ;;		wreg
  8942 ;; Tracked objects:
  8943 ;;		On entry : 0/0
  8944 ;;		On exit  : 0/0
  8945 ;;		Unchanged: 0/0
  8946 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8947 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8948 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8949 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8950 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8951 ;;Total ram usage:        0 bytes
  8952 ;; Hardware stack levels used:    1
  8953 ;; This function calls:
  8954 ;;		Nothing
  8955 ;; This function is called by:
  8956 ;;		_fputc
  8957 ;; This function uses a non-reentrant model
  8958 ;;
  8959                           
  8960                           
  8961                           ;psect for function _putch
  8962  177B                     _putch:	
  8963                           
  8964                           ;incstack = 0
  8965                           ; Regs used in _putch: [wreg]
  8966  177B  0008               	return
  8967  177C                     __end_of_putch:	
  8968                           
  8969                           	psect	text40
  8970  08CB                     __ptext40:	
  8971 ;; *************** function _abs *****************
  8972 ;; Defined at:
  8973 ;;		line 1 in file "F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\abs.c"
  8974 ;; Parameters:    Size  Location     Type
  8975 ;;  a               2   11[COMMON] int 
  8976 ;; Auto vars:     Size  Location     Type
  8977 ;;		None
  8978 ;; Return value:  Size  Location     Type
  8979 ;;                  2   11[COMMON] int 
  8980 ;; Registers used:
  8981 ;;		wreg, status,2, status,0
  8982 ;; Tracked objects:
  8983 ;;		On entry : 0/0
  8984 ;;		On exit  : 0/0
  8985 ;;		Unchanged: 0/0
  8986 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8987 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8988 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8989 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8990 ;;      Totals:         2       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8991 ;;Total ram usage:        4 bytes
  8992 ;; Hardware stack levels used:    1
  8993 ;; This function calls:
  8994 ;;		Nothing
  8995 ;; This function is called by:
  8996 ;;		_dtoa
  8997 ;; This function uses a non-reentrant model
  8998 ;;
  8999                           
  9000                           
  9001                           ;psect for function _abs
  9002  08CB                     _abs:	
  9003                           
  9004                           ;incstack = 0
  9005                           ; Regs used in _abs: [wreg+status,2+status,0]
  9006  08CB  087C               	movf	abs@a+1,w
  9007  08CC  3A80               	xorlw	128
  9008  08CD  0020               	movlb	0	; select bank0
  9009  08CE  00A0               	movwf	??_abs
  9010  08CF  3080               	movlw	128
  9011  08D0  0220               	subwf	??_abs,w
  9012  08D1  1D03               	skipz
  9013  08D2  28D5               	goto	u235_25
  9014  08D3  3001               	movlw	1
  9015  08D4  027B               	subwf	abs@a,w
  9016  08D5                     u235_25:	
  9017  08D5  1803               	skipnc
  9018  08D6  0008               	return
  9019  08D7  097B               	comf	abs@a,w
  9020  08D8  0020               	movlb	0	; select bank0
  9021  08D9  00A0               	movwf	??_abs
  9022  08DA  097C               	comf	abs@a+1,w
  9023  08DB  00A1               	movwf	??_abs+1
  9024  08DC  0AA0               	incf	??_abs,f
  9025  08DD  1903               	skipnz
  9026  08DE  0AA1               	incf	??_abs+1,f
  9027  08DF  0820               	movf	??_abs,w
  9028  08E0  00FB               	movwf	?_abs
  9029  08E1  0821               	movf	??_abs+1,w
  9030  08E2  00FC               	movwf	?_abs+1
  9031  08E3  0008               	return
  9032  08E4                     __end_of_abs:	
  9033                           
  9034                           	psect	text41
  9035  0791                     __ptext41:	
  9036 ;; *************** function ___almod *****************
  9037 ;; Defined at:
  9038 ;;		line 5 in file "F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\almod.c"
  9039 ;; Parameters:    Size  Location     Type
  9040 ;;  divisor         4    0[COMMON] long 
  9041 ;;  dividend        4    4[COMMON] long 
  9042 ;; Auto vars:     Size  Location     Type
  9043 ;;  sign            1   10[COMMON] unsigned char 
  9044 ;;  counter         1    9[COMMON] unsigned char 
  9045 ;; Return value:  Size  Location     Type
  9046 ;;                  4    0[COMMON] long 
  9047 ;; Registers used:
  9048 ;;		wreg, status,2, status,0
  9049 ;; Tracked objects:
  9050 ;;		On entry : 0/0
  9051 ;;		On exit  : 0/0
  9052 ;;		Unchanged: 0/0
  9053 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9054 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9055 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9056 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9057 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9058 ;;Total ram usage:       11 bytes
  9059 ;; Hardware stack levels used:    1
  9060 ;; This function calls:
  9061 ;;		Nothing
  9062 ;; This function is called by:
  9063 ;;		_dtoa
  9064 ;; This function uses a non-reentrant model
  9065 ;;
  9066                           
  9067                           
  9068                           ;psect for function ___almod
  9069  0791                     ___almod:	
  9070                           
  9071                           ;incstack = 0
  9072                           ; Regs used in ___almod: [wreg+status,2+status,0]
  9073  0791  01FA               	clrf	___almod@sign
  9074  0792  1FF7               	btfss	___almod@dividend+3,7
  9075  0793  2FA1               	goto	i1l852
  9076  0794  09F4               	comf	___almod@dividend,f
  9077  0795  09F5               	comf	___almod@dividend+1,f
  9078  0796  09F6               	comf	___almod@dividend+2,f
  9079  0797  09F7               	comf	___almod@dividend+3,f
  9080  0798  0AF4               	incf	___almod@dividend,f
  9081  0799  1903               	skipnz
  9082  079A  0AF5               	incf	___almod@dividend+1,f
  9083  079B  1903               	skipnz
  9084  079C  0AF6               	incf	___almod@dividend+2,f
  9085  079D  1903               	skipnz
  9086  079E  0AF7               	incf	___almod@dividend+3,f
  9087  079F  01FA               	clrf	___almod@sign
  9088  07A0  0AFA               	incf	___almod@sign,f
  9089  07A1                     i1l852:	
  9090  07A1  1FF3               	btfss	___almod@divisor+3,7
  9091  07A2  2FAE               	goto	i1l2832
  9092  07A3  09F0               	comf	___almod@divisor,f
  9093  07A4  09F1               	comf	___almod@divisor+1,f
  9094  07A5  09F2               	comf	___almod@divisor+2,f
  9095  07A6  09F3               	comf	___almod@divisor+3,f
  9096  07A7  0AF0               	incf	___almod@divisor,f
  9097  07A8  1903               	skipnz
  9098  07A9  0AF1               	incf	___almod@divisor+1,f
  9099  07AA  1903               	skipnz
  9100  07AB  0AF2               	incf	___almod@divisor+2,f
  9101  07AC  1903               	skipnz
  9102  07AD  0AF3               	incf	___almod@divisor+3,f
  9103  07AE                     i1l2832:	
  9104  07AE  0873               	movf	___almod@divisor+3,w
  9105  07AF  0472               	iorwf	___almod@divisor+2,w
  9106  07B0  0471               	iorwf	___almod@divisor+1,w
  9107  07B1  0470               	iorwf	___almod@divisor,w
  9108  07B2  1903               	skipnz
  9109  07B3  2FE7               	goto	i1l2848
  9110  07B4  01F9               	clrf	___almod@counter
  9111  07B5  0AF9               	incf	___almod@counter,f
  9112  07B6                     i1l2838:	
  9113  07B6  1BF3               	btfsc	___almod@divisor+3,7
  9114  07B7  2FC4               	goto	i1l2840
  9115  07B8  3001               	movlw	1
  9116  07B9                     u249_25:	
  9117  07B9  35F0               	lslf	___almod@divisor,f
  9118  07BA  0DF1               	rlf	___almod@divisor+1,f
  9119  07BB  0DF2               	rlf	___almod@divisor+2,f
  9120  07BC  0DF3               	rlf	___almod@divisor+3,f
  9121  07BD  0B89               	decfsz	9,f
  9122  07BE  2FB9               	goto	u249_25
  9123  07BF  3001               	movlw	1
  9124  07C0  00F8               	movwf	??___almod
  9125  07C1  0878               	movf	??___almod,w
  9126  07C2  07F9               	addwf	___almod@counter,f
  9127  07C3  2FB6               	goto	i1l2838
  9128  07C4                     i1l2840:	
  9129  07C4  0873               	movf	___almod@divisor+3,w
  9130  07C5  0277               	subwf	___almod@dividend+3,w
  9131  07C6  1D03               	skipz
  9132  07C7  2FD2               	goto	u251_25
  9133  07C8  0872               	movf	___almod@divisor+2,w
  9134  07C9  0276               	subwf	___almod@dividend+2,w
  9135  07CA  1D03               	skipz
  9136  07CB  2FD2               	goto	u251_25
  9137  07CC  0871               	movf	___almod@divisor+1,w
  9138  07CD  0275               	subwf	___almod@dividend+1,w
  9139  07CE  1D03               	skipz
  9140  07CF  2FD2               	goto	u251_25
  9141  07D0  0870               	movf	___almod@divisor,w
  9142  07D1  0274               	subwf	___almod@dividend,w
  9143  07D2                     u251_25:	
  9144  07D2  1C03               	skipc
  9145  07D3  2FDC               	goto	i1l2844
  9146  07D4  0870               	movf	___almod@divisor,w
  9147  07D5  02F4               	subwf	___almod@dividend,f
  9148  07D6  0871               	movf	___almod@divisor+1,w
  9149  07D7  3BF5               	subwfb	___almod@dividend+1,f
  9150  07D8  0872               	movf	___almod@divisor+2,w
  9151  07D9  3BF6               	subwfb	___almod@dividend+2,f
  9152  07DA  0873               	movf	___almod@divisor+3,w
  9153  07DB  3BF7               	subwfb	___almod@dividend+3,f
  9154  07DC                     i1l2844:	
  9155  07DC  3001               	movlw	1
  9156  07DD                     u252_25:	
  9157  07DD  36F3               	lsrf	___almod@divisor+3,f
  9158  07DE  0CF2               	rrf	___almod@divisor+2,f
  9159  07DF  0CF1               	rrf	___almod@divisor+1,f
  9160  07E0  0CF0               	rrf	___almod@divisor,f
  9161  07E1  0B89               	decfsz	9,f
  9162  07E2  2FDD               	goto	u252_25
  9163  07E3  3001               	movlw	1
  9164  07E4  02F9               	subwf	___almod@counter,f
  9165  07E5  1D03               	btfss	3,2
  9166  07E6  2FC4               	goto	i1l2840
  9167  07E7                     i1l2848:	
  9168  07E7  087A               	movf	___almod@sign,w
  9169  07E8  1903               	btfsc	3,2
  9170  07E9  2FF5               	goto	i1l2852
  9171  07EA  09F4               	comf	___almod@dividend,f
  9172  07EB  09F5               	comf	___almod@dividend+1,f
  9173  07EC  09F6               	comf	___almod@dividend+2,f
  9174  07ED  09F7               	comf	___almod@dividend+3,f
  9175  07EE  0AF4               	incf	___almod@dividend,f
  9176  07EF  1903               	skipnz
  9177  07F0  0AF5               	incf	___almod@dividend+1,f
  9178  07F1  1903               	skipnz
  9179  07F2  0AF6               	incf	___almod@dividend+2,f
  9180  07F3  1903               	skipnz
  9181  07F4  0AF7               	incf	___almod@dividend+3,f
  9182  07F5                     i1l2852:	
  9183  07F5  0877               	movf	___almod@dividend+3,w
  9184  07F6  00F3               	movwf	?___almod+3
  9185  07F7  0876               	movf	___almod@dividend+2,w
  9186  07F8  00F2               	movwf	?___almod+2
  9187  07F9  0875               	movf	___almod@dividend+1,w
  9188  07FA  00F1               	movwf	?___almod+1
  9189  07FB  0874               	movf	___almod@dividend,w
  9190  07FC  00F0               	movwf	?___almod
  9191  07FD  0008               	return
  9192  07FE                     __end_of___almod:	
  9193                           
  9194                           	psect	text42
  9195  0DDF                     __ptext42:	
  9196 ;; *************** function ___aldiv *****************
  9197 ;; Defined at:
  9198 ;;		line 5 in file "F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\aldiv.c"
  9199 ;; Parameters:    Size  Location     Type
  9200 ;;  divisor         4    0[COMMON] long 
  9201 ;;  dividend        4    4[COMMON] long 
  9202 ;; Auto vars:     Size  Location     Type
  9203 ;;  quotient        4    2[BANK0 ] long 
  9204 ;;  sign            1    1[BANK0 ] unsigned char 
  9205 ;;  counter         1    0[BANK0 ] unsigned char 
  9206 ;; Return value:  Size  Location     Type
  9207 ;;                  4    0[COMMON] long 
  9208 ;; Registers used:
  9209 ;;		wreg, status,2, status,0
  9210 ;; Tracked objects:
  9211 ;;		On entry : 0/0
  9212 ;;		On exit  : 0/0
  9213 ;;		Unchanged: 0/0
  9214 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9215 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9216 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9217 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9218 ;;      Totals:         9       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9219 ;;Total ram usage:       15 bytes
  9220 ;; Hardware stack levels used:    1
  9221 ;; This function calls:
  9222 ;;		Nothing
  9223 ;; This function is called by:
  9224 ;;		_dtoa
  9225 ;; This function uses a non-reentrant model
  9226 ;;
  9227                           
  9228                           
  9229                           ;psect for function ___aldiv
  9230  0DDF                     ___aldiv:	
  9231                           
  9232                           ;incstack = 0
  9233                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  9234  0DDF  0020               	movlb	0	; select bank0
  9235  0DE0  01A1               	clrf	___aldiv@sign
  9236  0DE1  1FF3               	btfss	___aldiv@divisor+3,7
  9237  0DE2  2DF0               	goto	i1l839
  9238  0DE3  09F0               	comf	___aldiv@divisor,f
  9239  0DE4  09F1               	comf	___aldiv@divisor+1,f
  9240  0DE5  09F2               	comf	___aldiv@divisor+2,f
  9241  0DE6  09F3               	comf	___aldiv@divisor+3,f
  9242  0DE7  0AF0               	incf	___aldiv@divisor,f
  9243  0DE8  1903               	skipnz
  9244  0DE9  0AF1               	incf	___aldiv@divisor+1,f
  9245  0DEA  1903               	skipnz
  9246  0DEB  0AF2               	incf	___aldiv@divisor+2,f
  9247  0DEC  1903               	skipnz
  9248  0DED  0AF3               	incf	___aldiv@divisor+3,f
  9249  0DEE  01A1               	clrf	___aldiv@sign
  9250  0DEF  0AA1               	incf	___aldiv@sign,f
  9251  0DF0                     i1l839:	
  9252  0DF0  1FF7               	btfss	___aldiv@dividend+3,7
  9253  0DF1  2E01               	goto	i1l2794
  9254  0DF2  09F4               	comf	___aldiv@dividend,f
  9255  0DF3  09F5               	comf	___aldiv@dividend+1,f
  9256  0DF4  09F6               	comf	___aldiv@dividend+2,f
  9257  0DF5  09F7               	comf	___aldiv@dividend+3,f
  9258  0DF6  0AF4               	incf	___aldiv@dividend,f
  9259  0DF7  1903               	skipnz
  9260  0DF8  0AF5               	incf	___aldiv@dividend+1,f
  9261  0DF9  1903               	skipnz
  9262  0DFA  0AF6               	incf	___aldiv@dividend+2,f
  9263  0DFB  1903               	skipnz
  9264  0DFC  0AF7               	incf	___aldiv@dividend+3,f
  9265  0DFD  3001               	movlw	1
  9266  0DFE  00F8               	movwf	??___aldiv
  9267  0DFF  0878               	movf	??___aldiv,w
  9268  0E00  06A1               	xorwf	___aldiv@sign,f
  9269  0E01                     i1l2794:	
  9270  0E01  3000               	movlw	0
  9271  0E02  00A5               	movwf	___aldiv@quotient+3
  9272  0E03  3000               	movlw	0
  9273  0E04  00A4               	movwf	___aldiv@quotient+2
  9274  0E05  3000               	movlw	0
  9275  0E06  00A3               	movwf	___aldiv@quotient+1
  9276  0E07  3000               	movlw	0
  9277  0E08  00A2               	movwf	___aldiv@quotient
  9278  0E09  0873               	movf	___aldiv@divisor+3,w
  9279  0E0A  0472               	iorwf	___aldiv@divisor+2,w
  9280  0E0B  0471               	iorwf	___aldiv@divisor+1,w
  9281  0E0C  0470               	iorwf	___aldiv@divisor,w
  9282  0E0D  1903               	skipnz
  9283  0E0E  2E4A               	goto	i1l2816
  9284  0E0F  01A0               	clrf	___aldiv@counter
  9285  0E10  0AA0               	incf	___aldiv@counter,f
  9286  0E11                     i1l2802:	
  9287  0E11  1BF3               	btfsc	___aldiv@divisor+3,7
  9288  0E12  2E1F               	goto	i1l2804
  9289  0E13  3001               	movlw	1
  9290  0E14                     u239_25:	
  9291  0E14  35F0               	lslf	___aldiv@divisor,f
  9292  0E15  0DF1               	rlf	___aldiv@divisor+1,f
  9293  0E16  0DF2               	rlf	___aldiv@divisor+2,f
  9294  0E17  0DF3               	rlf	___aldiv@divisor+3,f
  9295  0E18  0B89               	decfsz	9,f
  9296  0E19  2E14               	goto	u239_25
  9297  0E1A  3001               	movlw	1
  9298  0E1B  00F8               	movwf	??___aldiv
  9299  0E1C  0878               	movf	??___aldiv,w
  9300  0E1D  07A0               	addwf	___aldiv@counter,f
  9301  0E1E  2E11               	goto	i1l2802
  9302  0E1F                     i1l2804:	
  9303  0E1F  3001               	movlw	1
  9304  0E20                     u241_25:	
  9305  0E20  35A2               	lslf	___aldiv@quotient,f
  9306  0E21  0DA3               	rlf	___aldiv@quotient+1,f
  9307  0E22  0DA4               	rlf	___aldiv@quotient+2,f
  9308  0E23  0DA5               	rlf	___aldiv@quotient+3,f
  9309  0E24  0B89               	decfsz	9,f
  9310  0E25  2E20               	goto	u241_25
  9311  0E26  0873               	movf	___aldiv@divisor+3,w
  9312  0E27  0277               	subwf	___aldiv@dividend+3,w
  9313  0E28  1D03               	skipz
  9314  0E29  2E34               	goto	u242_25
  9315  0E2A  0872               	movf	___aldiv@divisor+2,w
  9316  0E2B  0276               	subwf	___aldiv@dividend+2,w
  9317  0E2C  1D03               	skipz
  9318  0E2D  2E34               	goto	u242_25
  9319  0E2E  0871               	movf	___aldiv@divisor+1,w
  9320  0E2F  0275               	subwf	___aldiv@dividend+1,w
  9321  0E30  1D03               	skipz
  9322  0E31  2E34               	goto	u242_25
  9323  0E32  0870               	movf	___aldiv@divisor,w
  9324  0E33  0274               	subwf	___aldiv@dividend,w
  9325  0E34                     u242_25:	
  9326  0E34  1C03               	skipc
  9327  0E35  2E3F               	goto	i1l2812
  9328  0E36  0870               	movf	___aldiv@divisor,w
  9329  0E37  02F4               	subwf	___aldiv@dividend,f
  9330  0E38  0871               	movf	___aldiv@divisor+1,w
  9331  0E39  3BF5               	subwfb	___aldiv@dividend+1,f
  9332  0E3A  0872               	movf	___aldiv@divisor+2,w
  9333  0E3B  3BF6               	subwfb	___aldiv@dividend+2,f
  9334  0E3C  0873               	movf	___aldiv@divisor+3,w
  9335  0E3D  3BF7               	subwfb	___aldiv@dividend+3,f
  9336  0E3E  1422               	bsf	___aldiv@quotient,0
  9337  0E3F                     i1l2812:	
  9338  0E3F  3001               	movlw	1
  9339  0E40                     u243_25:	
  9340  0E40  36F3               	lsrf	___aldiv@divisor+3,f
  9341  0E41  0CF2               	rrf	___aldiv@divisor+2,f
  9342  0E42  0CF1               	rrf	___aldiv@divisor+1,f
  9343  0E43  0CF0               	rrf	___aldiv@divisor,f
  9344  0E44  0B89               	decfsz	9,f
  9345  0E45  2E40               	goto	u243_25
  9346  0E46  3001               	movlw	1
  9347  0E47  02A0               	subwf	___aldiv@counter,f
  9348  0E48  1D03               	btfss	3,2
  9349  0E49  2E1F               	goto	i1l2804
  9350  0E4A                     i1l2816:	
  9351  0E4A  0821               	movf	___aldiv@sign,w
  9352  0E4B  1903               	btfsc	3,2
  9353  0E4C  2E58               	goto	i1l2820
  9354  0E4D  09A2               	comf	___aldiv@quotient,f
  9355  0E4E  09A3               	comf	___aldiv@quotient+1,f
  9356  0E4F  09A4               	comf	___aldiv@quotient+2,f
  9357  0E50  09A5               	comf	___aldiv@quotient+3,f
  9358  0E51  0AA2               	incf	___aldiv@quotient,f
  9359  0E52  1903               	skipnz
  9360  0E53  0AA3               	incf	___aldiv@quotient+1,f
  9361  0E54  1903               	skipnz
  9362  0E55  0AA4               	incf	___aldiv@quotient+2,f
  9363  0E56  1903               	skipnz
  9364  0E57  0AA5               	incf	___aldiv@quotient+3,f
  9365  0E58                     i1l2820:	
  9366  0E58  0825               	movf	___aldiv@quotient+3,w
  9367  0E59  00F3               	movwf	?___aldiv+3
  9368  0E5A  0824               	movf	___aldiv@quotient+2,w
  9369  0E5B  00F2               	movwf	?___aldiv+2
  9370  0E5C  0823               	movf	___aldiv@quotient+1,w
  9371  0E5D  00F1               	movwf	?___aldiv+1
  9372  0E5E  0822               	movf	___aldiv@quotient,w
  9373  0E5F  00F0               	movwf	?___aldiv
  9374  0E60  0008               	return
  9375  0E61                     __end_of___aldiv:	
  9376                           
  9377                           	psect	text43
  9378  089D                     __ptext43:	
  9379 ;; *************** function _key_isPressed *****************
  9380 ;; Defined at:
  9381 ;;		line 158 in file "hardware.c"
  9382 ;; Parameters:    Size  Location     Type
  9383 ;;		None
  9384 ;; Auto vars:     Size  Location     Type
  9385 ;;  pdata           1    1[COMMON] PTR volatile struct .
  9386 ;;		 -> g_data(39), 
  9387 ;; Return value:  Size  Location     Type
  9388 ;;                  1    wreg      enum E5222
  9389 ;; Registers used:
  9390 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9391 ;; Tracked objects:
  9392 ;;		On entry : 0/0
  9393 ;;		On exit  : 0/0
  9394 ;;		Unchanged: 0/0
  9395 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9396 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9397 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9398 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9399 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9400 ;;Total ram usage:        2 bytes
  9401 ;; Hardware stack levels used:    1
  9402 ;; Hardware stack levels required when called:    1
  9403 ;; This function calls:
  9404 ;;		i1_data_getdata
  9405 ;; This function is called by:
  9406 ;;		_ISR
  9407 ;; This function uses a non-reentrant model
  9408 ;;
  9409                           
  9410                           
  9411                           ;psect for function _key_isPressed
  9412  089D                     _key_isPressed:	
  9413                           
  9414                           ;hardware.c: 160:     G_DATA *pdata = data_getdata();
  9415                           
  9416                           ;incstack = 0
  9417                           ; Regs used in _key_isPressed: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9418  089D  3180  2002  3188   	fcall	i1_data_getdata
  9419  08A0  00F0               	movwf	??_key_isPressed
  9420  08A1  0870               	movf	??_key_isPressed,w
  9421  08A2  00F1               	movwf	key_isPressed@pdata
  9422                           
  9423                           ;hardware.c: 161:     if(pdata->g_flg_switch == TRUE){
  9424  08A3  0871               	movf	key_isPressed@pdata,w
  9425  08A4  0086               	movwf	6
  9426  08A5  3002               	movlw	2	; select bank4/5
  9427  08A6  0087               	movwf	7
  9428  08A7  0301               	decf	1,w
  9429  08A8  1D03               	btfss	3,2
  9430  08A9  28B1               	goto	i1l3724
  9431                           
  9432                           ;hardware.c: 162:         pdata->g_flg_switch = FALSE;
  9433  08AA  0871               	movf	key_isPressed@pdata,w
  9434  08AB  0086               	movwf	6
  9435  08AC  3002               	movlw	2	; select bank4/5
  9436  08AD  0087               	movwf	7
  9437  08AE  0181               	clrf	1
  9438                           
  9439                           ;hardware.c: 163:         return TRUE;
  9440  08AF  3001               	movlw	1
  9441                           
  9442                           ;hardware.c: 164:     }else{
  9443  08B0  0008               	return
  9444  08B1                     i1l3724:	
  9445                           
  9446                           ;hardware.c: 165:         return FALSE;
  9447  08B1  3000               	movlw	0
  9448  08B2  0008               	return
  9449  08B3                     __end_of_key_isPressed:	
  9450                           ;hardware.c: 166:     }
  9451                           
  9452                           
  9453                           	psect	text44
  9454  0D62                     __ptext44:	
  9455 ;; *************** function _capture_handdle *****************
  9456 ;; Defined at:
  9457 ;;		line 65 in file "hardware.c"
  9458 ;; Parameters:    Size  Location     Type
  9459 ;;		None
  9460 ;; Auto vars:     Size  Location     Type
  9461 ;;  cnt_tmp         2   12[COMMON] unsigned short 
  9462 ;;  cnt_int         2   10[COMMON] unsigned short 
  9463 ;;  pdata           1    9[COMMON] PTR volatile struct .
  9464 ;;		 -> g_data(39), 
  9465 ;; Return value:  Size  Location     Type
  9466 ;;                  2  102[None  ] int 
  9467 ;; Registers used:
  9468 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9469 ;; Tracked objects:
  9470 ;;		On entry : 0/0
  9471 ;;		On exit  : 0/0
  9472 ;;		Unchanged: 0/0
  9473 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9474 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9475 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9476 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9477 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9478 ;;Total ram usage:       13 bytes
  9479 ;; Hardware stack levels used:    1
  9480 ;; Hardware stack levels required when called:    1
  9481 ;; This function calls:
  9482 ;;		_capture_IsNegEdge
  9483 ;;		i1_capture_setEdge
  9484 ;;		i1_data_getdata
  9485 ;;		i1_led_SetState
  9486 ;; This function is called by:
  9487 ;;		_ISR
  9488 ;; This function uses a non-reentrant model
  9489 ;;
  9490                           
  9491                           
  9492                           ;psect for function _capture_handdle
  9493  0D62                     _capture_handdle:	
  9494                           
  9495                           ;hardware.c: 67:     G_DATA *pdata = data_getdata();
  9496                           
  9497                           ;incstack = 0
  9498                           ; Regs used in _capture_handdle: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9499  0D62  3180  2002  318D   	fcall	i1_data_getdata
  9500  0D65  00F1               	movwf	??_capture_handdle
  9501  0D66  0871               	movf	??_capture_handdle,w
  9502  0D67  00F9               	movwf	capture_handdle@pdata
  9503                           
  9504                           ;hardware.c: 68:     static u16 last_cnt = 0;;hardware.c: 69:     u16 cnt_tmp = 0;
  9505  0D68  01FC               	clrf	capture_handdle@cnt_tmp
  9506  0D69  01FD               	clrf	capture_handdle@cnt_tmp+1
  9507                           
  9508                           ;hardware.c: 70:     u16 cnt_int = 0;
  9509  0D6A  01FA               	clrf	capture_handdle@cnt_int
  9510  0D6B  01FB               	clrf	capture_handdle@cnt_int+1
  9511                           
  9512                           ;hardware.c: 72:     cnt_tmp = CCPR2H;
  9513  0D6C  0025               	movlb	5	; select bank5
  9514  0D6D  0819               	movf	25,w	;volatile
  9515  0D6E  00F1               	movwf	??_capture_handdle
  9516  0D6F  01F2               	clrf	??_capture_handdle+1
  9517  0D70  0871               	movf	??_capture_handdle,w
  9518  0D71  00FC               	movwf	capture_handdle@cnt_tmp
  9519  0D72  0872               	movf	??_capture_handdle+1,w
  9520  0D73  00FD               	movwf	capture_handdle@cnt_tmp+1
  9521                           
  9522                           ;hardware.c: 73:     cnt_tmp = (cnt_tmp << 8) + CCPR2L;
  9523  0D74  0818               	movf	24,w	;volatile
  9524  0D75  00F1               	movwf	??_capture_handdle
  9525  0D76  01F2               	clrf	??_capture_handdle+1
  9526  0D77  087C               	movf	capture_handdle@cnt_tmp,w
  9527  0D78  00F4               	movwf	??_capture_handdle+3
  9528  0D79  01F3               	clrf	??_capture_handdle+2
  9529  0D7A  0871               	movf	??_capture_handdle,w
  9530  0D7B  0773               	addwf	??_capture_handdle+2,w
  9531  0D7C  00F5               	movwf	??_capture_handdle+4
  9532  0D7D  0872               	movf	??_capture_handdle+1,w
  9533  0D7E  3D74               	addwfc	??_capture_handdle+3,w
  9534  0D7F  00F6               	movwf	??_capture_handdle+5
  9535  0D80  0875               	movf	??_capture_handdle+4,w
  9536  0D81  00FC               	movwf	capture_handdle@cnt_tmp
  9537  0D82  0876               	movf	??_capture_handdle+5,w
  9538  0D83  00FD               	movwf	capture_handdle@cnt_tmp+1
  9539                           
  9540                           ;hardware.c: 75:     if(cnt_tmp > last_cnt)
  9541  0D84  087D               	movf	capture_handdle@cnt_tmp+1,w
  9542  0D85  0021               	movlb	1	; select bank1
  9543  0D86  0267               	subwf	(capture_handdle@last_cnt+1)^(0+128),w
  9544  0D87  1D03               	skipz
  9545  0D88  2D8B               	goto	u392_25
  9546  0D89  087C               	movf	capture_handdle@cnt_tmp,w
  9547  0D8A  0266               	subwf	capture_handdle@last_cnt^(0+128),w
  9548  0D8B                     u392_25:	
  9549  0D8B  1803               	skipnc
  9550  0D8C  2D9B               	goto	i1l3824
  9551                           
  9552                           ;hardware.c: 76:     {;hardware.c: 77:         cnt_int = cnt_tmp - last_cnt;
  9553  0D8D  0966               	comf	capture_handdle@last_cnt^(0+128),w
  9554  0D8E  00F1               	movwf	??_capture_handdle
  9555  0D8F  0967               	comf	(capture_handdle@last_cnt+1)^(0+128),w
  9556  0D90  00F2               	movwf	??_capture_handdle+1
  9557  0D91  0AF1               	incf	??_capture_handdle,f
  9558  0D92  1903               	skipnz
  9559  0D93  0AF2               	incf	??_capture_handdle+1,f
  9560  0D94  087C               	movf	capture_handdle@cnt_tmp,w
  9561  0D95  0771               	addwf	??_capture_handdle,w
  9562  0D96  00FA               	movwf	capture_handdle@cnt_int
  9563  0D97  087D               	movf	capture_handdle@cnt_tmp+1,w
  9564  0D98  3D72               	addwfc	??_capture_handdle+1,w
  9565  0D99  00FB               	movwf	capture_handdle@cnt_int+1
  9566                           
  9567                           ;hardware.c: 78:     }
  9568  0D9A  2DAC               	goto	i1l3828
  9569  0D9B                     i1l3824:	
  9570                           ;hardware.c: 79:     else
  9571                           
  9572                           
  9573                           ;hardware.c: 80:     {;hardware.c: 81:         cnt_int = 0xffff - last_cnt;
  9574  0D9B  0966               	comf	capture_handdle@last_cnt^(0+128),w
  9575  0D9C  00F1               	movwf	??_capture_handdle
  9576  0D9D  0967               	comf	(capture_handdle@last_cnt+1)^(0+128),w
  9577  0D9E  00F2               	movwf	??_capture_handdle+1
  9578  0D9F  0AF1               	incf	??_capture_handdle,f
  9579  0DA0  1903               	skipnz
  9580  0DA1  0AF2               	incf	??_capture_handdle+1,f
  9581  0DA2  0871               	movf	??_capture_handdle,w
  9582  0DA3  3EFF               	addlw	255
  9583  0DA4  00FA               	movwf	capture_handdle@cnt_int
  9584  0DA5  30FF               	movlw	255
  9585  0DA6  3D72               	addwfc	??_capture_handdle+1,w
  9586  0DA7  00FB               	movwf	capture_handdle@cnt_int+1
  9587                           
  9588                           ;hardware.c: 82:         cnt_int += cnt_tmp;
  9589  0DA8  087C               	movf	capture_handdle@cnt_tmp,w
  9590  0DA9  07FA               	addwf	capture_handdle@cnt_int,f
  9591  0DAA  087D               	movf	capture_handdle@cnt_tmp+1,w
  9592  0DAB  3DFB               	addwfc	capture_handdle@cnt_int+1,f
  9593  0DAC                     i1l3828:	
  9594                           ;hardware.c: 83:     }
  9595                           
  9596                           
  9597                           ;hardware.c: 87:     if(capture_IsNegEdge())
  9598  0DAC  3197  27CC  318D   	fcall	_capture_IsNegEdge
  9599  0DAF  3A00               	xorlw	0
  9600  0DB0  1903               	skipnz
  9601  0DB1  2DBD               	goto	i1l3834
  9602                           
  9603                           ;hardware.c: 88:     {;hardware.c: 89:         pdata->cnt_high = cnt_int;
  9604  0DB2  0879               	movf	capture_handdle@pdata,w
  9605  0DB3  3E23               	addlw	35
  9606  0DB4  0086               	movwf	6
  9607  0DB5  3002               	movlw	2	; select bank4/5
  9608  0DB6  0087               	movwf	7
  9609  0DB7  087A               	movf	capture_handdle@cnt_int,w
  9610  0DB8  3FC0               	movwi [0]fsr1
  9611  0DB9  087B               	movf	capture_handdle@cnt_int+1,w
  9612  0DBA  3FC1               	movwi [1]fsr1
  9613                           
  9614                           ;hardware.c: 90:         led_SetState(FALSE);
  9615  0DBB  3000               	movlw	0
  9616  0DBC  2DC7               	goto	L4
  9617  0DBD                     i1l3834:	
  9618                           ;hardware.c: 92:     else
  9619                           
  9620                           ;hardware.c: 91:     }
  9621                           
  9622                           
  9623                           ;hardware.c: 93:     {;hardware.c: 94:         pdata->cnt_low = cnt_int;
  9624  0DBD  0879               	movf	capture_handdle@pdata,w
  9625  0DBE  3E25               	addlw	37
  9626  0DBF  0086               	movwf	6
  9627  0DC0  3002               	movlw	2	; select bank4/5
  9628  0DC1  0087               	movwf	7
  9629  0DC2  087A               	movf	capture_handdle@cnt_int,w
  9630  0DC3  3FC0               	movwi [0]fsr1
  9631  0DC4  087B               	movf	capture_handdle@cnt_int+1,w
  9632  0DC5  3FC1               	movwi [1]fsr1
  9633                           
  9634                           ;hardware.c: 95:         led_SetState(TRUE);
  9635  0DC6  3001               	movlw	1
  9636  0DC7                     L4:	
  9637  0DC7  3197  27D6  318D   	fcall	i1_led_SetState
  9638                           
  9639                           ;hardware.c: 98:     last_cnt = cnt_tmp;
  9640                           
  9641                           ;hardware.c: 96:     }
  9642  0DCA  087D               	movf	capture_handdle@cnt_tmp+1,w
  9643  0DCB  0021               	movlb	1	; select bank1
  9644  0DCC  00E7               	movwf	(capture_handdle@last_cnt+1)^(0+128)
  9645  0DCD  087C               	movf	capture_handdle@cnt_tmp,w
  9646  0DCE  00E6               	movwf	capture_handdle@last_cnt^(0+128)
  9647                           
  9648                           ;hardware.c: 101:     capture_setEdge( (capture_IsNegEdge())? (0b0101) : (0b0100));
  9649  0DCF  3197  27CC  318D   	fcall	_capture_IsNegEdge
  9650  0DD2  3A00               	xorlw	0
  9651  0DD3  1D03               	skipz
  9652  0DD4  2DD7               	goto	i1l3844
  9653  0DD5  3004               	movlw	4
  9654  0DD6  2DD8               	goto	L3
  9655  0DD7                     i1l3844:	
  9656  0DD7  3005               	movlw	5
  9657  0DD8                     L3:	
  9658  0DD8  00F7               	movwf	_capture_handdle$1403
  9659  0DD9  3000               	movlw	0
  9660  0DDA  00F8               	movwf	_capture_handdle$1403+1
  9661  0DDB  0877               	movf	_capture_handdle$1403,w
  9662  0DDC  3188  207A         	fcall	i1_capture_setEdge
  9663  0DDE  0008               	return
  9664  0DDF                     __end_of_capture_handdle:	
  9665                           ;hardware.c: 103:     return 0;;	Return value of _capture_handdle is never used
  9666                           
  9667                           
  9668                           	psect	text45
  9669  17D6                     __ptext45:	
  9670 ;; *************** function i1_led_SetState *****************
  9671 ;; Defined at:
  9672 ;;		line 110 in file "hardware.c"
  9673 ;; Parameters:    Size  Location     Type
  9674 ;;  isOn            1    wreg     unsigned char 
  9675 ;; Auto vars:     Size  Location     Type
  9676 ;;  isOn            1    0[COMMON] unsigned char 
  9677 ;; Return value:  Size  Location     Type
  9678 ;;                  1    wreg      unsigned char 
  9679 ;; Registers used:
  9680 ;;		wreg, status,2, status,0
  9681 ;; Tracked objects:
  9682 ;;		On entry : 0/0
  9683 ;;		On exit  : 0/0
  9684 ;;		Unchanged: 0/0
  9685 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9686 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9687 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9688 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9689 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9690 ;;Total ram usage:        1 bytes
  9691 ;; Hardware stack levels used:    1
  9692 ;; This function calls:
  9693 ;;		Nothing
  9694 ;; This function is called by:
  9695 ;;		_capture_handdle
  9696 ;;		_led_Blink
  9697 ;; This function uses a non-reentrant model
  9698 ;;
  9699                           
  9700                           
  9701                           ;psect for function i1_led_SetState
  9702  17D6                     i1_led_SetState:	
  9703                           
  9704                           ;incstack = 0
  9705                           ; Regs used in i1_led_SetState: [wreg+status,2+status,0]
  9706                           ;i1led_SetState@isOn stored from wreg
  9707  17D6  00F0               	movwf	i1led_SetState@isOn
  9708                           
  9709                           ;hardware.c: 110: u8 led_SetState(u8 isOn);hardware.c: 111: {;hardware.c: 112:     LATBb
      +                          its.LATB3 = (isOn)? LED_STATE_ON : LED_STATE_OFF;
  9710  17D7  0870               	movf	i1led_SetState@isOn,w
  9711  17D8  1D03               	btfss	3,2
  9712  17D9  2FDD               	goto	u285_20
  9713  17DA  0022               	movlb	2	; select bank2
  9714  17DB  158D               	bsf	13,3	;volatile
  9715  17DC  0008               	return
  9716  17DD                     u285_20:	
  9717  17DD  0022               	movlb	2	; select bank2
  9718  17DE  118D               	bcf	13,3	;volatile
  9719  17DF  0008               	return
  9720  17E0                     __end_ofi1_led_SetState:	
  9721                           ;hardware.c: 113:     return 0;;	Return value of i1_led_SetState is never used
  9722                           
  9723                           
  9724                           	psect	text46
  9725  087A                     __ptext46:	
  9726 ;; *************** function i1_capture_setEdge *****************
  9727 ;; Defined at:
  9728 ;;		line 12 in file "hardware.c"
  9729 ;; Parameters:    Size  Location     Type
  9730 ;;  edge            1    wreg     unsigned char 
  9731 ;; Auto vars:     Size  Location     Type
  9732 ;;  edge            1    0[COMMON] unsigned char 
  9733 ;; Return value:  Size  Location     Type
  9734 ;;                  2    0[None  ] int 
  9735 ;; Registers used:
  9736 ;;		wreg, status,2, status,0
  9737 ;; Tracked objects:
  9738 ;;		On entry : 0/0
  9739 ;;		On exit  : 0/0
  9740 ;;		Unchanged: 0/0
  9741 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9742 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9743 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9744 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9745 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9746 ;;Total ram usage:        1 bytes
  9747 ;; Hardware stack levels used:    1
  9748 ;; This function calls:
  9749 ;;		Nothing
  9750 ;; This function is called by:
  9751 ;;		_capture_handdle
  9752 ;; This function uses a non-reentrant model
  9753 ;;
  9754                           
  9755                           
  9756                           ;psect for function i1_capture_setEdge
  9757  087A                     i1_capture_setEdge:	
  9758                           
  9759                           ;incstack = 0
  9760                           ; Regs used in i1_capture_setEdge: [wreg+status,2+status,0]
  9761                           ;i1capture_setEdge@edge stored from wreg
  9762  087A  00F0               	movwf	i1capture_setEdge@edge
  9763                           
  9764                           ;hardware.c: 12: static int capture_setEdge(u8 edge);hardware.c: 13: {;hardware.c: 14:  
      +                             if((edge == (0b0101)) || (edge == (0b0100)))
  9765  087B  3005               	movlw	5
  9766  087C  0670               	xorwf	i1capture_setEdge@edge,w
  9767  087D  1903               	btfsc	3,2
  9768  087E  2883               	goto	i1l3610
  9769  087F  3004               	movlw	4
  9770  0880  0670               	xorwf	i1capture_setEdge@edge,w
  9771  0881  1D03               	btfss	3,2
  9772  0882  0008               	return
  9773  0883                     i1l3610:	
  9774                           
  9775                           ;hardware.c: 15:     {;hardware.c: 16:         CCP2CONbits.CCP2M = edge;
  9776  0883  0025               	movlb	5	; select bank5
  9777  0884  081A               	movf	26,w	;volatile
  9778  0885  0670               	xorwf	i1capture_setEdge@edge,w
  9779  0886  39F0               	andlw	-16
  9780  0887  0670               	xorwf	i1capture_setEdge@edge,w
  9781  0888  009A               	movwf	26	;volatile
  9782                           
  9783                           ;hardware.c: 20:     {;hardware.c: 21:         return -1;;	Return value of i1_capture_se
      +                          tEdge is never used
  9784                           
  9785                           ;hardware.c: 19:     else
  9786                           
  9787                           ;hardware.c: 18:     }
  9788                           
  9789                           ;hardware.c: 17:         return 0;;	Return value of i1_capture_setEdge is never used
  9790  0889  0008               	return
  9791  088A                     __end_ofi1_capture_setEdge:	
  9792                           ;hardware.c: 22:     }
  9793                           
  9794                           
  9795                           	psect	text47
  9796  177E                     __ptext47:	
  9797 ;; *************** function _capture_clrIntrpt *****************
  9798 ;; Defined at:
  9799 ;;		line 56 in file "hardware.c"
  9800 ;; Parameters:    Size  Location     Type
  9801 ;;		None
  9802 ;; Auto vars:     Size  Location     Type
  9803 ;;		None
  9804 ;; Return value:  Size  Location     Type
  9805 ;;                  1    wreg      void 
  9806 ;; Registers used:
  9807 ;;		None
  9808 ;; Tracked objects:
  9809 ;;		On entry : 0/0
  9810 ;;		On exit  : 0/0
  9811 ;;		Unchanged: 0/0
  9812 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9813 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9814 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9815 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9816 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9817 ;;Total ram usage:        0 bytes
  9818 ;; Hardware stack levels used:    1
  9819 ;; This function calls:
  9820 ;;		Nothing
  9821 ;; This function is called by:
  9822 ;;		_ISR
  9823 ;; This function uses a non-reentrant model
  9824 ;;
  9825                           
  9826                           
  9827                           ;psect for function _capture_clrIntrpt
  9828  177E                     _capture_clrIntrpt:	
  9829                           
  9830                           ;hardware.c: 58:     PIR2bits.CCP2IF = 0;
  9831                           
  9832                           ;incstack = 0
  9833                           ; Regs used in _capture_clrIntrpt: []
  9834  177E  0020               	movlb	0	; select bank0
  9835  177F  1012               	bcf	18,0	;volatile
  9836  1780  0008               	return
  9837  1781                     __end_of_capture_clrIntrpt:	
  9838                           
  9839                           	psect	text48
  9840  1788                     __ptext48:	
  9841 ;; *************** function _capture_IsIntrpt *****************
  9842 ;; Defined at:
  9843 ;;		line 52 in file "hardware.c"
  9844 ;; Parameters:    Size  Location     Type
  9845 ;;		None
  9846 ;; Auto vars:     Size  Location     Type
  9847 ;;		None
  9848 ;; Return value:  Size  Location     Type
  9849 ;;                  1    wreg      enum E5222
  9850 ;; Registers used:
  9851 ;;		wreg, status,2, status,0
  9852 ;; Tracked objects:
  9853 ;;		On entry : 0/0
  9854 ;;		On exit  : 0/0
  9855 ;;		Unchanged: 0/0
  9856 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9857 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9858 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9859 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9860 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9861 ;;Total ram usage:        0 bytes
  9862 ;; Hardware stack levels used:    1
  9863 ;; This function calls:
  9864 ;;		Nothing
  9865 ;; This function is called by:
  9866 ;;		_ISR
  9867 ;; This function uses a non-reentrant model
  9868 ;;
  9869                           
  9870                           
  9871                           ;psect for function _capture_IsIntrpt
  9872  1788                     _capture_IsIntrpt:	
  9873                           
  9874                           ;hardware.c: 54:     return (PIR2bits.CCP2IF == 0b1)? TRUE : FALSE;
  9875                           
  9876                           ;incstack = 0
  9877                           ; Regs used in _capture_IsIntrpt: [wreg+status,2+status,0]
  9878  1788  0020               	movlb	0	; select bank0
  9879  1789  0812               	movf	18,w	;volatile
  9880  178A  3901               	andlw	1
  9881  178B  0008               	return
  9882  178C                     __end_of_capture_IsIntrpt:	
  9883                           
  9884                           	psect	text49
  9885  1784                     __ptext49:	
  9886 ;; *************** function _capture_IsEnable *****************
  9887 ;; Defined at:
  9888 ;;		line 48 in file "hardware.c"
  9889 ;; Parameters:    Size  Location     Type
  9890 ;;		None
  9891 ;; Auto vars:     Size  Location     Type
  9892 ;;		None
  9893 ;; Return value:  Size  Location     Type
  9894 ;;                  1    wreg      enum E5222
  9895 ;; Registers used:
  9896 ;;		wreg, status,2, status,0
  9897 ;; Tracked objects:
  9898 ;;		On entry : 0/0
  9899 ;;		On exit  : 0/0
  9900 ;;		Unchanged: 0/0
  9901 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9902 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9903 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9904 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9905 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9906 ;;Total ram usage:        0 bytes
  9907 ;; Hardware stack levels used:    1
  9908 ;; This function calls:
  9909 ;;		Nothing
  9910 ;; This function is called by:
  9911 ;;		_ISR
  9912 ;; This function uses a non-reentrant model
  9913 ;;
  9914                           
  9915                           
  9916                           ;psect for function _capture_IsEnable
  9917  1784                     _capture_IsEnable:	
  9918                           
  9919                           ;hardware.c: 50:     return (PIE2bits.CCP2IE == 0b1)? TRUE : FALSE;
  9920                           
  9921                           ;incstack = 0
  9922                           ; Regs used in _capture_IsEnable: [wreg+status,2+status,0]
  9923  1784  0021               	movlb	1	; select bank1
  9924  1785  0812               	movf	18,w	;volatile
  9925  1786  3901               	andlw	1
  9926  1787  0008               	return
  9927  1788                     __end_of_capture_IsEnable:	
  9928                           
  9929                           	psect	text50
  9930  0125                     __ptext50:	
  9931 ;; *************** function _bpc_proc *****************
  9932 ;; Defined at:
  9933 ;;		line 80 in file "bpc.c"
  9934 ;; Parameters:    Size  Location     Type
  9935 ;;		None
  9936 ;; Auto vars:     Size  Location     Type
  9937 ;;  i               2   20[BANK0 ] int 
  9938 ;;  last_time_m     2   18[BANK0 ] unsigned short 
  9939 ;;  last_time_h     2   16[BANK0 ] unsigned short 
  9940 ;;  last_time_s     2   14[BANK0 ] unsigned short 
  9941 ;;  pdata           1   23[BANK0 ] PTR volatile struct .
  9942 ;;		 -> g_data(39), 
  9943 ;;  number          1   22[BANK0 ] unsigned char 
  9944 ;; Return value:  Size  Location     Type
  9945 ;;                  2  104[None  ] int 
  9946 ;; Registers used:
  9947 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9948 ;; Tracked objects:
  9949 ;;		On entry : 0/0
  9950 ;;		On exit  : 0/0
  9951 ;;		Unchanged: 0/0
  9952 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9953 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9954 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9955 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9956 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9957 ;;Total ram usage:       12 bytes
  9958 ;; Hardware stack levels used:    1
  9959 ;; Hardware stack levels required when called:    4
  9960 ;; This function calls:
  9961 ;;		_bpc_Cnt2Qua
  9962 ;;		_capture_Set
  9963 ;;		_check_err
  9964 ;;		i1_data_getdata
  9965 ;;		i1_display_update
  9966 ;; This function is called by:
  9967 ;;		_ISR
  9968 ;; This function uses a non-reentrant model
  9969 ;;
  9970                           
  9971                           
  9972                           ;psect for function _bpc_proc
  9973  0125                     _bpc_proc:	
  9974                           
  9975                           ;bpc.c: 82:     G_DATA *pdata = data_getdata();
  9976                           
  9977                           ;incstack = 0
  9978                           ; Regs used in _bpc_proc: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9979  0125  3180  2002  3181   	fcall	i1_data_getdata
  9980  0128  0020               	movlb	0	; select bank0
  9981  0129  00AC               	movwf	??_bpc_proc
  9982  012A  082C               	movf	??_bpc_proc,w
  9983  012B  00B7               	movwf	bpc_proc@pdata
  9984                           
  9985                           ;bpc.c: 83:     u8 number = bpc_Cnt2Qua();
  9986  012C  318E  2661  3181   	fcall	_bpc_Cnt2Qua
  9987  012F  0020               	movlb	0	; select bank0
  9988  0130  00AC               	movwf	??_bpc_proc
  9989  0131  082C               	movf	??_bpc_proc,w
  9990  0132  00B6               	movwf	bpc_proc@number
  9991                           
  9992                           ;bpc.c: 85:     if(6 == number){
  9993  0133  3006               	movlw	6
  9994  0134  0636               	xorwf	bpc_proc@number,w
  9995  0135  1903               	btfsc	3,2
  9996  0136  0008               	return
  9997                           
  9998                           ;bpc.c: 87:     }else if(4 == number){
  9999                           
 10000                           ;bpc.c: 86:         return 0;;	Return value of _bpc_proc is never used
 10001  0137  3004               	movlw	4
 10002  0138  0636               	xorwf	bpc_proc@number,w
 10003  0139  1D03               	btfss	3,2
 10004  013A  294A               	goto	i1l3866
 10005                           
 10006                           ;bpc.c: 88:         pdata->g_find_recv_start = FALSE;
 10007  013B  0837               	movf	bpc_proc@pdata,w
 10008  013C  3E02               	addlw	2
 10009  013D  0086               	movwf	6
 10010  013E  3002               	movlw	2	; select bank4/5
 10011  013F  0087               	movwf	7
 10012  0140  0181               	clrf	1
 10013                           
 10014                           ;bpc.c: 89:         pdata->g_recv_count = 0;
 10015  0141  0837               	movf	bpc_proc@pdata,w
 10016  0142  3E0B               	addlw	11
 10017  0143  0086               	movwf	6
 10018  0144  3002               	movlw	2	; select bank4/5
 10019  0145  0087               	movwf	7
 10020  0146  3000               	movlw	0
 10021  0147  3FC0               	movwi [0]fsr1
 10022  0148  3FC1               	movwi [1]fsr1
 10023                           
 10024                           ;bpc.c: 90:         return -1;;	Return value of _bpc_proc is never used
 10025  0149  0008               	return
 10026  014A                     i1l3866:	
 10027                           ;bpc.c: 91:     }
 10028                           
 10029                           
 10030                           ;bpc.c: 95:     if(pdata->g_find_recv_start || 5 == number){
 10031  014A  0837               	movf	bpc_proc@pdata,w
 10032  014B  3E02               	addlw	2
 10033  014C  0086               	movwf	6
 10034  014D  3002               	movlw	2	; select bank4/5
 10035  014E  0087               	movwf	7
 10036  014F  0801               	movf	1,w
 10037  0150  1D03               	btfss	3,2
 10038  0151  2956               	goto	i1l3870
 10039  0152  3005               	movlw	5
 10040  0153  0636               	xorwf	bpc_proc@number,w
 10041  0154  1D03               	btfss	3,2
 10042  0155  2983               	goto	i1l3876
 10043  0156                     i1l3870:	
 10044                           
 10045                           ;bpc.c: 96:         if(!pdata->g_find_recv_start){
 10046  0156  0837               	movf	bpc_proc@pdata,w
 10047  0157  3E02               	addlw	2
 10048  0158  0086               	movwf	6
 10049  0159  3002               	movlw	2	; select bank4/5
 10050  015A  0087               	movwf	7
 10051  015B  0801               	movf	1,w
 10052  015C  1D03               	btfss	3,2
 10053  015D  298C               	goto	i1l3880
 10054                           
 10055                           ;bpc.c: 97:             pdata->g_find_recv_start = TRUE;
 10056  015E  3001               	movlw	1
 10057  015F  00AC               	movwf	??_bpc_proc
 10058  0160  0837               	movf	bpc_proc@pdata,w
 10059  0161  3E02               	addlw	2
 10060  0162  0086               	movwf	6
 10061  0163  3002               	movlw	2	; select bank4/5
 10062  0164  0087               	movwf	7
 10063  0165  082C               	movf	??_bpc_proc,w
 10064  0166  0081               	movwf	1
 10065                           
 10066                           ;bpc.c: 98:             pdata->g_recv_buf[pdata->g_recv_count++] = number;
 10067  0167  0836               	movf	bpc_proc@number,w
 10068  0168  00AC               	movwf	??_bpc_proc
 10069  0169  0837               	movf	bpc_proc@pdata,w
 10070  016A  3E0B               	addlw	11
 10071  016B  0086               	movwf	6
 10072  016C  3002               	movlw	2	; select bank4/5
 10073  016D  0087               	movwf	7
 10074  016E  0801               	movf	1,w
 10075  016F  3E0D               	addlw	13
 10076  0170  0737               	addwf	bpc_proc@pdata,w
 10077  0171  00AD               	movwf	??_bpc_proc+1
 10078  0172  082D               	movf	??_bpc_proc+1,w
 10079  0173  0086               	movwf	6
 10080  0174  3002               	movlw	2	; select bank4/5
 10081  0175  0087               	movwf	7
 10082  0176  082C               	movf	??_bpc_proc,w
 10083  0177  0081               	movwf	1
 10084  0178  0837               	movf	bpc_proc@pdata,w
 10085  0179  3E0B               	addlw	11
 10086  017A  0086               	movwf	6
 10087  017B  3002               	movlw	2	; select bank4/5
 10088  017C  0087               	movwf	7
 10089  017D  3001               	movlw	1
 10090  017E  0781               	addwf	1,f
 10091  017F  3141               	addfsr 1,1
 10092  0180  1803               	skipnc
 10093  0181  0A81               	incf	1,f
 10094                           
 10095                           ;bpc.c: 99:             return 0;;	Return value of _bpc_proc is never used
 10096  0182  0008               	return
 10097  0183                     i1l3876:	
 10098                           ;bpc.c: 101:     }else{
 10099                           
 10100                           ;bpc.c: 100:         }
 10101                           
 10102                           
 10103                           ;bpc.c: 102:         pdata->g_recv_count = 0;
 10104  0183  0837               	movf	bpc_proc@pdata,w
 10105  0184  3E0B               	addlw	11
 10106  0185  0086               	movwf	6
 10107  0186  3002               	movlw	2	; select bank4/5
 10108  0187  0087               	movwf	7
 10109  0188  3000               	movlw	0
 10110  0189  3FC0               	movwi [0]fsr1
 10111  018A  3FC1               	movwi [1]fsr1
 10112                           
 10113                           ;bpc.c: 103:         return -1;;	Return value of _bpc_proc is never used
 10114  018B  0008               	return
 10115  018C                     i1l3880:	
 10116                           ;bpc.c: 104:     }
 10117                           
 10118                           
 10119                           ;bpc.c: 107:     pdata->g_recv_buf[pdata->g_recv_count++] = number;
 10120  018C  0836               	movf	bpc_proc@number,w
 10121  018D  00AC               	movwf	??_bpc_proc
 10122  018E  0837               	movf	bpc_proc@pdata,w
 10123  018F  3E0B               	addlw	11
 10124  0190  0086               	movwf	6
 10125  0191  3002               	movlw	2	; select bank4/5
 10126  0192  0087               	movwf	7
 10127  0193  0801               	movf	1,w
 10128  0194  3E0D               	addlw	13
 10129  0195  0737               	addwf	bpc_proc@pdata,w
 10130  0196  00AD               	movwf	??_bpc_proc+1
 10131  0197  082D               	movf	??_bpc_proc+1,w
 10132  0198  0086               	movwf	6
 10133  0199  3002               	movlw	2	; select bank4/5
 10134  019A  0087               	movwf	7
 10135  019B  082C               	movf	??_bpc_proc,w
 10136  019C  0081               	movwf	1
 10137  019D  0837               	movf	bpc_proc@pdata,w
 10138  019E  3E0B               	addlw	11
 10139  019F  0086               	movwf	6
 10140  01A0  3002               	movlw	2	; select bank4/5
 10141  01A1  0087               	movwf	7
 10142  01A2  3001               	movlw	1
 10143  01A3  0781               	addwf	1,f
 10144  01A4  3141               	addfsr 1,1
 10145  01A5  1803               	skipnc
 10146  01A6  0A81               	incf	1,f
 10147                           
 10148                           ;bpc.c: 108:     if(pdata->g_recv_count <= CODE_P3){
 10149  01A7  0837               	movf	bpc_proc@pdata,w
 10150  01A8  3E0B               	addlw	11
 10151  01A9  0086               	movwf	6
 10152  01AA  3002               	movlw	2	; select bank4/5
 10153  01AB  0087               	movwf	7
 10154  01AC  3F40               	moviw [0]fsr1
 10155  01AD  00AC               	movwf	??_bpc_proc
 10156  01AE  3F41               	moviw [1]fsr1
 10157  01AF  00AD               	movwf	??_bpc_proc+1
 10158  01B0  3000               	movlw	0
 10159  01B1  022D               	subwf	??_bpc_proc+1,w
 10160  01B2  300B               	movlw	11
 10161  01B3  1903               	skipnz
 10162  01B4  022C               	subwf	??_bpc_proc,w
 10163  01B5  1C03               	btfss	3,0
 10164  01B6  0008               	return
 10165                           
 10166                           ;bpc.c: 113:     if(pdata->g_recv_buf[CODE_P1] > 2)
 10167                           
 10168                           ;bpc.c: 110:     }
 10169                           
 10170                           ;bpc.c: 109:         return 0;;	Return value of _bpc_proc is never used
 10171  01B7  0837               	movf	bpc_proc@pdata,w
 10172  01B8  3E0E               	addlw	14
 10173  01B9  0086               	movwf	6
 10174  01BA  3002               	movlw	2	; select bank4/5
 10175  01BB  0087               	movwf	7
 10176  01BC  3003               	movlw	3
 10177  01BD  0201               	subwf	1,w
 10178  01BE  1C03               	skipc
 10179  01BF  29D4               	goto	i1l3894
 10180                           
 10181                           ;bpc.c: 114:     {;bpc.c: 115:         pdata->g_find_recv_start = FALSE;
 10182  01C0  0837               	movf	bpc_proc@pdata,w
 10183  01C1  3E02               	addlw	2
 10184  01C2  0086               	movwf	6
 10185  01C3  3002               	movlw	2	; select bank4/5
 10186  01C4  0087               	movwf	7
 10187  01C5  0181               	clrf	1
 10188                           
 10189                           ;bpc.c: 116:         pdata->g_isDecoding = 0;
 10190  01C6  0A37               	incf	bpc_proc@pdata,w
 10191  01C7  0086               	movwf	6
 10192  01C8  3002               	movlw	2	; select bank4/5
 10193  01C9  0087               	movwf	7
 10194  01CA  0181               	clrf	1
 10195                           
 10196                           ;bpc.c: 117:         pdata->g_recv_count = 0;
 10197  01CB  0837               	movf	bpc_proc@pdata,w
 10198  01CC  3E0B               	addlw	11
 10199  01CD  0086               	movwf	6
 10200  01CE  3002               	movlw	2	; select bank4/5
 10201  01CF  0087               	movwf	7
 10202  01D0  3000               	movlw	0
 10203  01D1  3FC0               	movwi [0]fsr1
 10204  01D2  3FC1               	movwi [1]fsr1
 10205                           
 10206                           ;bpc.c: 118:         return 0;;	Return value of _bpc_proc is never used
 10207  01D3  0008               	return
 10208  01D4                     i1l3894:	
 10209                           ;bpc.c: 119:     }
 10210                           
 10211                           
 10212                           ;bpc.c: 121:     u16 last_time_h = pdata->g_time_h;
 10213  01D4  0837               	movf	bpc_proc@pdata,w
 10214  01D5  3E03               	addlw	3
 10215  01D6  0086               	movwf	6
 10216  01D7  3002               	movlw	2	; select bank4/5
 10217  01D8  0087               	movwf	7
 10218  01D9  0801               	movf	1,w
 10219  01DA  00AC               	movwf	??_bpc_proc
 10220  01DB  01AD               	clrf	??_bpc_proc+1
 10221  01DC  082C               	movf	??_bpc_proc,w
 10222  01DD  00B0               	movwf	bpc_proc@last_time_h
 10223  01DE  082D               	movf	??_bpc_proc+1,w
 10224  01DF  00B1               	movwf	bpc_proc@last_time_h+1
 10225                           
 10226                           ;bpc.c: 122:     u16 last_time_m = pdata->g_time_m;
 10227  01E0  0837               	movf	bpc_proc@pdata,w
 10228  01E1  3E04               	addlw	4
 10229  01E2  0086               	movwf	6
 10230  01E3  3002               	movlw	2	; select bank4/5
 10231  01E4  0087               	movwf	7
 10232  01E5  0801               	movf	1,w
 10233  01E6  00AC               	movwf	??_bpc_proc
 10234  01E7  01AD               	clrf	??_bpc_proc+1
 10235  01E8  082C               	movf	??_bpc_proc,w
 10236  01E9  00B2               	movwf	bpc_proc@last_time_m
 10237  01EA  082D               	movf	??_bpc_proc+1,w
 10238  01EB  00B3               	movwf	bpc_proc@last_time_m+1
 10239                           
 10240                           ;bpc.c: 123:     u16 last_time_s = pdata->g_time_s;
 10241  01EC  0837               	movf	bpc_proc@pdata,w
 10242  01ED  3E05               	addlw	5
 10243  01EE  0086               	movwf	6
 10244  01EF  3002               	movlw	2	; select bank4/5
 10245  01F0  0087               	movwf	7
 10246  01F1  0801               	movf	1,w
 10247  01F2  00AC               	movwf	??_bpc_proc
 10248  01F3  01AD               	clrf	??_bpc_proc+1
 10249  01F4  082C               	movf	??_bpc_proc,w
 10250  01F5  00AE               	movwf	bpc_proc@last_time_s
 10251  01F6  082D               	movf	??_bpc_proc+1,w
 10252  01F7  00AF               	movwf	bpc_proc@last_time_s+1
 10253                           
 10254                           ;bpc.c: 125:     if(check_err(pdata))
 10255  01F8  0837               	movf	bpc_proc@pdata,w
 10256  01F9  3184  2483  3181   	fcall	_check_err
 10257  01FC  0870               	movf	?_check_err,w
 10258  01FD  0471               	iorwf	?_check_err+1,w
 10259  01FE  1903               	btfsc	3,2
 10260  01FF  2A1D               	goto	i1l3902
 10261                           
 10262                           ;bpc.c: 126:     {;bpc.c: 128:         pdata->g_time_h = last_time_h;
 10263  0200  0020               	movlb	0	; select bank0
 10264  0201  0830               	movf	bpc_proc@last_time_h,w
 10265  0202  00AC               	movwf	??_bpc_proc
 10266  0203  0837               	movf	bpc_proc@pdata,w
 10267  0204  3E03               	addlw	3
 10268  0205  0086               	movwf	6
 10269  0206  3002               	movlw	2	; select bank4/5
 10270  0207  0087               	movwf	7
 10271  0208  082C               	movf	??_bpc_proc,w
 10272  0209  0081               	movwf	1
 10273                           
 10274                           ;bpc.c: 129:         pdata->g_time_m = last_time_m;
 10275  020A  0832               	movf	bpc_proc@last_time_m,w
 10276  020B  00AC               	movwf	??_bpc_proc
 10277  020C  0837               	movf	bpc_proc@pdata,w
 10278  020D  3E04               	addlw	4
 10279  020E  0086               	movwf	6
 10280  020F  3002               	movlw	2	; select bank4/5
 10281  0210  0087               	movwf	7
 10282  0211  082C               	movf	??_bpc_proc,w
 10283  0212  0081               	movwf	1
 10284                           
 10285                           ;bpc.c: 130:         pdata->g_time_s = last_time_s;
 10286  0213  082E               	movf	bpc_proc@last_time_s,w
 10287  0214  00AC               	movwf	??_bpc_proc
 10288  0215  0837               	movf	bpc_proc@pdata,w
 10289  0216  3E05               	addlw	5
 10290  0217  0086               	movwf	6
 10291  0218  3002               	movlw	2	; select bank4/5
 10292  0219  0087               	movwf	7
 10293  021A  082C               	movf	??_bpc_proc,w
 10294  021B  0081               	movwf	1
 10295                           
 10296                           ;bpc.c: 131:         return 0;;	Return value of _bpc_proc is never used
 10297  021C  0008               	return
 10298  021D                     i1l3902:	
 10299                           ;bpc.c: 132:     }
 10300                           
 10301                           
 10302                           ;bpc.c: 135:     if(last_time_h != pdata->g_time_h || last_time_m != pdata->g_time_m)
 10303  021D  0020               	movlb	0	; select bank0
 10304  021E  0837               	movf	bpc_proc@pdata,w
 10305  021F  3E03               	addlw	3
 10306  0220  0086               	movwf	6
 10307  0221  3002               	movlw	2	; select bank4/5
 10308  0222  0087               	movwf	7
 10309  0223  0801               	movf	1,w
 10310  0224  00AC               	movwf	??_bpc_proc
 10311  0225  01AD               	clrf	??_bpc_proc+1
 10312  0226  0831               	movf	bpc_proc@last_time_h+1,w
 10313  0227  062D               	xorwf	??_bpc_proc+1,w
 10314  0228  1D03               	skipz
 10315  0229  2A2C               	goto	u403_25
 10316  022A  0830               	movf	bpc_proc@last_time_h,w
 10317  022B  062C               	xorwf	??_bpc_proc,w
 10318  022C                     u403_25:	
 10319  022C  1D03               	skipz
 10320  022D  2A3E               	goto	i1l3906
 10321  022E  0837               	movf	bpc_proc@pdata,w
 10322  022F  3E04               	addlw	4
 10323  0230  0086               	movwf	6
 10324  0231  3002               	movlw	2	; select bank4/5
 10325  0232  0087               	movwf	7
 10326  0233  0801               	movf	1,w
 10327  0234  00AC               	movwf	??_bpc_proc
 10328  0235  01AD               	clrf	??_bpc_proc+1
 10329  0236  0833               	movf	bpc_proc@last_time_m+1,w
 10330  0237  062D               	xorwf	??_bpc_proc+1,w
 10331  0238  1D03               	skipz
 10332  0239  2A3C               	goto	u404_25
 10333  023A  0832               	movf	bpc_proc@last_time_m,w
 10334  023B  062C               	xorwf	??_bpc_proc,w
 10335  023C                     u404_25:	
 10336  023C  1903               	skipnz
 10337  023D  2A41               	goto	i1l3908
 10338  023E                     i1l3906:	
 10339                           
 10340                           ;bpc.c: 136:     {;bpc.c: 137:         display_update();
 10341  023E  3186  2640  3181   	fcall	i1_display_update
 10342  0241                     i1l3908:	
 10343                           ;bpc.c: 138:     }
 10344                           
 10345                           
 10346                           ;bpc.c: 141:     pdata->g_find_recv_start = FALSE;
 10347  0241  0020               	movlb	0	; select bank0
 10348  0242  0837               	movf	bpc_proc@pdata,w
 10349  0243  3E02               	addlw	2
 10350  0244  0086               	movwf	6
 10351  0245  3002               	movlw	2	; select bank4/5
 10352  0246  0087               	movwf	7
 10353  0247  0181               	clrf	1
 10354                           
 10355                           ;bpc.c: 143:     pdata->g_isDecoding = FALSE;
 10356  0248  0A37               	incf	bpc_proc@pdata,w
 10357  0249  0086               	movwf	6
 10358  024A  3002               	movlw	2	; select bank4/5
 10359  024B  0087               	movwf	7
 10360  024C  0181               	clrf	1
 10361                           
 10362                           ;bpc.c: 146:  capture_Set(FALSE);
 10363  024D  3000               	movlw	0
 10364  024E  3188  2019  3181   	fcall	_capture_Set
 10365                           
 10366                           ;bpc.c: 147:     pdata->g_recv_count = CODE_P0;
 10367  0251  0020               	movlb	0	; select bank0
 10368  0252  0837               	movf	bpc_proc@pdata,w
 10369  0253  3E0B               	addlw	11
 10370  0254  0086               	movwf	6
 10371  0255  3002               	movlw	2	; select bank4/5
 10372  0256  0087               	movwf	7
 10373  0257  3000               	movlw	0
 10374  0258  3FC0               	movwi [0]fsr1
 10375  0259  3FC1               	movwi [1]fsr1
 10376                           
 10377                           ;bpc.c: 148:     for(int i = 0;i < 20; i++)
 10378  025A  01B4               	clrf	bpc_proc@i
 10379  025B  01B5               	clrf	bpc_proc@i+1
 10380  025C                     L5:	
 10381  025C  0835               	movf	bpc_proc@i+1,w
 10382  025D  3A80               	xorlw	128
 10383  025E  00AC               	movwf	??_bpc_proc
 10384  025F  3080               	movlw	128
 10385  0260  022C               	subwf	??_bpc_proc,w
 10386  0261  1D03               	skipz
 10387  0262  2A65               	goto	u405_25
 10388  0263  3014               	movlw	20
 10389  0264  0234               	subwf	bpc_proc@i,w
 10390  0265                     u405_25:	
 10391  0265  1803               	btfsc	3,0
 10392  0266  0008               	return
 10393                           
 10394                           ;bpc.c: 149:     {;bpc.c: 150:         pdata->g_recv_buf[i] = 5;
 10395  0267  3005               	movlw	5
 10396  0268  0020               	movlb	0	; select bank0
 10397  0269  00AC               	movwf	??_bpc_proc
 10398  026A  0834               	movf	bpc_proc@i,w
 10399  026B  3E0D               	addlw	13
 10400  026C  0737               	addwf	bpc_proc@pdata,w
 10401  026D  00AD               	movwf	??_bpc_proc+1
 10402  026E  082D               	movf	??_bpc_proc+1,w
 10403  026F  0086               	movwf	6
 10404  0270  3002               	movlw	2	; select bank4/5
 10405  0271  0087               	movwf	7
 10406  0272  082C               	movf	??_bpc_proc,w
 10407  0273  0081               	movwf	1
 10408                           
 10409                           ;bpc.c: 151:     }
 10410  0274  3001               	movlw	1
 10411  0275  07B4               	addwf	bpc_proc@i,f
 10412  0276  3000               	movlw	0
 10413  0277  3DB5               	addwfc	bpc_proc@i+1,f
 10414  0278  2A5C               	goto	L5
 10415  0279                     __end_of_bpc_proc:	
 10416                           ;bpc.c: 152:     return 0;;	Return value of _bpc_proc is never used
 10417                           
 10418                           
 10419                           	psect	text51
 10420  0640                     __ptext51:	
 10421 ;; *************** function i1_display_update *****************
 10422 ;; Defined at:
 10423 ;;		line 74 in file "display.c"
 10424 ;; Parameters:    Size  Location     Type
 10425 ;;		None
 10426 ;; Auto vars:     Size  Location     Type
 10427 ;;  display_upda    1   11[BANK0 ] PTR volatile struct .
 10428 ;;		 -> g_data(39), 
 10429 ;; Return value:  Size  Location     Type
 10430 ;;                  1    wreg      void 
 10431 ;; Registers used:
 10432 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10433 ;; Tracked objects:
 10434 ;;		On entry : 0/0
 10435 ;;		On exit  : 0/0
 10436 ;;		Unchanged: 0/0
 10437 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10438 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10439 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10440 ;;      Temps:          0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10441 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10442 ;;Total ram usage:       12 bytes
 10443 ;; Hardware stack levels used:    1
 10444 ;; Hardware stack levels required when called:    3
 10445 ;; This function calls:
 10446 ;;		i1___awdiv
 10447 ;;		i1___awmod
 10448 ;;		i1_data_getdata
 10449 ;;		i1_display_write_once
 10450 ;; This function is called by:
 10451 ;;		_bpc_proc
 10452 ;;		_update_time
 10453 ;; This function uses a non-reentrant model
 10454 ;;
 10455                           
 10456                           
 10457                           ;psect for function i1_display_update
 10458  0640                     i1_display_update:	
 10459                           
 10460                           ;display.c: 88:     G_DATA *pdata = data_getdata();
 10461                           
 10462                           ;incstack = 0
 10463                           ; Regs used in i1_display_update: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10464  0640  3180  2002  3186   	fcall	i1_data_getdata
 10465  0643  0020               	movlb	0	; select bank0
 10466  0644  00A0               	movwf	??i1_display_update
 10467  0645  0820               	movf	??i1_display_update,w
 10468  0646  00AB               	movwf	i1display_update@pdata
 10469                           
 10470                           ;display.c: 89:     display_write_once(segmcode[(pdata->g_time_h/10 == 0? 10:pdata->g_ti
      +                          me_h/10)], segmcode[pdata->g_time_h%10], segmcode[pdata->g_time_m/10], segmcode[pdata->g
      +                          _time_m%10]);
 10471  0647  300A               	movlw	10
 10472  0648  00F0               	movwf	i1___awdiv@divisor
 10473  0649  3000               	movlw	0
 10474  064A  00F1               	movwf	i1___awdiv@divisor+1
 10475  064B  082B               	movf	i1display_update@pdata,w
 10476  064C  3E03               	addlw	3
 10477  064D  0086               	movwf	6
 10478  064E  3002               	movlw	2	; select bank4/5
 10479  064F  0087               	movwf	7
 10480  0650  0801               	movf	1,w
 10481  0651  00A0               	movwf	??i1_display_update
 10482  0652  01A1               	clrf	??i1_display_update+1
 10483  0653  0820               	movf	??i1_display_update,w
 10484  0654  00F2               	movwf	i1___awdiv@dividend
 10485  0655  0821               	movf	??i1_display_update+1,w
 10486  0656  00F3               	movwf	i1___awdiv@dividend+1
 10487  0657  318C  246C  3186   	fcall	i1___awdiv
 10488  065A  0870               	movf	?i1___awdiv,w
 10489  065B  0471               	iorwf	?i1___awdiv+1,w
 10490  065C  1903               	btfsc	3,2
 10491  065D  2E78               	goto	i1l3308
 10492  065E  300A               	movlw	10
 10493  065F  00F0               	movwf	i1___awdiv@divisor
 10494  0660  3000               	movlw	0
 10495  0661  00F1               	movwf	i1___awdiv@divisor+1
 10496  0662  0020               	movlb	0	; select bank0
 10497  0663  082B               	movf	i1display_update@pdata,w
 10498  0664  3E03               	addlw	3
 10499  0665  0086               	movwf	6
 10500  0666  3002               	movlw	2	; select bank4/5
 10501  0667  0087               	movwf	7
 10502  0668  0801               	movf	1,w
 10503  0669  00A0               	movwf	??i1_display_update
 10504  066A  01A1               	clrf	??i1_display_update+1
 10505  066B  0820               	movf	??i1_display_update,w
 10506  066C  00F2               	movwf	i1___awdiv@dividend
 10507  066D  0821               	movf	??i1_display_update+1,w
 10508  066E  00F3               	movwf	i1___awdiv@dividend+1
 10509  066F  318C  246C  3186   	fcall	i1___awdiv
 10510  0672  0871               	movf	?i1___awdiv+1,w
 10511  0673  0020               	movlb	0	; select bank0
 10512  0674  00AA               	movwf	i1_display_update$1570+1
 10513  0675  0870               	movf	?i1___awdiv,w
 10514  0676  00A9               	movwf	i1_display_update$1570
 10515  0677  2E7D               	goto	i1l3310
 10516  0678                     i1l3308:	
 10517  0678  300A               	movlw	10
 10518  0679  0020               	movlb	0	; select bank0
 10519  067A  00A9               	movwf	i1_display_update$1570
 10520  067B  3000               	movlw	0
 10521  067C  00AA               	movwf	i1_display_update$1570+1
 10522  067D                     i1l3310:	
 10523  067D  300A               	movlw	10
 10524  067E  00F0               	movwf	i1___awmod@divisor
 10525  067F  3000               	movlw	0
 10526  0680  00F1               	movwf	i1___awmod@divisor+1
 10527  0681  082B               	movf	i1display_update@pdata,w
 10528  0682  3E03               	addlw	3
 10529  0683  0086               	movwf	6
 10530  0684  3002               	movlw	2	; select bank4/5
 10531  0685  0087               	movwf	7
 10532  0686  0801               	movf	1,w
 10533  0687  00A0               	movwf	??i1_display_update
 10534  0688  01A1               	clrf	??i1_display_update+1
 10535  0689  0820               	movf	??i1_display_update,w
 10536  068A  00F2               	movwf	i1___awmod@dividend
 10537  068B  0821               	movf	??i1_display_update+1,w
 10538  068C  00F3               	movwf	i1___awmod@dividend+1
 10539  068D  318B  239C  3186   	fcall	i1___awmod
 10540  0690  0871               	movf	?i1___awmod+1,w
 10541  0691  0085               	movwf	5
 10542  0692  0870               	movf	?i1___awmod,w
 10543  0693  0084               	movwf	4
 10544  0694  3000               	movlw	low (_segmcode| (0+32768))
 10545  0695  0784               	addwf	4,f
 10546  0696  3090               	movlw	high (_segmcode| (0+32768))
 10547  0697  3D85               	addwfc	5,f
 10548  0698  0800               	movf	0,w	;code access
 10549  0699  0020               	movlb	0	; select bank0
 10550  069A  00A2               	movwf	??i1_display_update+2
 10551  069B  0822               	movf	??i1_display_update+2,w
 10552  069C  00F9               	movwf	i1display_write_once@HR
 10553  069D  300A               	movlw	10
 10554  069E  00F0               	movwf	i1___awdiv@divisor
 10555  069F  3000               	movlw	0
 10556  06A0  00F1               	movwf	i1___awdiv@divisor+1
 10557  06A1  082B               	movf	i1display_update@pdata,w
 10558  06A2  3E04               	addlw	4
 10559  06A3  0086               	movwf	6
 10560  06A4  3002               	movlw	2	; select bank4/5
 10561  06A5  0087               	movwf	7
 10562  06A6  0801               	movf	1,w
 10563  06A7  00A3               	movwf	??i1_display_update+3
 10564  06A8  01A4               	clrf	??i1_display_update+4
 10565  06A9  0823               	movf	??i1_display_update+3,w
 10566  06AA  00F2               	movwf	i1___awdiv@dividend
 10567  06AB  0824               	movf	??i1_display_update+4,w
 10568  06AC  00F3               	movwf	i1___awdiv@dividend+1
 10569  06AD  318C  246C  3186   	fcall	i1___awdiv
 10570  06B0  0871               	movf	?i1___awdiv+1,w
 10571  06B1  0085               	movwf	5
 10572  06B2  0870               	movf	?i1___awdiv,w
 10573  06B3  0084               	movwf	4
 10574  06B4  3000               	movlw	low (_segmcode| (0+32768))
 10575  06B5  0784               	addwf	4,f
 10576  06B6  3090               	movlw	high (_segmcode| (0+32768))
 10577  06B7  3D85               	addwfc	5,f
 10578  06B8  0800               	movf	0,w	;code access
 10579  06B9  0020               	movlb	0	; select bank0
 10580  06BA  00A5               	movwf	??i1_display_update+5
 10581  06BB  0825               	movf	??i1_display_update+5,w
 10582  06BC  00FA               	movwf	i1display_write_once@ML
 10583  06BD  300A               	movlw	10
 10584  06BE  00F0               	movwf	i1___awmod@divisor
 10585  06BF  3000               	movlw	0
 10586  06C0  00F1               	movwf	i1___awmod@divisor+1
 10587  06C1  082B               	movf	i1display_update@pdata,w
 10588  06C2  3E04               	addlw	4
 10589  06C3  0086               	movwf	6
 10590  06C4  3002               	movlw	2	; select bank4/5
 10591  06C5  0087               	movwf	7
 10592  06C6  0801               	movf	1,w
 10593  06C7  00A6               	movwf	??i1_display_update+6
 10594  06C8  01A7               	clrf	??i1_display_update+7
 10595  06C9  0826               	movf	??i1_display_update+6,w
 10596  06CA  00F2               	movwf	i1___awmod@dividend
 10597  06CB  0827               	movf	??i1_display_update+7,w
 10598  06CC  00F3               	movwf	i1___awmod@dividend+1
 10599  06CD  318B  239C  3186   	fcall	i1___awmod
 10600  06D0  0871               	movf	?i1___awmod+1,w
 10601  06D1  0085               	movwf	5
 10602  06D2  0870               	movf	?i1___awmod,w
 10603  06D3  0084               	movwf	4
 10604  06D4  3000               	movlw	low (_segmcode| (0+32768))
 10605  06D5  0784               	addwf	4,f
 10606  06D6  3090               	movlw	high (_segmcode| (0+32768))
 10607  06D7  3D85               	addwfc	5,f
 10608  06D8  0800               	movf	0,w	;code access
 10609  06D9  0020               	movlb	0	; select bank0
 10610  06DA  00A8               	movwf	??i1_display_update+8
 10611  06DB  0828               	movf	??i1_display_update+8,w
 10612  06DC  00FB               	movwf	i1display_write_once@MR
 10613  06DD  082A               	movf	i1_display_update$1570+1,w
 10614  06DE  0085               	movwf	5
 10615  06DF  0829               	movf	i1_display_update$1570,w
 10616  06E0  0084               	movwf	4
 10617  06E1  3000               	movlw	low (_segmcode| (0+32768))
 10618  06E2  0784               	addwf	4,f
 10619  06E3  3090               	movlw	high (_segmcode| (0+32768))
 10620  06E4  3D85               	addwfc	5,f
 10621  06E5  0800               	movf	0,w	;code access
 10622  06E6  3189  2179         	fcall	i1_display_write_once
 10623  06E8  0008               	return
 10624  06E9                     __end_ofi1_display_update:	
 10625                           ;display.c: 94:     return;
 10626                           
 10627                           
 10628                           	psect	text52
 10629  0979                     __ptext52:	
 10630 ;; *************** function i1_display_write_once *****************
 10631 ;; Defined at:
 10632 ;;		line 56 in file "display.c"
 10633 ;; Parameters:    Size  Location     Type
 10634 ;;  HL              1    wreg     unsigned char 
 10635 ;;  HR              1    9[COMMON] unsigned char 
 10636 ;;  ML              1   10[COMMON] unsigned char 
 10637 ;;  MR              1   11[COMMON] unsigned char 
 10638 ;; Auto vars:     Size  Location     Type
 10639 ;;  HL              1   12[COMMON] unsigned char 
 10640 ;; Return value:  Size  Location     Type
 10641 ;;                  1    wreg      void 
 10642 ;; Registers used:
 10643 ;;		wreg, status,2, status,0, pclath, cstack
 10644 ;; Tracked objects:
 10645 ;;		On entry : 0/0
 10646 ;;		On exit  : 0/0
 10647 ;;		Unchanged: 0/0
 10648 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10649 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10650 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10651 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10652 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10653 ;;Total ram usage:        4 bytes
 10654 ;; Hardware stack levels used:    1
 10655 ;; Hardware stack levels required when called:    2
 10656 ;; This function calls:
 10657 ;;		i1_display_control595_delay
 10658 ;;		i1_display_write_byte
 10659 ;; This function is called by:
 10660 ;;		i1_display_update
 10661 ;; This function uses a non-reentrant model
 10662 ;;
 10663                           
 10664                           
 10665                           ;psect for function i1_display_write_once
 10666  0979                     i1_display_write_once:	
 10667                           
 10668                           ;incstack = 0
 10669                           ; Regs used in i1_display_write_once: [wreg+status,2+status,0+pclath+cstack]
 10670                           ;i1display_write_once@HL stored from wreg
 10671  0979  00FC               	movwf	i1display_write_once@HL
 10672                           
 10673                           ;display.c: 58:     display_write_byte(HL);
 10674  097A  087C               	movf	i1display_write_once@HL,w
 10675  097B  318A  2231  3189   	fcall	i1_display_write_byte
 10676                           
 10677                           ;display.c: 59:     display_write_byte(HR);
 10678  097E  0879               	movf	i1display_write_once@HR,w
 10679  097F  318A  2231  3189   	fcall	i1_display_write_byte
 10680                           
 10681                           ;display.c: 60:     display_write_byte(ML);
 10682  0982  087A               	movf	i1display_write_once@ML,w
 10683  0983  318A  2231  3189   	fcall	i1_display_write_byte
 10684                           
 10685                           ;display.c: 61:     display_write_byte(MR);
 10686  0986  087B               	movf	i1display_write_once@MR,w
 10687  0987  318A  2231  3189   	fcall	i1_display_write_byte
 10688                           
 10689                           ;display.c: 64:     LATBbits.LATB0 = PIN_LOW;
 10690  098A  0022               	movlb	2	; select bank2
 10691  098B  100D               	bcf	13,0	;volatile
 10692                           
 10693                           ;display.c: 65:     display_control595_delay();
 10694  098C  3197  27F5  3189   	fcall	i1_display_control595_delay
 10695                           
 10696                           ;display.c: 66:     LATBbits.LATB0 = PIN_HIGH;
 10697  098F  0022               	movlb	2	; select bank2
 10698  0990  140D               	bsf	13,0	;volatile
 10699                           
 10700                           ;display.c: 67:     display_control595_delay();
 10701  0991  3197  27F5  3189   	fcall	i1_display_control595_delay
 10702                           
 10703                           ;display.c: 69:     LATBbits.LATB1 = PIN_HIGH;
 10704  0994  0022               	movlb	2	; select bank2
 10705  0995  148D               	bsf	13,1	;volatile
 10706                           
 10707                           ;display.c: 70:  display_control595_delay();
 10708  0996  3197  27F5         	fcall	i1_display_control595_delay
 10709                           
 10710                           ;display.c: 71:     LATBbits.LATB1 = PIN_LOW;
 10711  0998  0022               	movlb	2	; select bank2
 10712  0999  108D               	bcf	13,1	;volatile
 10713  099A  0008               	return
 10714  099B                     __end_ofi1_display_write_once:	
 10715                           
 10716                           	psect	text53
 10717  0A31                     __ptext53:	
 10718 ;; *************** function i1_display_write_byte *****************
 10719 ;; Defined at:
 10720 ;;		line 44 in file "display.c"
 10721 ;; Parameters:    Size  Location     Type
 10722 ;;  data            1    wreg     unsigned char 
 10723 ;; Auto vars:     Size  Location     Type
 10724 ;;  data            1    4[COMMON] unsigned char 
 10725 ;;  display_writ    1    5[COMMON] unsigned char 
 10726 ;; Return value:  Size  Location     Type
 10727 ;;                  1    wreg      void 
 10728 ;; Registers used:
 10729 ;;		wreg, status,2, status,0, pclath, cstack
 10730 ;; Tracked objects:
 10731 ;;		On entry : 0/0
 10732 ;;		On exit  : 0/0
 10733 ;;		Unchanged: 0/0
 10734 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10735 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10736 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10737 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10738 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10739 ;;Total ram usage:        4 bytes
 10740 ;; Hardware stack levels used:    1
 10741 ;; Hardware stack levels required when called:    1
 10742 ;; This function calls:
 10743 ;;		i1_display_control595_delay
 10744 ;; This function is called by:
 10745 ;;		i1_display_write_once
 10746 ;; This function uses a non-reentrant model
 10747 ;;
 10748                           
 10749                           
 10750                           ;psect for function i1_display_write_byte
 10751  0A31                     i1_display_write_byte:	
 10752                           
 10753                           ;incstack = 0
 10754                           ; Regs used in i1_display_write_byte: [wreg+status,2+status,0+pclath+cstack]
 10755                           ;i1display_write_byte@data stored from wreg
 10756  0A31  00F4               	movwf	i1display_write_byte@data
 10757                           
 10758                           ;display.c: 45:     u8 i;;display.c: 46:     for(i = 0; i < 8; i++){
 10759  0A32  01F5               	clrf	i1display_write_byte@i
 10760  0A33                     L6:	
 10761  0A33  3008               	movlw	8
 10762  0A34  0275               	subwf	i1display_write_byte@i,w
 10763  0A35  1803               	btfsc	3,0
 10764  0A36  0008               	return
 10765                           
 10766                           ;display.c: 47:   LATBbits.LATB5 = (data & 0x80) >> 7;
 10767  0A37  0874               	movf	i1display_write_byte@data,w
 10768  0A38  00F2               	movwf	??i1_display_write_byte
 10769  0A39  3007               	movlw	7
 10770  0A3A                     u256_25:	
 10771  0A3A  36F2               	lsrf	??i1_display_write_byte,f
 10772  0A3B  0B89               	decfsz	9,f
 10773  0A3C  2A3A               	goto	u256_25
 10774  0A3D  0872               	movf	??i1_display_write_byte,w
 10775  0A3E  3901               	andlw	1
 10776  0A3F  00F3               	movwf	??i1_display_write_byte+1
 10777  0A40  0EF3               	swapf	??i1_display_write_byte+1,f
 10778  0A41  0DF3               	rlf	??i1_display_write_byte+1,f
 10779  0A42  0022               	movlb	2	; select bank2
 10780  0A43  080D               	movf	13,w	;volatile
 10781  0A44  0673               	xorwf	??i1_display_write_byte+1,w
 10782  0A45  39DF               	andlw	-33
 10783  0A46  0673               	xorwf	??i1_display_write_byte+1,w
 10784  0A47  008D               	movwf	13	;volatile
 10785                           
 10786                           ;display.c: 48:         LATBbits.LATB0 = PIN_LOW;
 10787  0A48  100D               	bcf	13,0	;volatile
 10788                           
 10789                           ;display.c: 49:   display_control595_delay();
 10790  0A49  3197  27F5  318A   	fcall	i1_display_control595_delay
 10791                           
 10792                           ;display.c: 50:         LATBbits.LATB0 = PIN_HIGH;
 10793  0A4C  0022               	movlb	2	; select bank2
 10794  0A4D  140D               	bsf	13,0	;volatile
 10795                           
 10796                           ;display.c: 51:   display_control595_delay();
 10797  0A4E  3197  27F5  318A   	fcall	i1_display_control595_delay
 10798                           
 10799                           ;display.c: 52:         data <<= 1;
 10800  0A51  1003               	clrc
 10801  0A52  0DF4               	rlf	i1display_write_byte@data,f
 10802                           
 10803                           ;display.c: 53:     }
 10804  0A53  3001               	movlw	1
 10805  0A54  00F2               	movwf	??i1_display_write_byte
 10806  0A55  0872               	movf	??i1_display_write_byte,w
 10807  0A56  07F5               	addwf	i1display_write_byte@i,f
 10808  0A57  2A33               	goto	L6
 10809  0A58                     __end_ofi1_display_write_byte:	
 10810                           
 10811                           	psect	text54
 10812  17F5                     __ptext54:	
 10813 ;; *************** function i1_display_control595_delay *****************
 10814 ;; Defined at:
 10815 ;;		line 28 in file "display.c"
 10816 ;; Parameters:    Size  Location     Type
 10817 ;;		None
 10818 ;; Auto vars:     Size  Location     Type
 10819 ;;  display_cont    1    1[COMMON] unsigned char 
 10820 ;; Return value:  Size  Location     Type
 10821 ;;                  1    wreg      void 
 10822 ;; Registers used:
 10823 ;;		wreg, status,2, status,0
 10824 ;; Tracked objects:
 10825 ;;		On entry : 0/0
 10826 ;;		On exit  : 0/0
 10827 ;;		Unchanged: 0/0
 10828 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10829 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10830 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10831 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10832 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10833 ;;Total ram usage:        2 bytes
 10834 ;; Hardware stack levels used:    1
 10835 ;; This function calls:
 10836 ;;		Nothing
 10837 ;; This function is called by:
 10838 ;;		i1_display_write_byte
 10839 ;;		i1_display_write_once
 10840 ;; This function uses a non-reentrant model
 10841 ;;
 10842                           
 10843                           
 10844                           ;psect for function i1_display_control595_delay
 10845  17F5                     i1_display_control595_delay:	
 10846                           
 10847                           ;display.c: 29:    u8 times = 10;
 10848                           
 10849                           ;incstack = 0
 10850                           ; Regs used in i1_display_control595_delay: [wreg+status,2+status,0]
 10851  17F5  300A               	movlw	10
 10852  17F6  00F0               	movwf	??i1_display_control595_delay
 10853  17F7  0870               	movf	??i1_display_control595_delay,w
 10854  17F8  00F1               	movwf	i1display_control595_delay@times
 10855  17F9                     i1l566:	
 10856                           ;display.c: 33:    }
 10857                           
 10858                           ;display.c: 30:    while(times > 0){
 10859                           
 10860                           
 10861                           ;display.c: 30:    while(times > 0){
 10862  17F9  0871               	movf	i1display_control595_delay@times,w
 10863  17FA  1903               	btfsc	3,2
 10864  17FB  0008               	return
 10865                           
 10866                           ;display.c: 31:     __nop();
 10867  17FC  0000               	nop
 10868                           
 10869                           ;display.c: 32:        times--;
 10870  17FD  3001               	movlw	1
 10871  17FE  02F1               	subwf	i1display_control595_delay@times,f
 10872  17FF  2FF9               	goto	i1l566
 10873  1800                     __end_ofi1_display_control595_delay:	
 10874                           
 10875                           	psect	text55
 10876  0B9C                     __ptext55:	
 10877 ;; *************** function i1___awmod *****************
 10878 ;; Defined at:
 10879 ;;		line 5 in file "F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\awmod.c"
 10880 ;; Parameters:    Size  Location     Type
 10881 ;;  divisor         2    0[COMMON] int 
 10882 ;;  dividend        2    2[COMMON] int 
 10883 ;; Auto vars:     Size  Location     Type
 10884 ;;  __awmod         1    6[COMMON] unsigned char 
 10885 ;;  __awmod         1    5[COMMON] unsigned char 
 10886 ;; Return value:  Size  Location     Type
 10887 ;;                  2    0[COMMON] int 
 10888 ;; Registers used:
 10889 ;;		wreg, status,2, status,0
 10890 ;; Tracked objects:
 10891 ;;		On entry : 0/0
 10892 ;;		On exit  : 0/0
 10893 ;;		Unchanged: 0/0
 10894 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10895 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10896 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10897 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10898 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10899 ;;Total ram usage:        7 bytes
 10900 ;; Hardware stack levels used:    1
 10901 ;; This function calls:
 10902 ;;		Nothing
 10903 ;; This function is called by:
 10904 ;;		_update_time
 10905 ;;		i1_display_update
 10906 ;; This function uses a non-reentrant model
 10907 ;;
 10908                           
 10909                           
 10910                           ;psect for function i1___awmod
 10911  0B9C                     i1___awmod:	
 10912                           
 10913                           ;incstack = 0
 10914                           ; Regs used in i1___awmod: [wreg+status,2+status,0]
 10915  0B9C  01F6               	clrf	i1___awmod@sign
 10916  0B9D  1FF3               	btfss	i1___awmod@dividend+1,7
 10917  0B9E  2BA6               	goto	i1l3076
 10918  0B9F  09F2               	comf	i1___awmod@dividend,f
 10919  0BA0  09F3               	comf	i1___awmod@dividend+1,f
 10920  0BA1  0AF2               	incf	i1___awmod@dividend,f
 10921  0BA2  1903               	skipnz
 10922  0BA3  0AF3               	incf	i1___awmod@dividend+1,f
 10923  0BA4  01F6               	clrf	i1___awmod@sign
 10924  0BA5  0AF6               	incf	i1___awmod@sign,f
 10925  0BA6                     i1l3076:	
 10926  0BA6  1FF1               	btfss	i1___awmod@divisor+1,7
 10927  0BA7  2BAD               	goto	i1l3080
 10928  0BA8  09F0               	comf	i1___awmod@divisor,f
 10929  0BA9  09F1               	comf	i1___awmod@divisor+1,f
 10930  0BAA  0AF0               	incf	i1___awmod@divisor,f
 10931  0BAB  1903               	skipnz
 10932  0BAC  0AF1               	incf	i1___awmod@divisor+1,f
 10933  0BAD                     i1l3080:	
 10934  0BAD  0870               	movf	i1___awmod@divisor,w
 10935  0BAE  0471               	iorwf	i1___awmod@divisor+1,w
 10936  0BAF  1903               	btfsc	3,2
 10937  0BB0  2BD4               	goto	i1l3098
 10938  0BB1  01F5               	clrf	i1___awmod@counter
 10939  0BB2  0AF5               	incf	i1___awmod@counter,f
 10940  0BB3                     i1l3088:	
 10941  0BB3  1BF1               	btfsc	i1___awmod@divisor+1,7
 10942  0BB4  2BBF               	goto	i1l3090
 10943  0BB5  3001               	movlw	1
 10944  0BB6                     u300_25:	
 10945  0BB6  35F0               	lslf	i1___awmod@divisor,f
 10946  0BB7  0DF1               	rlf	i1___awmod@divisor+1,f
 10947  0BB8  0B89               	decfsz	9,f
 10948  0BB9  2BB6               	goto	u300_25
 10949  0BBA  3001               	movlw	1
 10950  0BBB  00F4               	movwf	??i1___awmod
 10951  0BBC  0874               	movf	??i1___awmod,w
 10952  0BBD  07F5               	addwf	i1___awmod@counter,f
 10953  0BBE  2BB3               	goto	i1l3088
 10954  0BBF                     i1l3090:	
 10955  0BBF  0871               	movf	i1___awmod@divisor+1,w
 10956  0BC0  0273               	subwf	i1___awmod@dividend+1,w
 10957  0BC1  1D03               	skipz
 10958  0BC2  2BC5               	goto	u302_25
 10959  0BC3  0870               	movf	i1___awmod@divisor,w
 10960  0BC4  0272               	subwf	i1___awmod@dividend,w
 10961  0BC5                     u302_25:	
 10962  0BC5  1C03               	skipc
 10963  0BC6  2BCB               	goto	i1l3094
 10964  0BC7  0870               	movf	i1___awmod@divisor,w
 10965  0BC8  02F2               	subwf	i1___awmod@dividend,f
 10966  0BC9  0871               	movf	i1___awmod@divisor+1,w
 10967  0BCA  3BF3               	subwfb	i1___awmod@dividend+1,f
 10968  0BCB                     i1l3094:	
 10969  0BCB  3001               	movlw	1
 10970  0BCC                     u303_25:	
 10971  0BCC  36F1               	lsrf	i1___awmod@divisor+1,f
 10972  0BCD  0CF0               	rrf	i1___awmod@divisor,f
 10973  0BCE  0B89               	decfsz	9,f
 10974  0BCF  2BCC               	goto	u303_25
 10975  0BD0  3001               	movlw	1
 10976  0BD1  02F5               	subwf	i1___awmod@counter,f
 10977  0BD2  1D03               	btfss	3,2
 10978  0BD3  2BBF               	goto	i1l3090
 10979  0BD4                     i1l3098:	
 10980  0BD4  0876               	movf	i1___awmod@sign,w
 10981  0BD5  1903               	btfsc	3,2
 10982  0BD6  2BDC               	goto	i1l3102
 10983  0BD7  09F2               	comf	i1___awmod@dividend,f
 10984  0BD8  09F3               	comf	i1___awmod@dividend+1,f
 10985  0BD9  0AF2               	incf	i1___awmod@dividend,f
 10986  0BDA  1903               	skipnz
 10987  0BDB  0AF3               	incf	i1___awmod@dividend+1,f
 10988  0BDC                     i1l3102:	
 10989  0BDC  0873               	movf	i1___awmod@dividend+1,w
 10990  0BDD  00F1               	movwf	?i1___awmod+1
 10991  0BDE  0872               	movf	i1___awmod@dividend,w
 10992  0BDF  00F0               	movwf	?i1___awmod
 10993  0BE0  0008               	return
 10994  0BE1                     __end_ofi1___awmod:	
 10995                           
 10996                           	psect	text56
 10997  0C6C                     __ptext56:	
 10998 ;; *************** function i1___awdiv *****************
 10999 ;; Defined at:
 11000 ;;		line 5 in file "F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\awdiv.c"
 11001 ;; Parameters:    Size  Location     Type
 11002 ;;  divisor         2    0[COMMON] int 
 11003 ;;  dividend        2    2[COMMON] int 
 11004 ;; Auto vars:     Size  Location     Type
 11005 ;;  __awdiv         2    7[COMMON] int 
 11006 ;;  __awdiv         1    6[COMMON] unsigned char 
 11007 ;;  __awdiv         1    5[COMMON] unsigned char 
 11008 ;; Return value:  Size  Location     Type
 11009 ;;                  2    0[COMMON] int 
 11010 ;; Registers used:
 11011 ;;		wreg, status,2, status,0
 11012 ;; Tracked objects:
 11013 ;;		On entry : 0/0
 11014 ;;		On exit  : 0/0
 11015 ;;		Unchanged: 0/0
 11016 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11017 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11018 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11019 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11020 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11021 ;;Total ram usage:        9 bytes
 11022 ;; Hardware stack levels used:    1
 11023 ;; This function calls:
 11024 ;;		Nothing
 11025 ;; This function is called by:
 11026 ;;		i1_display_update
 11027 ;; This function uses a non-reentrant model
 11028 ;;
 11029                           
 11030                           
 11031                           ;psect for function i1___awdiv
 11032  0C6C                     i1___awdiv:	
 11033                           
 11034                           ;incstack = 0
 11035                           ; Regs used in i1___awdiv: [wreg+status,2+status,0]
 11036  0C6C  01F6               	clrf	i1___awdiv@sign
 11037  0C6D  1FF1               	btfss	i1___awdiv@divisor+1,7
 11038  0C6E  2C76               	goto	i1l3032
 11039  0C6F  09F0               	comf	i1___awdiv@divisor,f
 11040  0C70  09F1               	comf	i1___awdiv@divisor+1,f
 11041  0C71  0AF0               	incf	i1___awdiv@divisor,f
 11042  0C72  1903               	skipnz
 11043  0C73  0AF1               	incf	i1___awdiv@divisor+1,f
 11044  0C74  01F6               	clrf	i1___awdiv@sign
 11045  0C75  0AF6               	incf	i1___awdiv@sign,f
 11046  0C76                     i1l3032:	
 11047  0C76  1FF3               	btfss	i1___awdiv@dividend+1,7
 11048  0C77  2C81               	goto	i1l3038
 11049  0C78  09F2               	comf	i1___awdiv@dividend,f
 11050  0C79  09F3               	comf	i1___awdiv@dividend+1,f
 11051  0C7A  0AF2               	incf	i1___awdiv@dividend,f
 11052  0C7B  1903               	skipnz
 11053  0C7C  0AF3               	incf	i1___awdiv@dividend+1,f
 11054  0C7D  3001               	movlw	1
 11055  0C7E  00F4               	movwf	??i1___awdiv
 11056  0C7F  0874               	movf	??i1___awdiv,w
 11057  0C80  06F6               	xorwf	i1___awdiv@sign,f
 11058  0C81                     i1l3038:	
 11059  0C81  01F7               	clrf	i1___awdiv@quotient
 11060  0C82  01F8               	clrf	i1___awdiv@quotient+1
 11061  0C83  0870               	movf	i1___awdiv@divisor,w
 11062  0C84  0471               	iorwf	i1___awdiv@divisor+1,w
 11063  0C85  1903               	btfsc	3,2
 11064  0C86  2CB0               	goto	i1l3060
 11065  0C87  01F5               	clrf	i1___awdiv@counter
 11066  0C88  0AF5               	incf	i1___awdiv@counter,f
 11067  0C89                     i1l3048:	
 11068  0C89  1BF1               	btfsc	i1___awdiv@divisor+1,7
 11069  0C8A  2C95               	goto	i1l3050
 11070  0C8B  3001               	movlw	1
 11071  0C8C                     u290_25:	
 11072  0C8C  35F0               	lslf	i1___awdiv@divisor,f
 11073  0C8D  0DF1               	rlf	i1___awdiv@divisor+1,f
 11074  0C8E  0B89               	decfsz	9,f
 11075  0C8F  2C8C               	goto	u290_25
 11076  0C90  3001               	movlw	1
 11077  0C91  00F4               	movwf	??i1___awdiv
 11078  0C92  0874               	movf	??i1___awdiv,w
 11079  0C93  07F5               	addwf	i1___awdiv@counter,f
 11080  0C94  2C89               	goto	i1l3048
 11081  0C95                     i1l3050:	
 11082  0C95  3001               	movlw	1
 11083  0C96                     u292_25:	
 11084  0C96  35F7               	lslf	i1___awdiv@quotient,f
 11085  0C97  0DF8               	rlf	i1___awdiv@quotient+1,f
 11086  0C98  0B89               	decfsz	9,f
 11087  0C99  2C96               	goto	u292_25
 11088  0C9A  0871               	movf	i1___awdiv@divisor+1,w
 11089  0C9B  0273               	subwf	i1___awdiv@dividend+1,w
 11090  0C9C  1D03               	skipz
 11091  0C9D  2CA0               	goto	u293_25
 11092  0C9E  0870               	movf	i1___awdiv@divisor,w
 11093  0C9F  0272               	subwf	i1___awdiv@dividend,w
 11094  0CA0                     u293_25:	
 11095  0CA0  1C03               	skipc
 11096  0CA1  2CA7               	goto	i1l3056
 11097  0CA2  0870               	movf	i1___awdiv@divisor,w
 11098  0CA3  02F2               	subwf	i1___awdiv@dividend,f
 11099  0CA4  0871               	movf	i1___awdiv@divisor+1,w
 11100  0CA5  3BF3               	subwfb	i1___awdiv@dividend+1,f
 11101  0CA6  1477               	bsf	i1___awdiv@quotient,0
 11102  0CA7                     i1l3056:	
 11103  0CA7  3001               	movlw	1
 11104  0CA8                     u294_25:	
 11105  0CA8  36F1               	lsrf	i1___awdiv@divisor+1,f
 11106  0CA9  0CF0               	rrf	i1___awdiv@divisor,f
 11107  0CAA  0B89               	decfsz	9,f
 11108  0CAB  2CA8               	goto	u294_25
 11109  0CAC  3001               	movlw	1
 11110  0CAD  02F5               	subwf	i1___awdiv@counter,f
 11111  0CAE  1D03               	btfss	3,2
 11112  0CAF  2C95               	goto	i1l3050
 11113  0CB0                     i1l3060:	
 11114  0CB0  0876               	movf	i1___awdiv@sign,w
 11115  0CB1  1903               	btfsc	3,2
 11116  0CB2  2CB8               	goto	i1l3064
 11117  0CB3  09F7               	comf	i1___awdiv@quotient,f
 11118  0CB4  09F8               	comf	i1___awdiv@quotient+1,f
 11119  0CB5  0AF7               	incf	i1___awdiv@quotient,f
 11120  0CB6  1903               	skipnz
 11121  0CB7  0AF8               	incf	i1___awdiv@quotient+1,f
 11122  0CB8                     i1l3064:	
 11123  0CB8  0878               	movf	i1___awdiv@quotient+1,w
 11124  0CB9  00F1               	movwf	?i1___awdiv+1
 11125  0CBA  0877               	movf	i1___awdiv@quotient,w
 11126  0CBB  00F0               	movwf	?i1___awdiv
 11127  0CBC  0008               	return
 11128  0CBD                     __end_ofi1___awdiv:	
 11129                           
 11130                           	psect	text57
 11131  0483                     __ptext57:	
 11132 ;; *************** function _check_err *****************
 11133 ;; Defined at:
 11134 ;;		line 50 in file "bpc.c"
 11135 ;; Parameters:    Size  Location     Type
 11136 ;;  pdata           1    wreg     PTR volatile struct .
 11137 ;;		 -> g_data(39), 
 11138 ;; Auto vars:     Size  Location     Type
 11139 ;;  pdata           1   10[BANK0 ] PTR volatile struct .
 11140 ;;		 -> g_data(39), 
 11141 ;;  i               1    8[BANK0 ] unsigned char 
 11142 ;;  check           1    9[BANK0 ] unsigned char 
 11143 ;; Return value:  Size  Location     Type
 11144 ;;                  2    0[COMMON] int 
 11145 ;; Registers used:
 11146 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 11147 ;; Tracked objects:
 11148 ;;		On entry : 0/0
 11149 ;;		On exit  : 0/0
 11150 ;;		Unchanged: 0/0
 11151 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11152 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11153 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11154 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11155 ;;      Totals:         5      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11156 ;;Total ram usage:       16 bytes
 11157 ;; Hardware stack levels used:    1
 11158 ;; This function calls:
 11159 ;;		Nothing
 11160 ;; This function is called by:
 11161 ;;		_bpc_proc
 11162 ;; This function uses a non-reentrant model
 11163 ;;
 11164                           
 11165                           
 11166                           ;psect for function _check_err
 11167  0483                     _check_err:	
 11168                           
 11169                           ;incstack = 0
 11170                           ; Regs used in _check_err: [wreg-fsr1h+status,2+status,0]
 11171                           ;check_err@pdata stored from wreg
 11172  0483  0020               	movlb	0	; select bank0
 11173  0484  00AA               	movwf	check_err@pdata
 11174                           
 11175                           ;bpc.c: 50: static int check_err(G_DATA *pdata);bpc.c: 51: {;bpc.c: 53:     pdata->g_tim
      +                          e_h = pdata->g_recv_buf[CODE_H_1] * 4 + pdata->g_recv_buf[CODE_H_2];
 11176  0485  082A               	movf	check_err@pdata,w
 11177  0486  3E11               	addlw	17
 11178  0487  0086               	movwf	6
 11179  0488  3002               	movlw	2	; select bank4/5
 11180  0489  0087               	movwf	7
 11181  048A  082A               	movf	check_err@pdata,w
 11182  048B  3E10               	addlw	16
 11183  048C  0084               	movwf	4
 11184  048D  3002               	movlw	2	; select bank4/5
 11185  048E  0085               	movwf	5
 11186  048F  0800               	movf	0,w
 11187  0490  00F2               	movwf	??_check_err
 11188  0491  3001               	movlw	1
 11189  0492                     u361_25:	
 11190  0492  35F2               	lslf	??_check_err,f
 11191  0493  3EFF               	addlw	-1
 11192  0494  1D03               	skipz
 11193  0495  2C92               	goto	u361_25
 11194  0496  3572               	lslf	??_check_err,w
 11195  0497  0701               	addwf	1,w
 11196  0498  00F3               	movwf	??_check_err+1
 11197  0499  082A               	movf	check_err@pdata,w
 11198  049A  3E03               	addlw	3
 11199  049B  0086               	movwf	6
 11200  049C  3002               	movlw	2	; select bank4/5
 11201  049D  0087               	movwf	7
 11202  049E  0873               	movf	??_check_err+1,w
 11203  049F  0081               	movwf	1
 11204                           
 11205                           ;bpc.c: 54:     pdata->g_time_m = pdata->g_recv_buf[CODE_M_1] * 16 + pdata->g_recv_buf[C
      +                          ODE_M_2] * 4 + pdata->g_recv_buf[CODE_M_3];
 11206  04A0  082A               	movf	check_err@pdata,w
 11207  04A1  3E14               	addlw	20
 11208  04A2  0086               	movwf	6
 11209  04A3  3002               	movlw	2	; select bank4/5
 11210  04A4  0087               	movwf	7
 11211  04A5  082A               	movf	check_err@pdata,w
 11212  04A6  3E13               	addlw	19
 11213  04A7  0084               	movwf	4
 11214  04A8  3002               	movlw	2	; select bank4/5
 11215  04A9  0085               	movwf	5
 11216  04AA  0800               	movf	0,w
 11217  04AB  00F2               	movwf	??_check_err
 11218  04AC  3002               	movlw	2
 11219  04AD                     u362_25:	
 11220  04AD  35F2               	lslf	??_check_err,f
 11221  04AE  0B89               	decfsz	9,f
 11222  04AF  2CAD               	goto	u362_25
 11223  04B0  082A               	movf	check_err@pdata,w
 11224  04B1  3E12               	addlw	18
 11225  04B2  0084               	movwf	4
 11226  04B3  3002               	movlw	2	; select bank4/5
 11227  04B4  0085               	movwf	5
 11228  04B5  0800               	movf	0,w
 11229  04B6  00F3               	movwf	??_check_err+1
 11230  04B7  3003               	movlw	3
 11231  04B8                     u363_25:	
 11232  04B8  35F3               	lslf	??_check_err+1,f
 11233  04B9  3EFF               	addlw	-1
 11234  04BA  1D03               	skipz
 11235  04BB  2CB8               	goto	u363_25
 11236  04BC  3573               	lslf	??_check_err+1,w
 11237  04BD  0772               	addwf	??_check_err,w
 11238  04BE  0701               	addwf	1,w
 11239  04BF  00F4               	movwf	??_check_err+2
 11240  04C0  082A               	movf	check_err@pdata,w
 11241  04C1  3E04               	addlw	4
 11242  04C2  0086               	movwf	6
 11243  04C3  3002               	movlw	2	; select bank4/5
 11244  04C4  0087               	movwf	7
 11245  04C5  0874               	movf	??_check_err+2,w
 11246  04C6  0081               	movwf	1
 11247                           
 11248                           ;bpc.c: 55:     pdata->g_time_s = 10 + ((pdata->g_recv_buf[CODE_P1] == 1)? 20: (pdata->g
      +                          _recv_buf[CODE_P1] == 2)? 40: 0);
 11249  04C7  082A               	movf	check_err@pdata,w
 11250  04C8  3E0E               	addlw	14
 11251  04C9  0086               	movwf	6
 11252  04CA  3002               	movlw	2	; select bank4/5
 11253  04CB  0087               	movwf	7
 11254  04CC  0301               	decf	1,w
 11255  04CD  1903               	btfsc	3,2
 11256  04CE  2CE4               	goto	i1l3522
 11257  04CF  082A               	movf	check_err@pdata,w
 11258  04D0  3E0E               	addlw	14
 11259  04D1  0086               	movwf	6
 11260  04D2  3002               	movlw	2	; select bank4/5
 11261  04D3  0087               	movwf	7
 11262  04D4  3002               	movlw	2
 11263  04D5  0601               	xorwf	1,w
 11264  04D6  1903               	btfsc	3,2
 11265  04D7  2CDB               	goto	i1l3520
 11266  04D8  01A2               	clrf	_check_err$1167
 11267  04D9  01A3               	clrf	_check_err$1167+1
 11268  04DA  2CDF               	goto	i1l429
 11269  04DB                     i1l3520:	
 11270  04DB  3028               	movlw	40
 11271  04DC  00A2               	movwf	_check_err$1167
 11272  04DD  3000               	movlw	0
 11273  04DE  00A3               	movwf	_check_err$1167+1
 11274  04DF                     i1l429:	
 11275  04DF  0823               	movf	_check_err$1167+1,w
 11276  04E0  00A1               	movwf	_check_err$1166+1
 11277  04E1  0822               	movf	_check_err$1167,w
 11278  04E2  00A0               	movwf	_check_err$1166
 11279  04E3  2CE8               	goto	i1l3524
 11280  04E4                     i1l3522:	
 11281  04E4  3014               	movlw	20
 11282  04E5  00A0               	movwf	_check_err$1166
 11283  04E6  3000               	movlw	0
 11284  04E7  00A1               	movwf	_check_err$1166+1
 11285  04E8                     i1l3524:	
 11286  04E8  0820               	movf	_check_err$1166,w
 11287  04E9  3E0A               	addlw	10
 11288  04EA  00F2               	movwf	??_check_err
 11289  04EB  082A               	movf	check_err@pdata,w
 11290  04EC  3E05               	addlw	5
 11291  04ED  0086               	movwf	6
 11292  04EE  3002               	movlw	2	; select bank4/5
 11293  04EF  0087               	movwf	7
 11294  04F0  0872               	movf	??_check_err,w
 11295  04F1  0081               	movwf	1
 11296                           
 11297                           ;bpc.c: 57:     u8 check = 0;
 11298  04F2  01A9               	clrf	check_err@check
 11299                           
 11300                           ;bpc.c: 58:     for(u8 i = CODE_P1; i < CODE_P3; i++)
 11301  04F3  01A8               	clrf	check_err@i
 11302  04F4  0AA8               	incf	check_err@i,f
 11303  04F5  300A               	movlw	10
 11304  04F6  0228               	subwf	check_err@i,w
 11305  04F7  1803               	btfsc	3,0
 11306  04F8  2D0D               	goto	i1l3540
 11307  04F9                     i1l3534:	
 11308                           
 11309                           ;bpc.c: 59:     {;bpc.c: 60:         check ^= pdata->g_recv_buf[i];
 11310  04F9  0828               	movf	check_err@i,w
 11311  04FA  3E0D               	addlw	13
 11312  04FB  072A               	addwf	check_err@pdata,w
 11313  04FC  00F2               	movwf	??_check_err
 11314  04FD  0872               	movf	??_check_err,w
 11315  04FE  0086               	movwf	6
 11316  04FF  3002               	movlw	2	; select bank4/5
 11317  0500  0087               	movwf	7
 11318  0501  0801               	movf	1,w
 11319  0502  00F3               	movwf	??_check_err+1
 11320  0503  0873               	movf	??_check_err+1,w
 11321  0504  06A9               	xorwf	check_err@check,f
 11322                           
 11323                           ;bpc.c: 61:     }
 11324  0505  3001               	movlw	1
 11325  0506  00F2               	movwf	??_check_err
 11326  0507  0872               	movf	??_check_err,w
 11327  0508  07A8               	addwf	check_err@i,f
 11328  0509  300A               	movlw	10
 11329  050A  0228               	subwf	check_err@i,w
 11330  050B  1C03               	skipc
 11331  050C  2CF9               	goto	i1l3534
 11332  050D                     i1l3540:	
 11333                           
 11334                           ;bpc.c: 62:     if( (((0 == check) || (3 == check))) && (pdata->g_recv_buf[CODE_P3] % 2 
      +                          == 0) )
 11335  050D  0829               	movf	check_err@check,w
 11336  050E  1903               	btfsc	3,2
 11337  050F  2D14               	goto	i1l3544
 11338  0510  3003               	movlw	3
 11339  0511  0629               	xorwf	check_err@check,w
 11340  0512  1D03               	btfss	3,2
 11341  0513  2D2D               	goto	i1l3554
 11342  0514                     i1l3544:	
 11343  0514  082A               	movf	check_err@pdata,w
 11344  0515  3E17               	addlw	23
 11345  0516  0086               	movwf	6
 11346  0517  3002               	movlw	2	; select bank4/5
 11347  0518  0087               	movwf	7
 11348  0519  1801               	btfsc	1,0
 11349  051A  2D2D               	goto	i1l3554
 11350                           
 11351                           ;bpc.c: 63:     {;bpc.c: 64:         pdata->g_time_h += (2 ==pdata->g_recv_buf[CODE_P3])
      +                          ? 12 : 0;
 11352  051B  082A               	movf	check_err@pdata,w
 11353  051C  3E17               	addlw	23
 11354  051D  0086               	movwf	6
 11355  051E  3002               	movlw	2	; select bank4/5
 11356  051F  0087               	movwf	7
 11357  0520  3002               	movlw	2
 11358  0521  0601               	xorwf	1,w
 11359  0522  1903               	btfsc	3,2
 11360  0523  2D27               	goto	i1l3550
 11361  0524  01A4               	clrf	_check_err$1170
 11362  0525  01A5               	clrf	_check_err$1170+1
 11363  0526  2D2B               	goto	i1l3552
 11364  0527                     i1l3550:	
 11365  0527  300C               	movlw	12
 11366  0528  00A4               	movwf	_check_err$1170
 11367  0529  3000               	movlw	0
 11368  052A  00A5               	movwf	_check_err$1170+1
 11369  052B                     i1l3552:	
 11370  052B  0824               	movf	_check_err$1170,w
 11371  052C  2D56               	goto	L7
 11372  052D                     i1l3554:	
 11373                           ;bpc.c: 65:     }else if( (((1 == check) || (2 == check))) && ((pdata->g_recv_buf[CODE_P
      +                          3] == 1) || (pdata->g_recv_buf[CODE_P3] == 3)) )
 11374                           
 11375  052D  0329               	decf	check_err@check,w
 11376  052E  1903               	btfsc	3,2
 11377  052F  2D34               	goto	i1l3558
 11378  0530  3002               	movlw	2
 11379  0531  0629               	xorwf	check_err@check,w
 11380  0532  1D03               	btfss	3,2
 11381  0533  2D5F               	goto	i1l3570
 11382  0534                     i1l3558:	
 11383  0534  082A               	movf	check_err@pdata,w
 11384  0535  3E17               	addlw	23
 11385  0536  0086               	movwf	6
 11386  0537  3002               	movlw	2	; select bank4/5
 11387  0538  0087               	movwf	7
 11388  0539  0301               	decf	1,w
 11389  053A  1903               	btfsc	3,2
 11390  053B  2D45               	goto	i1l3562
 11391  053C  082A               	movf	check_err@pdata,w
 11392  053D  3E17               	addlw	23
 11393  053E  0086               	movwf	6
 11394  053F  3002               	movlw	2	; select bank4/5
 11395  0540  0087               	movwf	7
 11396  0541  3003               	movlw	3
 11397  0542  0601               	xorwf	1,w
 11398  0543  1D03               	btfss	3,2
 11399  0544  2D5F               	goto	i1l3570
 11400  0545                     i1l3562:	
 11401                           
 11402                           ;bpc.c: 67:     {;bpc.c: 68:         pdata->g_time_h += (3 ==pdata->g_recv_buf[CODE_P3])
      +                          ? 12 : 0;
 11403  0545  082A               	movf	check_err@pdata,w
 11404  0546  3E17               	addlw	23
 11405  0547  0086               	movwf	6
 11406  0548  3002               	movlw	2	; select bank4/5
 11407  0549  0087               	movwf	7
 11408  054A  3003               	movlw	3
 11409  054B  0601               	xorwf	1,w
 11410  054C  1903               	btfsc	3,2
 11411  054D  2D51               	goto	i1l3566
 11412  054E  01A6               	clrf	_check_err$1171
 11413  054F  01A7               	clrf	_check_err$1171+1
 11414  0550  2D55               	goto	i1l3568
 11415  0551                     i1l3566:	
 11416  0551  300C               	movlw	12
 11417  0552  00A6               	movwf	_check_err$1171
 11418  0553  3000               	movlw	0
 11419  0554  00A7               	movwf	_check_err$1171+1
 11420  0555                     i1l3568:	
 11421  0555  0826               	movf	_check_err$1171,w
 11422  0556                     L7:	
 11423  0556  00F2               	movwf	??_check_err
 11424  0557  082A               	movf	check_err@pdata,w
 11425  0558  3E03               	addlw	3
 11426  0559  0086               	movwf	6
 11427  055A  3002               	movlw	2	; select bank4/5
 11428  055B  0087               	movwf	7
 11429  055C  0872               	movf	??_check_err,w
 11430  055D  0781               	addwf	1,f
 11431                           
 11432                           ;bpc.c: 69:     }
 11433  055E  2D77               	goto	i1l3580
 11434  055F                     i1l3570:	
 11435                           ;bpc.c: 70:     else
 11436                           
 11437                           
 11438                           ;bpc.c: 71:     {;bpc.c: 72:         pdata->g_find_recv_start = FALSE;
 11439  055F  082A               	movf	check_err@pdata,w
 11440  0560  3E02               	addlw	2
 11441  0561  0086               	movwf	6
 11442  0562  3002               	movlw	2	; select bank4/5
 11443  0563  0087               	movwf	7
 11444  0564  0181               	clrf	1
 11445                           
 11446                           ;bpc.c: 73:         pdata->g_isDecoding = 0;
 11447  0565  0A2A               	incf	check_err@pdata,w
 11448  0566  0086               	movwf	6
 11449  0567  3002               	movlw	2	; select bank4/5
 11450  0568  0087               	movwf	7
 11451  0569  0181               	clrf	1
 11452                           
 11453                           ;bpc.c: 74:         pdata->g_recv_count = 0;
 11454  056A  082A               	movf	check_err@pdata,w
 11455  056B  3E0B               	addlw	11
 11456  056C  0086               	movwf	6
 11457  056D  3002               	movlw	2	; select bank4/5
 11458  056E  0087               	movwf	7
 11459  056F  3000               	movlw	0
 11460  0570  3FC0               	movwi [0]fsr1
 11461  0571  3FC1               	movwi [1]fsr1
 11462                           
 11463                           ;bpc.c: 75:         return -1;
 11464  0572  30FF               	movlw	255
 11465  0573  00F0               	movwf	?_check_err
 11466  0574  30FF               	movlw	255
 11467  0575  00F1               	movwf	?_check_err+1
 11468  0576  0008               	return
 11469  0577                     i1l3580:	
 11470                           ;bpc.c: 76:     }
 11471                           
 11472                           
 11473                           ;bpc.c: 77:     return 0;
 11474  0577  01F0               	clrf	?_check_err
 11475  0578  01F1               	clrf	?_check_err+1
 11476  0579  0008               	return
 11477  057A                     __end_of_check_err:	
 11478                           
 11479                           	psect	text58
 11480  0819                     __ptext58:	
 11481 ;; *************** function _capture_Set *****************
 11482 ;; Defined at:
 11483 ;;		line 38 in file "hardware.c"
 11484 ;; Parameters:    Size  Location     Type
 11485 ;;  isON            1    wreg     unsigned char 
 11486 ;; Auto vars:     Size  Location     Type
 11487 ;;  isON            1    0[COMMON] unsigned char 
 11488 ;; Return value:  Size  Location     Type
 11489 ;;                  1    wreg      unsigned char 
 11490 ;; Registers used:
 11491 ;;		wreg, status,2, status,0
 11492 ;; Tracked objects:
 11493 ;;		On entry : 0/0
 11494 ;;		On exit  : 0/0
 11495 ;;		Unchanged: 0/0
 11496 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11497 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11498 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11499 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11500 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11501 ;;Total ram usage:        1 bytes
 11502 ;; Hardware stack levels used:    1
 11503 ;; This function calls:
 11504 ;;		Nothing
 11505 ;; This function is called by:
 11506 ;;		_ISR
 11507 ;;		_bpc_proc
 11508 ;;		_update_time
 11509 ;; This function uses a non-reentrant model
 11510 ;;
 11511                           
 11512                           
 11513                           ;psect for function _capture_Set
 11514  0819                     _capture_Set:	
 11515                           
 11516                           ;incstack = 0
 11517                           ; Regs used in _capture_Set: [wreg+status,2+status,0]
 11518                           ;capture_Set@isON stored from wreg
 11519  0819  00F0               	movwf	capture_Set@isON
 11520                           
 11521                           ;hardware.c: 38: u8 capture_Set(u8 isON);hardware.c: 39: {;hardware.c: 42:     PIR2bits.
      +                          CCP2IF = 0;
 11522  081A  0020               	movlb	0	; select bank0
 11523  081B  1012               	bcf	18,0	;volatile
 11524                           
 11525                           ;hardware.c: 45:     PIE2bits.CCP2IE = (isON)? 1 : 0;
 11526  081C  0870               	movf	capture_Set@isON,w
 11527  081D  1903               	btfsc	3,2
 11528  081E  2822               	goto	u306_20
 11529  081F  0021               	movlb	1	; select bank1
 11530  0820  1412               	bsf	18,0	;volatile
 11531  0821  0008               	return
 11532  0822                     u306_20:	
 11533  0822  0021               	movlb	1	; select bank1
 11534  0823  1012               	bcf	18,0	;volatile
 11535  0824  0008               	return
 11536  0825                     __end_of_capture_Set:	
 11537                           ;hardware.c: 46:     return 0;;	Return value of _capture_Set is never used
 11538                           
 11539                           
 11540                           	psect	text59
 11541  0E61                     __ptext59:	
 11542 ;; *************** function _bpc_Cnt2Qua *****************
 11543 ;; Defined at:
 11544 ;;		line 22 in file "bpc.c"
 11545 ;; Parameters:    Size  Location     Type
 11546 ;;		None
 11547 ;; Auto vars:     Size  Location     Type
 11548 ;;  pdata           1    8[COMMON] PTR volatile struct .
 11549 ;;		 -> g_data(39), 
 11550 ;; Return value:  Size  Location     Type
 11551 ;;                  1    wreg      unsigned char 
 11552 ;; Registers used:
 11553 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11554 ;; Tracked objects:
 11555 ;;		On entry : 0/0
 11556 ;;		On exit  : 0/0
 11557 ;;		Unchanged: 0/0
 11558 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11559 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11560 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11561 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11562 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11563 ;;Total ram usage:        3 bytes
 11564 ;; Hardware stack levels used:    1
 11565 ;; Hardware stack levels required when called:    1
 11566 ;; This function calls:
 11567 ;;		_capture_IsNegEdge
 11568 ;;		_cnt_abs
 11569 ;;		i1_data_getdata
 11570 ;; This function is called by:
 11571 ;;		_bpc_proc
 11572 ;; This function uses a non-reentrant model
 11573 ;;
 11574                           
 11575                           
 11576                           ;psect for function _bpc_Cnt2Qua
 11577  0E61                     _bpc_Cnt2Qua:	
 11578                           
 11579                           ;bpc.c: 24:     G_DATA *pdata = data_getdata();
 11580                           
 11581                           ;incstack = 0
 11582                           ; Regs used in _bpc_Cnt2Qua: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11583  0E61  3180  2002  318E   	fcall	i1_data_getdata
 11584  0E64  00F6               	movwf	??_bpc_Cnt2Qua
 11585  0E65  0876               	movf	??_bpc_Cnt2Qua,w
 11586  0E66  00F8               	movwf	bpc_Cnt2Qua@pdata
 11587                           
 11588                           ;bpc.c: 25:     if(capture_IsNegEdge()){
 11589  0E67  3197  27CC  318E   	fcall	_capture_IsNegEdge
 11590  0E6A  3A00               	xorlw	0
 11591  0E6B  1903               	skipnz
 11592  0E6C  2E81               	goto	i1l3476
 11593                           
 11594                           ;bpc.c: 27:         if(pdata->cnt_low > 31030 - 1550){
 11595  0E6D  0878               	movf	bpc_Cnt2Qua@pdata,w
 11596  0E6E  3E25               	addlw	37
 11597  0E6F  0086               	movwf	6
 11598  0E70  3002               	movlw	2	; select bank4/5
 11599  0E71  0087               	movwf	7
 11600  0E72  3F40               	moviw [0]fsr1
 11601  0E73  00F6               	movwf	??_bpc_Cnt2Qua
 11602  0E74  3F41               	moviw [1]fsr1
 11603  0E75  00F7               	movwf	??_bpc_Cnt2Qua+1
 11604  0E76  3073               	movlw	115
 11605  0E77  0277               	subwf	??_bpc_Cnt2Qua+1,w
 11606  0E78  3029               	movlw	41
 11607  0E79  1903               	skipnz
 11608  0E7A  0276               	subwf	??_bpc_Cnt2Qua,w
 11609  0E7B  1C03               	skipc
 11610  0E7C  2E7F               	goto	i1l3472
 11611                           
 11612                           ;bpc.c: 28:             return 5;
 11613  0E7D  3005               	movlw	5
 11614                           
 11615                           ;bpc.c: 29:         }else{
 11616  0E7E  0008               	return
 11617  0E7F                     i1l3472:	
 11618                           
 11619                           ;bpc.c: 30:             return 6;
 11620  0E7F  3006               	movlw	6
 11621                           
 11622                           ;bpc.c: 32:     }else{
 11623                           
 11624                           ;bpc.c: 31:         }
 11625  0E80  0008               	return
 11626  0E81                     i1l3476:	
 11627                           
 11628                           ;bpc.c: 35:         if(cnt_abs(pdata->cnt_high, 3103) < 1550){
 11629  0E81  0878               	movf	bpc_Cnt2Qua@pdata,w
 11630  0E82  3E23               	addlw	35
 11631  0E83  0086               	movwf	6
 11632  0E84  3002               	movlw	2	; select bank4/5
 11633  0E85  0087               	movwf	7
 11634  0E86  3F40               	moviw [0]fsr1
 11635  0E87  00F0               	movwf	cnt_abs@a
 11636  0E88  3F41               	moviw [1]fsr1
 11637  0E89  00F1               	movwf	cnt_abs@a+1
 11638  0E8A  301F               	movlw	31
 11639  0E8B  00F2               	movwf	cnt_abs@b
 11640  0E8C  300C               	movlw	12
 11641  0E8D  00F3               	movwf	cnt_abs@b+1
 11642  0E8E  3189  219B  318E   	fcall	_cnt_abs
 11643  0E91  3006               	movlw	6
 11644  0E92  0271               	subwf	?_cnt_abs+1,w
 11645  0E93  300E               	movlw	14
 11646  0E94  1903               	skipnz
 11647  0E95  0270               	subwf	?_cnt_abs,w
 11648  0E96  1803               	skipnc
 11649  0E97  2E9A               	goto	i1l3484
 11650                           
 11651                           ;bpc.c: 36:             return 0;
 11652  0E98  3000               	movlw	0
 11653                           
 11654                           ;bpc.c: 37:         }else if(cnt_abs(pdata->cnt_high, 6208) < 1550){
 11655  0E99  0008               	return
 11656  0E9A                     i1l3484:	
 11657  0E9A  0878               	movf	bpc_Cnt2Qua@pdata,w
 11658  0E9B  3E23               	addlw	35
 11659  0E9C  0086               	movwf	6
 11660  0E9D  3002               	movlw	2	; select bank4/5
 11661  0E9E  0087               	movwf	7
 11662  0E9F  3F40               	moviw [0]fsr1
 11663  0EA0  00F0               	movwf	cnt_abs@a
 11664  0EA1  3F41               	moviw [1]fsr1
 11665  0EA2  00F1               	movwf	cnt_abs@a+1
 11666  0EA3  3040               	movlw	64
 11667  0EA4  00F2               	movwf	cnt_abs@b
 11668  0EA5  3018               	movlw	24
 11669  0EA6  00F3               	movwf	cnt_abs@b+1
 11670  0EA7  3189  219B  318E   	fcall	_cnt_abs
 11671  0EAA  3006               	movlw	6
 11672  0EAB  0271               	subwf	?_cnt_abs+1,w
 11673  0EAC  300E               	movlw	14
 11674  0EAD  1903               	skipnz
 11675  0EAE  0270               	subwf	?_cnt_abs,w
 11676  0EAF  1803               	skipnc
 11677  0EB0  2EB3               	goto	i1l3492
 11678                           
 11679                           ;bpc.c: 38:             return 1;
 11680  0EB1  3001               	movlw	1
 11681                           
 11682                           ;bpc.c: 39:         }else if(cnt_abs(pdata->cnt_high, 9311) < 1550){
 11683  0EB2  0008               	return
 11684  0EB3                     i1l3492:	
 11685  0EB3  0878               	movf	bpc_Cnt2Qua@pdata,w
 11686  0EB4  3E23               	addlw	35
 11687  0EB5  0086               	movwf	6
 11688  0EB6  3002               	movlw	2	; select bank4/5
 11689  0EB7  0087               	movwf	7
 11690  0EB8  3F40               	moviw [0]fsr1
 11691  0EB9  00F0               	movwf	cnt_abs@a
 11692  0EBA  3F41               	moviw [1]fsr1
 11693  0EBB  00F1               	movwf	cnt_abs@a+1
 11694  0EBC  305F               	movlw	95
 11695  0EBD  00F2               	movwf	cnt_abs@b
 11696  0EBE  3024               	movlw	36
 11697  0EBF  00F3               	movwf	cnt_abs@b+1
 11698  0EC0  3189  219B  318E   	fcall	_cnt_abs
 11699  0EC3  3006               	movlw	6
 11700  0EC4  0271               	subwf	?_cnt_abs+1,w
 11701  0EC5  300E               	movlw	14
 11702  0EC6  1903               	skipnz
 11703  0EC7  0270               	subwf	?_cnt_abs,w
 11704  0EC8  1803               	skipnc
 11705  0EC9  2ECC               	goto	i1l3500
 11706                           
 11707                           ;bpc.c: 40:             return 2;
 11708  0ECA  3002               	movlw	2
 11709                           
 11710                           ;bpc.c: 41:         }else if(cnt_abs(pdata->cnt_high, 12417) < 1550){
 11711  0ECB  0008               	return
 11712  0ECC                     i1l3500:	
 11713  0ECC  0878               	movf	bpc_Cnt2Qua@pdata,w
 11714  0ECD  3E23               	addlw	35
 11715  0ECE  0086               	movwf	6
 11716  0ECF  3002               	movlw	2	; select bank4/5
 11717  0ED0  0087               	movwf	7
 11718  0ED1  3F40               	moviw [0]fsr1
 11719  0ED2  00F0               	movwf	cnt_abs@a
 11720  0ED3  3F41               	moviw [1]fsr1
 11721  0ED4  00F1               	movwf	cnt_abs@a+1
 11722  0ED5  3081               	movlw	129
 11723  0ED6  00F2               	movwf	cnt_abs@b
 11724  0ED7  3030               	movlw	48
 11725  0ED8  00F3               	movwf	cnt_abs@b+1
 11726  0ED9  3189  219B  318E   	fcall	_cnt_abs
 11727  0EDC  3006               	movlw	6
 11728  0EDD  0271               	subwf	?_cnt_abs+1,w
 11729  0EDE  300E               	movlw	14
 11730  0EDF  1903               	skipnz
 11731  0EE0  0270               	subwf	?_cnt_abs,w
 11732  0EE1  1803               	skipnc
 11733  0EE2  2EE5               	goto	i1l3508
 11734                           
 11735                           ;bpc.c: 42:             return 3;
 11736  0EE3  3003               	movlw	3
 11737                           
 11738                           ;bpc.c: 43:         }else{
 11739  0EE4  0008               	return
 11740  0EE5                     i1l3508:	
 11741                           
 11742                           ;bpc.c: 44:             return 4;
 11743  0EE5  3004               	movlw	4
 11744                           
 11745                           ;bpc.c: 45:         }
 11746  0EE6  0008               	return
 11747  0EE7                     __end_of_bpc_Cnt2Qua:	
 11748                           ;bpc.c: 46:     }
 11749                           
 11750                           
 11751                           	psect	text60
 11752  0002                     __ptext60:	
 11753 ;; *************** function i1_data_getdata *****************
 11754 ;; Defined at:
 11755 ;;		line 9 in file "data.c"
 11756 ;; Parameters:    Size  Location     Type
 11757 ;;		None
 11758 ;; Auto vars:     Size  Location     Type
 11759 ;;		None
 11760 ;; Return value:  Size  Location     Type
 11761 ;;                  1    wreg      PTR volatile struct .
 11762 ;; Registers used:
 11763 ;;		wreg
 11764 ;; Tracked objects:
 11765 ;;		On entry : 0/0
 11766 ;;		On exit  : 0/0
 11767 ;;		Unchanged: 0/0
 11768 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11769 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11770 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11771 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11772 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11773 ;;Total ram usage:        0 bytes
 11774 ;; Hardware stack levels used:    1
 11775 ;; This function calls:
 11776 ;;		Nothing
 11777 ;; This function is called by:
 11778 ;;		_bpc_Cnt2Qua
 11779 ;;		_bpc_proc
 11780 ;;		_capture_handdle
 11781 ;;		_key_checkPressed
 11782 ;;		_key_isPressed
 11783 ;;		_update_time
 11784 ;;		i1_display_update
 11785 ;; This function uses a non-reentrant model
 11786 ;;
 11787                           
 11788                           
 11789                           ;psect for function i1_data_getdata
 11790  0002                     i1_data_getdata:	
 11791                           
 11792                           ;data.c: 11:     return &g_data;
 11793                           
 11794                           ;incstack = 0
 11795                           ; Regs used in i1_data_getdata: [wreg]
 11796  0002  3020               	movlw	(low (_g_data| (0+512)))& (0+255)
 11797  0003  0008               	return
 11798  0004                     __end_ofi1_data_getdata:	
 11799                           
 11800                           	psect	text61
 11801  099B                     __ptext61:	
 11802 ;; *************** function _cnt_abs *****************
 11803 ;; Defined at:
 11804 ;;		line 18 in file "bpc.c"
 11805 ;; Parameters:    Size  Location     Type
 11806 ;;  a               2    0[COMMON] unsigned short 
 11807 ;;  b               2    2[COMMON] unsigned short 
 11808 ;; Auto vars:     Size  Location     Type
 11809 ;;		None
 11810 ;; Return value:  Size  Location     Type
 11811 ;;                  2    0[COMMON] unsigned short 
 11812 ;; Registers used:
 11813 ;;		wreg, status,2, status,0
 11814 ;; Tracked objects:
 11815 ;;		On entry : 0/0
 11816 ;;		On exit  : 0/0
 11817 ;;		Unchanged: 0/0
 11818 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11819 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11820 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11821 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11822 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11823 ;;Total ram usage:        6 bytes
 11824 ;; Hardware stack levels used:    1
 11825 ;; This function calls:
 11826 ;;		Nothing
 11827 ;; This function is called by:
 11828 ;;		_bpc_Cnt2Qua
 11829 ;; This function uses a non-reentrant model
 11830 ;;
 11831                           
 11832                           
 11833                           ;psect for function _cnt_abs
 11834  099B                     _cnt_abs:	
 11835                           
 11836                           ;bpc.c: 19:     return a>b? (a-b):(b-a);
 11837                           
 11838                           ;incstack = 0
 11839                           ; Regs used in _cnt_abs: [wreg+status,2+status,0]
 11840  099B  0871               	movf	cnt_abs@a+1,w
 11841  099C  0273               	subwf	cnt_abs@b+1,w
 11842  099D  1D03               	skipz
 11843  099E  29A1               	goto	u308_25
 11844  099F  0870               	movf	cnt_abs@a,w
 11845  09A0  0272               	subwf	cnt_abs@b,w
 11846  09A1                     u308_25:	
 11847  09A1  1C03               	skipc
 11848  09A2  29B1               	goto	i1l3148
 11849  09A3  0970               	comf	cnt_abs@a,w
 11850  09A4  00F4               	movwf	??_cnt_abs
 11851  09A5  0971               	comf	cnt_abs@a+1,w
 11852  09A6  00F5               	movwf	??_cnt_abs+1
 11853  09A7  0AF4               	incf	??_cnt_abs,f
 11854  09A8  1903               	skipnz
 11855  09A9  0AF5               	incf	??_cnt_abs+1,f
 11856  09AA  0872               	movf	cnt_abs@b,w
 11857  09AB  0774               	addwf	??_cnt_abs,w
 11858  09AC  00F0               	movwf	?_cnt_abs
 11859  09AD  0873               	movf	cnt_abs@b+1,w
 11860  09AE  3D75               	addwfc	??_cnt_abs+1,w
 11861  09AF  00F1               	movwf	?_cnt_abs+1
 11862  09B0  0008               	return
 11863  09B1                     i1l3148:	
 11864  09B1  0972               	comf	cnt_abs@b,w
 11865  09B2  00F4               	movwf	??_cnt_abs
 11866  09B3  0973               	comf	cnt_abs@b+1,w
 11867  09B4  00F5               	movwf	??_cnt_abs+1
 11868  09B5  0AF4               	incf	??_cnt_abs,f
 11869  09B6  1903               	skipnz
 11870  09B7  0AF5               	incf	??_cnt_abs+1,f
 11871  09B8  0870               	movf	cnt_abs@a,w
 11872  09B9  0774               	addwf	??_cnt_abs,w
 11873  09BA  00F0               	movwf	?_cnt_abs
 11874  09BB  0871               	movf	cnt_abs@a+1,w
 11875  09BC  3D75               	addwfc	??_cnt_abs+1,w
 11876  09BD  00F1               	movwf	?_cnt_abs+1
 11877  09BE  0008               	return
 11878  09BF                     __end_of_cnt_abs:	
 11879                           
 11880                           	psect	text62
 11881  17CC                     __ptext62:	
 11882 ;; *************** function _capture_IsNegEdge *****************
 11883 ;; Defined at:
 11884 ;;		line 60 in file "hardware.c"
 11885 ;; Parameters:    Size  Location     Type
 11886 ;;		None
 11887 ;; Auto vars:     Size  Location     Type
 11888 ;;		None
 11889 ;; Return value:  Size  Location     Type
 11890 ;;                  1    wreg      enum E5222
 11891 ;; Registers used:
 11892 ;;		wreg, status,2, status,0
 11893 ;; Tracked objects:
 11894 ;;		On entry : 0/0
 11895 ;;		On exit  : 0/0
 11896 ;;		Unchanged: 0/0
 11897 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11898 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11899 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11900 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11901 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11902 ;;Total ram usage:        0 bytes
 11903 ;; Hardware stack levels used:    1
 11904 ;; This function calls:
 11905 ;;		Nothing
 11906 ;; This function is called by:
 11907 ;;		_bpc_Cnt2Qua
 11908 ;;		_capture_handdle
 11909 ;; This function uses a non-reentrant model
 11910 ;;
 11911                           
 11912                           
 11913                           ;psect for function _capture_IsNegEdge
 11914  17CC                     _capture_IsNegEdge:	
 11915                           
 11916                           ;hardware.c: 62:     return (CCP2CONbits.CCP2M == (0b0100))? TRUE : FALSE;
 11917                           
 11918                           ;incstack = 0
 11919                           ; Regs used in _capture_IsNegEdge: [wreg+status,2+status,0]
 11920  17CC  0025               	movlb	5	; select bank5
 11921  17CD  081A               	movf	26,w	;volatile
 11922  17CE  390F               	andlw	15
 11923  17CF  3A04               	xorlw	4
 11924  17D0  1D03               	btfss	3,2
 11925  17D1  2FD4               	goto	u309_20
 11926  17D2  3001               	movlw	1
 11927  17D3  0008               	return
 11928  17D4                     u309_20:	
 11929  17D4  3000               	movlw	0
 11930  17D5  0008               	return
 11931  17D6                     __end_of_capture_IsNegEdge:	
 11932                           
 11933                           	psect	text63
 11934  0AD8                     __ptext63:	
 11935 ;; *************** function ___lwmod *****************
 11936 ;; Defined at:
 11937 ;;		line 5 in file "F:\other_software\MPLAB_X_IDE\xc8\v2.00\pic\sources\c99\common\lwmod.c"
 11938 ;; Parameters:    Size  Location     Type
 11939 ;;  divisor         2    0[COMMON] unsigned int 
 11940 ;;  dividend        2    2[COMMON] unsigned int 
 11941 ;; Auto vars:     Size  Location     Type
 11942 ;;  counter         1    5[COMMON] unsigned char 
 11943 ;; Return value:  Size  Location     Type
 11944 ;;                  2    0[COMMON] unsigned int 
 11945 ;; Registers used:
 11946 ;;		wreg, status,2, status,0
 11947 ;; Tracked objects:
 11948 ;;		On entry : 0/0
 11949 ;;		On exit  : 0/0
 11950 ;;		Unchanged: 0/0
 11951 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11952 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11953 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11954 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11955 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11956 ;;Total ram usage:        6 bytes
 11957 ;; Hardware stack levels used:    1
 11958 ;; This function calls:
 11959 ;;		Nothing
 11960 ;; This function is called by:
 11961 ;;		_ISR
 11962 ;;		_tmp_change
 11963 ;; This function uses a non-reentrant model
 11964 ;;
 11965                           
 11966                           
 11967                           ;psect for function ___lwmod
 11968  0AD8                     ___lwmod:	
 11969                           
 11970                           ;incstack = 0
 11971                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
 11972  0AD8  0870               	movf	___lwmod@divisor,w
 11973  0AD9  0471               	iorwf	___lwmod@divisor+1,w
 11974  0ADA  1903               	btfsc	3,2
 11975  0ADB  2AFF               	goto	i1l4000
 11976  0ADC  01F5               	clrf	___lwmod@counter
 11977  0ADD  0AF5               	incf	___lwmod@counter,f
 11978  0ADE                     i1l3990:	
 11979  0ADE  1BF1               	btfsc	___lwmod@divisor+1,7
 11980  0ADF  2AEA               	goto	i1l3992
 11981  0AE0  3001               	movlw	1
 11982  0AE1                     u410_25:	
 11983  0AE1  35F0               	lslf	___lwmod@divisor,f
 11984  0AE2  0DF1               	rlf	___lwmod@divisor+1,f
 11985  0AE3  0B89               	decfsz	9,f
 11986  0AE4  2AE1               	goto	u410_25
 11987  0AE5  3001               	movlw	1
 11988  0AE6  00F4               	movwf	??___lwmod
 11989  0AE7  0874               	movf	??___lwmod,w
 11990  0AE8  07F5               	addwf	___lwmod@counter,f
 11991  0AE9  2ADE               	goto	i1l3990
 11992  0AEA                     i1l3992:	
 11993  0AEA  0871               	movf	___lwmod@divisor+1,w
 11994  0AEB  0273               	subwf	___lwmod@dividend+1,w
 11995  0AEC  1D03               	skipz
 11996  0AED  2AF0               	goto	u412_25
 11997  0AEE  0870               	movf	___lwmod@divisor,w
 11998  0AEF  0272               	subwf	___lwmod@dividend,w
 11999  0AF0                     u412_25:	
 12000  0AF0  1C03               	skipc
 12001  0AF1  2AF6               	goto	i1l3996
 12002  0AF2  0870               	movf	___lwmod@divisor,w
 12003  0AF3  02F2               	subwf	___lwmod@dividend,f
 12004  0AF4  0871               	movf	___lwmod@divisor+1,w
 12005  0AF5  3BF3               	subwfb	___lwmod@dividend+1,f
 12006  0AF6                     i1l3996:	
 12007  0AF6  3001               	movlw	1
 12008  0AF7                     u413_25:	
 12009  0AF7  36F1               	lsrf	___lwmod@divisor+1,f
 12010  0AF8  0CF0               	rrf	___lwmod@divisor,f
 12011  0AF9  0B89               	decfsz	9,f
 12012  0AFA  2AF7               	goto	u413_25
 12013  0AFB  3001               	movlw	1
 12014  0AFC  02F5               	subwf	___lwmod@counter,f
 12015  0AFD  1D03               	btfss	3,2
 12016  0AFE  2AEA               	goto	i1l3992
 12017  0AFF                     i1l4000:	
 12018  0AFF  0873               	movf	___lwmod@dividend+1,w
 12019  0B00  00F1               	movwf	?___lwmod+1
 12020  0B01  0872               	movf	___lwmod@dividend,w
 12021  0B02  00F0               	movwf	?___lwmod
 12022  0B03  0008               	return
 12023  0B04                     __end_of___lwmod:	
 12024                           
 12025                           	psect	text64
 12026  0A58                     __ptext64:	
 12027 ;; *************** function _IIC_WtRTCReg *****************
 12028 ;; Defined at:
 12029 ;;		line 175 in file "myiic.c"
 12030 ;; Parameters:    Size  Location     Type
 12031 ;;  regAddr         1    wreg     unsigned char 
 12032 ;;  value           1    3[COMMON] unsigned char 
 12033 ;; Auto vars:     Size  Location     Type
 12034 ;;  regAddr         1    4[COMMON] unsigned char 
 12035 ;; Return value:  Size  Location     Type
 12036 ;;                  1    wreg      char 
 12037 ;; Registers used:
 12038 ;;		wreg, status,2, status,0, pclath, cstack
 12039 ;; Tracked objects:
 12040 ;;		On entry : 0/0
 12041 ;;		On exit  : 0/0
 12042 ;;		Unchanged: 0/0
 12043 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12044 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12045 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12046 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12047 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12048 ;;Total ram usage:        2 bytes
 12049 ;; Hardware stack levels used:    1
 12050 ;; Hardware stack levels required when called:    3
 12051 ;; This function calls:
 12052 ;;		_IIC_Send_Byte
 12053 ;;		_IIC_Start
 12054 ;;		_IIC_Stop
 12055 ;;		_IIC_Wait_Ack
 12056 ;; This function is called by:
 12057 ;;		_ISR
 12058 ;; This function uses a non-reentrant model
 12059 ;;
 12060                           
 12061                           
 12062                           ;psect for function _IIC_WtRTCReg
 12063  0A58                     _IIC_WtRTCReg:	
 12064                           
 12065                           ;incstack = 0
 12066                           ; Regs used in _IIC_WtRTCReg: [wreg+status,2+status,0+pclath+cstack]
 12067                           ;IIC_WtRTCReg@regAddr stored from wreg
 12068  0A58  00F4               	movwf	IIC_WtRTCReg@regAddr
 12069                           
 12070                           ;myiic.c: 175: s8 IIC_WtRTCReg(u8 regAddr, u8 value);myiic.c: 176: {;myiic.c: 177:     I
      +                          IC_Start();
 12071  0A59  3197  27EA  318A   	fcall	_IIC_Start
 12072                           
 12073                           ;myiic.c: 178:     IIC_Send_Byte((0b10100010));
 12074  0A5C  30A2               	movlw	162
 12075  0A5D  318A  2282  318A   	fcall	_IIC_Send_Byte
 12076                           
 12077                           ;myiic.c: 179:     if(!IIC_Wait_Ack())
 12078  0A60  3189  2139  318A   	fcall	_IIC_Wait_Ack
 12079  0A63  3A00               	xorlw	0
 12080  0A64  1D03               	skipz
 12081  0A65  2A80               	goto	i1l3748
 12082                           
 12083                           ;myiic.c: 180:     {;myiic.c: 181:         IIC_Send_Byte(regAddr);
 12084  0A66  0874               	movf	IIC_WtRTCReg@regAddr,w
 12085  0A67  318A  2282  318A   	fcall	_IIC_Send_Byte
 12086                           
 12087                           ;myiic.c: 182:         if(!IIC_Wait_Ack())
 12088  0A6A  3189  2139  318A   	fcall	_IIC_Wait_Ack
 12089  0A6D  3A00               	xorlw	0
 12090  0A6E  1D03               	skipz
 12091  0A6F  2A7E               	goto	i1l3744
 12092                           
 12093                           ;myiic.c: 183:         {;myiic.c: 184:             IIC_Send_Byte(value);
 12094  0A70  0873               	movf	IIC_WtRTCReg@value,w
 12095  0A71  318A  2282  318A   	fcall	_IIC_Send_Byte
 12096                           
 12097                           ;myiic.c: 185:             if(!IIC_Wait_Ack())
 12098  0A74  3189  2139  318A   	fcall	_IIC_Wait_Ack
 12099  0A77  3A00               	xorlw	0
 12100  0A78  1D03               	skipz
 12101  0A79  2A7E               	goto	i1l3744
 12102                           
 12103                           ;myiic.c: 186:             {;myiic.c: 187:                 IIC_Stop();
 12104  0A7A  3188  204C         	fcall	_IIC_Stop
 12105                           
 12106                           ;myiic.c: 188:                 return 0;
 12107  0A7C  3000               	movlw	0
 12108  0A7D  0008               	return
 12109  0A7E                     i1l3744:	
 12110                           ;myiic.c: 190:         }
 12111                           
 12112                           ;myiic.c: 189:             }
 12113                           
 12114                           
 12115                           ;myiic.c: 191:         return -1;
 12116  0A7E  30FF               	movlw	255
 12117  0A7F  0008               	return
 12118  0A80                     i1l3748:	
 12119                           ;myiic.c: 192:     }
 12120                           
 12121                           
 12122                           ;myiic.c: 193:     return -1;
 12123  0A80  30FF               	movlw	255
 12124  0A81  0008               	return
 12125  0A82                     __end_of_IIC_WtRTCReg:	
 12126                           
 12127                           	psect	text65
 12128  0B63                     __ptext65:	
 12129 ;; *************** function _IIC_RdRTCReg *****************
 12130 ;; Defined at:
 12131 ;;		line 151 in file "myiic.c"
 12132 ;; Parameters:    Size  Location     Type
 12133 ;;  regAddr         1    wreg     unsigned char 
 12134 ;;  value           1    4[COMMON] PTR unsigned char 
 12135 ;;		 -> ISR@data(1), 
 12136 ;; Auto vars:     Size  Location     Type
 12137 ;;  regAddr         1    6[COMMON] unsigned char 
 12138 ;; Return value:  Size  Location     Type
 12139 ;;                  1    wreg      char 
 12140 ;; Registers used:
 12141 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12142 ;; Tracked objects:
 12143 ;;		On entry : 0/0
 12144 ;;		On exit  : 0/0
 12145 ;;		Unchanged: 0/0
 12146 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12147 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12148 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12149 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12150 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12151 ;;Total ram usage:        3 bytes
 12152 ;; Hardware stack levels used:    1
 12153 ;; Hardware stack levels required when called:    3
 12154 ;; This function calls:
 12155 ;;		_IIC_Read_Byte
 12156 ;;		_IIC_Send_Byte
 12157 ;;		_IIC_Start
 12158 ;;		_IIC_Stop
 12159 ;;		_IIC_Wait_Ack
 12160 ;; This function is called by:
 12161 ;;		_ISR
 12162 ;; This function uses a non-reentrant model
 12163 ;;
 12164                           
 12165                           
 12166                           ;psect for function _IIC_RdRTCReg
 12167  0B63                     _IIC_RdRTCReg:	
 12168                           
 12169                           ;incstack = 0
 12170                           ; Regs used in _IIC_RdRTCReg: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12171                           ;IIC_RdRTCReg@regAddr stored from wreg
 12172  0B63  00F6               	movwf	IIC_RdRTCReg@regAddr
 12173                           
 12174                           ;myiic.c: 151: s8 IIC_RdRTCReg(u8 regAddr, u8* value);myiic.c: 152: {;myiic.c: 153:     
      +                          IIC_Start();
 12175  0B64  3197  27EA  318B   	fcall	_IIC_Start
 12176                           
 12177                           ;myiic.c: 154:     IIC_Send_Byte((0b10100010));
 12178  0B67  30A2               	movlw	162
 12179  0B68  318A  2282  318B   	fcall	_IIC_Send_Byte
 12180                           
 12181                           ;myiic.c: 155:     if(!IIC_Wait_Ack())
 12182  0B6B  3189  2139  318B   	fcall	_IIC_Wait_Ack
 12183  0B6E  3A00               	xorlw	0
 12184  0B6F  1D03               	skipz
 12185  0B70  2B9A               	goto	i1l3782
 12186                           
 12187                           ;myiic.c: 156:     {;myiic.c: 157:         IIC_Send_Byte(regAddr);
 12188  0B71  0876               	movf	IIC_RdRTCReg@regAddr,w
 12189  0B72  318A  2282  318B   	fcall	_IIC_Send_Byte
 12190                           
 12191                           ;myiic.c: 158:         if(!IIC_Wait_Ack())
 12192  0B75  3189  2139  318B   	fcall	_IIC_Wait_Ack
 12193  0B78  3A00               	xorlw	0
 12194  0B79  1D03               	skipz
 12195  0B7A  2B98               	goto	i1l3778
 12196                           
 12197                           ;myiic.c: 159:         {;myiic.c: 160:             IIC_Start();
 12198  0B7B  3197  27EA  318B   	fcall	_IIC_Start
 12199                           
 12200                           ;myiic.c: 161:             IIC_Send_Byte((0b10100011));
 12201  0B7E  30A3               	movlw	163
 12202  0B7F  318A  2282  318B   	fcall	_IIC_Send_Byte
 12203                           
 12204                           ;myiic.c: 162:             if(!IIC_Wait_Ack())
 12205  0B82  3189  2139  318B   	fcall	_IIC_Wait_Ack
 12206  0B85  3A00               	xorlw	0
 12207  0B86  1D03               	skipz
 12208  0B87  2B96               	goto	i1l3774
 12209                           
 12210                           ;myiic.c: 163:             {;myiic.c: 164:                 *value = IIC_Read_Byte(0);
 12211  0B88  3000               	movlw	0
 12212  0B89  318B  2304  318B   	fcall	_IIC_Read_Byte
 12213  0B8C  00F5               	movwf	??_IIC_RdRTCReg
 12214  0B8D  0874               	movf	IIC_RdRTCReg@value,w
 12215  0B8E  0086               	movwf	6
 12216  0B8F  0187               	clrf	7
 12217  0B90  0875               	movf	??_IIC_RdRTCReg,w
 12218  0B91  0081               	movwf	1
 12219                           
 12220                           ;myiic.c: 165:                 IIC_Stop();
 12221  0B92  3188  204C         	fcall	_IIC_Stop
 12222                           
 12223                           ;myiic.c: 166:                 return 0;
 12224  0B94  3000               	movlw	0
 12225  0B95  0008               	return
 12226  0B96                     i1l3774:	
 12227                           ;myiic.c: 167:             }
 12228                           
 12229                           
 12230                           ;myiic.c: 168:             return -1;
 12231  0B96  30FF               	movlw	255
 12232  0B97  0008               	return
 12233  0B98                     i1l3778:	
 12234                           ;myiic.c: 169:         }
 12235                           
 12236                           
 12237                           ;myiic.c: 170:         return -1;
 12238  0B98  30FF               	movlw	255
 12239  0B99  0008               	return
 12240  0B9A                     i1l3782:	
 12241                           ;myiic.c: 171:     }
 12242                           
 12243                           
 12244                           ;myiic.c: 172:     return -1;
 12245  0B9A  30FF               	movlw	255
 12246  0B9B  0008               	return
 12247  0B9C                     __end_of_IIC_RdRTCReg:	
 12248                           
 12249                           	psect	text66
 12250  0939                     __ptext66:	
 12251 ;; *************** function _IIC_Wait_Ack *****************
 12252 ;; Defined at:
 12253 ;;		line 51 in file "myiic.c"
 12254 ;; Parameters:    Size  Location     Type
 12255 ;;		None
 12256 ;; Auto vars:     Size  Location     Type
 12257 ;;  ucErrTime       1    1[COMMON] unsigned char 
 12258 ;; Return value:  Size  Location     Type
 12259 ;;                  1    wreg      unsigned char 
 12260 ;; Registers used:
 12261 ;;		wreg, status,2, status,0, pclath, cstack
 12262 ;; Tracked objects:
 12263 ;;		On entry : 0/0
 12264 ;;		On exit  : 0/0
 12265 ;;		Unchanged: 0/0
 12266 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12267 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12268 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12269 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12270 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12271 ;;Total ram usage:        2 bytes
 12272 ;; Hardware stack levels used:    1
 12273 ;; Hardware stack levels required when called:    2
 12274 ;; This function calls:
 12275 ;;		_IIC_Stop
 12276 ;;		_delay_4us
 12277 ;; This function is called by:
 12278 ;;		_IIC_RdRTCReg
 12279 ;;		_IIC_WtRTCReg
 12280 ;; This function uses a non-reentrant model
 12281 ;;
 12282                           
 12283                           
 12284                           ;psect for function _IIC_Wait_Ack
 12285  0939                     _IIC_Wait_Ack:	
 12286                           
 12287                           ;myiic.c: 53:  unsigned char ucErrTime=0;
 12288                           
 12289                           ;incstack = 0
 12290                           ; Regs used in _IIC_Wait_Ack: [wreg+status,2+status,0+pclath+cstack]
 12291  0939  01F1               	clrf	IIC_Wait_Ack@ucErrTime
 12292                           
 12293                           ;myiic.c: 54:  {TRISC4 = 1;};
 12294  093A  0021               	movlb	1	; select bank1
 12295  093B  160E               	bsf	14,4	;volatile
 12296                           
 12297                           ;myiic.c: 55:  LATC4=1;delay_4us();
 12298  093C  0022               	movlb	2	; select bank2
 12299  093D  160E               	bsf	14,4	;volatile
 12300  093E  3197  277C  3189   	fcall	_delay_4us
 12301                           
 12302                           ;myiic.c: 56:  LATC3=1;delay_4us();
 12303  0941  0022               	movlb	2	; select bank2
 12304  0942  158E               	bsf	14,3	;volatile
 12305  0943  3197  277C  3189   	fcall	_delay_4us
 12306  0946                     i1l227:	
 12307                           ;myiic.c: 65:  }
 12308                           
 12309                           ;myiic.c: 64:   }
 12310                           
 12311                           ;myiic.c: 57:  while(RC4)
 12312                           
 12313                           
 12314                           ;myiic.c: 57:  while(RC4)
 12315  0946  0020               	movlb	0	; select bank0
 12316  0947  1E0E               	btfss	14,4	;volatile
 12317  0948  2955               	goto	i1l231
 12318                           
 12319                           ;myiic.c: 58:  {;myiic.c: 59:   ucErrTime++;
 12320  0949  3001               	movlw	1
 12321  094A  00F0               	movwf	??_IIC_Wait_Ack
 12322  094B  0870               	movf	??_IIC_Wait_Ack,w
 12323  094C  07F1               	addwf	IIC_Wait_Ack@ucErrTime,f
 12324                           
 12325                           ;myiic.c: 60:   if(ucErrTime>250)
 12326  094D  30FB               	movlw	251
 12327  094E  0271               	subwf	IIC_Wait_Ack@ucErrTime,w
 12328  094F  1C03               	skipc
 12329  0950  2946               	goto	i1l227
 12330                           
 12331                           ;myiic.c: 61:   {;myiic.c: 62:    IIC_Stop();
 12332  0951  3188  204C         	fcall	_IIC_Stop
 12333                           
 12334                           ;myiic.c: 63:    return 1;
 12335  0953  3001               	movlw	1
 12336  0954  0008               	return
 12337  0955                     i1l231:	
 12338                           
 12339                           ;myiic.c: 66:  LATC3=0;
 12340  0955  0022               	movlb	2	; select bank2
 12341  0956  118E               	bcf	14,3	;volatile
 12342                           
 12343                           ;myiic.c: 67:  return 0;
 12344  0957  3000               	movlw	0
 12345  0958  0008               	return
 12346  0959                     __end_of_IIC_Wait_Ack:	
 12347                           
 12348                           	psect	text67
 12349  084C                     __ptext67:	
 12350 ;; *************** function _IIC_Stop *****************
 12351 ;; Defined at:
 12352 ;;		line 37 in file "myiic.c"
 12353 ;; Parameters:    Size  Location     Type
 12354 ;;		None
 12355 ;; Auto vars:     Size  Location     Type
 12356 ;;		None
 12357 ;; Return value:  Size  Location     Type
 12358 ;;                  1    wreg      void 
 12359 ;; Registers used:
 12360 ;;		status,2, status,0, pclath, cstack
 12361 ;; Tracked objects:
 12362 ;;		On entry : 0/0
 12363 ;;		On exit  : 0/0
 12364 ;;		Unchanged: 0/0
 12365 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12366 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12367 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12368 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12369 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12370 ;;Total ram usage:        0 bytes
 12371 ;; Hardware stack levels used:    1
 12372 ;; Hardware stack levels required when called:    1
 12373 ;; This function calls:
 12374 ;;		_delay_4us
 12375 ;; This function is called by:
 12376 ;;		_IIC_Wait_Ack
 12377 ;;		_IIC_RdRTCReg
 12378 ;;		_IIC_WtRTCReg
 12379 ;; This function uses a non-reentrant model
 12380 ;;
 12381                           
 12382                           
 12383                           ;psect for function _IIC_Stop
 12384  084C                     _IIC_Stop:	
 12385                           
 12386                           ;myiic.c: 39:  {TRISC4 = 0;};
 12387                           
 12388                           ;incstack = 0
 12389                           ; Regs used in _IIC_Stop: [status,2+status,0+pclath+cstack]
 12390  084C  0021               	movlb	1	; select bank1
 12391  084D  120E               	bcf	14,4	;volatile
 12392                           
 12393                           ;myiic.c: 40:  LATC3=0;
 12394  084E  0022               	movlb	2	; select bank2
 12395  084F  118E               	bcf	14,3	;volatile
 12396                           
 12397                           ;myiic.c: 41:  LATC4=0;
 12398  0850  120E               	bcf	14,4	;volatile
 12399                           
 12400                           ;myiic.c: 42:   delay_4us();
 12401  0851  3197  277C  3188   	fcall	_delay_4us
 12402                           
 12403                           ;myiic.c: 43:  LATC3=1;
 12404  0854  0022               	movlb	2	; select bank2
 12405  0855  158E               	bsf	14,3	;volatile
 12406                           
 12407                           ;myiic.c: 44:  LATC4=1;
 12408  0856  160E               	bsf	14,4	;volatile
 12409                           
 12410                           ;myiic.c: 45:  delay_4us();
 12411  0857  3197  277C         	fcall	_delay_4us
 12412  0859  0008               	return
 12413  085A                     __end_of_IIC_Stop:	
 12414                           
 12415                           	psect	text68
 12416  17EA                     __ptext68:	
 12417 ;; *************** function _IIC_Start *****************
 12418 ;; Defined at:
 12419 ;;		line 25 in file "myiic.c"
 12420 ;; Parameters:    Size  Location     Type
 12421 ;;		None
 12422 ;; Auto vars:     Size  Location     Type
 12423 ;;		None
 12424 ;; Return value:  Size  Location     Type
 12425 ;;                  1    wreg      void 
 12426 ;; Registers used:
 12427 ;;		status,2, status,0, pclath, cstack
 12428 ;; Tracked objects:
 12429 ;;		On entry : 0/0
 12430 ;;		On exit  : 0/0
 12431 ;;		Unchanged: 0/0
 12432 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12433 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12434 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12435 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12436 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12437 ;;Total ram usage:        0 bytes
 12438 ;; Hardware stack levels used:    1
 12439 ;; Hardware stack levels required when called:    1
 12440 ;; This function calls:
 12441 ;;		_delay_4us
 12442 ;; This function is called by:
 12443 ;;		_IIC_RdRTCReg
 12444 ;;		_IIC_WtRTCReg
 12445 ;; This function uses a non-reentrant model
 12446 ;;
 12447                           
 12448                           
 12449                           ;psect for function _IIC_Start
 12450  17EA                     _IIC_Start:	
 12451                           
 12452                           ;myiic.c: 27:  {TRISC4 = 0;};
 12453                           
 12454                           ;incstack = 0
 12455                           ; Regs used in _IIC_Start: [status,2+status,0+pclath+cstack]
 12456  17EA  0021               	movlb	1	; select bank1
 12457  17EB  120E               	bcf	14,4	;volatile
 12458                           
 12459                           ;myiic.c: 28:  LATC4=1;
 12460  17EC  0022               	movlb	2	; select bank2
 12461  17ED  160E               	bsf	14,4	;volatile
 12462                           
 12463                           ;myiic.c: 29:  LATC3=1;
 12464  17EE  158E               	bsf	14,3	;volatile
 12465                           
 12466                           ;myiic.c: 30:  delay_4us();
 12467  17EF  3197  277C         	fcall	_delay_4us
 12468                           
 12469                           ;myiic.c: 31:   LATC4=0;
 12470  17F1  0022               	movlb	2	; select bank2
 12471  17F2  120E               	bcf	14,4	;volatile
 12472                           
 12473                           ;myiic.c: 33:  LATC3=0;
 12474  17F3  118E               	bcf	14,3	;volatile
 12475  17F4  0008               	return
 12476  17F5                     __end_of_IIC_Start:	
 12477                           
 12478                           	psect	text69
 12479  0A82                     __ptext69:	
 12480 ;; *************** function _IIC_Send_Byte *****************
 12481 ;; Defined at:
 12482 ;;		line 95 in file "myiic.c"
 12483 ;; Parameters:    Size  Location     Type
 12484 ;;  txd             1    wreg     unsigned char 
 12485 ;; Auto vars:     Size  Location     Type
 12486 ;;  txd             1    1[COMMON] unsigned char 
 12487 ;;  t               1    2[COMMON] unsigned char 
 12488 ;; Return value:  Size  Location     Type
 12489 ;;                  1    wreg      void 
 12490 ;; Registers used:
 12491 ;;		wreg, status,2, status,0, pclath, cstack
 12492 ;; Tracked objects:
 12493 ;;		On entry : 0/0
 12494 ;;		On exit  : 0/0
 12495 ;;		Unchanged: 0/0
 12496 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12497 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12498 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12499 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12500 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12501 ;;Total ram usage:        3 bytes
 12502 ;; Hardware stack levels used:    1
 12503 ;; Hardware stack levels required when called:    1
 12504 ;; This function calls:
 12505 ;;		_delay_4us
 12506 ;; This function is called by:
 12507 ;;		_IIC_RdRTCReg
 12508 ;;		_IIC_WtRTCReg
 12509 ;; This function uses a non-reentrant model
 12510 ;;
 12511                           
 12512                           
 12513                           ;psect for function _IIC_Send_Byte
 12514  0A82                     _IIC_Send_Byte:	
 12515                           
 12516                           ;incstack = 0
 12517                           ; Regs used in _IIC_Send_Byte: [wreg+status,2+status,0+pclath+cstack]
 12518                           ;IIC_Send_Byte@txd stored from wreg
 12519  0A82  00F1               	movwf	IIC_Send_Byte@txd
 12520                           
 12521                           ;myiic.c: 95: void IIC_Send_Byte(unsigned char txd);myiic.c: 96: {;myiic.c: 97:     unsi
      +                          gned char t;;myiic.c: 98:  {TRISC4 = 0;};
 12522  0A83  0021               	movlb	1	; select bank1
 12523  0A84  120E               	bcf	14,4	;volatile
 12524                           
 12525                           ;myiic.c: 99:     LATC3=0;
 12526  0A85  0022               	movlb	2	; select bank2
 12527  0A86  118E               	bcf	14,3	;volatile
 12528                           
 12529                           ;myiic.c: 100:     for(t=0;t<8;t++)
 12530  0A87  01F2               	clrf	IIC_Send_Byte@t
 12531  0A88                     L8:	
 12532  0A88  3008               	movlw	8
 12533  0A89  0272               	subwf	IIC_Send_Byte@t,w
 12534  0A8A  1803               	btfsc	3,0
 12535  0A8B  0008               	return
 12536                           
 12537                           ;myiic.c: 101:     {;myiic.c: 102:         LATC4=(txd&0x80)>>7;
 12538  0A8C  0871               	movf	IIC_Send_Byte@txd,w
 12539  0A8D  00F0               	movwf	??_IIC_Send_Byte
 12540  0A8E  3007               	movlw	7
 12541  0A8F                     u340_25:	
 12542  0A8F  36F0               	lsrf	??_IIC_Send_Byte,f
 12543  0A90  0B89               	decfsz	9,f
 12544  0A91  2A8F               	goto	u340_25
 12545  0A92  1C70               	btfss	??_IIC_Send_Byte,0
 12546  0A93  2A97               	goto	u341_20
 12547  0A94  0022               	movlb	2	; select bank2
 12548  0A95  160E               	bsf	14,4	;volatile
 12549  0A96  2A99               	goto	i1l3376
 12550  0A97                     u341_20:	
 12551  0A97  0022               	movlb	2	; select bank2
 12552  0A98  120E               	bcf	14,4	;volatile
 12553  0A99                     i1l3376:	
 12554                           
 12555                           ;myiic.c: 103:         txd<<=1;
 12556  0A99  1003               	clrc
 12557  0A9A  0DF1               	rlf	IIC_Send_Byte@txd,f
 12558                           
 12559                           ;myiic.c: 104:   delay_4us();
 12560  0A9B  3197  277C  318A   	fcall	_delay_4us
 12561                           
 12562                           ;myiic.c: 105:   LATC3=1;
 12563  0A9E  0022               	movlb	2	; select bank2
 12564  0A9F  158E               	bsf	14,3	;volatile
 12565                           
 12566                           ;myiic.c: 106:   delay_4us();
 12567  0AA0  3197  277C  318A   	fcall	_delay_4us
 12568                           
 12569                           ;myiic.c: 107:   LATC3=0;
 12570  0AA3  0022               	movlb	2	; select bank2
 12571  0AA4  118E               	bcf	14,3	;volatile
 12572                           
 12573                           ;myiic.c: 108:   delay_4us();
 12574  0AA5  3197  277C  318A   	fcall	_delay_4us
 12575                           
 12576                           ;myiic.c: 109:     }
 12577  0AA8  3001               	movlw	1
 12578  0AA9  00F0               	movwf	??_IIC_Send_Byte
 12579  0AAA  0870               	movf	??_IIC_Send_Byte,w
 12580  0AAB  07F2               	addwf	IIC_Send_Byte@t,f
 12581  0AAC  2A88               	goto	L8
 12582  0AAD                     __end_of_IIC_Send_Byte:	
 12583                           
 12584                           	psect	text70
 12585  0B04                     __ptext70:	
 12586 ;; *************** function _IIC_Read_Byte *****************
 12587 ;; Defined at:
 12588 ;;		line 112 in file "myiic.c"
 12589 ;; Parameters:    Size  Location     Type
 12590 ;;  ack             1    wreg     unsigned char 
 12591 ;; Auto vars:     Size  Location     Type
 12592 ;;  ack             1    1[COMMON] unsigned char 
 12593 ;;  i               1    3[COMMON] unsigned char 
 12594 ;;  receive         1    2[COMMON] unsigned char 
 12595 ;; Return value:  Size  Location     Type
 12596 ;;                  1    wreg      unsigned char 
 12597 ;; Registers used:
 12598 ;;		wreg, status,2, status,0, pclath, cstack
 12599 ;; Tracked objects:
 12600 ;;		On entry : 0/0
 12601 ;;		On exit  : 0/0
 12602 ;;		Unchanged: 0/0
 12603 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12604 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12605 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12606 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12607 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12608 ;;Total ram usage:        4 bytes
 12609 ;; Hardware stack levels used:    1
 12610 ;; Hardware stack levels required when called:    2
 12611 ;; This function calls:
 12612 ;;		_IIC_Ack
 12613 ;;		_IIC_NAck
 12614 ;;		_delay_4us
 12615 ;; This function is called by:
 12616 ;;		_IIC_RdRTCReg
 12617 ;; This function uses a non-reentrant model
 12618 ;;
 12619                           
 12620                           
 12621                           ;psect for function _IIC_Read_Byte
 12622  0B04                     _IIC_Read_Byte:	
 12623                           
 12624                           ;incstack = 0
 12625                           ; Regs used in _IIC_Read_Byte: [wreg+status,2+status,0+pclath+cstack]
 12626                           ;IIC_Read_Byte@ack stored from wreg
 12627  0B04  00F1               	movwf	IIC_Read_Byte@ack
 12628                           
 12629                           ;myiic.c: 112: unsigned char IIC_Read_Byte(unsigned char ack);myiic.c: 113: {;myiic.c: 1
      +                          14:  unsigned char i,receive=0;
 12630  0B05  01F2               	clrf	IIC_Read_Byte@receive
 12631                           
 12632                           ;myiic.c: 115:  {TRISC4 = 1;};
 12633  0B06  0021               	movlb	1	; select bank1
 12634  0B07  160E               	bsf	14,4	;volatile
 12635                           
 12636                           ;myiic.c: 116:     for(i=0;i<8;i++ )
 12637  0B08  01F3               	clrf	IIC_Read_Byte@i
 12638  0B09  3008               	movlw	8
 12639  0B0A  0273               	subwf	IIC_Read_Byte@i,w
 12640  0B0B  1803               	btfsc	3,0
 12641  0B0C  2B28               	goto	i1l3416
 12642  0B0D                     i1l245:	
 12643                           
 12644                           ;myiic.c: 117:  {;myiic.c: 118:         LATC3=0;
 12645  0B0D  0022               	movlb	2	; select bank2
 12646  0B0E  118E               	bcf	14,3	;volatile
 12647                           
 12648                           ;myiic.c: 119:         delay_4us();
 12649  0B0F  3197  277C  318B   	fcall	_delay_4us
 12650                           
 12651                           ;myiic.c: 120:   LATC3=1;
 12652  0B12  0022               	movlb	2	; select bank2
 12653  0B13  158E               	bsf	14,3	;volatile
 12654                           
 12655                           ;myiic.c: 121:         receive<<=1;
 12656  0B14  1003               	clrc
 12657  0B15  0DF2               	rlf	IIC_Read_Byte@receive,f
 12658                           
 12659                           ;myiic.c: 122:         if(RC4)receive++;
 12660  0B16  0020               	movlb	0	; select bank0
 12661  0B17  1E0E               	btfss	14,4	;volatile
 12662  0B18  2B1D               	goto	i1l3410
 12663  0B19  3001               	movlw	1
 12664  0B1A  00F0               	movwf	??_IIC_Read_Byte
 12665  0B1B  0870               	movf	??_IIC_Read_Byte,w
 12666  0B1C  07F2               	addwf	IIC_Read_Byte@receive,f
 12667  0B1D                     i1l3410:	
 12668                           
 12669                           ;myiic.c: 123:   delay_4us();
 12670  0B1D  3197  277C  318B   	fcall	_delay_4us
 12671                           
 12672                           ;myiic.c: 124:     }
 12673  0B20  3001               	movlw	1
 12674  0B21  00F0               	movwf	??_IIC_Read_Byte
 12675  0B22  0870               	movf	??_IIC_Read_Byte,w
 12676  0B23  07F3               	addwf	IIC_Read_Byte@i,f
 12677  0B24  3008               	movlw	8
 12678  0B25  0273               	subwf	IIC_Read_Byte@i,w
 12679  0B26  1C03               	skipc
 12680  0B27  2B0D               	goto	i1l245
 12681  0B28                     i1l3416:	
 12682                           
 12683                           ;myiic.c: 125:     if (!ack)
 12684  0B28  0871               	movf	IIC_Read_Byte@ack,w
 12685  0B29  1D03               	btfss	3,2
 12686  0B2A  2B2F               	goto	i1l3420
 12687                           
 12688                           ;myiic.c: 126:         IIC_NAck();
 12689  0B2B  3188  206A  318B   	fcall	_IIC_NAck
 12690  0B2E  2B31               	goto	i1l3422
 12691  0B2F                     i1l3420:	
 12692                           ;myiic.c: 127:     else
 12693                           
 12694                           
 12695                           ;myiic.c: 128:         IIC_Ack();
 12696  0B2F  3188  205A         	fcall	_IIC_Ack
 12697  0B31                     i1l3422:	
 12698                           
 12699                           ;myiic.c: 129:     return receive;
 12700  0B31  0872               	movf	IIC_Read_Byte@receive,w
 12701  0B32  0008               	return
 12702  0B33                     __end_of_IIC_Read_Byte:	
 12703                           
 12704                           	psect	text71
 12705  086A                     __ptext71:	
 12706 ;; *************** function _IIC_NAck *****************
 12707 ;; Defined at:
 12708 ;;		line 81 in file "myiic.c"
 12709 ;; Parameters:    Size  Location     Type
 12710 ;;		None
 12711 ;; Auto vars:     Size  Location     Type
 12712 ;;		None
 12713 ;; Return value:  Size  Location     Type
 12714 ;;                  1    wreg      void 
 12715 ;; Registers used:
 12716 ;;		status,2, status,0, pclath, cstack
 12717 ;; Tracked objects:
 12718 ;;		On entry : 0/0
 12719 ;;		On exit  : 0/0
 12720 ;;		Unchanged: 0/0
 12721 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12722 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12723 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12724 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12725 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12726 ;;Total ram usage:        0 bytes
 12727 ;; Hardware stack levels used:    1
 12728 ;; Hardware stack levels required when called:    1
 12729 ;; This function calls:
 12730 ;;		_delay_4us
 12731 ;; This function is called by:
 12732 ;;		_IIC_Read_Byte
 12733 ;; This function uses a non-reentrant model
 12734 ;;
 12735                           
 12736                           
 12737                           ;psect for function _IIC_NAck
 12738  086A                     _IIC_NAck:	
 12739                           
 12740                           ;myiic.c: 83:  LATC3=0;
 12741                           
 12742                           ;incstack = 0
 12743                           ; Regs used in _IIC_NAck: [status,2+status,0+pclath+cstack]
 12744  086A  0022               	movlb	2	; select bank2
 12745  086B  118E               	bcf	14,3	;volatile
 12746                           
 12747                           ;myiic.c: 84:  {TRISC4 = 0;};
 12748  086C  0021               	movlb	1	; select bank1
 12749  086D  120E               	bcf	14,4	;volatile
 12750                           
 12751                           ;myiic.c: 85:  LATC4=1;
 12752  086E  0022               	movlb	2	; select bank2
 12753  086F  160E               	bsf	14,4	;volatile
 12754                           
 12755                           ;myiic.c: 86:  delay_4us();
 12756  0870  3197  277C  3188   	fcall	_delay_4us
 12757                           
 12758                           ;myiic.c: 87:  LATC3=1;
 12759  0873  0022               	movlb	2	; select bank2
 12760  0874  158E               	bsf	14,3	;volatile
 12761                           
 12762                           ;myiic.c: 88:  delay_4us();
 12763  0875  3197  277C         	fcall	_delay_4us
 12764                           
 12765                           ;myiic.c: 89:  LATC3=0;
 12766  0877  0022               	movlb	2	; select bank2
 12767  0878  118E               	bcf	14,3	;volatile
 12768  0879  0008               	return
 12769  087A                     __end_of_IIC_NAck:	
 12770                           
 12771                           	psect	text72
 12772  085A                     __ptext72:	
 12773 ;; *************** function _IIC_Ack *****************
 12774 ;; Defined at:
 12775 ;;		line 70 in file "myiic.c"
 12776 ;; Parameters:    Size  Location     Type
 12777 ;;		None
 12778 ;; Auto vars:     Size  Location     Type
 12779 ;;		None
 12780 ;; Return value:  Size  Location     Type
 12781 ;;                  1    wreg      void 
 12782 ;; Registers used:
 12783 ;;		status,2, status,0, pclath, cstack
 12784 ;; Tracked objects:
 12785 ;;		On entry : 0/0
 12786 ;;		On exit  : 0/0
 12787 ;;		Unchanged: 0/0
 12788 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12789 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12790 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12791 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12792 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12793 ;;Total ram usage:        0 bytes
 12794 ;; Hardware stack levels used:    1
 12795 ;; Hardware stack levels required when called:    1
 12796 ;; This function calls:
 12797 ;;		_delay_4us
 12798 ;; This function is called by:
 12799 ;;		_IIC_Read_Byte
 12800 ;; This function uses a non-reentrant model
 12801 ;;
 12802                           
 12803                           
 12804                           ;psect for function _IIC_Ack
 12805  085A                     _IIC_Ack:	
 12806                           
 12807                           ;myiic.c: 72:  LATC3=0;
 12808                           
 12809                           ;incstack = 0
 12810                           ; Regs used in _IIC_Ack: [status,2+status,0+pclath+cstack]
 12811  085A  0022               	movlb	2	; select bank2
 12812  085B  118E               	bcf	14,3	;volatile
 12813                           
 12814                           ;myiic.c: 73:  {TRISC4 = 0;};
 12815  085C  0021               	movlb	1	; select bank1
 12816  085D  120E               	bcf	14,4	;volatile
 12817                           
 12818                           ;myiic.c: 74:  LATC4=0;
 12819  085E  0022               	movlb	2	; select bank2
 12820  085F  120E               	bcf	14,4	;volatile
 12821                           
 12822                           ;myiic.c: 75:  delay_4us();
 12823  0860  3197  277C  3188   	fcall	_delay_4us
 12824                           
 12825                           ;myiic.c: 76:  LATC3=1;
 12826  0863  0022               	movlb	2	; select bank2
 12827  0864  158E               	bsf	14,3	;volatile
 12828                           
 12829                           ;myiic.c: 77:  delay_4us();
 12830  0865  3197  277C         	fcall	_delay_4us
 12831                           
 12832                           ;myiic.c: 78:  LATC3=0;
 12833  0867  0022               	movlb	2	; select bank2
 12834  0868  118E               	bcf	14,3	;volatile
 12835  0869  0008               	return
 12836  086A                     __end_of_IIC_Ack:	
 12837                           
 12838                           	psect	text73
 12839  177C                     __ptext73:	
 12840 ;; *************** function _delay_4us *****************
 12841 ;; Defined at:
 12842 ;;		line 3 in file "delay.c"
 12843 ;; Parameters:    Size  Location     Type
 12844 ;;		None
 12845 ;; Auto vars:     Size  Location     Type
 12846 ;;		None
 12847 ;; Return value:  Size  Location     Type
 12848 ;;                  1    wreg      void 
 12849 ;; Registers used:
 12850 ;;		None
 12851 ;; Tracked objects:
 12852 ;;		On entry : 0/0
 12853 ;;		On exit  : 0/0
 12854 ;;		Unchanged: 0/0
 12855 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12856 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12857 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12858 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12859 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12860 ;;Total ram usage:        0 bytes
 12861 ;; Hardware stack levels used:    1
 12862 ;; This function calls:
 12863 ;;		Nothing
 12864 ;; This function is called by:
 12865 ;;		_IIC_Start
 12866 ;;		_IIC_Stop
 12867 ;;		_IIC_Wait_Ack
 12868 ;;		_IIC_Ack
 12869 ;;		_IIC_NAck
 12870 ;;		_IIC_Send_Byte
 12871 ;;		_IIC_Read_Byte
 12872 ;; This function uses a non-reentrant model
 12873 ;;
 12874                           
 12875                           
 12876                           ;psect for function _delay_4us
 12877  177C                     _delay_4us:	
 12878                           
 12879                           ;delay.c: 5:     __nop();
 12880                           
 12881                           ;incstack = 0
 12882                           ; Regs used in _delay_4us: []
 12883  177C  0000               	nop
 12884  177D  0008               	return
 12885  177E                     __end_of_delay_4us:	
 12886  007E                     btemp	set	126	;btemp
 12887  007E                     int$flags	set	126
 12888  007E                     wtemp0	set	126


Data Sizes:
    Strings     31
    Constant    11
    Data        7
    BSS         220
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     79      80
    BANK1            80     64      80
    BANK2            80     64      75
    BANK3            80     30      62
    BANK4            80      0      39
    BANK5            80      0      64
    BANK6            80      0      64
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 64
		 -> ?_sprintf(BANK0[2]), stoa@nuls(BANK0[7]), dbuf(BANK3[32]), ISR@send(BANK2[64]), 
		 -> STR_3(CODE[4]), STR_2(CODE[7]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 64
		 -> ?_sprintf(BANK0[2]), stoa@nuls(BANK0[7]), dbuf(BANK3[32]), ISR@send(BANK2[64]), 
		 -> STR_3(CODE[4]), STR_2(CODE[7]), 

    strcpy@dest	PTR unsigned char  size(1) Largest target is 64
		 -> ISR@send(BANK2[64]), 

    strcpy@d	PTR unsigned char  size(1) Largest target is 64
		 -> ISR@send(BANK2[64]), 

    strcpy@src	PTR const unsigned char  size(1) Largest target is 64
		 -> ISR@buf(BANK1[64]), 

    strcpy@s	PTR const unsigned char  size(1) Largest target is 64
		 -> ISR@buf(BANK1[64]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_1(CODE[20]), 

    sprintf@s	PTR unsigned char  size(1) Largest target is 64
		 -> ISR@buf(BANK1[64]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    f.buffer	PTR unsigned char  size(1) Largest target is 64
		 -> ISR@buf(BANK1[64]), 

    fputs@s	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK3[32]), 

    fputs@fp	PTR struct _IO_FILE size(1) Largest target is 6
		 -> sprintf@f(BANK0[5]), 

    S2068_IO_FILE$buffer	PTR unsigned char  size(1) Largest target is 64
		 -> ISR@buf(BANK1[64]), 

    fputc@fp.buffer	PTR unsigned char  size(1) Largest target is 64
		 -> ISR@buf(BANK1[64]), 

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 6
		 -> sprintf@f(BANK0[5]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK0[1]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 6
		 -> sprintf@f(BANK0[5]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_1(CODE[20]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 20
		 -> STR_1(CODE[20]), 

    vfpfcnvrt@cp	PTR unsigned char  size(2) Largest target is 7
		 -> ?_sprintf(BANK0[2]), STR_3(CODE[4]), STR_2(CODE[7]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 6
		 -> sprintf@f(BANK0[5]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK0[1]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 2
		 -> vfprintf@cfmt(BANK0[2]), 

    stoa@fp	PTR struct _IO_FILE size(1) Largest target is 6
		 -> sprintf@f(BANK0[5]), 

    stoa@s	PTR unsigned char  size(2) Largest target is 7
		 -> ?_sprintf(BANK0[2]), STR_3(CODE[4]), STR_2(CODE[7]), 

    stoa@cp	PTR unsigned char  size(2) Largest target is 7
		 -> ?_sprintf(BANK0[2]), stoa@nuls(BANK0[7]), STR_3(CODE[4]), STR_2(CODE[7]), 

    dtoa@fp	PTR struct _IO_FILE size(1) Largest target is 6
		 -> sprintf@f(BANK0[5]), 

    pad@fp	PTR struct _IO_FILE size(1) Largest target is 6
		 -> sprintf@f(BANK0[5]), 

    pad@buf	PTR unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK3[32]), 

    update_time@pdata	PTR volatile struct . size(1) Largest target is 39
		 -> g_data(BANK4[39]), 

    display_update@pdata	PTR volatile struct . size(1) Largest target is 39
		 -> g_data(BANK4[39]), 

    key_isPressed@pdata	PTR volatile struct . size(1) Largest target is 39
		 -> g_data(BANK4[39]), 

    key_checkPressed@pdata	PTR volatile struct . size(1) Largest target is 39
		 -> g_data(BANK4[39]), 

    capture_handdle@pdata	PTR volatile struct . size(1) Largest target is 39
		 -> g_data(BANK4[39]), 

    bpc_proc@pdata	PTR volatile struct . size(1) Largest target is 39
		 -> g_data(BANK4[39]), 

    check_err@pdata	PTR volatile struct . size(1) Largest target is 39
		 -> g_data(BANK4[39]), 

    bpc_Cnt2Qua@pdata	PTR volatile struct . size(1) Largest target is 39
		 -> g_data(BANK4[39]), 

    IIC_RdRTCReg@value	PTR unsigned char  size(1) Largest target is 1
		 -> ISR@data(BANK0[1]), 

    sp__strcpy	PTR unsigned char  size(1) Largest target is 64
		 -> ISR@send(BANK2[64]), 

    sp__data_getdata	PTR volatile struct . size(1) Largest target is 39
		 -> g_data(BANK4[39]), 

    init_env@pdata	PTR volatile struct . size(1) Largest target is 39
		 -> g_data(BANK4[39]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_capture_handdle
    _ISR->_sprintf
    _timer_Timer0Handdle->_update_time
    _key_checkPressed->_led_Blink
    _led_Blink->i1_led_SetState
    _vfpfcnvrt->_stoa
    _stoa->_fputc
    _dtoa->_abs
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___almod
    _capture_handdle->i1_capture_setEdge
    _capture_handdle->i1_led_SetState
    i1_display_update->i1_display_write_once
    i1_display_write_once->i1___awdiv
    i1_display_write_byte->i1_display_control595_delay
    _bpc_Cnt2Qua->_cnt_abs
    _IIC_WtRTCReg->_IIC_Send_Byte
    _IIC_RdRTCReg->_IIC_Read_Byte

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    _ISR->_sprintf
    _timer_Timer0Handdle->_update_time
    _update_time->i1_display_update
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _bpc_proc->i1_display_update

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    _main->_init_env
    _init_env->_display_update
    _display_update->_display_write_once
    _display_write_once->___awdiv
    _display_write_byte->_display_control595_delay
    _capture_init->_capture_setEdge

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    4315
                           _IIC_Init
                       _capture_init
                     _display_update
                           _init_env
                       _led_SetState
                   _timer_Timer0Init
                  _timer_Timer0Start
                   _timer_Timer1Init
                  _timer_Timer1Start
                          _uart_init
 ---------------------------------------------------------------------------------
 (1) _uart_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _timer_Timer1Start                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _timer_Timer1Init                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _timer_Timer0Start                                    0     0      0       0
                  _timer_Timer0Reset
 ---------------------------------------------------------------------------------
 (2) _timer_Timer0Reset                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _timer_Timer0Init                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _led_SetState                                         1     1      0      22
                                              0 BANK3      1     1      0
 ---------------------------------------------------------------------------------
 (1) _init_env                                             5     5      0    2203
                                             25 BANK3      5     5      0
                       _data_getdata
                        _display_set
                     _display_update
 ---------------------------------------------------------------------------------
 (2) _display_update                                      12    12      0    2024
                                             13 BANK3     12    12      0
                            ___awdiv
                            ___awmod
                       _data_getdata
                 _display_write_once
 ---------------------------------------------------------------------------------
 (3) _display_write_once                                   4     1      3     433
                                              9 BANK3      4     1      3
                            ___awdiv (ARG)
                            ___awmod (ARG)
           _display_control595_delay
                 _display_write_byte
 ---------------------------------------------------------------------------------
 (4) _display_write_byte                                   4     4      0      93
                                              2 BANK3      4     4      0
           _display_control595_delay
 ---------------------------------------------------------------------------------
 (5) _display_control595_delay                             2     2      0      24
                                              0 BANK3      2     2      0
 ---------------------------------------------------------------------------------
 (3) _data_getdata                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4     700
                                              0 BANK3      7     3      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     756
                                              0 BANK3      9     5      4
 ---------------------------------------------------------------------------------
 (2) _display_set                                          1     1      0      22
                                              0 BANK3      1     1      0
 ---------------------------------------------------------------------------------
 (1) _capture_init                                         0     0      0      66
                    _capture_setEdge
 ---------------------------------------------------------------------------------
 (2) _capture_setEdge                                      1     1      0      66
                                              0 BANK3      1     1      0
 ---------------------------------------------------------------------------------
 (1) _IIC_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR                                                133   133      0   17903
                                             74 BANK0      5     5      0
                                              0 BANK1     64    64      0
                                              0 BANK2     64    64      0
                       _IIC_RdRTCReg
                       _IIC_WtRTCReg
                            ___lwmod
                           _bpc_proc
                   _capture_IsEnable
                   _capture_IsIntrpt
                        _capture_Set
                  _capture_clrIntrpt
                    _capture_handdle
                      _key_isPressed
                          _led_Blink
                            _sprintf
                             _strcpy
                             _strlen
                _timer_IsTimer0Itrpt
                _timer_IsTimer1Itrpt
                _timer_Timer0Handdle
              _timer_Timer1ClrIntrpt
                i1_timer_Timer0Reset
 ---------------------------------------------------------------------------------
 (7) i1_timer_Timer0Reset                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _timer_Timer1ClrIntrpt                                0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _timer_Timer0Handdle                                  0     0      0    2176
                   _key_checkPressed
                        _update_time
 ---------------------------------------------------------------------------------
 (8) _update_time                                          3     3      0    2109
                                             13 COMMON     1     1      0
                                             12 BANK0      2     2      0
                        _capture_Set
                          i1___awmod
                     i1_data_getdata
                   i1_display_update
 ---------------------------------------------------------------------------------
 (8) _key_checkPressed                                     2     2      0      67
                                              2 COMMON     2     2      0
                          _led_Blink
                     i1_data_getdata
 ---------------------------------------------------------------------------------
 (9) _led_Blink                                            1     1      0      22
                                              1 COMMON     1     1      0
                     i1_led_SetState
 ---------------------------------------------------------------------------------
 (7) _timer_IsTimer1Itrpt                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _timer_IsTimer0Itrpt                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _strcpy                                               5     4      1     205
                                              0 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (7) _sprintf                                             20    10     10    9789
                                             13 COMMON     1     1      0
                                             55 BANK0     19     9     10
                           _vfprintf
 ---------------------------------------------------------------------------------
 (8) _vfprintf                                             8     5      3    9479
                                             47 BANK0      8     5      3
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (9) _vfpfcnvrt                                           32    30      2    9165
                                             33 BANK0     14    12      2
                               _dtoa
                              _fputc
                               _stoa
 ---------------------------------------------------------------------------------
 (10) _stoa                                               23    21      2    2088
                                              8 COMMON     5     3      2
                                              0 BANK0     18    18      0
                              _fputc
                             _strlen
 ---------------------------------------------------------------------------------
 (10) _dtoa                                               21    17      4    5160
                                             12 BANK0     21    17      4
                            ___aldiv
                            ___almod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (11) _pad                                                 9     6      3    3554
                                             12 COMMON     1     1      0
                                              4 BANK0      8     5      3
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (7) _strlen                                               6     4      2     228
                                              0 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (12) _fputs                                               8     7      1    1605
                                              8 COMMON     4     3      1
                                              0 BANK0      4     4      0
                              _fputc
 ---------------------------------------------------------------------------------
 (11) _fputc                                               8     5      3    1290
                                              0 COMMON     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (12) _putch                                               1     1      0       0
 ---------------------------------------------------------------------------------
 (11) _abs                                                 4     2      2     142
                                             11 COMMON     2     0      2
                                              0 BANK0      2     2      0
                            ___almod (ARG)
 ---------------------------------------------------------------------------------
 (11) ___almod                                            11     3      8     448
                                              0 COMMON    11     3      8
 ---------------------------------------------------------------------------------
 (11) ___aldiv                                            15     7      8     452
                                              0 COMMON     9     1      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (7) _key_isPressed                                        2     2      0      45
                                              0 COMMON     2     2      0
                     i1_data_getdata
 ---------------------------------------------------------------------------------
 (7) _capture_handdle                                     13    13      0     318
                                              1 COMMON    13    13      0
                  _capture_IsNegEdge
                  i1_capture_setEdge
                     i1_data_getdata
                     i1_led_SetState
 ---------------------------------------------------------------------------------
 (10) i1_led_SetState                                      1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) i1_capture_setEdge                                    1     1      0      66
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _capture_clrIntrpt                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _capture_IsIntrpt                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _capture_IsEnable                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _bpc_proc                                            12    12      0    3901
                                             12 BANK0     12    12      0
                        _bpc_Cnt2Qua
                        _capture_Set
                          _check_err
                     i1_data_getdata
                   i1_display_update
 ---------------------------------------------------------------------------------
 (9) i1_display_update                                    12    12      0    1326
                                              0 BANK0     12    12      0
                          i1___awdiv
                          i1___awmod
                     i1_data_getdata
               i1_display_write_once
 ---------------------------------------------------------------------------------
 (10) i1_display_write_once                                4     1      3     283
                                              9 COMMON     4     1      3
                          i1___awdiv (ARG)
                          i1___awmod (ARG)
         i1_display_control595_delay
               i1_display_write_byte
 ---------------------------------------------------------------------------------
 (11) i1_display_write_byte                                4     4      0      93
                                              2 COMMON     4     4      0
         i1_display_control595_delay
 ---------------------------------------------------------------------------------
 (12) i1_display_control595_delay                          2     2      0      24
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (10) i1___awmod                                           7     3      4     452
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (10) i1___awdiv                                           9     5      4     456
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (8) _check_err                                           16    14      2     749
                                              0 COMMON     5     3      2
                                              0 BANK0     11    11      0
 ---------------------------------------------------------------------------------
 (9) _capture_Set                                          1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) _bpc_Cnt2Qua                                          3     3      0     851
                                              6 COMMON     3     3      0
                  _capture_IsNegEdge
                            _cnt_abs
                     i1_data_getdata
 ---------------------------------------------------------------------------------
 (10) i1_data_getdata                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _cnt_abs                                              6     2      4     740
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (8) _capture_IsNegEdge                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (7) ___lwmod                                              6     2      4     463
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (7) _IIC_WtRTCReg                                         2     1      1     213
                                              3 COMMON     2     1      1
                      _IIC_Send_Byte
                          _IIC_Start
                           _IIC_Stop
                       _IIC_Wait_Ack
 ---------------------------------------------------------------------------------
 (7) _IIC_RdRTCReg                                         3     2      1     306
                                              4 COMMON     3     2      1
                      _IIC_Read_Byte
                      _IIC_Send_Byte
                          _IIC_Start
                           _IIC_Stop
                       _IIC_Wait_Ack
 ---------------------------------------------------------------------------------
 (8) _IIC_Wait_Ack                                         2     2      0      24
                                              0 COMMON     2     2      0
                           _IIC_Stop
                          _delay_4us
 ---------------------------------------------------------------------------------
 (9) _IIC_Stop                                             0     0      0       0
                          _delay_4us
 ---------------------------------------------------------------------------------
 (8) _IIC_Start                                            0     0      0       0
                          _delay_4us
 ---------------------------------------------------------------------------------
 (8) _IIC_Send_Byte                                        3     3      0      69
                                              0 COMMON     3     3      0
                          _delay_4us
 ---------------------------------------------------------------------------------
 (8) _IIC_Read_Byte                                        4     4      0      93
                                              0 COMMON     4     4      0
                            _IIC_Ack
                           _IIC_NAck
                          _delay_4us
 ---------------------------------------------------------------------------------
 (9) _IIC_NAck                                             0     0      0       0
                          _delay_4us
 ---------------------------------------------------------------------------------
 (9) _IIC_Ack                                              0     0      0       0
                          _delay_4us
 ---------------------------------------------------------------------------------
 (9) _delay_4us                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _IIC_Init
   _capture_init
     _capture_setEdge
   _display_update
     ___awdiv
     ___awmod
     _data_getdata
     _display_write_once
       ___awdiv (ARG)
       ___awmod (ARG)
       _display_control595_delay (ARG)
       _display_write_byte (ARG)
         _display_control595_delay
   _init_env
     _data_getdata
     _display_set
     _display_update
       ___awdiv
       ___awmod
       _data_getdata
       _display_write_once
         ___awdiv (ARG)
         ___awmod (ARG)
         _display_control595_delay (ARG)
         _display_write_byte (ARG)
           _display_control595_delay
   _led_SetState
   _timer_Timer0Init
   _timer_Timer0Start
     _timer_Timer0Reset
   _timer_Timer1Init
   _timer_Timer1Start
   _uart_init

 _ISR (ROOT)
   _IIC_RdRTCReg
     _IIC_Read_Byte
       _IIC_Ack
         _delay_4us
       _IIC_NAck
         _delay_4us
       _delay_4us
     _IIC_Send_Byte
       _delay_4us
     _IIC_Start
       _delay_4us
     _IIC_Stop
       _delay_4us
     _IIC_Wait_Ack
       _IIC_Stop
         _delay_4us
       _delay_4us
   _IIC_WtRTCReg
     _IIC_Send_Byte
       _delay_4us
     _IIC_Start
       _delay_4us
     _IIC_Stop
       _delay_4us
     _IIC_Wait_Ack
       _IIC_Stop
         _delay_4us
       _delay_4us
   ___lwmod
   _bpc_proc
     _bpc_Cnt2Qua
       _capture_IsNegEdge
       _cnt_abs
       i1_data_getdata
     _capture_Set
     _check_err
     i1_data_getdata
     i1_display_update
       i1___awdiv
       i1___awmod
       i1_data_getdata
       i1_display_write_once
         i1___awdiv (ARG)
         i1___awmod (ARG)
         i1_display_control595_delay (ARG)
         i1_display_write_byte (ARG)
           i1_display_control595_delay
   _capture_IsEnable
   _capture_IsIntrpt
   _capture_Set
   _capture_clrIntrpt
   _capture_handdle
     _capture_IsNegEdge
     i1_capture_setEdge
     i1_data_getdata
     i1_led_SetState
   _key_isPressed
     i1_data_getdata
   _led_Blink
     i1_led_SetState
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _dtoa
           ___aldiv
           ___almod
           _abs
             ___almod (ARG)
           _pad
             _fputc
               _putch
             _fputs
               _fputc
                 _putch
             _strlen
         _fputc
           _putch
         _stoa
           _fputc
             _putch
           _strlen
   _strcpy
   _strlen
   _timer_IsTimer0Itrpt
   _timer_IsTimer1Itrpt
   _timer_Timer0Handdle
     _key_checkPressed
       _led_Blink
         i1_led_SetState
       i1_data_getdata
     _update_time
       _capture_Set
       i1___awmod
       i1_data_getdata
       i1_display_update
         i1___awdiv
         i1___awmod
         i1_data_getdata
         i1_display_write_once
           i1___awdiv (ARG)
           i1___awmod (ARG)
           i1_display_control595_delay (ARG)
           i1_display_write_byte (ARG)
             i1_display_control595_delay
   _timer_Timer1ClrIntrpt
   i1_timer_Timer0Reset

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4F      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     40      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     40      4B       9       93.8%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50     1E      3E      11       77.5%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      27      13       48.8%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0      40      15       80.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0      40      17       80.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     1DE      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     1DE      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Wed Jun 19 01:31:07 2019

                        _update_time 0F70                        ?_IIC_RdRTCReg 0074  
 __end_ofi1_display_control595_delay 1800           i1_display_control595_delay 17F5  
                        __CFG_CP$OFF 0000                         ?_display_set 0070  
                       ___awdiv@sign 01C6                  _display_update$1570 01D6  
                        __CFG_LVP$ON 0000                                  l179 0978  
                                l566 0837                                  _GIE 005F  
                                _RC4 0074                         __CFG_CPD$OFF 0000  
                                _ISR 0004                                  _abs 08CB  
                                _pad 0D0F                         ___awmod@sign 01C6  
             __end_of_display_update 0791                         __CFG_BORV$LO 0000  
                                wreg 0009                         __CFG_IESO$ON 0000  
                       __CFG_FOSC$HS 0000           __size_of_capture_clrIntrpt 0003  
                      ?_IIC_WtRTCReg 0073                       ??_led_SetState 01C0  
              i1display_write_byte@i 0075                        ?_IIC_Wait_Ack 0070  
               __end_of_data_getdata 0800                 capture_handdle@pdata 0079  
                    __end_of_IIC_Ack 086A                                 ?_ISR 0070  
                               ISR@i 006D                                 ?_abs 007B  
                               l3320 0721                                 l3234 0CD3  
                               l3322 0725                                 l3260 0D0A  
                               l3252 0CF9                                 l3244 0CDB  
                               l3228 0CC8                                 l3246 0CE7  
                               l3256 0D02                                 l3272 0C31  
                               l3290 0C56                                 l3284 0C3E  
                               l3276 0C38                                 l3286 0C4A  
                               l3294 0C5F                                 l3298 0C67  
                               ?_pad 0024                                 l3672 0F2C  
                               l3588 0894                                 l3678 0F48  
                               STR_1 100B                                 STR_2 1800  
                               STR_3 1807                                 _BRGH 0CF2  
                               _CREN 0CEC                                 _LATA 010C  
                               _LATB 010D                                 _LATC 010E  
                               u3215 0CE8                                 _ENUM 00EF  
                               u3225 0CF2                                 u3235 0CFA  
                               u3315 0C50                                 u3325 0C57  
                               u4070 080B                                 u3195 0CDE  
                               u3295 0C41                                 u2595 0AB7  
                               _PEIE 005E                                 u3825 0F2A  
                               u3835 0F46                                 _RCIE 048D  
                     ?_IIC_Read_Byte 0070                                 _TMR0 0015  
                               _SPEN 0CEF                                 _TXIE 048C  
                               _TXEN 0CF5                                 _SYNC 0CF4  
                               _WPUA 020C                                 _WPUB 020D  
                               _WPUC 020E                         __CFG_WRT$OFF 0000  
                      __CFG_FCMEN$ON 0000                                 abs@a 007B  
                               _dbuf 01A0                                 _main 0959  
                               _dtoa 0279                                 _prec 00E2  
                               _nout 0167                                 pad@i 0027  
                               pad@p 0025                                 fsr0h 0005  
                               fsr1h 0007                                 indf0 0000  
                               fsr0l 0004                                 indf1 0001  
                               fsr1l 0006                                 pad@w 0029  
                               _stoa 057A                                 btemp 007E  
                      __CFG_BOREN$ON 0000                   __size_of_IIC_Start 000B  
                               start 00E6                       ?_IIC_Send_Byte 0070  
                      __CFG_MCLRE$ON 0000            __size_ofi1_display_update 00A9  
                i1_timer_Timer0Reset 1798                       ??_IIC_RdRTCReg 0075  
                              ??_ISR 006A               i1display_write_once@HL 007C  
             i1display_write_once@HR 0079               i1display_write_once@ML 007A  
             i1display_write_once@MR 007B                                ??_abs 0020  
                   __end_of_IIC_NAck 087A                                ??_pad 007C  
                   __end_of_IIC_Init 0832                        __CFG_PLLEN$ON 0000  
                   __end_of_IIC_Stop 085A                 IIC_Read_Byte@receive 0072  
           __end_of_timer_Timer0Init 0819             __end_of_timer_Timer1Init 084C  
                    __end_of___aldiv 0E61                      __end_of___almod 07FE  
                              ?_main 0070                                ?_dtoa 002C  
                     i1___awdiv@sign 0076                      __end_of___awdiv 0D0F  
                              _BRG16 0CFB                        __CFG_WDTE$OFF 0000  
                    __end_of___awmod 0C6C                                ?_stoa 0078  
                    ___awdiv@divisor 01C0                                _LATC3 0873  
                              _LATC4 0874                                _IOCAN 0392  
                              _IOCAP 0391                                _IOCBN 0395  
                              _IOCBP 0394                                _IOCCN 0398  
                              _IOCCP 0397                                i1l231 0955  
                              i1l227 0946                                i1l245 0B0D  
                              i1l174 00E4                                i1l158 00D0  
                              i1l159 0022                      __end_of___lwmod 0B04  
                              i1l169 00B9                                i1l429 04DF  
                              i1l701 0D27                                i1l710 02A4  
                              i1l704 0D47                                i1l714 02BF  
                              i1l715 02D3                                i1l709 029D  
                              i1l741 05BD                                i1l566 17F9  
                              i1l750 0618                                i1l852 07A1  
                              i1l839 0DF0                      ___awdiv@counter 01C5  
                              _RCREG 0199                         vfpfcnvrt@fmt 0041  
                              _TMR1H 0017                                _TMR1L 0016  
                              _TRISA 008C                                _TRISB 008D  
                              _TRISC 008E                                _WPUC3 1073  
                              _WPUC4 1074                                _RXSEL 08E9  
                              _TXREG 019A                                _TXSEL 08EA  
                    ?_display_update 0070                       ??_IIC_WtRTCReg 0074  
                              _TX_en 00EC                 __size_of_bpc_Cnt2Qua 0086  
                     ??_IIC_Wait_Ack 0070                 ?i1_timer_Timer0Reset 0070  
                _timer_IsTimer0Itrpt 178C                      __end_of_cnt_abs 09BF  
           __end_of_key_checkPressed 08FF                  _timer_IsTimer1Itrpt 1790  
                     i1___awmod@sign 0076                 __end_of_capture_init 17C3  
                              _flags 00E4                                _fputc 0BE1  
                              _fputs 09BF                                pad@fp 002B  
                              _width 00E0                                _putch 177B  
                              dtoa@d 002C                                dtoa@i 003F  
                              dtoa@n 003B                                dtoa@p 0035  
                              dtoa@s 0039                                dtoa@w 0037  
                              stoa@i 0027                                stoa@l 0030  
                              stoa@p 002E                                stoa@s 0078  
                              stoa@w 0029                                status 0003  
                              wtemp0 007E                      __end_of_sprintf 0A0B  
                 __size_ofi1___awdiv 0051                   __size_ofi1___awmod 0045  
               ?_timer_IsTimer0Itrpt 0070                 ?_timer_IsTimer1Itrpt 0070  
       __end_ofi1_display_write_byte 0A58         __end_ofi1_display_write_once 099B  
                    __initialization 00E8                         __end_of_main 0979  
                       __end_of_dtoa 038C                         __end_of_stoa 0640  
               __size_of_capture_Set 000C                 display_write_once@HL 01CC  
               display_write_once@HR 01C9                 display_write_once@ML 01CA  
               display_write_once@MR 01CB                       __CFG_LPBOR$OFF 0000  
             capture_handdle@cnt_int 007A               capture_handdle@cnt_tmp 007C  
            __size_ofi1_data_getdata 0002                               ??_main 01DE  
                             ??_dtoa 0030                               ??_stoa 007A  
          __size_of_capture_IsEnable 0004                            ??_IIC_Ack 0070  
                  __end_of_IIC_Start 17F5            __size_of_capture_IsIntrpt 0004  
              ??i1_timer_Timer0Reset 0070                               ISR@buf 00A0  
                             ISR@cnt 0169                     IIC_Send_Byte@txd 0071  
                    ??_IIC_Read_Byte 0070               __size_of_key_isPressed 0016  
                             ?_fputc 0070                               ?_fputs 0078  
                             _CCPR2H 0299                               _CCPR2L 0298  
                   ___awdiv@dividend 01C2                  bpc_proc@last_time_h 0030  
                             ?_putch 0070                  bpc_proc@last_time_m 0032  
                bpc_proc@last_time_s 002E                _timer_Timer1ClrIntrpt 1781  
                             i1l3000 062D                               i1l3002 063A  
                             i1l3102 0BDC                               i1l4000 0AFF  
                             i1l3032 0C76                               i1l3050 0C95  
                             i1l3060 0CB0                               i1l3212 045D  
                             i1l3038 0C81                               i1l3310 067D  
                             i1l3206 0452                               i1l3064 0CB8  
                             i1l3056 0CA7                               i1l3048 0C89  
                             i1l3080 0BAD                               i1l4112 00A0  
                             i1l3410 0B1D                               i1l3090 0BBF  
                             i1l4114 00CD                               i1l3420 0B2F  
                             i1l3148 09B1                               i1l3500 0ECC  
                             i1l3076 0BA6                               i1l3308 0678  
                             i1l3422 0B31                               i1l3094 0BCB  
                             i1l3416 0B28                               i1l3520 04DB  
                             i1l3088 0BB3                               i1l3600 0B3C  
                             i1l3522 04E4                               i1l3098 0BD4  
                             i1l3610 0883                               i1l2802 0E11  
                             i1l2722 0BEA                               i1l3186 03FB  
                             i1l3178 03CD                               i1l3602 0B5A  
                             i1l3450 0FD5                               i1l3508 0EE5  
                             i1l3540 050D                               i1l3524 04E8  
                             i1l2820 0E58                               i1l2812 0E3F  
                             i1l2804 0E1F                               i1l3196 042B  
                             i1l4092 004F                               i1l3550 0527  
                             i1l3534 04F9                               i1l2726 0C0D  
                             i1l4078 000F                               i1l3376 0A99  
                             i1l3472 0E7F                               i1l3552 052B  
                             i1l3544 0514                               i1l2816 0E4A  
                             i1l2840 07C4                               i1l2832 07AE  
                             i1l2736 091F                               i1l3800 08BC  
                             i1l3456 0FFD                               i1l4096 005E  
                             i1l3562 0545                               i1l3570 055F  
                             i1l3554 052D                               i1l2738 092B  
                             i1l2762 0D1D                               i1l2914 02CE  
                             i1l3492 0EB3                               i1l3484 0E9A  
                             i1l3476 0E81                               i1l3580 0577  
                             i1l3724 08B1                               i1l2852 07F5  
                             i1l2844 07DC                               i1l2748 09C3  
                             i1l2772 0D29                               i1l2908 02B7  
                             i1l3566 0551                               i1l3558 0534  
                             i1l3902 021D                               i1l2838 07B6  
                             i1l2766 0D25                               i1l2942 0361  
                             i1l2918 02DF                               i1l3744 0A7E  
                             i1l3568 0555                               i1l3824 0D9B  
                             i1l2848 07E7                               i1l2776 0D53  
                             i1l2952 0379                               i1l2928 032D  
                             i1l3906 023E                               i1l3834 0DBD  
                             i1l2794 0E01                               i1l2938 0359  
                             i1l3748 0A80                               i1l3908 0241  
                             i1l3844 0DD7                               i1l3828 0DAC  
                             i1l2948 036C                               i1l2964 0596  
                             u300_25 0BB6                               i1l3774 0B96  
                             i1l3782 0B9A                               i1l3870 0156  
                             i1l2982 05DF                               i1l3880 018C  
                             i1l2992 05EF                               i1l2984 05EC  
                             i1l3778 0B98                               i1l3866 014A  
                             i1l2978 05CE                               i1l3876 0183  
                             i1l2996 061C                               i1l3990 0ADE  
                             i1l3894 01D4                               i1l3992 0AEA  
                             i1l3996 0AF6                               u302_25 0BC5  
                             u303_25 0BCC                               u241_25 0E20  
                             u233_25 0D33                               u306_20 0822  
                             u410_25 0AE1                               u242_25 0E34  
                             u226_25 0C0B                               u403_25 022C  
                             u243_25 0E40                               u251_25 07D2  
                             u235_25 08D5                               u340_25 0A8F  
                             u412_25 0AF0                               u308_25 09A1  
                             u404_25 023C                               u252_25 07DD  
                             u341_20 0A97                               u309_20 17D4  
                             u261_20 0287                               u413_25 0AF7  
                             u405_25 0265                               u262_20 0288  
                             u270_25 0348                               u239_25 0E14  
                             u271_25 0354                               u256_25 0A3A  
                             u361_25 0492                               u249_25 07B9  
                             u265_25 02AF                               u281_25 05EA  
                             u362_25 04AD                               u290_25 0C8C  
                             u282_25 05F9                               u363_25 04B8  
                             u276_20 0586                               u292_25 0C96  
                             u268_25 0336                               u284_25 0638  
                             u285_20 17DD                               u437_20 0069  
                             u293_25 0CA0                               u438_20 0094  
                             u294_25 0CA8                               u279_25 05B6  
                             u392_25 0D8B                               _SPBRGH 019C  
                             _SPBRGL 019B                               _TRISC3 0473  
                             _TRISC4 0474                      ??_IIC_Send_Byte 0070  
                     __CFG_PWRTE$OFF 0000                     __end_of_bpc_proc 0279  
              ??_timer_IsTimer0Itrpt 0070                ??_timer_IsTimer1Itrpt 0070  
                       vfprintf@cfmt 0055                            ??___aldiv 0078  
                          ??___almod 0078                 __end_of_led_SetState 080E  
                          ??___awdiv 01C4                               _g_data 0220  
                     __CFG_STVREN$ON 0000          __end_of_timer_Timer0Handdle 17A8  
                          ??___awmod 01C4           ??_display_control595_delay 01C0  
                             _flg_rc 00EB                            ??___lwmod 0074  
                   __end_of_init_env 0F70                     ___awdiv@quotient 01C7  
                    ___awmod@divisor 01C0                      ___awmod@counter 01C5  
                             pad@buf 0024                            ??_cnt_abs 0074  
                             dtoa@fp 0034                               _strcpy 08B3  
                             _strlen 091B                 __size_of_display_set 0009  
                   __end_of_segmcode 100B                IIC_Wait_Ack@ucErrTime 0071  
                  __end_ofi1___awdiv 0CBD                __size_of_data_getdata 0002  
                  __end_ofi1___awmod 0BE1                               fputc@c 0070  
                             fputs@c 0020                               fputs@i 0021  
                             fputs@s 0023                               stoa@cp 002C  
                             stoa@fp 002B                               putch@c 0070  
                   __end_of_vfprintf 0B63                 __end_of_IIC_RdRTCReg 0B9C  
                          ??_sprintf 007D                            ?_IIC_NAck 0070  
            __end_of__initialization 0121                            ?_IIC_Init 0070  
                          ?_IIC_Stop 0070                     i1_display_update 0640  
               __end_of_IIC_WtRTCReg 0A82                       __pcstackCOMMON 0070  
                       ?_update_time 0070                 __end_of_IIC_Wait_Ack 0959  
                      _key_isPressed 089D                         __pidataBANK2 17B4  
                       _data_getdata 07FE                   __size_of_check_err 00F7  
                      __end_of_fputc 0C26                        __end_of_fputs 09E5  
        ?i1_display_control595_delay 0070           __end_of_display_write_byte 0AD8  
         __end_of_display_write_once 0A31                        __end_of_putch 177C  
                 __size_of_delay_4us 0002                     led_SetState@isOn 01C0  
           i1display_write_byte@data 0074                __size_of_capture_init 0008  
                     _OPTION_REGbits 0095                   __size_of_led_Blink 000A  
              tmp_change@history_key 006F              capture_handdle@last_cnt 00E6  
               i1_display_write_byte 0A31               ?_timer_Timer1ClrIntrpt 0070  
               i1_display_write_once 0979                              ??_fputc 0073  
                            ??_fputs 0079                              ??_putch 0070  
                         __pbssBANK0 006F                           __pbssBANK1 00E0  
                         __pbssBANK2 0167                           __pbssBANK3 01A0  
                         __pbssBANK4 0220                           __pbssBANK5 02A0  
                         __pbssBANK6 0320                    i1_capture_setEdge 087A  
                         ??_IIC_NAck 0070             __size_of_capture_handdle 007D  
                         ??_IIC_Init 01C0              __size_ofi1_led_SetState 000A  
                         ??_IIC_Stop 0070                      __CFG_VCAPEN$OFF 0000  
                 ?i1_capture_setEdge 0070             __size_of_capture_setEdge 0013  
                            ISR@data 006E                              ISR@send 0120  
                     ?_key_isPressed 0070                           __pmaintext 0959  
                ??i1_capture_setEdge 0070                         _capture_init 17BB  
                         __pintentry 0004                       i1_data_getdata 0002  
                   ??_display_update 01CD                       bpc_proc@number 0036  
                  ?_timer_Timer0Init 0070                              ?_strcpy 0070  
                            ?_strlen 0070                    ?_timer_Timer1Init 0070  
                   _capture_IsEnable 1784                   i1___awdiv@dividend 0072  
                            _IIC_Ack 085A                   __size_of_uart_init 001C  
                            _ODCONC3 1473                              _ODCONC4 1474  
                   _capture_IsIntrpt 1788                   ??_timer_Timer0Init 01C0  
                 ??_timer_Timer1Init 01C0                  display_update@pdata 01D8  
                 __size_of_vfpfcnvrt 00F7                            ?_bpc_proc 0070  
              ?i1_display_write_byte 0070                ?i1_display_write_once 0079  
                  ?_key_checkPressed 0070            __end_ofi1_capture_setEdge 088A  
                capture_setEdge@edge 01C0                    __end_of_check_err 057A  
                   update_time@pdata 007D                   ??_key_checkPressed 0072  
                  __end_of_delay_4us 177E                              _RX_data 00ED  
                          ?_init_env 0070                              _TX_data 00EE  
              __size_of_led_SetState 000B                    __end_of_led_Blink 17EA  
                 i1___awdiv@quotient 0077     __end_of_display_control595_delay 083F  
                            ___aldiv 0DDF               __end_ofi1_data_getdata 0004  
                            ___almod 0791                              ___awdiv 0CBD  
                            ___awmod 0C26      i1display_control595_delay@times 0071  
                            ___lwmod 0AD8                            ?_vfprintf 004F  
                         check_err@i 0028                              __ptext1 08FF  
                            __ptext2 0800                              __ptext3 083F  
                            __ptext4 1794                              __ptext5 179D  
                            __ptext6 080E                              __ptext7 0803  
                            __ptext8 0EE7                        ??_bpc_Cnt2Qua 0076  
                            __ptext9 06E9                              _cnt_abs 099B  
                    __size_of_strcpy 0018                      __size_of_strlen 001E  
                       __size_of_ISR 00E2                            _T1CONbits 0018  
              __size_of_IIC_RdRTCReg 0039                         __size_of_abs 0019  
                       __size_of_pad 0053                     ___awmod@dividend 01C2  
                   ___aldiv@dividend 0074                            _IOCCFbits 0399  
                         ??_bpc_proc 002C                            _IOCCPbits 0397  
                          _IIC_Start 17EA                              _sprintf 09E5  
                            clrloop0 17A9                         _led_SetState 0803  
                  IIC_WtRTCReg@value 0073                 end_of_initialization 0121  
                            fputc@fp 0072                              init_ram 17AE  
__size_ofi1_display_control595_delay 000B                __size_of_IIC_WtRTCReg 002A  
                         ??_init_env 01D9                              fputs@fp 0078  
                            initloop 17AF                      capture_Set@isON 0070  
              __size_of_IIC_Wait_Ack 0020                      ??_key_isPressed 0070  
                  __end_of_uart_init 091B                        ??_capture_Set 0070  
                  ??_capture_handdle 0071                   i1led_SetState@isOn 0070  
                  __end_of_vfpfcnvrt 0483                       IIC_Read_Byte@i 0073  
                   ___aldiv@quotient 0022                      ?i1_data_getdata 0070  
                       _IIC_RdRTCReg 0B63                           ??_vfprintf 0052  
                  ??_capture_setEdge 01C0                 __size_of_update_time 0090  
                            strcpy@d 0073                              strlen@a 0074  
                            strcpy@s 0072                              strlen@s 0070  
        __end_ofi1_timer_Timer0Reset 179D                i1_display_update$1570 0029  
                          _PORTAbits 000C                            _PORTCbits 000E  
             ??i1_display_write_byte 0072               ??i1_display_write_once 007C  
                          _TRISCbits 008E             __end_ofi1_display_update 06E9  
                       _IIC_WtRTCReg 0A58                            i1___awdiv 0C6C  
                          i1___awmod 0B9C                  __end_of_bpc_Cnt2Qua 0EE7  
         __size_ofi1_capture_setEdge 0010                         _IIC_Wait_Ack 0939  
                         ?_IIC_Start 0070                __end_of_IIC_Read_Byte 0B33  
        __end_of_timer_IsTimer0Itrpt 1790          __end_of_timer_IsTimer1Itrpt 1794  
                     i1_led_SetState 17D6                          _CCP2CONbits 029A  
                          _TXSTAbits 019E                    __size_of_IIC_NAck 0010  
                  __size_of_IIC_Init 000D                    __size_of_IIC_Stop 000E  
              __end_of_IIC_Send_Byte 0AAD                       IIC_Send_Byte@t 0072  
                      ??_display_set 01C0                          vfpfcnvrt@ap 0042  
                        vfpfcnvrt@cp 004C                          vfpfcnvrt@fp 004E  
                        vfpfcnvrt@ll 0048                  __end_of_capture_Set 0825  
       __size_of_timer_Timer0Handdle 0006              ??_timer_Timer1ClrIntrpt 0070  
                     __end_of_strcpy 08CB                       __end_of_strlen 0939  
                start_initialization 00E8                          __end_of_ISR 00E6  
                        __end_of_abs 08E4                          __end_of_pad 0D62  
                         ?i1___awdiv 0070                           ?i1___awmod 0070  
                display_write_byte@i 01C5    __size_of_display_control595_delay 000D  
                 _display_write_byte 0AAD               display_write_byte@data 01C4  
                 _display_write_once 0A0B            ?_display_control595_delay 0070  
             __end_ofi1_led_SetState 17E0                       check_err@check 0029  
              key_checkPressed@pdata 0073                       check_err@pdata 002A  
             tmp_change@key_time_cnt 00E8                  ?_display_write_byte 0070  
                ?_display_write_once 01C9             __end_of_capture_IsEnable 1788  
           __end_of_capture_IsIntrpt 178C                          vfprintf@fmt 004F  
                        __pdataBANK2 0160                   i1___awmod@dividend 0072  
               ??_display_write_byte 01C2                 ??_display_write_once 01CC  
                           ??_strcpy 0071                             ??_strlen 0072  
                        _bpc_Cnt2Qua 0E61                             ?_IIC_Ack 0070  
                __end_of_display_set 17CC                            ___latbits 0002  
                      __pcstackBANK0 0020                        __pcstackBANK1 00A0  
                      __pcstackBANK2 0120                        __pcstackBANK3 01C0  
                           ISR@F5514 02A0                             ISR@F5517 0320  
                        ??_IIC_Start 0070                      ?i1_led_SetState 0070  
                  __size_of_bpc_proc 0154            __size_of_timer_Timer0Init 000B  
          __size_of_timer_Timer1Init 000D                            _check_err 0483  
                          _delay_4us 177C                    __size_of_init_env 0089  
                           ISR@value 006C                            _dtoa$1762 0032  
          __size_of_key_checkPressed 001B                          _capture_Set 0819  
                           ?___aldiv 0070                             ?___almod 0070  
                           ?___awdiv 01C0                             ?___awmod 01C0  
                      bpc_proc@pdata 0037                            _led_Blink 17E0  
                           ?___lwmod 0070                    i1___awdiv@divisor 0070  
                  IIC_RdRTCReg@value 0074                    i1___awdiv@counter 0075  
                   ___almod@dividend 0074                    __size_of_vfprintf 0030  
                           ?_cnt_abs 0070                    _timer_Timer0Reset 179D  
                        ??i1___awdiv 0074                          ??i1___awmod 0074  
                  _timer_Timer0Start 1794                    _timer_Timer1Start 0800  
                           ?_sprintf 0057                       __size_of_fputc 0045  
                     __size_of_fputs 0026                   ?_timer_Timer0Reset 0070  
                    _capture_handdle 0D62                       __size_of_putch 0001  
                 ?_timer_Timer0Start 0070                   ?_timer_Timer1Start 0070  
                  _capture_IsNegEdge 17CC                 _capture_handdle$1403 0077  
                           _IIC_NAck 086A                      ___aldiv@divisor 0070  
                           _IIC_Init 0825                  IIC_RdRTCReg@regAddr 0076  
                    ___aldiv@counter 0020                   ?_capture_IsNegEdge 0070  
                           _IIC_Stop 084C                             _LATBbits 010D  
                    _capture_setEdge 088A                           ?_check_err 0070  
                          clear_ram0 17A8                     ??i1_data_getdata 0070  
                           _PIE1bits 0091                             _PIE2bits 0092  
                ??_timer_Timer0Reset 01C0                  ??_timer_Timer0Start 01C0  
                ??_timer_Timer1Start 01C0                           ?_delay_4us 0070  
                          bpc_proc@i 0034                             _PIR1bits 0011  
                           _PIR2bits 0012                  ??_capture_IsNegEdge 0070  
                          _uart_init 08FF                           ?_led_Blink 0070  
                        _display_set 17C3                            _vfpfcnvrt 038C  
                IIC_WtRTCReg@regAddr 0074            __end_of_timer_Timer0Reset 17A2  
                           _WPUCbits 020E            __end_of_timer_Timer0Start 1798  
          __end_of_timer_Timer1Start 0803                     __size_of_IIC_Ack 0010  
                  ?i1_display_update 0070            __end_of_capture_IsNegEdge 17D6  
            __size_of_display_update 00A8                   ??i1_display_update 0020  
                _timer_Timer0Handdle 17A2                __end_of_key_isPressed 08B3  
                         vfprintf@ap 0051                           vfprintf@fp 0054  
                      ??_update_time 002C                            init_env@i 01DB  
                      ?_data_getdata 0070                           ?_uart_init 0070  
                  i1___awmod@divisor 0070                    i1___awmod@counter 0075  
                   __size_of___aldiv 0082                     __size_of___almod 006D  
                   __size_of___awdiv 0052                     __size_of___awmod 0046  
                         ?_vfpfcnvrt 0041         ??i1_display_control595_delay 0070  
                   __size_of___lwmod 002C                       led_Blink@State 00EA  
               ?_timer_Timer0Handdle 0070                     __size_of_cnt_abs 0024  
                         sprintf@fmt 0057                           sprintf@ret 0061  
            __end_of_capture_handdle 0DDF                i1display_update@pdata 002B  
     __size_of_timer_Timer1ClrIntrpt 0003        __end_of_timer_Timer1ClrIntrpt 1784  
       __size_ofi1_timer_Timer0Reset 0005                             _bpc_proc 0125  
              i1capture_setEdge@edge 0070        __size_ofi1_display_write_byte 0027  
                           __ptext10 0A0B                             __ptext11 0AAD  
                           __ptext12 0832                             __ptext21 1798  
                           __ptext13 07FE                             __ptext30 09E5  
                           __ptext22 1781                             __ptext14 0C26  
                           __ptext31 0B33                             __ptext23 17A2  
                           __ptext15 0CBD                             __ptext40 08CB  
                           __ptext32 038C                             __ptext24 0F70  
                           __ptext16 17C3                             __ptext41 0791  
                           __ptext33 057A                             __ptext25 08E4  
                           __ptext17 17BB                             __ptext50 0125  
                           __ptext42 0DDF                             __ptext34 0279  
                           __ptext26 17E0                             __ptext18 088A  
                           __ptext51 0640                             __ptext43 089D  
                           __ptext35 0D0F                             __ptext27 1790  
                           __ptext19 0825                             __ptext60 0002  
                           __ptext52 0979                             __ptext44 0D62  
                           __ptext36 091B                             __ptext28 178C  
                           __ptext61 099B                             __ptext53 0A31  
                           __ptext45 17D6                             __ptext37 09BF  
                           __ptext29 08B3                             __ptext70 0B04  
                           __ptext62 17CC                             __ptext54 17F5  
                           __ptext46 087A                             __ptext38 0BE1  
                           __ptext71 086A                             __ptext63 0AD8  
                           __ptext55 0B9C                             __ptext47 177E  
                           __ptext39 177B                             __ptext72 085A  
                           __ptext64 0A58                             __ptext56 0C6C  
                           __ptext48 1788                             __ptext73 177C  
                           __ptext65 0B63                             __ptext57 0483  
                           __ptext49 1784                             __ptext66 0939  
                           __ptext58 0819                             __ptext67 084C  
                           __ptext59 0E61                             __ptext68 17EA  
                           __ptext69 0A82        __size_ofi1_display_write_once 0022  
            __end_of_capture_setEdge 089D                    _capture_clrIntrpt 177E  
                    ___almod@divisor 0070                     __size_of_sprintf 0026  
                    ___almod@counter 0079                           strcpy@dest 0074  
                 ?_capture_clrIntrpt 0070        display_control595_delay@times 01C1  
                   _timer_Timer0Init 080E                     _timer_Timer1Init 083F  
                           _init_env 0EE7                        __size_of_main 0020  
                      __size_of_dtoa 0113                        __size_of_stoa 00C6  
                        ??_check_err 0072                    ?_capture_IsEnable 0070  
                        ??_delay_4us 0070                             _segmcode 1000  
                ??_capture_clrIntrpt 0070                        init_env@pdata 01DD  
                  ?_capture_IsIntrpt 0070                     _key_checkPressed 08E4  
       __size_of_timer_IsTimer0Itrpt 0004                   ??_capture_IsEnable 0070  
       __size_of_timer_IsTimer1Itrpt 0004                       ??_data_getdata 01C0  
                          stoa@F1129 0160                        ?_capture_init 0070  
                 ??_capture_IsIntrpt 0070                             int$flags 007E  
                        ??_led_Blink 0071                             cnt_abs@a 0070  
                           cnt_abs@b 0072                             _vfprintf 0B33  
                   IIC_Read_Byte@ack 0071               __size_of_IIC_Read_Byte 002F  
                __end_of_update_time 1000                         ?_bpc_Cnt2Qua 0070  
              ??_timer_Timer0Handdle 007E           __size_of_timer_Timer0Reset 0005  
                   ??i1_led_SetState 0070                           _INTCONbits 000B  
         __size_of_timer_Timer0Start 0004           __size_of_timer_Timer1Start 0003  
          __end_of_capture_clrIntrpt 1781               __size_of_IIC_Send_Byte 002B  
         __size_of_capture_IsNegEdge 000A                             intlevel1 0000  
                          sprintf@ap 0063                     ___lwmod@dividend 0072  
                  __CFG_CLKOUTEN$OFF 0000                            strcpy@src 0070  
                         _OSCCONbits 0099                         ?_capture_Set 0070  
                 key_isPressed@pdata 0071                       ??_capture_init 01C1  
                        ??_uart_init 01C0                      display_set@ison 01C0  
                        ??_vfpfcnvrt 0043                     bpc_Cnt2Qua@pdata 0078  
                           stoa@nuls 0020                        __pstringtext1 1000  
                      __pstringtext2 1800                        __pstringtext3 1807  
                      __pstringtext4 0000          __size_of_display_write_byte 002B  
        __size_of_display_write_once 0026                             sprintf@f 0065  
                           sprintf@s 0064                      ___lwmod@divisor 0070  
           _display_control595_delay 0832                     ?_capture_handdle 0070  
                    ___lwmod@counter 0075                         ___aldiv@sign 0021  
                     _display_update 06E9                        ?_led_SetState 0070  
                   ?_capture_setEdge 0070                         ___almod@sign 007A  
                      _IIC_Read_Byte 0B04                       _check_err$1170 0024  
                     _check_err$1171 0026                       _check_err$1166 0020  
                     _check_err$1167 0022                        _IIC_Send_Byte 0A82  
