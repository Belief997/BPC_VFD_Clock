

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Tue Jun 18 11:22:09 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F1786
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK3,global,class=CODE,delta=2
     5                           	psect	stringtext1,global,class=STRCODE,delta=2
     6                           	psect	stringtext2,global,class=STRCODE,delta=2
     7                           	psect	stringtext3,global,class=STRCODE,delta=2
     8                           	psect	stringtext4,global,class=STRCODE,delta=2
     9                           	psect	cinit,global,class=CODE,merge=1,delta=2
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
    16                           	psect	bssBANK6,global,class=BANK6,space=1,delta=1
    17                           	psect	inittext,global,class=CODE,delta=2
    18                           	psect	clrtext,global,class=CODE,delta=2
    19                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    20                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    21                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    22                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    23                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    24                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    25                           	psect	text1,local,class=CODE,merge=1,delta=2
    26                           	psect	text2,local,class=CODE,merge=1,delta=2
    27                           	psect	text3,local,class=CODE,merge=1,delta=2
    28                           	psect	text4,local,class=CODE,merge=1,delta=2
    29                           	psect	text5,local,class=CODE,merge=1,delta=2
    30                           	psect	text6,local,class=CODE,merge=1,delta=2
    31                           	psect	text7,local,class=CODE,merge=1,delta=2
    32                           	psect	text8,local,class=CODE,merge=1,delta=2
    33                           	psect	text9,local,class=CODE,merge=1,delta=2
    34                           	psect	text10,local,class=CODE,merge=1,delta=2
    35                           	psect	text11,local,class=CODE,merge=1,delta=2
    36                           	psect	text12,local,class=CODE,merge=1,delta=2
    37                           	psect	text13,local,class=CODE,merge=1,delta=2
    38                           	psect	text14,local,class=CODE,merge=1,delta=2,group=1
    39                           	psect	text15,local,class=CODE,merge=1,delta=2,group=1
    40                           	psect	text16,local,class=CODE,merge=1,delta=2
    41                           	psect	text17,local,class=CODE,merge=1,delta=2
    42                           	psect	text18,local,class=CODE,merge=1,delta=2
    43                           	psect	text19,local,class=CODE,merge=1,delta=2
    44                           	psect	intentry,global,class=CODE,delta=2
    45                           	psect	text21,local,class=CODE,merge=1,delta=2
    46                           	psect	text22,local,class=CODE,merge=1,delta=2
    47                           	psect	text23,local,class=CODE,merge=1,delta=2
    48                           	psect	text24,local,class=CODE,merge=1,delta=2
    49                           	psect	text25,local,class=CODE,merge=1,delta=2
    50                           	psect	text26,local,class=CODE,merge=1,delta=2
    51                           	psect	text27,local,class=CODE,merge=1,delta=2
    52                           	psect	text28,local,class=CODE,merge=1,delta=2
    53                           	psect	text29,local,class=CODE,merge=1,delta=2,group=2
    54                           	psect	text30,local,class=CODE,merge=1,delta=2,group=2
    55                           	psect	text31,local,class=CODE,merge=1,delta=2
    56                           	psect	text32,local,class=CODE,merge=1,delta=2
    57                           	psect	text33,local,class=CODE,merge=1,delta=2
    58                           	psect	text34,local,class=CODE,merge=1,delta=2
    59                           	psect	text35,local,class=CODE,merge=1,delta=2
    60                           	psect	text36,local,class=CODE,merge=1,delta=2,group=2
    61                           	psect	text37,local,class=CODE,merge=1,delta=2,group=2
    62                           	psect	text38,local,class=CODE,merge=1,delta=2,group=2
    63                           	psect	text39,local,class=CODE,merge=1,delta=2,group=2
    64                           	psect	text40,local,class=CODE,merge=1,delta=2,group=2
    65                           	psect	text41,local,class=CODE,merge=1,delta=2,group=1
    66                           	psect	text42,local,class=CODE,merge=1,delta=2,group=1
    67                           	psect	text43,local,class=CODE,merge=1,delta=2
    68                           	psect	text44,local,class=CODE,merge=1,delta=2
    69                           	psect	text45,local,class=CODE,merge=1,delta=2
    70                           	psect	text46,local,class=CODE,merge=1,delta=2
    71                           	psect	text47,local,class=CODE,merge=1,delta=2
    72                           	psect	text48,local,class=CODE,merge=1,delta=2
    73                           	psect	text49,local,class=CODE,merge=1,delta=2
    74                           	psect	text50,local,class=CODE,merge=1,delta=2
    75                           	psect	text51,local,class=CODE,merge=1,delta=2
    76                           	psect	text52,local,class=CODE,merge=1,delta=2
    77                           	psect	text53,local,class=CODE,merge=1,delta=2
    78                           	psect	text54,local,class=CODE,merge=1,delta=2
    79                           	psect	text55,local,class=CODE,merge=1,delta=2
    80                           	psect	text56,local,class=CODE,merge=1,delta=2
    81                           	psect	text57,local,class=CODE,merge=1,delta=2
    82                           	psect	text58,local,class=CODE,merge=1,delta=2
    83                           	psect	text59,local,class=CODE,merge=1,delta=2
    84                           	psect	text60,local,class=CODE,merge=1,delta=2
    85                           	psect	text61,local,class=CODE,merge=1,delta=2
    86                           	psect	text62,local,class=CODE,merge=1,delta=2
    87                           	dabs	1,0x7E,2
    88  0000                     
    89                           ; Version 2.05
    90                           ; Generated 20/12/2018 GMT
    91                           ; 
    92                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    93                           ; All rights reserved.
    94                           ; 
    95                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    96                           ; 
    97                           ; Redistribution and use in source and binary forms, with or without modification, are
    98                           ; permitted provided that the following conditions are met:
    99                           ; 
   100                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   101                           ;        conditions and the following disclaimer.
   102                           ; 
   103                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   104                           ;        of conditions and the following disclaimer in the documentation and/or other
   105                           ;        materials provided with the distribution.
   106                           ; 
   107                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   108                           ;        software without specific prior written permission.
   109                           ; 
   110                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   111                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   112                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   113                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   114                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   115                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   116                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   117                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   118                           ; 
   119                           ; 
   120                           ; Code-generator required, PIC16F1786 Definitions
   121                           ; 
   122                           ; SFR Addresses
   123  0000                     	;# 
   124  0001                     	;# 
   125  0002                     	;# 
   126  0003                     	;# 
   127  0004                     	;# 
   128  0005                     	;# 
   129  0006                     	;# 
   130  0007                     	;# 
   131  0008                     	;# 
   132  0009                     	;# 
   133  000A                     	;# 
   134  000B                     	;# 
   135  000C                     	;# 
   136  000D                     	;# 
   137  000E                     	;# 
   138  0010                     	;# 
   139  0011                     	;# 
   140  0012                     	;# 
   141  0013                     	;# 
   142  0014                     	;# 
   143  0015                     	;# 
   144  0016                     	;# 
   145  0016                     	;# 
   146  0017                     	;# 
   147  0018                     	;# 
   148  0019                     	;# 
   149  001A                     	;# 
   150  001B                     	;# 
   151  001C                     	;# 
   152  008C                     	;# 
   153  008D                     	;# 
   154  008E                     	;# 
   155  0090                     	;# 
   156  0091                     	;# 
   157  0092                     	;# 
   158  0093                     	;# 
   159  0094                     	;# 
   160  0095                     	;# 
   161  0096                     	;# 
   162  0097                     	;# 
   163  0098                     	;# 
   164  0099                     	;# 
   165  009A                     	;# 
   166  009B                     	;# 
   167  009B                     	;# 
   168  009C                     	;# 
   169  009D                     	;# 
   170  009E                     	;# 
   171  009F                     	;# 
   172  010C                     	;# 
   173  010D                     	;# 
   174  010E                     	;# 
   175  0111                     	;# 
   176  0112                     	;# 
   177  0113                     	;# 
   178  0114                     	;# 
   179  0115                     	;# 
   180  0116                     	;# 
   181  0117                     	;# 
   182  0118                     	;# 
   183  0119                     	;# 
   184  011A                     	;# 
   185  011B                     	;# 
   186  011C                     	;# 
   187  011D                     	;# 
   188  011D                     	;# 
   189  011D                     	;# 
   190  011E                     	;# 
   191  011F                     	;# 
   192  018C                     	;# 
   193  018D                     	;# 
   194  0191                     	;# 
   195  0191                     	;# 
   196  0192                     	;# 
   197  0193                     	;# 
   198  0193                     	;# 
   199  0193                     	;# 
   200  0194                     	;# 
   201  0195                     	;# 
   202  0196                     	;# 
   203  0197                     	;# 
   204  0199                     	;# 
   205  0199                     	;# 
   206  0199                     	;# 
   207  019A                     	;# 
   208  019A                     	;# 
   209  019A                     	;# 
   210  019B                     	;# 
   211  019B                     	;# 
   212  019B                     	;# 
   213  019B                     	;# 
   214  019B                     	;# 
   215  019C                     	;# 
   216  019C                     	;# 
   217  019C                     	;# 
   218  019D                     	;# 
   219  019D                     	;# 
   220  019D                     	;# 
   221  019E                     	;# 
   222  019E                     	;# 
   223  019E                     	;# 
   224  019F                     	;# 
   225  019F                     	;# 
   226  019F                     	;# 
   227  019F                     	;# 
   228  019F                     	;# 
   229  020C                     	;# 
   230  020D                     	;# 
   231  020E                     	;# 
   232  0210                     	;# 
   233  0211                     	;# 
   234  0211                     	;# 
   235  0212                     	;# 
   236  0212                     	;# 
   237  0213                     	;# 
   238  0213                     	;# 
   239  0214                     	;# 
   240  0214                     	;# 
   241  0215                     	;# 
   242  0215                     	;# 
   243  0215                     	;# 
   244  0215                     	;# 
   245  0216                     	;# 
   246  0216                     	;# 
   247  0217                     	;# 
   248  0217                     	;# 
   249  028C                     	;# 
   250  028D                     	;# 
   251  028E                     	;# 
   252  0291                     	;# 
   253  0291                     	;# 
   254  0292                     	;# 
   255  0293                     	;# 
   256  0298                     	;# 
   257  0298                     	;# 
   258  0299                     	;# 
   259  029A                     	;# 
   260  030C                     	;# 
   261  030D                     	;# 
   262  030E                     	;# 
   263  0311                     	;# 
   264  0311                     	;# 
   265  0312                     	;# 
   266  0313                     	;# 
   267  038C                     	;# 
   268  038D                     	;# 
   269  038E                     	;# 
   270  0390                     	;# 
   271  0391                     	;# 
   272  0392                     	;# 
   273  0393                     	;# 
   274  0394                     	;# 
   275  0395                     	;# 
   276  0396                     	;# 
   277  0397                     	;# 
   278  0398                     	;# 
   279  0399                     	;# 
   280  039D                     	;# 
   281  039E                     	;# 
   282  039F                     	;# 
   283  0511                     	;# 
   284  0513                     	;# 
   285  051A                     	;# 
   286  0811                     	;# 
   287  0812                     	;# 
   288  0813                     	;# 
   289  0814                     	;# 
   290  0815                     	;# 
   291  0816                     	;# 
   292  0817                     	;# 
   293  0818                     	;# 
   294  0819                     	;# 
   295  081A                     	;# 
   296  081B                     	;# 
   297  081C                     	;# 
   298  081D                     	;# 
   299  081E                     	;# 
   300  081F                     	;# 
   301  0820                     	;# 
   302  0821                     	;# 
   303  0821                     	;# 
   304  0822                     	;# 
   305  0823                     	;# 
   306  0823                     	;# 
   307  0824                     	;# 
   308  0825                     	;# 
   309  0825                     	;# 
   310  0826                     	;# 
   311  0827                     	;# 
   312  0827                     	;# 
   313  0828                     	;# 
   314  0829                     	;# 
   315  082A                     	;# 
   316  082B                     	;# 
   317  082C                     	;# 
   318  082D                     	;# 
   319  082E                     	;# 
   320  082F                     	;# 
   321  0831                     	;# 
   322  0832                     	;# 
   323  0833                     	;# 
   324  0834                     	;# 
   325  0835                     	;# 
   326  0836                     	;# 
   327  0837                     	;# 
   328  0838                     	;# 
   329  0839                     	;# 
   330  083A                     	;# 
   331  083B                     	;# 
   332  083C                     	;# 
   333  083D                     	;# 
   334  083E                     	;# 
   335  083F                     	;# 
   336  0840                     	;# 
   337  0841                     	;# 
   338  0841                     	;# 
   339  0842                     	;# 
   340  0843                     	;# 
   341  0843                     	;# 
   342  0844                     	;# 
   343  0845                     	;# 
   344  0845                     	;# 
   345  0846                     	;# 
   346  0847                     	;# 
   347  0847                     	;# 
   348  0848                     	;# 
   349  0849                     	;# 
   350  084A                     	;# 
   351  084B                     	;# 
   352  084C                     	;# 
   353  084D                     	;# 
   354  084E                     	;# 
   355  084F                     	;# 
   356  0851                     	;# 
   357  0852                     	;# 
   358  0853                     	;# 
   359  0854                     	;# 
   360  0855                     	;# 
   361  0856                     	;# 
   362  0857                     	;# 
   363  0858                     	;# 
   364  0859                     	;# 
   365  085A                     	;# 
   366  085B                     	;# 
   367  085C                     	;# 
   368  085D                     	;# 
   369  085E                     	;# 
   370  085F                     	;# 
   371  0860                     	;# 
   372  0861                     	;# 
   373  0861                     	;# 
   374  0862                     	;# 
   375  0863                     	;# 
   376  0863                     	;# 
   377  0864                     	;# 
   378  0865                     	;# 
   379  0865                     	;# 
   380  0866                     	;# 
   381  0867                     	;# 
   382  0867                     	;# 
   383  0868                     	;# 
   384  0869                     	;# 
   385  086A                     	;# 
   386  086B                     	;# 
   387  086C                     	;# 
   388  086D                     	;# 
   389  086E                     	;# 
   390  086F                     	;# 
   391  0FE4                     	;# 
   392  0FE5                     	;# 
   393  0FE6                     	;# 
   394  0FE7                     	;# 
   395  0FE8                     	;# 
   396  0FE9                     	;# 
   397  0FEA                     	;# 
   398  0FEB                     	;# 
   399  0FED                     	;# 
   400  0FEE                     	;# 
   401  0FEF                     	;# 
   402  0000                     	;# 
   403  0001                     	;# 
   404  0002                     	;# 
   405  0003                     	;# 
   406  0004                     	;# 
   407  0005                     	;# 
   408  0006                     	;# 
   409  0007                     	;# 
   410  0008                     	;# 
   411  0009                     	;# 
   412  000A                     	;# 
   413  000B                     	;# 
   414  000C                     	;# 
   415  000D                     	;# 
   416  000E                     	;# 
   417  0010                     	;# 
   418  0011                     	;# 
   419  0012                     	;# 
   420  0013                     	;# 
   421  0014                     	;# 
   422  0015                     	;# 
   423  0016                     	;# 
   424  0016                     	;# 
   425  0017                     	;# 
   426  0018                     	;# 
   427  0019                     	;# 
   428  001A                     	;# 
   429  001B                     	;# 
   430  001C                     	;# 
   431  008C                     	;# 
   432  008D                     	;# 
   433  008E                     	;# 
   434  0090                     	;# 
   435  0091                     	;# 
   436  0092                     	;# 
   437  0093                     	;# 
   438  0094                     	;# 
   439  0095                     	;# 
   440  0096                     	;# 
   441  0097                     	;# 
   442  0098                     	;# 
   443  0099                     	;# 
   444  009A                     	;# 
   445  009B                     	;# 
   446  009B                     	;# 
   447  009C                     	;# 
   448  009D                     	;# 
   449  009E                     	;# 
   450  009F                     	;# 
   451  010C                     	;# 
   452  010D                     	;# 
   453  010E                     	;# 
   454  0111                     	;# 
   455  0112                     	;# 
   456  0113                     	;# 
   457  0114                     	;# 
   458  0115                     	;# 
   459  0116                     	;# 
   460  0117                     	;# 
   461  0118                     	;# 
   462  0119                     	;# 
   463  011A                     	;# 
   464  011B                     	;# 
   465  011C                     	;# 
   466  011D                     	;# 
   467  011D                     	;# 
   468  011D                     	;# 
   469  011E                     	;# 
   470  011F                     	;# 
   471  018C                     	;# 
   472  018D                     	;# 
   473  0191                     	;# 
   474  0191                     	;# 
   475  0192                     	;# 
   476  0193                     	;# 
   477  0193                     	;# 
   478  0193                     	;# 
   479  0194                     	;# 
   480  0195                     	;# 
   481  0196                     	;# 
   482  0197                     	;# 
   483  0199                     	;# 
   484  0199                     	;# 
   485  0199                     	;# 
   486  019A                     	;# 
   487  019A                     	;# 
   488  019A                     	;# 
   489  019B                     	;# 
   490  019B                     	;# 
   491  019B                     	;# 
   492  019B                     	;# 
   493  019B                     	;# 
   494  019C                     	;# 
   495  019C                     	;# 
   496  019C                     	;# 
   497  019D                     	;# 
   498  019D                     	;# 
   499  019D                     	;# 
   500  019E                     	;# 
   501  019E                     	;# 
   502  019E                     	;# 
   503  019F                     	;# 
   504  019F                     	;# 
   505  019F                     	;# 
   506  019F                     	;# 
   507  019F                     	;# 
   508  020C                     	;# 
   509  020D                     	;# 
   510  020E                     	;# 
   511  0210                     	;# 
   512  0211                     	;# 
   513  0211                     	;# 
   514  0212                     	;# 
   515  0212                     	;# 
   516  0213                     	;# 
   517  0213                     	;# 
   518  0214                     	;# 
   519  0214                     	;# 
   520  0215                     	;# 
   521  0215                     	;# 
   522  0215                     	;# 
   523  0215                     	;# 
   524  0216                     	;# 
   525  0216                     	;# 
   526  0217                     	;# 
   527  0217                     	;# 
   528  028C                     	;# 
   529  028D                     	;# 
   530  028E                     	;# 
   531  0291                     	;# 
   532  0291                     	;# 
   533  0292                     	;# 
   534  0293                     	;# 
   535  0298                     	;# 
   536  0298                     	;# 
   537  0299                     	;# 
   538  029A                     	;# 
   539  030C                     	;# 
   540  030D                     	;# 
   541  030E                     	;# 
   542  0311                     	;# 
   543  0311                     	;# 
   544  0312                     	;# 
   545  0313                     	;# 
   546  038C                     	;# 
   547  038D                     	;# 
   548  038E                     	;# 
   549  0390                     	;# 
   550  0391                     	;# 
   551  0392                     	;# 
   552  0393                     	;# 
   553  0394                     	;# 
   554  0395                     	;# 
   555  0396                     	;# 
   556  0397                     	;# 
   557  0398                     	;# 
   558  0399                     	;# 
   559  039D                     	;# 
   560  039E                     	;# 
   561  039F                     	;# 
   562  0511                     	;# 
   563  0513                     	;# 
   564  051A                     	;# 
   565  0811                     	;# 
   566  0812                     	;# 
   567  0813                     	;# 
   568  0814                     	;# 
   569  0815                     	;# 
   570  0816                     	;# 
   571  0817                     	;# 
   572  0818                     	;# 
   573  0819                     	;# 
   574  081A                     	;# 
   575  081B                     	;# 
   576  081C                     	;# 
   577  081D                     	;# 
   578  081E                     	;# 
   579  081F                     	;# 
   580  0820                     	;# 
   581  0821                     	;# 
   582  0821                     	;# 
   583  0822                     	;# 
   584  0823                     	;# 
   585  0823                     	;# 
   586  0824                     	;# 
   587  0825                     	;# 
   588  0825                     	;# 
   589  0826                     	;# 
   590  0827                     	;# 
   591  0827                     	;# 
   592  0828                     	;# 
   593  0829                     	;# 
   594  082A                     	;# 
   595  082B                     	;# 
   596  082C                     	;# 
   597  082D                     	;# 
   598  082E                     	;# 
   599  082F                     	;# 
   600  0831                     	;# 
   601  0832                     	;# 
   602  0833                     	;# 
   603  0834                     	;# 
   604  0835                     	;# 
   605  0836                     	;# 
   606  0837                     	;# 
   607  0838                     	;# 
   608  0839                     	;# 
   609  083A                     	;# 
   610  083B                     	;# 
   611  083C                     	;# 
   612  083D                     	;# 
   613  083E                     	;# 
   614  083F                     	;# 
   615  0840                     	;# 
   616  0841                     	;# 
   617  0841                     	;# 
   618  0842                     	;# 
   619  0843                     	;# 
   620  0843                     	;# 
   621  0844                     	;# 
   622  0845                     	;# 
   623  0845                     	;# 
   624  0846                     	;# 
   625  0847                     	;# 
   626  0847                     	;# 
   627  0848                     	;# 
   628  0849                     	;# 
   629  084A                     	;# 
   630  084B                     	;# 
   631  084C                     	;# 
   632  084D                     	;# 
   633  084E                     	;# 
   634  084F                     	;# 
   635  0851                     	;# 
   636  0852                     	;# 
   637  0853                     	;# 
   638  0854                     	;# 
   639  0855                     	;# 
   640  0856                     	;# 
   641  0857                     	;# 
   642  0858                     	;# 
   643  0859                     	;# 
   644  085A                     	;# 
   645  085B                     	;# 
   646  085C                     	;# 
   647  085D                     	;# 
   648  085E                     	;# 
   649  085F                     	;# 
   650  0860                     	;# 
   651  0861                     	;# 
   652  0861                     	;# 
   653  0862                     	;# 
   654  0863                     	;# 
   655  0863                     	;# 
   656  0864                     	;# 
   657  0865                     	;# 
   658  0865                     	;# 
   659  0866                     	;# 
   660  0867                     	;# 
   661  0867                     	;# 
   662  0868                     	;# 
   663  0869                     	;# 
   664  086A                     	;# 
   665  086B                     	;# 
   666  086C                     	;# 
   667  086D                     	;# 
   668  086E                     	;# 
   669  086F                     	;# 
   670  0FE4                     	;# 
   671  0FE5                     	;# 
   672  0FE6                     	;# 
   673  0FE7                     	;# 
   674  0FE8                     	;# 
   675  0FE9                     	;# 
   676  0FEA                     	;# 
   677  0FEB                     	;# 
   678  0FED                     	;# 
   679  0FEE                     	;# 
   680  0FEF                     	;# 
   681  0000                     	;# 
   682  0001                     	;# 
   683  0002                     	;# 
   684  0003                     	;# 
   685  0004                     	;# 
   686  0005                     	;# 
   687  0006                     	;# 
   688  0007                     	;# 
   689  0008                     	;# 
   690  0009                     	;# 
   691  000A                     	;# 
   692  000B                     	;# 
   693  000C                     	;# 
   694  000D                     	;# 
   695  000E                     	;# 
   696  0010                     	;# 
   697  0011                     	;# 
   698  0012                     	;# 
   699  0013                     	;# 
   700  0014                     	;# 
   701  0015                     	;# 
   702  0016                     	;# 
   703  0016                     	;# 
   704  0017                     	;# 
   705  0018                     	;# 
   706  0019                     	;# 
   707  001A                     	;# 
   708  001B                     	;# 
   709  001C                     	;# 
   710  008C                     	;# 
   711  008D                     	;# 
   712  008E                     	;# 
   713  0090                     	;# 
   714  0091                     	;# 
   715  0092                     	;# 
   716  0093                     	;# 
   717  0094                     	;# 
   718  0095                     	;# 
   719  0096                     	;# 
   720  0097                     	;# 
   721  0098                     	;# 
   722  0099                     	;# 
   723  009A                     	;# 
   724  009B                     	;# 
   725  009B                     	;# 
   726  009C                     	;# 
   727  009D                     	;# 
   728  009E                     	;# 
   729  009F                     	;# 
   730  010C                     	;# 
   731  010D                     	;# 
   732  010E                     	;# 
   733  0111                     	;# 
   734  0112                     	;# 
   735  0113                     	;# 
   736  0114                     	;# 
   737  0115                     	;# 
   738  0116                     	;# 
   739  0117                     	;# 
   740  0118                     	;# 
   741  0119                     	;# 
   742  011A                     	;# 
   743  011B                     	;# 
   744  011C                     	;# 
   745  011D                     	;# 
   746  011D                     	;# 
   747  011D                     	;# 
   748  011E                     	;# 
   749  011F                     	;# 
   750  018C                     	;# 
   751  018D                     	;# 
   752  0191                     	;# 
   753  0191                     	;# 
   754  0192                     	;# 
   755  0193                     	;# 
   756  0193                     	;# 
   757  0193                     	;# 
   758  0194                     	;# 
   759  0195                     	;# 
   760  0196                     	;# 
   761  0197                     	;# 
   762  0199                     	;# 
   763  0199                     	;# 
   764  0199                     	;# 
   765  019A                     	;# 
   766  019A                     	;# 
   767  019A                     	;# 
   768  019B                     	;# 
   769  019B                     	;# 
   770  019B                     	;# 
   771  019B                     	;# 
   772  019B                     	;# 
   773  019C                     	;# 
   774  019C                     	;# 
   775  019C                     	;# 
   776  019D                     	;# 
   777  019D                     	;# 
   778  019D                     	;# 
   779  019E                     	;# 
   780  019E                     	;# 
   781  019E                     	;# 
   782  019F                     	;# 
   783  019F                     	;# 
   784  019F                     	;# 
   785  019F                     	;# 
   786  019F                     	;# 
   787  020C                     	;# 
   788  020D                     	;# 
   789  020E                     	;# 
   790  0210                     	;# 
   791  0211                     	;# 
   792  0211                     	;# 
   793  0212                     	;# 
   794  0212                     	;# 
   795  0213                     	;# 
   796  0213                     	;# 
   797  0214                     	;# 
   798  0214                     	;# 
   799  0215                     	;# 
   800  0215                     	;# 
   801  0215                     	;# 
   802  0215                     	;# 
   803  0216                     	;# 
   804  0216                     	;# 
   805  0217                     	;# 
   806  0217                     	;# 
   807  028C                     	;# 
   808  028D                     	;# 
   809  028E                     	;# 
   810  0291                     	;# 
   811  0291                     	;# 
   812  0292                     	;# 
   813  0293                     	;# 
   814  0298                     	;# 
   815  0298                     	;# 
   816  0299                     	;# 
   817  029A                     	;# 
   818  030C                     	;# 
   819  030D                     	;# 
   820  030E                     	;# 
   821  0311                     	;# 
   822  0311                     	;# 
   823  0312                     	;# 
   824  0313                     	;# 
   825  038C                     	;# 
   826  038D                     	;# 
   827  038E                     	;# 
   828  0390                     	;# 
   829  0391                     	;# 
   830  0392                     	;# 
   831  0393                     	;# 
   832  0394                     	;# 
   833  0395                     	;# 
   834  0396                     	;# 
   835  0397                     	;# 
   836  0398                     	;# 
   837  0399                     	;# 
   838  039D                     	;# 
   839  039E                     	;# 
   840  039F                     	;# 
   841  0511                     	;# 
   842  0513                     	;# 
   843  051A                     	;# 
   844  0811                     	;# 
   845  0812                     	;# 
   846  0813                     	;# 
   847  0814                     	;# 
   848  0815                     	;# 
   849  0816                     	;# 
   850  0817                     	;# 
   851  0818                     	;# 
   852  0819                     	;# 
   853  081A                     	;# 
   854  081B                     	;# 
   855  081C                     	;# 
   856  081D                     	;# 
   857  081E                     	;# 
   858  081F                     	;# 
   859  0820                     	;# 
   860  0821                     	;# 
   861  0821                     	;# 
   862  0822                     	;# 
   863  0823                     	;# 
   864  0823                     	;# 
   865  0824                     	;# 
   866  0825                     	;# 
   867  0825                     	;# 
   868  0826                     	;# 
   869  0827                     	;# 
   870  0827                     	;# 
   871  0828                     	;# 
   872  0829                     	;# 
   873  082A                     	;# 
   874  082B                     	;# 
   875  082C                     	;# 
   876  082D                     	;# 
   877  082E                     	;# 
   878  082F                     	;# 
   879  0831                     	;# 
   880  0832                     	;# 
   881  0833                     	;# 
   882  0834                     	;# 
   883  0835                     	;# 
   884  0836                     	;# 
   885  0837                     	;# 
   886  0838                     	;# 
   887  0839                     	;# 
   888  083A                     	;# 
   889  083B                     	;# 
   890  083C                     	;# 
   891  083D                     	;# 
   892  083E                     	;# 
   893  083F                     	;# 
   894  0840                     	;# 
   895  0841                     	;# 
   896  0841                     	;# 
   897  0842                     	;# 
   898  0843                     	;# 
   899  0843                     	;# 
   900  0844                     	;# 
   901  0845                     	;# 
   902  0845                     	;# 
   903  0846                     	;# 
   904  0847                     	;# 
   905  0847                     	;# 
   906  0848                     	;# 
   907  0849                     	;# 
   908  084A                     	;# 
   909  084B                     	;# 
   910  084C                     	;# 
   911  084D                     	;# 
   912  084E                     	;# 
   913  084F                     	;# 
   914  0851                     	;# 
   915  0852                     	;# 
   916  0853                     	;# 
   917  0854                     	;# 
   918  0855                     	;# 
   919  0856                     	;# 
   920  0857                     	;# 
   921  0858                     	;# 
   922  0859                     	;# 
   923  085A                     	;# 
   924  085B                     	;# 
   925  085C                     	;# 
   926  085D                     	;# 
   927  085E                     	;# 
   928  085F                     	;# 
   929  0860                     	;# 
   930  0861                     	;# 
   931  0861                     	;# 
   932  0862                     	;# 
   933  0863                     	;# 
   934  0863                     	;# 
   935  0864                     	;# 
   936  0865                     	;# 
   937  0865                     	;# 
   938  0866                     	;# 
   939  0867                     	;# 
   940  0867                     	;# 
   941  0868                     	;# 
   942  0869                     	;# 
   943  086A                     	;# 
   944  086B                     	;# 
   945  086C                     	;# 
   946  086D                     	;# 
   947  086E                     	;# 
   948  086F                     	;# 
   949  0FE4                     	;# 
   950  0FE5                     	;# 
   951  0FE6                     	;# 
   952  0FE7                     	;# 
   953  0FE8                     	;# 
   954  0FE9                     	;# 
   955  0FEA                     	;# 
   956  0FEB                     	;# 
   957  0FED                     	;# 
   958  0FEE                     	;# 
   959  0FEF                     	;# 
   960  0000                     	;# 
   961  0001                     	;# 
   962  0002                     	;# 
   963  0003                     	;# 
   964  0004                     	;# 
   965  0005                     	;# 
   966  0006                     	;# 
   967  0007                     	;# 
   968  0008                     	;# 
   969  0009                     	;# 
   970  000A                     	;# 
   971  000B                     	;# 
   972  000C                     	;# 
   973  000D                     	;# 
   974  000E                     	;# 
   975  0010                     	;# 
   976  0011                     	;# 
   977  0012                     	;# 
   978  0013                     	;# 
   979  0014                     	;# 
   980  0015                     	;# 
   981  0016                     	;# 
   982  0016                     	;# 
   983  0017                     	;# 
   984  0018                     	;# 
   985  0019                     	;# 
   986  001A                     	;# 
   987  001B                     	;# 
   988  001C                     	;# 
   989  008C                     	;# 
   990  008D                     	;# 
   991  008E                     	;# 
   992  0090                     	;# 
   993  0091                     	;# 
   994  0092                     	;# 
   995  0093                     	;# 
   996  0094                     	;# 
   997  0095                     	;# 
   998  0096                     	;# 
   999  0097                     	;# 
  1000  0098                     	;# 
  1001  0099                     	;# 
  1002  009A                     	;# 
  1003  009B                     	;# 
  1004  009B                     	;# 
  1005  009C                     	;# 
  1006  009D                     	;# 
  1007  009E                     	;# 
  1008  009F                     	;# 
  1009  010C                     	;# 
  1010  010D                     	;# 
  1011  010E                     	;# 
  1012  0111                     	;# 
  1013  0112                     	;# 
  1014  0113                     	;# 
  1015  0114                     	;# 
  1016  0115                     	;# 
  1017  0116                     	;# 
  1018  0117                     	;# 
  1019  0118                     	;# 
  1020  0119                     	;# 
  1021  011A                     	;# 
  1022  011B                     	;# 
  1023  011C                     	;# 
  1024  011D                     	;# 
  1025  011D                     	;# 
  1026  011D                     	;# 
  1027  011E                     	;# 
  1028  011F                     	;# 
  1029  018C                     	;# 
  1030  018D                     	;# 
  1031  0191                     	;# 
  1032  0191                     	;# 
  1033  0192                     	;# 
  1034  0193                     	;# 
  1035  0193                     	;# 
  1036  0193                     	;# 
  1037  0194                     	;# 
  1038  0195                     	;# 
  1039  0196                     	;# 
  1040  0197                     	;# 
  1041  0199                     	;# 
  1042  0199                     	;# 
  1043  0199                     	;# 
  1044  019A                     	;# 
  1045  019A                     	;# 
  1046  019A                     	;# 
  1047  019B                     	;# 
  1048  019B                     	;# 
  1049  019B                     	;# 
  1050  019B                     	;# 
  1051  019B                     	;# 
  1052  019C                     	;# 
  1053  019C                     	;# 
  1054  019C                     	;# 
  1055  019D                     	;# 
  1056  019D                     	;# 
  1057  019D                     	;# 
  1058  019E                     	;# 
  1059  019E                     	;# 
  1060  019E                     	;# 
  1061  019F                     	;# 
  1062  019F                     	;# 
  1063  019F                     	;# 
  1064  019F                     	;# 
  1065  019F                     	;# 
  1066  020C                     	;# 
  1067  020D                     	;# 
  1068  020E                     	;# 
  1069  0210                     	;# 
  1070  0211                     	;# 
  1071  0211                     	;# 
  1072  0212                     	;# 
  1073  0212                     	;# 
  1074  0213                     	;# 
  1075  0213                     	;# 
  1076  0214                     	;# 
  1077  0214                     	;# 
  1078  0215                     	;# 
  1079  0215                     	;# 
  1080  0215                     	;# 
  1081  0215                     	;# 
  1082  0216                     	;# 
  1083  0216                     	;# 
  1084  0217                     	;# 
  1085  0217                     	;# 
  1086  028C                     	;# 
  1087  028D                     	;# 
  1088  028E                     	;# 
  1089  0291                     	;# 
  1090  0291                     	;# 
  1091  0292                     	;# 
  1092  0293                     	;# 
  1093  0298                     	;# 
  1094  0298                     	;# 
  1095  0299                     	;# 
  1096  029A                     	;# 
  1097  030C                     	;# 
  1098  030D                     	;# 
  1099  030E                     	;# 
  1100  0311                     	;# 
  1101  0311                     	;# 
  1102  0312                     	;# 
  1103  0313                     	;# 
  1104  038C                     	;# 
  1105  038D                     	;# 
  1106  038E                     	;# 
  1107  0390                     	;# 
  1108  0391                     	;# 
  1109  0392                     	;# 
  1110  0393                     	;# 
  1111  0394                     	;# 
  1112  0395                     	;# 
  1113  0396                     	;# 
  1114  0397                     	;# 
  1115  0398                     	;# 
  1116  0399                     	;# 
  1117  039D                     	;# 
  1118  039E                     	;# 
  1119  039F                     	;# 
  1120  0511                     	;# 
  1121  0513                     	;# 
  1122  051A                     	;# 
  1123  0811                     	;# 
  1124  0812                     	;# 
  1125  0813                     	;# 
  1126  0814                     	;# 
  1127  0815                     	;# 
  1128  0816                     	;# 
  1129  0817                     	;# 
  1130  0818                     	;# 
  1131  0819                     	;# 
  1132  081A                     	;# 
  1133  081B                     	;# 
  1134  081C                     	;# 
  1135  081D                     	;# 
  1136  081E                     	;# 
  1137  081F                     	;# 
  1138  0820                     	;# 
  1139  0821                     	;# 
  1140  0821                     	;# 
  1141  0822                     	;# 
  1142  0823                     	;# 
  1143  0823                     	;# 
  1144  0824                     	;# 
  1145  0825                     	;# 
  1146  0825                     	;# 
  1147  0826                     	;# 
  1148  0827                     	;# 
  1149  0827                     	;# 
  1150  0828                     	;# 
  1151  0829                     	;# 
  1152  082A                     	;# 
  1153  082B                     	;# 
  1154  082C                     	;# 
  1155  082D                     	;# 
  1156  082E                     	;# 
  1157  082F                     	;# 
  1158  0831                     	;# 
  1159  0832                     	;# 
  1160  0833                     	;# 
  1161  0834                     	;# 
  1162  0835                     	;# 
  1163  0836                     	;# 
  1164  0837                     	;# 
  1165  0838                     	;# 
  1166  0839                     	;# 
  1167  083A                     	;# 
  1168  083B                     	;# 
  1169  083C                     	;# 
  1170  083D                     	;# 
  1171  083E                     	;# 
  1172  083F                     	;# 
  1173  0840                     	;# 
  1174  0841                     	;# 
  1175  0841                     	;# 
  1176  0842                     	;# 
  1177  0843                     	;# 
  1178  0843                     	;# 
  1179  0844                     	;# 
  1180  0845                     	;# 
  1181  0845                     	;# 
  1182  0846                     	;# 
  1183  0847                     	;# 
  1184  0847                     	;# 
  1185  0848                     	;# 
  1186  0849                     	;# 
  1187  084A                     	;# 
  1188  084B                     	;# 
  1189  084C                     	;# 
  1190  084D                     	;# 
  1191  084E                     	;# 
  1192  084F                     	;# 
  1193  0851                     	;# 
  1194  0852                     	;# 
  1195  0853                     	;# 
  1196  0854                     	;# 
  1197  0855                     	;# 
  1198  0856                     	;# 
  1199  0857                     	;# 
  1200  0858                     	;# 
  1201  0859                     	;# 
  1202  085A                     	;# 
  1203  085B                     	;# 
  1204  085C                     	;# 
  1205  085D                     	;# 
  1206  085E                     	;# 
  1207  085F                     	;# 
  1208  0860                     	;# 
  1209  0861                     	;# 
  1210  0861                     	;# 
  1211  0862                     	;# 
  1212  0863                     	;# 
  1213  0863                     	;# 
  1214  0864                     	;# 
  1215  0865                     	;# 
  1216  0865                     	;# 
  1217  0866                     	;# 
  1218  0867                     	;# 
  1219  0867                     	;# 
  1220  0868                     	;# 
  1221  0869                     	;# 
  1222  086A                     	;# 
  1223  086B                     	;# 
  1224  086C                     	;# 
  1225  086D                     	;# 
  1226  086E                     	;# 
  1227  086F                     	;# 
  1228  0FE4                     	;# 
  1229  0FE5                     	;# 
  1230  0FE6                     	;# 
  1231  0FE7                     	;# 
  1232  0FE8                     	;# 
  1233  0FE9                     	;# 
  1234  0FEA                     	;# 
  1235  0FEB                     	;# 
  1236  0FED                     	;# 
  1237  0FEE                     	;# 
  1238  0FEF                     	;# 
  1239  0000                     	;# 
  1240  0001                     	;# 
  1241  0002                     	;# 
  1242  0003                     	;# 
  1243  0004                     	;# 
  1244  0005                     	;# 
  1245  0006                     	;# 
  1246  0007                     	;# 
  1247  0008                     	;# 
  1248  0009                     	;# 
  1249  000A                     	;# 
  1250  000B                     	;# 
  1251  000C                     	;# 
  1252  000D                     	;# 
  1253  000E                     	;# 
  1254  0010                     	;# 
  1255  0011                     	;# 
  1256  0012                     	;# 
  1257  0013                     	;# 
  1258  0014                     	;# 
  1259  0015                     	;# 
  1260  0016                     	;# 
  1261  0016                     	;# 
  1262  0017                     	;# 
  1263  0018                     	;# 
  1264  0019                     	;# 
  1265  001A                     	;# 
  1266  001B                     	;# 
  1267  001C                     	;# 
  1268  008C                     	;# 
  1269  008D                     	;# 
  1270  008E                     	;# 
  1271  0090                     	;# 
  1272  0091                     	;# 
  1273  0092                     	;# 
  1274  0093                     	;# 
  1275  0094                     	;# 
  1276  0095                     	;# 
  1277  0096                     	;# 
  1278  0097                     	;# 
  1279  0098                     	;# 
  1280  0099                     	;# 
  1281  009A                     	;# 
  1282  009B                     	;# 
  1283  009B                     	;# 
  1284  009C                     	;# 
  1285  009D                     	;# 
  1286  009E                     	;# 
  1287  009F                     	;# 
  1288  010C                     	;# 
  1289  010D                     	;# 
  1290  010E                     	;# 
  1291  0111                     	;# 
  1292  0112                     	;# 
  1293  0113                     	;# 
  1294  0114                     	;# 
  1295  0115                     	;# 
  1296  0116                     	;# 
  1297  0117                     	;# 
  1298  0118                     	;# 
  1299  0119                     	;# 
  1300  011A                     	;# 
  1301  011B                     	;# 
  1302  011C                     	;# 
  1303  011D                     	;# 
  1304  011D                     	;# 
  1305  011D                     	;# 
  1306  011E                     	;# 
  1307  011F                     	;# 
  1308  018C                     	;# 
  1309  018D                     	;# 
  1310  0191                     	;# 
  1311  0191                     	;# 
  1312  0192                     	;# 
  1313  0193                     	;# 
  1314  0193                     	;# 
  1315  0193                     	;# 
  1316  0194                     	;# 
  1317  0195                     	;# 
  1318  0196                     	;# 
  1319  0197                     	;# 
  1320  0199                     	;# 
  1321  0199                     	;# 
  1322  0199                     	;# 
  1323  019A                     	;# 
  1324  019A                     	;# 
  1325  019A                     	;# 
  1326  019B                     	;# 
  1327  019B                     	;# 
  1328  019B                     	;# 
  1329  019B                     	;# 
  1330  019B                     	;# 
  1331  019C                     	;# 
  1332  019C                     	;# 
  1333  019C                     	;# 
  1334  019D                     	;# 
  1335  019D                     	;# 
  1336  019D                     	;# 
  1337  019E                     	;# 
  1338  019E                     	;# 
  1339  019E                     	;# 
  1340  019F                     	;# 
  1341  019F                     	;# 
  1342  019F                     	;# 
  1343  019F                     	;# 
  1344  019F                     	;# 
  1345  020C                     	;# 
  1346  020D                     	;# 
  1347  020E                     	;# 
  1348  0210                     	;# 
  1349  0211                     	;# 
  1350  0211                     	;# 
  1351  0212                     	;# 
  1352  0212                     	;# 
  1353  0213                     	;# 
  1354  0213                     	;# 
  1355  0214                     	;# 
  1356  0214                     	;# 
  1357  0215                     	;# 
  1358  0215                     	;# 
  1359  0215                     	;# 
  1360  0215                     	;# 
  1361  0216                     	;# 
  1362  0216                     	;# 
  1363  0217                     	;# 
  1364  0217                     	;# 
  1365  028C                     	;# 
  1366  028D                     	;# 
  1367  028E                     	;# 
  1368  0291                     	;# 
  1369  0291                     	;# 
  1370  0292                     	;# 
  1371  0293                     	;# 
  1372  0298                     	;# 
  1373  0298                     	;# 
  1374  0299                     	;# 
  1375  029A                     	;# 
  1376  030C                     	;# 
  1377  030D                     	;# 
  1378  030E                     	;# 
  1379  0311                     	;# 
  1380  0311                     	;# 
  1381  0312                     	;# 
  1382  0313                     	;# 
  1383  038C                     	;# 
  1384  038D                     	;# 
  1385  038E                     	;# 
  1386  0390                     	;# 
  1387  0391                     	;# 
  1388  0392                     	;# 
  1389  0393                     	;# 
  1390  0394                     	;# 
  1391  0395                     	;# 
  1392  0396                     	;# 
  1393  0397                     	;# 
  1394  0398                     	;# 
  1395  0399                     	;# 
  1396  039D                     	;# 
  1397  039E                     	;# 
  1398  039F                     	;# 
  1399  0511                     	;# 
  1400  0513                     	;# 
  1401  051A                     	;# 
  1402  0811                     	;# 
  1403  0812                     	;# 
  1404  0813                     	;# 
  1405  0814                     	;# 
  1406  0815                     	;# 
  1407  0816                     	;# 
  1408  0817                     	;# 
  1409  0818                     	;# 
  1410  0819                     	;# 
  1411  081A                     	;# 
  1412  081B                     	;# 
  1413  081C                     	;# 
  1414  081D                     	;# 
  1415  081E                     	;# 
  1416  081F                     	;# 
  1417  0820                     	;# 
  1418  0821                     	;# 
  1419  0821                     	;# 
  1420  0822                     	;# 
  1421  0823                     	;# 
  1422  0823                     	;# 
  1423  0824                     	;# 
  1424  0825                     	;# 
  1425  0825                     	;# 
  1426  0826                     	;# 
  1427  0827                     	;# 
  1428  0827                     	;# 
  1429  0828                     	;# 
  1430  0829                     	;# 
  1431  082A                     	;# 
  1432  082B                     	;# 
  1433  082C                     	;# 
  1434  082D                     	;# 
  1435  082E                     	;# 
  1436  082F                     	;# 
  1437  0831                     	;# 
  1438  0832                     	;# 
  1439  0833                     	;# 
  1440  0834                     	;# 
  1441  0835                     	;# 
  1442  0836                     	;# 
  1443  0837                     	;# 
  1444  0838                     	;# 
  1445  0839                     	;# 
  1446  083A                     	;# 
  1447  083B                     	;# 
  1448  083C                     	;# 
  1449  083D                     	;# 
  1450  083E                     	;# 
  1451  083F                     	;# 
  1452  0840                     	;# 
  1453  0841                     	;# 
  1454  0841                     	;# 
  1455  0842                     	;# 
  1456  0843                     	;# 
  1457  0843                     	;# 
  1458  0844                     	;# 
  1459  0845                     	;# 
  1460  0845                     	;# 
  1461  0846                     	;# 
  1462  0847                     	;# 
  1463  0847                     	;# 
  1464  0848                     	;# 
  1465  0849                     	;# 
  1466  084A                     	;# 
  1467  084B                     	;# 
  1468  084C                     	;# 
  1469  084D                     	;# 
  1470  084E                     	;# 
  1471  084F                     	;# 
  1472  0851                     	;# 
  1473  0852                     	;# 
  1474  0853                     	;# 
  1475  0854                     	;# 
  1476  0855                     	;# 
  1477  0856                     	;# 
  1478  0857                     	;# 
  1479  0858                     	;# 
  1480  0859                     	;# 
  1481  085A                     	;# 
  1482  085B                     	;# 
  1483  085C                     	;# 
  1484  085D                     	;# 
  1485  085E                     	;# 
  1486  085F                     	;# 
  1487  0860                     	;# 
  1488  0861                     	;# 
  1489  0861                     	;# 
  1490  0862                     	;# 
  1491  0863                     	;# 
  1492  0863                     	;# 
  1493  0864                     	;# 
  1494  0865                     	;# 
  1495  0865                     	;# 
  1496  0866                     	;# 
  1497  0867                     	;# 
  1498  0867                     	;# 
  1499  0868                     	;# 
  1500  0869                     	;# 
  1501  086A                     	;# 
  1502  086B                     	;# 
  1503  086C                     	;# 
  1504  086D                     	;# 
  1505  086E                     	;# 
  1506  086F                     	;# 
  1507  0FE4                     	;# 
  1508  0FE5                     	;# 
  1509  0FE6                     	;# 
  1510  0FE7                     	;# 
  1511  0FE8                     	;# 
  1512  0FE9                     	;# 
  1513  0FEA                     	;# 
  1514  0FEB                     	;# 
  1515  0FED                     	;# 
  1516  0FEE                     	;# 
  1517  0FEF                     	;# 
  1518  0000                     	;# 
  1519  0001                     	;# 
  1520  0002                     	;# 
  1521  0003                     	;# 
  1522  0004                     	;# 
  1523  0005                     	;# 
  1524  0006                     	;# 
  1525  0007                     	;# 
  1526  0008                     	;# 
  1527  0009                     	;# 
  1528  000A                     	;# 
  1529  000B                     	;# 
  1530  000C                     	;# 
  1531  000D                     	;# 
  1532  000E                     	;# 
  1533  0010                     	;# 
  1534  0011                     	;# 
  1535  0012                     	;# 
  1536  0013                     	;# 
  1537  0014                     	;# 
  1538  0015                     	;# 
  1539  0016                     	;# 
  1540  0016                     	;# 
  1541  0017                     	;# 
  1542  0018                     	;# 
  1543  0019                     	;# 
  1544  001A                     	;# 
  1545  001B                     	;# 
  1546  001C                     	;# 
  1547  008C                     	;# 
  1548  008D                     	;# 
  1549  008E                     	;# 
  1550  0090                     	;# 
  1551  0091                     	;# 
  1552  0092                     	;# 
  1553  0093                     	;# 
  1554  0094                     	;# 
  1555  0095                     	;# 
  1556  0096                     	;# 
  1557  0097                     	;# 
  1558  0098                     	;# 
  1559  0099                     	;# 
  1560  009A                     	;# 
  1561  009B                     	;# 
  1562  009B                     	;# 
  1563  009C                     	;# 
  1564  009D                     	;# 
  1565  009E                     	;# 
  1566  009F                     	;# 
  1567  010C                     	;# 
  1568  010D                     	;# 
  1569  010E                     	;# 
  1570  0111                     	;# 
  1571  0112                     	;# 
  1572  0113                     	;# 
  1573  0114                     	;# 
  1574  0115                     	;# 
  1575  0116                     	;# 
  1576  0117                     	;# 
  1577  0118                     	;# 
  1578  0119                     	;# 
  1579  011A                     	;# 
  1580  011B                     	;# 
  1581  011C                     	;# 
  1582  011D                     	;# 
  1583  011D                     	;# 
  1584  011D                     	;# 
  1585  011E                     	;# 
  1586  011F                     	;# 
  1587  018C                     	;# 
  1588  018D                     	;# 
  1589  0191                     	;# 
  1590  0191                     	;# 
  1591  0192                     	;# 
  1592  0193                     	;# 
  1593  0193                     	;# 
  1594  0193                     	;# 
  1595  0194                     	;# 
  1596  0195                     	;# 
  1597  0196                     	;# 
  1598  0197                     	;# 
  1599  0199                     	;# 
  1600  0199                     	;# 
  1601  0199                     	;# 
  1602  019A                     	;# 
  1603  019A                     	;# 
  1604  019A                     	;# 
  1605  019B                     	;# 
  1606  019B                     	;# 
  1607  019B                     	;# 
  1608  019B                     	;# 
  1609  019B                     	;# 
  1610  019C                     	;# 
  1611  019C                     	;# 
  1612  019C                     	;# 
  1613  019D                     	;# 
  1614  019D                     	;# 
  1615  019D                     	;# 
  1616  019E                     	;# 
  1617  019E                     	;# 
  1618  019E                     	;# 
  1619  019F                     	;# 
  1620  019F                     	;# 
  1621  019F                     	;# 
  1622  019F                     	;# 
  1623  019F                     	;# 
  1624  020C                     	;# 
  1625  020D                     	;# 
  1626  020E                     	;# 
  1627  0210                     	;# 
  1628  0211                     	;# 
  1629  0211                     	;# 
  1630  0212                     	;# 
  1631  0212                     	;# 
  1632  0213                     	;# 
  1633  0213                     	;# 
  1634  0214                     	;# 
  1635  0214                     	;# 
  1636  0215                     	;# 
  1637  0215                     	;# 
  1638  0215                     	;# 
  1639  0215                     	;# 
  1640  0216                     	;# 
  1641  0216                     	;# 
  1642  0217                     	;# 
  1643  0217                     	;# 
  1644  028C                     	;# 
  1645  028D                     	;# 
  1646  028E                     	;# 
  1647  0291                     	;# 
  1648  0291                     	;# 
  1649  0292                     	;# 
  1650  0293                     	;# 
  1651  0298                     	;# 
  1652  0298                     	;# 
  1653  0299                     	;# 
  1654  029A                     	;# 
  1655  030C                     	;# 
  1656  030D                     	;# 
  1657  030E                     	;# 
  1658  0311                     	;# 
  1659  0311                     	;# 
  1660  0312                     	;# 
  1661  0313                     	;# 
  1662  038C                     	;# 
  1663  038D                     	;# 
  1664  038E                     	;# 
  1665  0390                     	;# 
  1666  0391                     	;# 
  1667  0392                     	;# 
  1668  0393                     	;# 
  1669  0394                     	;# 
  1670  0395                     	;# 
  1671  0396                     	;# 
  1672  0397                     	;# 
  1673  0398                     	;# 
  1674  0399                     	;# 
  1675  039D                     	;# 
  1676  039E                     	;# 
  1677  039F                     	;# 
  1678  0511                     	;# 
  1679  0513                     	;# 
  1680  051A                     	;# 
  1681  0811                     	;# 
  1682  0812                     	;# 
  1683  0813                     	;# 
  1684  0814                     	;# 
  1685  0815                     	;# 
  1686  0816                     	;# 
  1687  0817                     	;# 
  1688  0818                     	;# 
  1689  0819                     	;# 
  1690  081A                     	;# 
  1691  081B                     	;# 
  1692  081C                     	;# 
  1693  081D                     	;# 
  1694  081E                     	;# 
  1695  081F                     	;# 
  1696  0820                     	;# 
  1697  0821                     	;# 
  1698  0821                     	;# 
  1699  0822                     	;# 
  1700  0823                     	;# 
  1701  0823                     	;# 
  1702  0824                     	;# 
  1703  0825                     	;# 
  1704  0825                     	;# 
  1705  0826                     	;# 
  1706  0827                     	;# 
  1707  0827                     	;# 
  1708  0828                     	;# 
  1709  0829                     	;# 
  1710  082A                     	;# 
  1711  082B                     	;# 
  1712  082C                     	;# 
  1713  082D                     	;# 
  1714  082E                     	;# 
  1715  082F                     	;# 
  1716  0831                     	;# 
  1717  0832                     	;# 
  1718  0833                     	;# 
  1719  0834                     	;# 
  1720  0835                     	;# 
  1721  0836                     	;# 
  1722  0837                     	;# 
  1723  0838                     	;# 
  1724  0839                     	;# 
  1725  083A                     	;# 
  1726  083B                     	;# 
  1727  083C                     	;# 
  1728  083D                     	;# 
  1729  083E                     	;# 
  1730  083F                     	;# 
  1731  0840                     	;# 
  1732  0841                     	;# 
  1733  0841                     	;# 
  1734  0842                     	;# 
  1735  0843                     	;# 
  1736  0843                     	;# 
  1737  0844                     	;# 
  1738  0845                     	;# 
  1739  0845                     	;# 
  1740  0846                     	;# 
  1741  0847                     	;# 
  1742  0847                     	;# 
  1743  0848                     	;# 
  1744  0849                     	;# 
  1745  084A                     	;# 
  1746  084B                     	;# 
  1747  084C                     	;# 
  1748  084D                     	;# 
  1749  084E                     	;# 
  1750  084F                     	;# 
  1751  0851                     	;# 
  1752  0852                     	;# 
  1753  0853                     	;# 
  1754  0854                     	;# 
  1755  0855                     	;# 
  1756  0856                     	;# 
  1757  0857                     	;# 
  1758  0858                     	;# 
  1759  0859                     	;# 
  1760  085A                     	;# 
  1761  085B                     	;# 
  1762  085C                     	;# 
  1763  085D                     	;# 
  1764  085E                     	;# 
  1765  085F                     	;# 
  1766  0860                     	;# 
  1767  0861                     	;# 
  1768  0861                     	;# 
  1769  0862                     	;# 
  1770  0863                     	;# 
  1771  0863                     	;# 
  1772  0864                     	;# 
  1773  0865                     	;# 
  1774  0865                     	;# 
  1775  0866                     	;# 
  1776  0867                     	;# 
  1777  0867                     	;# 
  1778  0868                     	;# 
  1779  0869                     	;# 
  1780  086A                     	;# 
  1781  086B                     	;# 
  1782  086C                     	;# 
  1783  086D                     	;# 
  1784  086E                     	;# 
  1785  086F                     	;# 
  1786  0FE4                     	;# 
  1787  0FE5                     	;# 
  1788  0FE6                     	;# 
  1789  0FE7                     	;# 
  1790  0FE8                     	;# 
  1791  0FE9                     	;# 
  1792  0FEA                     	;# 
  1793  0FEB                     	;# 
  1794  0FED                     	;# 
  1795  0FEE                     	;# 
  1796  0FEF                     	;# 
  1797  0000                     	;# 
  1798  0001                     	;# 
  1799  0002                     	;# 
  1800  0003                     	;# 
  1801  0004                     	;# 
  1802  0005                     	;# 
  1803  0006                     	;# 
  1804  0007                     	;# 
  1805  0008                     	;# 
  1806  0009                     	;# 
  1807  000A                     	;# 
  1808  000B                     	;# 
  1809  000C                     	;# 
  1810  000D                     	;# 
  1811  000E                     	;# 
  1812  0010                     	;# 
  1813  0011                     	;# 
  1814  0012                     	;# 
  1815  0013                     	;# 
  1816  0014                     	;# 
  1817  0015                     	;# 
  1818  0016                     	;# 
  1819  0016                     	;# 
  1820  0017                     	;# 
  1821  0018                     	;# 
  1822  0019                     	;# 
  1823  001A                     	;# 
  1824  001B                     	;# 
  1825  001C                     	;# 
  1826  008C                     	;# 
  1827  008D                     	;# 
  1828  008E                     	;# 
  1829  0090                     	;# 
  1830  0091                     	;# 
  1831  0092                     	;# 
  1832  0093                     	;# 
  1833  0094                     	;# 
  1834  0095                     	;# 
  1835  0096                     	;# 
  1836  0097                     	;# 
  1837  0098                     	;# 
  1838  0099                     	;# 
  1839  009A                     	;# 
  1840  009B                     	;# 
  1841  009B                     	;# 
  1842  009C                     	;# 
  1843  009D                     	;# 
  1844  009E                     	;# 
  1845  009F                     	;# 
  1846  010C                     	;# 
  1847  010D                     	;# 
  1848  010E                     	;# 
  1849  0111                     	;# 
  1850  0112                     	;# 
  1851  0113                     	;# 
  1852  0114                     	;# 
  1853  0115                     	;# 
  1854  0116                     	;# 
  1855  0117                     	;# 
  1856  0118                     	;# 
  1857  0119                     	;# 
  1858  011A                     	;# 
  1859  011B                     	;# 
  1860  011C                     	;# 
  1861  011D                     	;# 
  1862  011D                     	;# 
  1863  011D                     	;# 
  1864  011E                     	;# 
  1865  011F                     	;# 
  1866  018C                     	;# 
  1867  018D                     	;# 
  1868  0191                     	;# 
  1869  0191                     	;# 
  1870  0192                     	;# 
  1871  0193                     	;# 
  1872  0193                     	;# 
  1873  0193                     	;# 
  1874  0194                     	;# 
  1875  0195                     	;# 
  1876  0196                     	;# 
  1877  0197                     	;# 
  1878  0199                     	;# 
  1879  0199                     	;# 
  1880  0199                     	;# 
  1881  019A                     	;# 
  1882  019A                     	;# 
  1883  019A                     	;# 
  1884  019B                     	;# 
  1885  019B                     	;# 
  1886  019B                     	;# 
  1887  019B                     	;# 
  1888  019B                     	;# 
  1889  019C                     	;# 
  1890  019C                     	;# 
  1891  019C                     	;# 
  1892  019D                     	;# 
  1893  019D                     	;# 
  1894  019D                     	;# 
  1895  019E                     	;# 
  1896  019E                     	;# 
  1897  019E                     	;# 
  1898  019F                     	;# 
  1899  019F                     	;# 
  1900  019F                     	;# 
  1901  019F                     	;# 
  1902  019F                     	;# 
  1903  020C                     	;# 
  1904  020D                     	;# 
  1905  020E                     	;# 
  1906  0210                     	;# 
  1907  0211                     	;# 
  1908  0211                     	;# 
  1909  0212                     	;# 
  1910  0212                     	;# 
  1911  0213                     	;# 
  1912  0213                     	;# 
  1913  0214                     	;# 
  1914  0214                     	;# 
  1915  0215                     	;# 
  1916  0215                     	;# 
  1917  0215                     	;# 
  1918  0215                     	;# 
  1919  0216                     	;# 
  1920  0216                     	;# 
  1921  0217                     	;# 
  1922  0217                     	;# 
  1923  028C                     	;# 
  1924  028D                     	;# 
  1925  028E                     	;# 
  1926  0291                     	;# 
  1927  0291                     	;# 
  1928  0292                     	;# 
  1929  0293                     	;# 
  1930  0298                     	;# 
  1931  0298                     	;# 
  1932  0299                     	;# 
  1933  029A                     	;# 
  1934  030C                     	;# 
  1935  030D                     	;# 
  1936  030E                     	;# 
  1937  0311                     	;# 
  1938  0311                     	;# 
  1939  0312                     	;# 
  1940  0313                     	;# 
  1941  038C                     	;# 
  1942  038D                     	;# 
  1943  038E                     	;# 
  1944  0390                     	;# 
  1945  0391                     	;# 
  1946  0392                     	;# 
  1947  0393                     	;# 
  1948  0394                     	;# 
  1949  0395                     	;# 
  1950  0396                     	;# 
  1951  0397                     	;# 
  1952  0398                     	;# 
  1953  0399                     	;# 
  1954  039D                     	;# 
  1955  039E                     	;# 
  1956  039F                     	;# 
  1957  0511                     	;# 
  1958  0513                     	;# 
  1959  051A                     	;# 
  1960  0811                     	;# 
  1961  0812                     	;# 
  1962  0813                     	;# 
  1963  0814                     	;# 
  1964  0815                     	;# 
  1965  0816                     	;# 
  1966  0817                     	;# 
  1967  0818                     	;# 
  1968  0819                     	;# 
  1969  081A                     	;# 
  1970  081B                     	;# 
  1971  081C                     	;# 
  1972  081D                     	;# 
  1973  081E                     	;# 
  1974  081F                     	;# 
  1975  0820                     	;# 
  1976  0821                     	;# 
  1977  0821                     	;# 
  1978  0822                     	;# 
  1979  0823                     	;# 
  1980  0823                     	;# 
  1981  0824                     	;# 
  1982  0825                     	;# 
  1983  0825                     	;# 
  1984  0826                     	;# 
  1985  0827                     	;# 
  1986  0827                     	;# 
  1987  0828                     	;# 
  1988  0829                     	;# 
  1989  082A                     	;# 
  1990  082B                     	;# 
  1991  082C                     	;# 
  1992  082D                     	;# 
  1993  082E                     	;# 
  1994  082F                     	;# 
  1995  0831                     	;# 
  1996  0832                     	;# 
  1997  0833                     	;# 
  1998  0834                     	;# 
  1999  0835                     	;# 
  2000  0836                     	;# 
  2001  0837                     	;# 
  2002  0838                     	;# 
  2003  0839                     	;# 
  2004  083A                     	;# 
  2005  083B                     	;# 
  2006  083C                     	;# 
  2007  083D                     	;# 
  2008  083E                     	;# 
  2009  083F                     	;# 
  2010  0840                     	;# 
  2011  0841                     	;# 
  2012  0841                     	;# 
  2013  0842                     	;# 
  2014  0843                     	;# 
  2015  0843                     	;# 
  2016  0844                     	;# 
  2017  0845                     	;# 
  2018  0845                     	;# 
  2019  0846                     	;# 
  2020  0847                     	;# 
  2021  0847                     	;# 
  2022  0848                     	;# 
  2023  0849                     	;# 
  2024  084A                     	;# 
  2025  084B                     	;# 
  2026  084C                     	;# 
  2027  084D                     	;# 
  2028  084E                     	;# 
  2029  084F                     	;# 
  2030  0851                     	;# 
  2031  0852                     	;# 
  2032  0853                     	;# 
  2033  0854                     	;# 
  2034  0855                     	;# 
  2035  0856                     	;# 
  2036  0857                     	;# 
  2037  0858                     	;# 
  2038  0859                     	;# 
  2039  085A                     	;# 
  2040  085B                     	;# 
  2041  085C                     	;# 
  2042  085D                     	;# 
  2043  085E                     	;# 
  2044  085F                     	;# 
  2045  0860                     	;# 
  2046  0861                     	;# 
  2047  0861                     	;# 
  2048  0862                     	;# 
  2049  0863                     	;# 
  2050  0863                     	;# 
  2051  0864                     	;# 
  2052  0865                     	;# 
  2053  0865                     	;# 
  2054  0866                     	;# 
  2055  0867                     	;# 
  2056  0867                     	;# 
  2057  0868                     	;# 
  2058  0869                     	;# 
  2059  086A                     	;# 
  2060  086B                     	;# 
  2061  086C                     	;# 
  2062  086D                     	;# 
  2063  086E                     	;# 
  2064  086F                     	;# 
  2065  0FE4                     	;# 
  2066  0FE5                     	;# 
  2067  0FE6                     	;# 
  2068  0FE7                     	;# 
  2069  0FE8                     	;# 
  2070  0FE9                     	;# 
  2071  0FEA                     	;# 
  2072  0FEB                     	;# 
  2073  0FED                     	;# 
  2074  0FEE                     	;# 
  2075  0FEF                     	;# 
  2076  0000                     	;# 
  2077  0001                     	;# 
  2078  0002                     	;# 
  2079  0003                     	;# 
  2080  0004                     	;# 
  2081  0005                     	;# 
  2082  0006                     	;# 
  2083  0007                     	;# 
  2084  0008                     	;# 
  2085  0009                     	;# 
  2086  000A                     	;# 
  2087  000B                     	;# 
  2088  000C                     	;# 
  2089  000D                     	;# 
  2090  000E                     	;# 
  2091  0010                     	;# 
  2092  0011                     	;# 
  2093  0012                     	;# 
  2094  0013                     	;# 
  2095  0014                     	;# 
  2096  0015                     	;# 
  2097  0016                     	;# 
  2098  0016                     	;# 
  2099  0017                     	;# 
  2100  0018                     	;# 
  2101  0019                     	;# 
  2102  001A                     	;# 
  2103  001B                     	;# 
  2104  001C                     	;# 
  2105  008C                     	;# 
  2106  008D                     	;# 
  2107  008E                     	;# 
  2108  0090                     	;# 
  2109  0091                     	;# 
  2110  0092                     	;# 
  2111  0093                     	;# 
  2112  0094                     	;# 
  2113  0095                     	;# 
  2114  0096                     	;# 
  2115  0097                     	;# 
  2116  0098                     	;# 
  2117  0099                     	;# 
  2118  009A                     	;# 
  2119  009B                     	;# 
  2120  009B                     	;# 
  2121  009C                     	;# 
  2122  009D                     	;# 
  2123  009E                     	;# 
  2124  009F                     	;# 
  2125  010C                     	;# 
  2126  010D                     	;# 
  2127  010E                     	;# 
  2128  0111                     	;# 
  2129  0112                     	;# 
  2130  0113                     	;# 
  2131  0114                     	;# 
  2132  0115                     	;# 
  2133  0116                     	;# 
  2134  0117                     	;# 
  2135  0118                     	;# 
  2136  0119                     	;# 
  2137  011A                     	;# 
  2138  011B                     	;# 
  2139  011C                     	;# 
  2140  011D                     	;# 
  2141  011D                     	;# 
  2142  011D                     	;# 
  2143  011E                     	;# 
  2144  011F                     	;# 
  2145  018C                     	;# 
  2146  018D                     	;# 
  2147  0191                     	;# 
  2148  0191                     	;# 
  2149  0192                     	;# 
  2150  0193                     	;# 
  2151  0193                     	;# 
  2152  0193                     	;# 
  2153  0194                     	;# 
  2154  0195                     	;# 
  2155  0196                     	;# 
  2156  0197                     	;# 
  2157  0199                     	;# 
  2158  0199                     	;# 
  2159  0199                     	;# 
  2160  019A                     	;# 
  2161  019A                     	;# 
  2162  019A                     	;# 
  2163  019B                     	;# 
  2164  019B                     	;# 
  2165  019B                     	;# 
  2166  019B                     	;# 
  2167  019B                     	;# 
  2168  019C                     	;# 
  2169  019C                     	;# 
  2170  019C                     	;# 
  2171  019D                     	;# 
  2172  019D                     	;# 
  2173  019D                     	;# 
  2174  019E                     	;# 
  2175  019E                     	;# 
  2176  019E                     	;# 
  2177  019F                     	;# 
  2178  019F                     	;# 
  2179  019F                     	;# 
  2180  019F                     	;# 
  2181  019F                     	;# 
  2182  020C                     	;# 
  2183  020D                     	;# 
  2184  020E                     	;# 
  2185  0210                     	;# 
  2186  0211                     	;# 
  2187  0211                     	;# 
  2188  0212                     	;# 
  2189  0212                     	;# 
  2190  0213                     	;# 
  2191  0213                     	;# 
  2192  0214                     	;# 
  2193  0214                     	;# 
  2194  0215                     	;# 
  2195  0215                     	;# 
  2196  0215                     	;# 
  2197  0215                     	;# 
  2198  0216                     	;# 
  2199  0216                     	;# 
  2200  0217                     	;# 
  2201  0217                     	;# 
  2202  028C                     	;# 
  2203  028D                     	;# 
  2204  028E                     	;# 
  2205  0291                     	;# 
  2206  0291                     	;# 
  2207  0292                     	;# 
  2208  0293                     	;# 
  2209  0298                     	;# 
  2210  0298                     	;# 
  2211  0299                     	;# 
  2212  029A                     	;# 
  2213  030C                     	;# 
  2214  030D                     	;# 
  2215  030E                     	;# 
  2216  0311                     	;# 
  2217  0311                     	;# 
  2218  0312                     	;# 
  2219  0313                     	;# 
  2220  038C                     	;# 
  2221  038D                     	;# 
  2222  038E                     	;# 
  2223  0390                     	;# 
  2224  0391                     	;# 
  2225  0392                     	;# 
  2226  0393                     	;# 
  2227  0394                     	;# 
  2228  0395                     	;# 
  2229  0396                     	;# 
  2230  0397                     	;# 
  2231  0398                     	;# 
  2232  0399                     	;# 
  2233  039D                     	;# 
  2234  039E                     	;# 
  2235  039F                     	;# 
  2236  0511                     	;# 
  2237  0513                     	;# 
  2238  051A                     	;# 
  2239  0811                     	;# 
  2240  0812                     	;# 
  2241  0813                     	;# 
  2242  0814                     	;# 
  2243  0815                     	;# 
  2244  0816                     	;# 
  2245  0817                     	;# 
  2246  0818                     	;# 
  2247  0819                     	;# 
  2248  081A                     	;# 
  2249  081B                     	;# 
  2250  081C                     	;# 
  2251  081D                     	;# 
  2252  081E                     	;# 
  2253  081F                     	;# 
  2254  0820                     	;# 
  2255  0821                     	;# 
  2256  0821                     	;# 
  2257  0822                     	;# 
  2258  0823                     	;# 
  2259  0823                     	;# 
  2260  0824                     	;# 
  2261  0825                     	;# 
  2262  0825                     	;# 
  2263  0826                     	;# 
  2264  0827                     	;# 
  2265  0827                     	;# 
  2266  0828                     	;# 
  2267  0829                     	;# 
  2268  082A                     	;# 
  2269  082B                     	;# 
  2270  082C                     	;# 
  2271  082D                     	;# 
  2272  082E                     	;# 
  2273  082F                     	;# 
  2274  0831                     	;# 
  2275  0832                     	;# 
  2276  0833                     	;# 
  2277  0834                     	;# 
  2278  0835                     	;# 
  2279  0836                     	;# 
  2280  0837                     	;# 
  2281  0838                     	;# 
  2282  0839                     	;# 
  2283  083A                     	;# 
  2284  083B                     	;# 
  2285  083C                     	;# 
  2286  083D                     	;# 
  2287  083E                     	;# 
  2288  083F                     	;# 
  2289  0840                     	;# 
  2290  0841                     	;# 
  2291  0841                     	;# 
  2292  0842                     	;# 
  2293  0843                     	;# 
  2294  0843                     	;# 
  2295  0844                     	;# 
  2296  0845                     	;# 
  2297  0845                     	;# 
  2298  0846                     	;# 
  2299  0847                     	;# 
  2300  0847                     	;# 
  2301  0848                     	;# 
  2302  0849                     	;# 
  2303  084A                     	;# 
  2304  084B                     	;# 
  2305  084C                     	;# 
  2306  084D                     	;# 
  2307  084E                     	;# 
  2308  084F                     	;# 
  2309  0851                     	;# 
  2310  0852                     	;# 
  2311  0853                     	;# 
  2312  0854                     	;# 
  2313  0855                     	;# 
  2314  0856                     	;# 
  2315  0857                     	;# 
  2316  0858                     	;# 
  2317  0859                     	;# 
  2318  085A                     	;# 
  2319  085B                     	;# 
  2320  085C                     	;# 
  2321  085D                     	;# 
  2322  085E                     	;# 
  2323  085F                     	;# 
  2324  0860                     	;# 
  2325  0861                     	;# 
  2326  0861                     	;# 
  2327  0862                     	;# 
  2328  0863                     	;# 
  2329  0863                     	;# 
  2330  0864                     	;# 
  2331  0865                     	;# 
  2332  0865                     	;# 
  2333  0866                     	;# 
  2334  0867                     	;# 
  2335  0867                     	;# 
  2336  0868                     	;# 
  2337  0869                     	;# 
  2338  086A                     	;# 
  2339  086B                     	;# 
  2340  086C                     	;# 
  2341  086D                     	;# 
  2342  086E                     	;# 
  2343  086F                     	;# 
  2344  0FE4                     	;# 
  2345  0FE5                     	;# 
  2346  0FE6                     	;# 
  2347  0FE7                     	;# 
  2348  0FE8                     	;# 
  2349  0FE9                     	;# 
  2350  0FEA                     	;# 
  2351  0FEB                     	;# 
  2352  0FED                     	;# 
  2353  0FEE                     	;# 
  2354  0FEF                     	;# 
  2355  0000                     	;# 
  2356  0001                     	;# 
  2357  0002                     	;# 
  2358  0003                     	;# 
  2359  0004                     	;# 
  2360  0005                     	;# 
  2361  0006                     	;# 
  2362  0007                     	;# 
  2363  0008                     	;# 
  2364  0009                     	;# 
  2365  000A                     	;# 
  2366  000B                     	;# 
  2367  000C                     	;# 
  2368  000D                     	;# 
  2369  000E                     	;# 
  2370  0010                     	;# 
  2371  0011                     	;# 
  2372  0012                     	;# 
  2373  0013                     	;# 
  2374  0014                     	;# 
  2375  0015                     	;# 
  2376  0016                     	;# 
  2377  0016                     	;# 
  2378  0017                     	;# 
  2379  0018                     	;# 
  2380  0019                     	;# 
  2381  001A                     	;# 
  2382  001B                     	;# 
  2383  001C                     	;# 
  2384  008C                     	;# 
  2385  008D                     	;# 
  2386  008E                     	;# 
  2387  0090                     	;# 
  2388  0091                     	;# 
  2389  0092                     	;# 
  2390  0093                     	;# 
  2391  0094                     	;# 
  2392  0095                     	;# 
  2393  0096                     	;# 
  2394  0097                     	;# 
  2395  0098                     	;# 
  2396  0099                     	;# 
  2397  009A                     	;# 
  2398  009B                     	;# 
  2399  009B                     	;# 
  2400  009C                     	;# 
  2401  009D                     	;# 
  2402  009E                     	;# 
  2403  009F                     	;# 
  2404  010C                     	;# 
  2405  010D                     	;# 
  2406  010E                     	;# 
  2407  0111                     	;# 
  2408  0112                     	;# 
  2409  0113                     	;# 
  2410  0114                     	;# 
  2411  0115                     	;# 
  2412  0116                     	;# 
  2413  0117                     	;# 
  2414  0118                     	;# 
  2415  0119                     	;# 
  2416  011A                     	;# 
  2417  011B                     	;# 
  2418  011C                     	;# 
  2419  011D                     	;# 
  2420  011D                     	;# 
  2421  011D                     	;# 
  2422  011E                     	;# 
  2423  011F                     	;# 
  2424  018C                     	;# 
  2425  018D                     	;# 
  2426  0191                     	;# 
  2427  0191                     	;# 
  2428  0192                     	;# 
  2429  0193                     	;# 
  2430  0193                     	;# 
  2431  0193                     	;# 
  2432  0194                     	;# 
  2433  0195                     	;# 
  2434  0196                     	;# 
  2435  0197                     	;# 
  2436  0199                     	;# 
  2437  0199                     	;# 
  2438  0199                     	;# 
  2439  019A                     	;# 
  2440  019A                     	;# 
  2441  019A                     	;# 
  2442  019B                     	;# 
  2443  019B                     	;# 
  2444  019B                     	;# 
  2445  019B                     	;# 
  2446  019B                     	;# 
  2447  019C                     	;# 
  2448  019C                     	;# 
  2449  019C                     	;# 
  2450  019D                     	;# 
  2451  019D                     	;# 
  2452  019D                     	;# 
  2453  019E                     	;# 
  2454  019E                     	;# 
  2455  019E                     	;# 
  2456  019F                     	;# 
  2457  019F                     	;# 
  2458  019F                     	;# 
  2459  019F                     	;# 
  2460  019F                     	;# 
  2461  020C                     	;# 
  2462  020D                     	;# 
  2463  020E                     	;# 
  2464  0210                     	;# 
  2465  0211                     	;# 
  2466  0211                     	;# 
  2467  0212                     	;# 
  2468  0212                     	;# 
  2469  0213                     	;# 
  2470  0213                     	;# 
  2471  0214                     	;# 
  2472  0214                     	;# 
  2473  0215                     	;# 
  2474  0215                     	;# 
  2475  0215                     	;# 
  2476  0215                     	;# 
  2477  0216                     	;# 
  2478  0216                     	;# 
  2479  0217                     	;# 
  2480  0217                     	;# 
  2481  028C                     	;# 
  2482  028D                     	;# 
  2483  028E                     	;# 
  2484  0291                     	;# 
  2485  0291                     	;# 
  2486  0292                     	;# 
  2487  0293                     	;# 
  2488  0298                     	;# 
  2489  0298                     	;# 
  2490  0299                     	;# 
  2491  029A                     	;# 
  2492  030C                     	;# 
  2493  030D                     	;# 
  2494  030E                     	;# 
  2495  0311                     	;# 
  2496  0311                     	;# 
  2497  0312                     	;# 
  2498  0313                     	;# 
  2499  038C                     	;# 
  2500  038D                     	;# 
  2501  038E                     	;# 
  2502  0390                     	;# 
  2503  0391                     	;# 
  2504  0392                     	;# 
  2505  0393                     	;# 
  2506  0394                     	;# 
  2507  0395                     	;# 
  2508  0396                     	;# 
  2509  0397                     	;# 
  2510  0398                     	;# 
  2511  0399                     	;# 
  2512  039D                     	;# 
  2513  039E                     	;# 
  2514  039F                     	;# 
  2515  0511                     	;# 
  2516  0513                     	;# 
  2517  051A                     	;# 
  2518  0811                     	;# 
  2519  0812                     	;# 
  2520  0813                     	;# 
  2521  0814                     	;# 
  2522  0815                     	;# 
  2523  0816                     	;# 
  2524  0817                     	;# 
  2525  0818                     	;# 
  2526  0819                     	;# 
  2527  081A                     	;# 
  2528  081B                     	;# 
  2529  081C                     	;# 
  2530  081D                     	;# 
  2531  081E                     	;# 
  2532  081F                     	;# 
  2533  0820                     	;# 
  2534  0821                     	;# 
  2535  0821                     	;# 
  2536  0822                     	;# 
  2537  0823                     	;# 
  2538  0823                     	;# 
  2539  0824                     	;# 
  2540  0825                     	;# 
  2541  0825                     	;# 
  2542  0826                     	;# 
  2543  0827                     	;# 
  2544  0827                     	;# 
  2545  0828                     	;# 
  2546  0829                     	;# 
  2547  082A                     	;# 
  2548  082B                     	;# 
  2549  082C                     	;# 
  2550  082D                     	;# 
  2551  082E                     	;# 
  2552  082F                     	;# 
  2553  0831                     	;# 
  2554  0832                     	;# 
  2555  0833                     	;# 
  2556  0834                     	;# 
  2557  0835                     	;# 
  2558  0836                     	;# 
  2559  0837                     	;# 
  2560  0838                     	;# 
  2561  0839                     	;# 
  2562  083A                     	;# 
  2563  083B                     	;# 
  2564  083C                     	;# 
  2565  083D                     	;# 
  2566  083E                     	;# 
  2567  083F                     	;# 
  2568  0840                     	;# 
  2569  0841                     	;# 
  2570  0841                     	;# 
  2571  0842                     	;# 
  2572  0843                     	;# 
  2573  0843                     	;# 
  2574  0844                     	;# 
  2575  0845                     	;# 
  2576  0845                     	;# 
  2577  0846                     	;# 
  2578  0847                     	;# 
  2579  0847                     	;# 
  2580  0848                     	;# 
  2581  0849                     	;# 
  2582  084A                     	;# 
  2583  084B                     	;# 
  2584  084C                     	;# 
  2585  084D                     	;# 
  2586  084E                     	;# 
  2587  084F                     	;# 
  2588  0851                     	;# 
  2589  0852                     	;# 
  2590  0853                     	;# 
  2591  0854                     	;# 
  2592  0855                     	;# 
  2593  0856                     	;# 
  2594  0857                     	;# 
  2595  0858                     	;# 
  2596  0859                     	;# 
  2597  085A                     	;# 
  2598  085B                     	;# 
  2599  085C                     	;# 
  2600  085D                     	;# 
  2601  085E                     	;# 
  2602  085F                     	;# 
  2603  0860                     	;# 
  2604  0861                     	;# 
  2605  0861                     	;# 
  2606  0862                     	;# 
  2607  0863                     	;# 
  2608  0863                     	;# 
  2609  0864                     	;# 
  2610  0865                     	;# 
  2611  0865                     	;# 
  2612  0866                     	;# 
  2613  0867                     	;# 
  2614  0867                     	;# 
  2615  0868                     	;# 
  2616  0869                     	;# 
  2617  086A                     	;# 
  2618  086B                     	;# 
  2619  086C                     	;# 
  2620  086D                     	;# 
  2621  086E                     	;# 
  2622  086F                     	;# 
  2623  0FE4                     	;# 
  2624  0FE5                     	;# 
  2625  0FE6                     	;# 
  2626  0FE7                     	;# 
  2627  0FE8                     	;# 
  2628  0FE9                     	;# 
  2629  0FEA                     	;# 
  2630  0FEB                     	;# 
  2631  0FED                     	;# 
  2632  0FEE                     	;# 
  2633  0FEF                     	;# 
  2634  0000                     	;# 
  2635  0001                     	;# 
  2636  0002                     	;# 
  2637  0003                     	;# 
  2638  0004                     	;# 
  2639  0005                     	;# 
  2640  0006                     	;# 
  2641  0007                     	;# 
  2642  0008                     	;# 
  2643  0009                     	;# 
  2644  000A                     	;# 
  2645  000B                     	;# 
  2646  000C                     	;# 
  2647  000D                     	;# 
  2648  000E                     	;# 
  2649  0010                     	;# 
  2650  0011                     	;# 
  2651  0012                     	;# 
  2652  0013                     	;# 
  2653  0014                     	;# 
  2654  0015                     	;# 
  2655  0016                     	;# 
  2656  0016                     	;# 
  2657  0017                     	;# 
  2658  0018                     	;# 
  2659  0019                     	;# 
  2660  001A                     	;# 
  2661  001B                     	;# 
  2662  001C                     	;# 
  2663  008C                     	;# 
  2664  008D                     	;# 
  2665  008E                     	;# 
  2666  0090                     	;# 
  2667  0091                     	;# 
  2668  0092                     	;# 
  2669  0093                     	;# 
  2670  0094                     	;# 
  2671  0095                     	;# 
  2672  0096                     	;# 
  2673  0097                     	;# 
  2674  0098                     	;# 
  2675  0099                     	;# 
  2676  009A                     	;# 
  2677  009B                     	;# 
  2678  009B                     	;# 
  2679  009C                     	;# 
  2680  009D                     	;# 
  2681  009E                     	;# 
  2682  009F                     	;# 
  2683  010C                     	;# 
  2684  010D                     	;# 
  2685  010E                     	;# 
  2686  0111                     	;# 
  2687  0112                     	;# 
  2688  0113                     	;# 
  2689  0114                     	;# 
  2690  0115                     	;# 
  2691  0116                     	;# 
  2692  0117                     	;# 
  2693  0118                     	;# 
  2694  0119                     	;# 
  2695  011A                     	;# 
  2696  011B                     	;# 
  2697  011C                     	;# 
  2698  011D                     	;# 
  2699  011D                     	;# 
  2700  011D                     	;# 
  2701  011E                     	;# 
  2702  011F                     	;# 
  2703  018C                     	;# 
  2704  018D                     	;# 
  2705  0191                     	;# 
  2706  0191                     	;# 
  2707  0192                     	;# 
  2708  0193                     	;# 
  2709  0193                     	;# 
  2710  0193                     	;# 
  2711  0194                     	;# 
  2712  0195                     	;# 
  2713  0196                     	;# 
  2714  0197                     	;# 
  2715  0199                     	;# 
  2716  0199                     	;# 
  2717  0199                     	;# 
  2718  019A                     	;# 
  2719  019A                     	;# 
  2720  019A                     	;# 
  2721  019B                     	;# 
  2722  019B                     	;# 
  2723  019B                     	;# 
  2724  019B                     	;# 
  2725  019B                     	;# 
  2726  019C                     	;# 
  2727  019C                     	;# 
  2728  019C                     	;# 
  2729  019D                     	;# 
  2730  019D                     	;# 
  2731  019D                     	;# 
  2732  019E                     	;# 
  2733  019E                     	;# 
  2734  019E                     	;# 
  2735  019F                     	;# 
  2736  019F                     	;# 
  2737  019F                     	;# 
  2738  019F                     	;# 
  2739  019F                     	;# 
  2740  020C                     	;# 
  2741  020D                     	;# 
  2742  020E                     	;# 
  2743  0210                     	;# 
  2744  0211                     	;# 
  2745  0211                     	;# 
  2746  0212                     	;# 
  2747  0212                     	;# 
  2748  0213                     	;# 
  2749  0213                     	;# 
  2750  0214                     	;# 
  2751  0214                     	;# 
  2752  0215                     	;# 
  2753  0215                     	;# 
  2754  0215                     	;# 
  2755  0215                     	;# 
  2756  0216                     	;# 
  2757  0216                     	;# 
  2758  0217                     	;# 
  2759  0217                     	;# 
  2760  028C                     	;# 
  2761  028D                     	;# 
  2762  028E                     	;# 
  2763  0291                     	;# 
  2764  0291                     	;# 
  2765  0292                     	;# 
  2766  0293                     	;# 
  2767  0298                     	;# 
  2768  0298                     	;# 
  2769  0299                     	;# 
  2770  029A                     	;# 
  2771  030C                     	;# 
  2772  030D                     	;# 
  2773  030E                     	;# 
  2774  0311                     	;# 
  2775  0311                     	;# 
  2776  0312                     	;# 
  2777  0313                     	;# 
  2778  038C                     	;# 
  2779  038D                     	;# 
  2780  038E                     	;# 
  2781  0390                     	;# 
  2782  0391                     	;# 
  2783  0392                     	;# 
  2784  0393                     	;# 
  2785  0394                     	;# 
  2786  0395                     	;# 
  2787  0396                     	;# 
  2788  0397                     	;# 
  2789  0398                     	;# 
  2790  0399                     	;# 
  2791  039D                     	;# 
  2792  039E                     	;# 
  2793  039F                     	;# 
  2794  0511                     	;# 
  2795  0513                     	;# 
  2796  051A                     	;# 
  2797  0811                     	;# 
  2798  0812                     	;# 
  2799  0813                     	;# 
  2800  0814                     	;# 
  2801  0815                     	;# 
  2802  0816                     	;# 
  2803  0817                     	;# 
  2804  0818                     	;# 
  2805  0819                     	;# 
  2806  081A                     	;# 
  2807  081B                     	;# 
  2808  081C                     	;# 
  2809  081D                     	;# 
  2810  081E                     	;# 
  2811  081F                     	;# 
  2812  0820                     	;# 
  2813  0821                     	;# 
  2814  0821                     	;# 
  2815  0822                     	;# 
  2816  0823                     	;# 
  2817  0823                     	;# 
  2818  0824                     	;# 
  2819  0825                     	;# 
  2820  0825                     	;# 
  2821  0826                     	;# 
  2822  0827                     	;# 
  2823  0827                     	;# 
  2824  0828                     	;# 
  2825  0829                     	;# 
  2826  082A                     	;# 
  2827  082B                     	;# 
  2828  082C                     	;# 
  2829  082D                     	;# 
  2830  082E                     	;# 
  2831  082F                     	;# 
  2832  0831                     	;# 
  2833  0832                     	;# 
  2834  0833                     	;# 
  2835  0834                     	;# 
  2836  0835                     	;# 
  2837  0836                     	;# 
  2838  0837                     	;# 
  2839  0838                     	;# 
  2840  0839                     	;# 
  2841  083A                     	;# 
  2842  083B                     	;# 
  2843  083C                     	;# 
  2844  083D                     	;# 
  2845  083E                     	;# 
  2846  083F                     	;# 
  2847  0840                     	;# 
  2848  0841                     	;# 
  2849  0841                     	;# 
  2850  0842                     	;# 
  2851  0843                     	;# 
  2852  0843                     	;# 
  2853  0844                     	;# 
  2854  0845                     	;# 
  2855  0845                     	;# 
  2856  0846                     	;# 
  2857  0847                     	;# 
  2858  0847                     	;# 
  2859  0848                     	;# 
  2860  0849                     	;# 
  2861  084A                     	;# 
  2862  084B                     	;# 
  2863  084C                     	;# 
  2864  084D                     	;# 
  2865  084E                     	;# 
  2866  084F                     	;# 
  2867  0851                     	;# 
  2868  0852                     	;# 
  2869  0853                     	;# 
  2870  0854                     	;# 
  2871  0855                     	;# 
  2872  0856                     	;# 
  2873  0857                     	;# 
  2874  0858                     	;# 
  2875  0859                     	;# 
  2876  085A                     	;# 
  2877  085B                     	;# 
  2878  085C                     	;# 
  2879  085D                     	;# 
  2880  085E                     	;# 
  2881  085F                     	;# 
  2882  0860                     	;# 
  2883  0861                     	;# 
  2884  0861                     	;# 
  2885  0862                     	;# 
  2886  0863                     	;# 
  2887  0863                     	;# 
  2888  0864                     	;# 
  2889  0865                     	;# 
  2890  0865                     	;# 
  2891  0866                     	;# 
  2892  0867                     	;# 
  2893  0867                     	;# 
  2894  0868                     	;# 
  2895  0869                     	;# 
  2896  086A                     	;# 
  2897  086B                     	;# 
  2898  086C                     	;# 
  2899  086D                     	;# 
  2900  086E                     	;# 
  2901  086F                     	;# 
  2902  0FE4                     	;# 
  2903  0FE5                     	;# 
  2904  0FE6                     	;# 
  2905  0FE7                     	;# 
  2906  0FE8                     	;# 
  2907  0FE9                     	;# 
  2908  0FEA                     	;# 
  2909  0FEB                     	;# 
  2910  0FED                     	;# 
  2911  0FEE                     	;# 
  2912  0FEF                     	;# 
  2913  0000                     	;# 
  2914  0001                     	;# 
  2915  0002                     	;# 
  2916  0003                     	;# 
  2917  0004                     	;# 
  2918  0005                     	;# 
  2919  0006                     	;# 
  2920  0007                     	;# 
  2921  0008                     	;# 
  2922  0009                     	;# 
  2923  000A                     	;# 
  2924  000B                     	;# 
  2925  000C                     	;# 
  2926  000D                     	;# 
  2927  000E                     	;# 
  2928  0010                     	;# 
  2929  0011                     	;# 
  2930  0012                     	;# 
  2931  0013                     	;# 
  2932  0014                     	;# 
  2933  0015                     	;# 
  2934  0016                     	;# 
  2935  0016                     	;# 
  2936  0017                     	;# 
  2937  0018                     	;# 
  2938  0019                     	;# 
  2939  001A                     	;# 
  2940  001B                     	;# 
  2941  001C                     	;# 
  2942  008C                     	;# 
  2943  008D                     	;# 
  2944  008E                     	;# 
  2945  0090                     	;# 
  2946  0091                     	;# 
  2947  0092                     	;# 
  2948  0093                     	;# 
  2949  0094                     	;# 
  2950  0095                     	;# 
  2951  0096                     	;# 
  2952  0097                     	;# 
  2953  0098                     	;# 
  2954  0099                     	;# 
  2955  009A                     	;# 
  2956  009B                     	;# 
  2957  009B                     	;# 
  2958  009C                     	;# 
  2959  009D                     	;# 
  2960  009E                     	;# 
  2961  009F                     	;# 
  2962  010C                     	;# 
  2963  010D                     	;# 
  2964  010E                     	;# 
  2965  0111                     	;# 
  2966  0112                     	;# 
  2967  0113                     	;# 
  2968  0114                     	;# 
  2969  0115                     	;# 
  2970  0116                     	;# 
  2971  0117                     	;# 
  2972  0118                     	;# 
  2973  0119                     	;# 
  2974  011A                     	;# 
  2975  011B                     	;# 
  2976  011C                     	;# 
  2977  011D                     	;# 
  2978  011D                     	;# 
  2979  011D                     	;# 
  2980  011E                     	;# 
  2981  011F                     	;# 
  2982  018C                     	;# 
  2983  018D                     	;# 
  2984  0191                     	;# 
  2985  0191                     	;# 
  2986  0192                     	;# 
  2987  0193                     	;# 
  2988  0193                     	;# 
  2989  0193                     	;# 
  2990  0194                     	;# 
  2991  0195                     	;# 
  2992  0196                     	;# 
  2993  0197                     	;# 
  2994  0199                     	;# 
  2995  0199                     	;# 
  2996  0199                     	;# 
  2997  019A                     	;# 
  2998  019A                     	;# 
  2999  019A                     	;# 
  3000  019B                     	;# 
  3001  019B                     	;# 
  3002  019B                     	;# 
  3003  019B                     	;# 
  3004  019B                     	;# 
  3005  019C                     	;# 
  3006  019C                     	;# 
  3007  019C                     	;# 
  3008  019D                     	;# 
  3009  019D                     	;# 
  3010  019D                     	;# 
  3011  019E                     	;# 
  3012  019E                     	;# 
  3013  019E                     	;# 
  3014  019F                     	;# 
  3015  019F                     	;# 
  3016  019F                     	;# 
  3017  019F                     	;# 
  3018  019F                     	;# 
  3019  020C                     	;# 
  3020  020D                     	;# 
  3021  020E                     	;# 
  3022  0210                     	;# 
  3023  0211                     	;# 
  3024  0211                     	;# 
  3025  0212                     	;# 
  3026  0212                     	;# 
  3027  0213                     	;# 
  3028  0213                     	;# 
  3029  0214                     	;# 
  3030  0214                     	;# 
  3031  0215                     	;# 
  3032  0215                     	;# 
  3033  0215                     	;# 
  3034  0215                     	;# 
  3035  0216                     	;# 
  3036  0216                     	;# 
  3037  0217                     	;# 
  3038  0217                     	;# 
  3039  028C                     	;# 
  3040  028D                     	;# 
  3041  028E                     	;# 
  3042  0291                     	;# 
  3043  0291                     	;# 
  3044  0292                     	;# 
  3045  0293                     	;# 
  3046  0298                     	;# 
  3047  0298                     	;# 
  3048  0299                     	;# 
  3049  029A                     	;# 
  3050  030C                     	;# 
  3051  030D                     	;# 
  3052  030E                     	;# 
  3053  0311                     	;# 
  3054  0311                     	;# 
  3055  0312                     	;# 
  3056  0313                     	;# 
  3057  038C                     	;# 
  3058  038D                     	;# 
  3059  038E                     	;# 
  3060  0390                     	;# 
  3061  0391                     	;# 
  3062  0392                     	;# 
  3063  0393                     	;# 
  3064  0394                     	;# 
  3065  0395                     	;# 
  3066  0396                     	;# 
  3067  0397                     	;# 
  3068  0398                     	;# 
  3069  0399                     	;# 
  3070  039D                     	;# 
  3071  039E                     	;# 
  3072  039F                     	;# 
  3073  0511                     	;# 
  3074  0513                     	;# 
  3075  051A                     	;# 
  3076  0811                     	;# 
  3077  0812                     	;# 
  3078  0813                     	;# 
  3079  0814                     	;# 
  3080  0815                     	;# 
  3081  0816                     	;# 
  3082  0817                     	;# 
  3083  0818                     	;# 
  3084  0819                     	;# 
  3085  081A                     	;# 
  3086  081B                     	;# 
  3087  081C                     	;# 
  3088  081D                     	;# 
  3089  081E                     	;# 
  3090  081F                     	;# 
  3091  0820                     	;# 
  3092  0821                     	;# 
  3093  0821                     	;# 
  3094  0822                     	;# 
  3095  0823                     	;# 
  3096  0823                     	;# 
  3097  0824                     	;# 
  3098  0825                     	;# 
  3099  0825                     	;# 
  3100  0826                     	;# 
  3101  0827                     	;# 
  3102  0827                     	;# 
  3103  0828                     	;# 
  3104  0829                     	;# 
  3105  082A                     	;# 
  3106  082B                     	;# 
  3107  082C                     	;# 
  3108  082D                     	;# 
  3109  082E                     	;# 
  3110  082F                     	;# 
  3111  0831                     	;# 
  3112  0832                     	;# 
  3113  0833                     	;# 
  3114  0834                     	;# 
  3115  0835                     	;# 
  3116  0836                     	;# 
  3117  0837                     	;# 
  3118  0838                     	;# 
  3119  0839                     	;# 
  3120  083A                     	;# 
  3121  083B                     	;# 
  3122  083C                     	;# 
  3123  083D                     	;# 
  3124  083E                     	;# 
  3125  083F                     	;# 
  3126  0840                     	;# 
  3127  0841                     	;# 
  3128  0841                     	;# 
  3129  0842                     	;# 
  3130  0843                     	;# 
  3131  0843                     	;# 
  3132  0844                     	;# 
  3133  0845                     	;# 
  3134  0845                     	;# 
  3135  0846                     	;# 
  3136  0847                     	;# 
  3137  0847                     	;# 
  3138  0848                     	;# 
  3139  0849                     	;# 
  3140  084A                     	;# 
  3141  084B                     	;# 
  3142  084C                     	;# 
  3143  084D                     	;# 
  3144  084E                     	;# 
  3145  084F                     	;# 
  3146  0851                     	;# 
  3147  0852                     	;# 
  3148  0853                     	;# 
  3149  0854                     	;# 
  3150  0855                     	;# 
  3151  0856                     	;# 
  3152  0857                     	;# 
  3153  0858                     	;# 
  3154  0859                     	;# 
  3155  085A                     	;# 
  3156  085B                     	;# 
  3157  085C                     	;# 
  3158  085D                     	;# 
  3159  085E                     	;# 
  3160  085F                     	;# 
  3161  0860                     	;# 
  3162  0861                     	;# 
  3163  0861                     	;# 
  3164  0862                     	;# 
  3165  0863                     	;# 
  3166  0863                     	;# 
  3167  0864                     	;# 
  3168  0865                     	;# 
  3169  0865                     	;# 
  3170  0866                     	;# 
  3171  0867                     	;# 
  3172  0867                     	;# 
  3173  0868                     	;# 
  3174  0869                     	;# 
  3175  086A                     	;# 
  3176  086B                     	;# 
  3177  086C                     	;# 
  3178  086D                     	;# 
  3179  086E                     	;# 
  3180  086F                     	;# 
  3181  0FE4                     	;# 
  3182  0FE5                     	;# 
  3183  0FE6                     	;# 
  3184  0FE7                     	;# 
  3185  0FE8                     	;# 
  3186  0FE9                     	;# 
  3187  0FEA                     	;# 
  3188  0FEB                     	;# 
  3189  0FED                     	;# 
  3190  0FEE                     	;# 
  3191  0FEF                     	;# 
  3192                           
  3193                           	psect	idataBANK3
  3194  084D                     __pidataBANK3:	
  3195                           
  3196                           ;initializer for stoa@F1139
  3197  084D  3428               	retlw	40
  3198  084E  346E               	retlw	110
  3199  084F  3475               	retlw	117
  3200  0850  346C               	retlw	108
  3201  0851  346C               	retlw	108
  3202  0852  3429               	retlw	41
  3203  0853  3400               	retlw	0
  3204                           
  3205                           	psect	stringtext1
  3206  1000                     __pstringtext1:	
  3207  1000                     _segmcode:	
  3208  1000  3408               	retlw	8
  3209  1001  347C               	retlw	124
  3210  1002  3411               	retlw	17
  3211  1003  3430               	retlw	48
  3212  1004  3464               	retlw	100
  3213  1005  3422               	retlw	34
  3214  1006  3402               	retlw	2
  3215  1007  3478               	retlw	120
  3216  1008  3400               	retlw	0
  3217  1009  3420               	retlw	32
  3218  100A  34FF               	retlw	255
  3219  100B                     __end_of_segmcode:	
  3220  000C                     _PORTAbits	set	12
  3221  0012                     _PIR2bits	set	18
  3222  0015                     _TMR0	set	21
  3223  0018                     _T1CONbits	set	24
  3224  0016                     _TMR1L	set	22
  3225  0017                     _TMR1H	set	23
  3226  0011                     _PIR1bits	set	17
  3227  000E                     _PORTCbits	set	14
  3228  000B                     _INTCONbits	set	11
  3229  005E                     _PEIE	set	94
  3230  005F                     _GIE	set	95
  3231  0074                     _RC4	set	116
  3232  0092                     _PIE2bits	set	146
  3233  0091                     _PIE1bits	set	145
  3234  008E                     _TRISCbits	set	142
  3235  008E                     _TRISC	set	142
  3236  008D                     _TRISB	set	141
  3237  008C                     _TRISA	set	140
  3238  0095                     _OPTION_REGbits	set	149
  3239  0099                     _OSCCONbits	set	153
  3240  048D                     _RCIE	set	1165
  3241  0473                     _TRISC3	set	1139
  3242  0474                     _TRISC4	set	1140
  3243  048C                     _TXIE	set	1164
  3244  010D                     _LATBbits	set	269
  3245  010E                     _LATC	set	270
  3246  010D                     _LATB	set	269
  3247  010C                     _LATA	set	268
  3248  08E9                     _RXSEL	set	2281
  3249  08EA                     _TXSEL	set	2282
  3250  0874                     _LATC4	set	2164
  3251  0873                     _LATC3	set	2163
  3252  0199                     _RCREG	set	409
  3253  019B                     _SPBRGL	set	411
  3254  019C                     _SPBRGH	set	412
  3255  019A                     _TXREG	set	410
  3256  019E                     _TXSTAbits	set	414
  3257  0CEC                     _CREN	set	3308
  3258  0CFB                     _BRG16	set	3323
  3259  0CF2                     _BRGH	set	3314
  3260  0CEF                     _SPEN	set	3311
  3261  0CF4                     _SYNC	set	3316
  3262  0CF5                     _TXEN	set	3317
  3263  020E                     _WPUCbits	set	526
  3264  020E                     _WPUC	set	526
  3265  020D                     _WPUB	set	525
  3266  020C                     _WPUA	set	524
  3267  1073                     _WPUC3	set	4211
  3268  1074                     _WPUC4	set	4212
  3269  029A                     _CCP2CONbits	set	666
  3270  0298                     _CCPR2L	set	664
  3271  0299                     _CCPR2H	set	665
  3272  1474                     _ODCONC4	set	5236
  3273  1473                     _ODCONC3	set	5235
  3274  0399                     _IOCCFbits	set	921
  3275  0397                     _IOCCPbits	set	919
  3276  0398                     _IOCCN	set	920
  3277  0397                     _IOCCP	set	919
  3278  0395                     _IOCBN	set	917
  3279  0394                     _IOCBP	set	916
  3280  0392                     _IOCAN	set	914
  3281  0391                     _IOCAP	set	913
  3282  100B                     STR_1:	
  3283  100B  345B               	retlw	91	;'['
  3284  100C  3425               	retlw	37	;'%'
  3285  100D  3473               	retlw	115	;'s'
  3286  100E  343A               	retlw	58	;':'
  3287  100F  3425               	retlw	37	;'%'
  3288  1010  3464               	retlw	100	;'d'
  3289  1011  3420               	retlw	32	;' '
  3290  1012  3425               	retlw	37	;'%'
  3291  1013  3473               	retlw	115	;'s'
  3292  1014  345D               	retlw	93	;']'
  3293  1015  3420               	retlw	32	;' '
  3294  1016  3450               	retlw	80	;'P'
  3295  1017  344B               	retlw	75	;'K'
  3296  1018  3445               	retlw	69	;'E'
  3297  1019  3459               	retlw	89	;'Y'
  3298  101A  340D               	retlw	13
  3299  101B  340A               	retlw	10
  3300  101C  340A               	retlw	10
  3301  101D  340D               	retlw	13
  3302  101E  3400               	retlw	0
  3303                           
  3304                           	psect	stringtext2
  3305  101F                     __pstringtext2:	
  3306  101F                     STR_2:	
  3307  101F  346D               	retlw	109	;'m'
  3308  1020  3461               	retlw	97	;'a'
  3309  1021  3469               	retlw	105	;'i'
  3310  1022  346E               	retlw	110	;'n'
  3311  1023  342E               	retlw	46	;'.'
  3312  1024  3463               	retlw	99	;'c'
  3313  1025  3400               	retlw	0
  3314                           
  3315                           	psect	stringtext3
  3316  1026                     __pstringtext3:	
  3317  1026                     STR_3:	
  3318  1026  3449               	retlw	73	;'I'
  3319  1027  3453               	retlw	83	;'S'
  3320  1028  3452               	retlw	82	;'R'
  3321  1029  3400               	retlw	0
  3322                           
  3323                           	psect	stringtext4
  3324  0000                     __pstringtext4:	
  3325                           
  3326                           ; #config settings
  3327  0000                     
  3328                           	psect	cinit
  3329  00A8                     start_initialization:	
  3330  00A8                     __initialization:	
  3331                           
  3332                           ; Initialize objects allocated to BANK3
  3333  00A8  304D               	movlw	low __pidataBANK3
  3334  00A9  0084               	movwf	4
  3335  00AA  3088               	movlw	(high __pidataBANK3)| (0+128)
  3336  00AB  0085               	movwf	5
  3337  00AC  30E6               	movlw	low __pdataBANK3
  3338  00AD  0086               	movwf	6
  3339  00AE  3001               	movlw	high __pdataBANK3
  3340  00AF  0087               	movwf	7
  3341  00B0  3007               	movlw	7
  3342  00B1  3188  2047  3180   	fcall	init_ram
  3343                           
  3344                           ; Clear objects allocated to BANK1
  3345  00B4  0021               	movlb	1	; select bank1
  3346  00B5  01ED               	clrf	__pbssBANK1& (0+127)
  3347  00B6  01EE               	clrf	(__pbssBANK1+1)& (0+127)
  3348  00B7  01EF               	clrf	(__pbssBANK1+2)& (0+127)
  3349                           
  3350                           ; Clear objects allocated to BANK2
  3351  00B8  3060               	movlw	low __pbssBANK2
  3352  00B9  0084               	movwf	4
  3353  00BA  3001               	movlw	high __pbssBANK2
  3354  00BB  0085               	movwf	5
  3355  00BC  300F               	movlw	15
  3356  00BD  3188  2041  3180   	fcall	clear_ram0
  3357                           
  3358                           ; Clear objects allocated to BANK3
  3359  00C0  30A0               	movlw	low __pbssBANK3
  3360  00C1  0084               	movwf	4
  3361  00C2  3001               	movlw	high __pbssBANK3
  3362  00C3  0085               	movwf	5
  3363  00C4  3028               	movlw	40
  3364  00C5  3188  2041  3180   	fcall	clear_ram0
  3365                           
  3366                           ; Clear objects allocated to BANK4
  3367  00C8  3020               	movlw	low __pbssBANK4
  3368  00C9  0084               	movwf	4
  3369  00CA  3002               	movlw	high __pbssBANK4
  3370  00CB  0085               	movwf	5
  3371  00CC  3027               	movlw	39
  3372  00CD  3188  2041  3180   	fcall	clear_ram0
  3373                           
  3374                           ; Clear objects allocated to BANK5
  3375  00D0  30A0               	movlw	low __pbssBANK5
  3376  00D1  0084               	movwf	4
  3377  00D2  3002               	movlw	high __pbssBANK5
  3378  00D3  0085               	movwf	5
  3379  00D4  3040               	movlw	64
  3380  00D5  3188  2041  3180   	fcall	clear_ram0
  3381                           
  3382                           ; Clear objects allocated to BANK6
  3383  00D8  3020               	movlw	low __pbssBANK6
  3384  00D9  0084               	movwf	4
  3385  00DA  3003               	movlw	high __pbssBANK6
  3386  00DB  0085               	movwf	5
  3387  00DC  3040               	movlw	64
  3388  00DD  3188  2041         	fcall	clear_ram0
  3389  00DF                     end_of_initialization:	
  3390                           ;End of C runtime variable initialization code
  3391                           
  3392  00DF                     __end_of__initialization:	
  3393  00DF  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  3394  00E0  0020               	movlb	0
  3395  00E1  3189  299C         	ljmp	_main	;jump to C main() function
  3396                           
  3397                           	psect	bssBANK1
  3398  00ED                     __pbssBANK1:	
  3399  00ED                     _flags:	
  3400  00ED                     	ds	2
  3401  00EF                     tmp_change@history_key:	
  3402  00EF                     	ds	1
  3403                           
  3404                           	psect	bssBANK2
  3405  0160                     __pbssBANK2:	
  3406  0160                     _width:	
  3407  0160                     	ds	2
  3408  0162                     _prec:	
  3409  0162                     	ds	2
  3410  0164                     capture_handdle@last_cnt:	
  3411  0164                     	ds	2
  3412  0166                     led_Blink@State:	
  3413  0166                     	ds	1
  3414  0167                     _flg_rc:	
  3415  0167                     	ds	1
  3416  0168                     _TX_en:	
  3417  0168                     	ds	1
  3418  0169                     _RX_data:	
  3419  0169                     	ds	1
  3420  016A                     _TX_data:	
  3421  016A                     	ds	1
  3422  016B                     _temp_l:	
  3423  016B                     	ds	1
  3424  016C                     _temp_h:	
  3425  016C                     	ds	1
  3426  016D                     main@cnt:	
  3427  016D                     	ds	1
  3428  016E                     _ENUM:	
  3429  016E                     	ds	1
  3430                           
  3431                           	psect	bssBANK3
  3432  01A0                     __pbssBANK3:	
  3433  01A0                     _nout:	
  3434  01A0                     	ds	2
  3435  01A2                     _Temp:	
  3436  01A2                     	ds	2
  3437  01A4                     main@i:	
  3438  01A4                     	ds	2
  3439  01A6                     tmp_change@key_time_cnt:	
  3440  01A6                     	ds	2
  3441  01A8                     _dbuf:	
  3442  01A8                     	ds	32
  3443                           
  3444                           	psect	dataBANK3
  3445  01E6                     __pdataBANK3:	
  3446  01E6                     stoa@F1139:	
  3447  01E6                     	ds	7
  3448                           
  3449                           	psect	bssBANK4
  3450  0220                     __pbssBANK4:	
  3451  0220                     _g_data:	
  3452  0220                     	ds	39
  3453                           
  3454                           	psect	bssBANK5
  3455  02A0                     __pbssBANK5:	
  3456  02A0                     ISR@F5517:	
  3457  02A0                     	ds	64
  3458                           
  3459                           	psect	bssBANK6
  3460  0320                     __pbssBANK6:	
  3461  0320                     ISR@F5520:	
  3462  0320                     	ds	64
  3463                           
  3464                           	psect	inittext
  3465  0847                     init_ram:	
  3466  0847  00FE               	movwf	126
  3467  0848                     initloop:	
  3468  0848  0012               	moviw fsr0++
  3469  0849  001E               	movwi fsr1++
  3470  084A  0BFE               	decfsz	126,f
  3471  084B  2848               	goto	initloop
  3472  084C  3400               	retlw	0
  3473                           
  3474                           	psect	clrtext
  3475  0841                     clear_ram0:	
  3476                           ;	Called with FSR0 containing the base address, and
  3477                           ;	WREG with the size to clear
  3478                           
  3479  0841  0064               	clrwdt	;clear the watchdog before getting into this loop
  3480  0842                     clrloop0:	
  3481  0842  0180               	clrf	0	;clear RAM location pointed to by FSR
  3482  0843  3101               	addfsr 0,1
  3483  0844  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  3484  0845  2842               	goto	clrloop0	;have we reached the end yet?
  3485  0846  3400               	retlw	0	;all done for this memory range, return
  3486                           
  3487                           	psect	cstackBANK3
  3488  01C8                     __pcstackBANK3:	
  3489  01C8                     ??_data_getdata:	
  3490  01C8                     ??_display_set:	
  3491                           ; 1 bytes @ 0x0
  3492                           
  3493  01C8                     ??_timer_Timer0Start:	
  3494                           ; 1 bytes @ 0x0
  3495                           
  3496  01C8                     ??_timer_Timer0Reset:	
  3497                           ; 1 bytes @ 0x0
  3498                           
  3499  01C8                     ??_capture_Set:	
  3500                           ; 1 bytes @ 0x0
  3501                           
  3502  01C8                     ??_timer_Timer0Init:	
  3503                           ; 1 bytes @ 0x0
  3504                           
  3505  01C8                     ??_timer_Timer1Init:	
  3506                           ; 1 bytes @ 0x0
  3507                           
  3508  01C8                     ??_timer_Timer1Start:	
  3509                           ; 1 bytes @ 0x0
  3510                           
  3511  01C8                     ??_uart_init:	
  3512                           ; 1 bytes @ 0x0
  3513                           
  3514  01C8                     ??_led_SetState:	
  3515                           ; 1 bytes @ 0x0
  3516                           
  3517  01C8                     ??_capture_setEdge:	
  3518                           ; 1 bytes @ 0x0
  3519                           
  3520  01C8                     ??_display_control595_delay:	
  3521                           ; 1 bytes @ 0x0
  3522                           
  3523  01C8                     ?___awdiv:	
  3524                           ; 1 bytes @ 0x0
  3525                           
  3526  01C8                     ?___awmod:	
  3527                           ; 2 bytes @ 0x0
  3528                           
  3529  01C8                     capture_setEdge@edge:	
  3530                           ; 2 bytes @ 0x0
  3531                           
  3532  01C8                     capture_Set@isON:	
  3533                           ; 1 bytes @ 0x0
  3534                           
  3535  01C8                     led_SetState@isOn:	
  3536                           ; 1 bytes @ 0x0
  3537                           
  3538  01C8                     display_set@ison:	
  3539                           ; 1 bytes @ 0x0
  3540                           
  3541  01C8                     ___awdiv@divisor:	
  3542                           ; 1 bytes @ 0x0
  3543                           
  3544  01C8                     ___awmod@divisor:	
  3545                           ; 2 bytes @ 0x0
  3546                           
  3547                           
  3548                           ; 2 bytes @ 0x0
  3549  01C8                     	ds	1
  3550  01C9                     ??_capture_init:	
  3551  01C9                     display_control595_delay@times:	
  3552                           ; 1 bytes @ 0x1
  3553                           
  3554                           
  3555                           ; 1 bytes @ 0x1
  3556  01C9                     	ds	1
  3557  01CA                     ??_display_write_byte:	
  3558  01CA                     ___awdiv@dividend:	
  3559                           ; 1 bytes @ 0x2
  3560                           
  3561  01CA                     ___awmod@dividend:	
  3562                           ; 2 bytes @ 0x2
  3563                           
  3564                           
  3565                           ; 2 bytes @ 0x2
  3566  01CA                     	ds	2
  3567  01CC                     ??___awdiv:	
  3568  01CC                     ??___awmod:	
  3569                           ; 1 bytes @ 0x4
  3570                           
  3571  01CC                     display_write_byte@data:	
  3572                           ; 1 bytes @ 0x4
  3573                           
  3574                           
  3575                           ; 1 bytes @ 0x4
  3576  01CC                     	ds	1
  3577  01CD                     display_write_byte@i:	
  3578  01CD                     ___awdiv@counter:	
  3579                           ; 1 bytes @ 0x5
  3580                           
  3581  01CD                     ___awmod@counter:	
  3582                           ; 1 bytes @ 0x5
  3583                           
  3584                           
  3585                           ; 1 bytes @ 0x5
  3586  01CD                     	ds	1
  3587  01CE                     ___awdiv@sign:	
  3588  01CE                     ___awmod@sign:	
  3589                           ; 1 bytes @ 0x6
  3590                           
  3591                           
  3592                           ; 1 bytes @ 0x6
  3593  01CE                     	ds	1
  3594  01CF                     ___awdiv@quotient:	
  3595                           
  3596                           ; 2 bytes @ 0x7
  3597  01CF                     	ds	2
  3598  01D1                     ?_display_write_once:	
  3599  01D1                     display_write_once@HR:	
  3600                           ; 1 bytes @ 0x9
  3601                           
  3602                           
  3603                           ; 1 bytes @ 0x9
  3604  01D1                     	ds	1
  3605  01D2                     display_write_once@ML:	
  3606                           
  3607                           ; 1 bytes @ 0xA
  3608  01D2                     	ds	1
  3609  01D3                     display_write_once@MR:	
  3610                           
  3611                           ; 1 bytes @ 0xB
  3612  01D3                     	ds	1
  3613  01D4                     ??_display_write_once:	
  3614  01D4                     display_write_once@HL:	
  3615                           ; 1 bytes @ 0xC
  3616                           
  3617                           
  3618                           ; 1 bytes @ 0xC
  3619  01D4                     	ds	1
  3620  01D5                     ??_display_update:	
  3621                           
  3622                           ; 1 bytes @ 0xD
  3623  01D5                     	ds	9
  3624  01DE                     _display_update$1525:	
  3625                           
  3626                           ; 2 bytes @ 0x16
  3627  01DE                     	ds	2
  3628  01E0                     display_update@pdata:	
  3629                           
  3630                           ; 1 bytes @ 0x18
  3631  01E0                     	ds	1
  3632  01E1                     ??_init_env:	
  3633                           
  3634                           ; 1 bytes @ 0x19
  3635  01E1                     	ds	2
  3636  01E3                     init_env@i:	
  3637                           
  3638                           ; 2 bytes @ 0x1B
  3639  01E3                     	ds	2
  3640  01E5                     init_env@pdata:	
  3641                           
  3642                           ; 1 bytes @ 0x1D
  3643  01E5                     	ds	1
  3644  01E6                     ??_main:	
  3645                           
  3646                           	psect	cstackBANK2
  3647  0120                     __pcstackBANK2:	
  3648                           ; 1 bytes @ 0x1E
  3649                           
  3650  0120                     ISR@send:	
  3651                           
  3652                           ; 64 bytes @ 0x0
  3653  0120                     	ds	64
  3654                           
  3655                           	psect	cstackBANK1
  3656  00A0                     __pcstackBANK1:	
  3657  00A0                     	ds	2
  3658  00A2                     sprintf@ap:	
  3659                           
  3660                           ; 1 bytes @ 0x2
  3661  00A2                     	ds	1
  3662  00A3                     sprintf@s:	
  3663                           
  3664                           ; 1 bytes @ 0x3
  3665  00A3                     	ds	1
  3666  00A4                     sprintf@f:	
  3667                           
  3668                           ; 5 bytes @ 0x4
  3669  00A4                     	ds	5
  3670  00A9                     ??_ISR:	
  3671                           
  3672                           ; 1 bytes @ 0x9
  3673  00A9                     	ds	2
  3674  00AB                     ISR@buf:	
  3675                           
  3676                           ; 64 bytes @ 0xB
  3677  00AB                     	ds	64
  3678  00EB                     ISR@b:	
  3679                           
  3680                           ; 1 bytes @ 0x4B
  3681  00EB                     	ds	1
  3682  00EC                     ISR@i:	
  3683                           
  3684                           ; 1 bytes @ 0x4C
  3685  00EC                     	ds	1
  3686                           
  3687                           	psect	cstackCOMMON
  3688  0070                     __pcstackCOMMON:	
  3689  0070                     ?_data_getdata:	
  3690  0070                     ?_display_update:	
  3691                           ; 1 bytes @ 0x0
  3692                           
  3693  0070                     ?_display_set:	
  3694                           ; 1 bytes @ 0x0
  3695                           
  3696  0070                     ?_timer_Timer0Start:	
  3697                           ; 1 bytes @ 0x0
  3698                           
  3699  0070                     ?_timer_Timer0Reset:	
  3700                           ; 1 bytes @ 0x0
  3701                           
  3702  0070                     ?_timer_IsTimer1Itrpt:	
  3703                           ; 1 bytes @ 0x0
  3704                           
  3705  0070                     ??_timer_IsTimer1Itrpt:	
  3706                           ; 1 bytes @ 0x0
  3707                           
  3708  0070                     ?_timer_Timer1ClrIntrpt:	
  3709                           ; 1 bytes @ 0x0
  3710                           
  3711  0070                     ??_timer_Timer1ClrIntrpt:	
  3712                           ; 1 bytes @ 0x0
  3713                           
  3714  0070                     ?_timer_IsTimer0Itrpt:	
  3715                           ; 1 bytes @ 0x0
  3716                           
  3717  0070                     ??_timer_IsTimer0Itrpt:	
  3718                           ; 1 bytes @ 0x0
  3719                           
  3720  0070                     ?_key_isPressed:	
  3721                           ; 1 bytes @ 0x0
  3722                           
  3723  0070                     ??_key_isPressed:	
  3724                           ; 1 bytes @ 0x0
  3725                           
  3726  0070                     ?_strcpy:	
  3727                           ; 1 bytes @ 0x0
  3728                           
  3729  0070                     ?_capture_Set:	
  3730                           ; 1 bytes @ 0x0
  3731                           
  3732  0070                     ?_capture_IsEnable:	
  3733                           ; 1 bytes @ 0x0
  3734                           
  3735  0070                     ??_capture_IsEnable:	
  3736                           ; 1 bytes @ 0x0
  3737                           
  3738  0070                     ?_capture_IsIntrpt:	
  3739                           ; 1 bytes @ 0x0
  3740                           
  3741  0070                     ??_capture_IsIntrpt:	
  3742                           ; 1 bytes @ 0x0
  3743                           
  3744  0070                     ?_capture_clrIntrpt:	
  3745                           ; 1 bytes @ 0x0
  3746                           
  3747  0070                     ??_capture_clrIntrpt:	
  3748                           ; 1 bytes @ 0x0
  3749                           
  3750  0070                     ?_timer_Timer0Init:	
  3751                           ; 1 bytes @ 0x0
  3752                           
  3753  0070                     ?_timer_Timer1Init:	
  3754                           ; 1 bytes @ 0x0
  3755                           
  3756  0070                     ?_timer_Timer1Start:	
  3757                           ; 1 bytes @ 0x0
  3758                           
  3759  0070                     ?_capture_init:	
  3760                           ; 1 bytes @ 0x0
  3761                           
  3762  0070                     ?_uart_init:	
  3763                           ; 1 bytes @ 0x0
  3764                           
  3765  0070                     ?_led_SetState:	
  3766                           ; 1 bytes @ 0x0
  3767                           
  3768  0070                     ?_key_checkPressed:	
  3769                           ; 1 bytes @ 0x0
  3770                           
  3771  0070                     ?_update_time:	
  3772                           ; 1 bytes @ 0x0
  3773                           
  3774  0070                     ?_capture_IsNegEdge:	
  3775                           ; 1 bytes @ 0x0
  3776                           
  3777  0070                     ??_capture_IsNegEdge:	
  3778                           ; 1 bytes @ 0x0
  3779                           
  3780  0070                     ?_putch:	
  3781                           ; 1 bytes @ 0x0
  3782                           
  3783  0070                     ??_putch:	
  3784                           ; 1 bytes @ 0x0
  3785                           
  3786  0070                     ?_init_env:	
  3787                           ; 1 bytes @ 0x0
  3788                           
  3789  0070                     ?_ISR:	
  3790                           ; 1 bytes @ 0x0
  3791                           
  3792  0070                     ?_main:	
  3793                           ; 1 bytes @ 0x0
  3794                           
  3795  0070                     ?_bpc_Cnt2Qua:	
  3796                           ; 1 bytes @ 0x0
  3797                           
  3798  0070                     ?_led_Blink:	
  3799                           ; 1 bytes @ 0x0
  3800                           
  3801  0070                     ?_display_control595_delay:	
  3802                           ; 1 bytes @ 0x0
  3803                           
  3804  0070                     ?_display_write_byte:	
  3805                           ; 1 bytes @ 0x0
  3806                           
  3807  0070                     ??___aodiv:	
  3808                           ; 1 bytes @ 0x0
  3809                           
  3810  0070                     ??___aomod:	
  3811                           ; 1 bytes @ 0x0
  3812                           
  3813  0070                     ?i1_timer_Timer0Reset:	
  3814                           ; 1 bytes @ 0x0
  3815                           
  3816  0070                     ??i1_timer_Timer0Reset:	
  3817                           ; 1 bytes @ 0x0
  3818                           
  3819  0070                     ?i1_data_getdata:	
  3820                           ; 1 bytes @ 0x0
  3821                           
  3822  0070                     ??i1_data_getdata:	
  3823                           ; 1 bytes @ 0x0
  3824                           
  3825  0070                     ??i1_capture_setEdge:	
  3826                           ; 1 bytes @ 0x0
  3827                           
  3828  0070                     ?i1_capture_Set:	
  3829                           ; 1 bytes @ 0x0
  3830                           
  3831  0070                     ??i1_capture_Set:	
  3832                           ; 1 bytes @ 0x0
  3833                           
  3834  0070                     ?i1_led_SetState:	
  3835                           ; 1 bytes @ 0x0
  3836                           
  3837  0070                     ??i1_led_SetState:	
  3838                           ; 1 bytes @ 0x0
  3839                           
  3840  0070                     ?i1_display_control595_delay:	
  3841                           ; 1 bytes @ 0x0
  3842                           
  3843  0070                     ??i1_display_control595_delay:	
  3844                           ; 1 bytes @ 0x0
  3845                           
  3846  0070                     ?i1_display_write_byte:	
  3847                           ; 1 bytes @ 0x0
  3848                           
  3849  0070                     ?i1_display_update:	
  3850                           ; 1 bytes @ 0x0
  3851                           
  3852  0070                     ?_timer_Timer0Handdle:	
  3853                           ; 1 bytes @ 0x0
  3854                           
  3855  0070                     ?_strlen:	
  3856                           ; 2 bytes @ 0x0
  3857                           
  3858  0070                     ?_capture_handdle:	
  3859                           ; 2 bytes @ 0x0
  3860                           
  3861  0070                     ?_bpc_proc:	
  3862                           ; 2 bytes @ 0x0
  3863                           
  3864  0070                     ?_fputc:	
  3865                           ; 2 bytes @ 0x0
  3866                           
  3867  0070                     ?_cnt_abs:	
  3868                           ; 2 bytes @ 0x0
  3869                           
  3870  0070                     ?_check_err:	
  3871                           ; 2 bytes @ 0x0
  3872                           
  3873  0070                     ?_capture_setEdge:	
  3874                           ; 2 bytes @ 0x0
  3875                           
  3876  0070                     ?i1_capture_setEdge:	
  3877                           ; 2 bytes @ 0x0
  3878                           
  3879  0070                     ?i1___awdiv:	
  3880                           ; 2 bytes @ 0x0
  3881                           
  3882  0070                     ?i1___awmod:	
  3883                           ; 2 bytes @ 0x0
  3884                           
  3885  0070                     putch@c:	
  3886                           ; 2 bytes @ 0x0
  3887                           
  3888  0070                     strcpy@src:	
  3889                           ; 1 bytes @ 0x0
  3890                           
  3891  0070                     i1capture_setEdge@edge:	
  3892                           ; 1 bytes @ 0x0
  3893                           
  3894  0070                     i1capture_Set@isON:	
  3895                           ; 1 bytes @ 0x0
  3896                           
  3897  0070                     i1led_SetState@isOn:	
  3898                           ; 1 bytes @ 0x0
  3899                           
  3900  0070                     cnt_abs@a:	
  3901                           ; 1 bytes @ 0x0
  3902                           
  3903  0070                     fputc@c:	
  3904                           ; 2 bytes @ 0x0
  3905                           
  3906  0070                     strlen@s:	
  3907                           ; 2 bytes @ 0x0
  3908                           
  3909  0070                     i1___awdiv@divisor:	
  3910                           ; 2 bytes @ 0x0
  3911                           
  3912  0070                     i1___awmod@divisor:	
  3913                           ; 2 bytes @ 0x0
  3914                           
  3915                           
  3916                           ; 2 bytes @ 0x0
  3917  0070                     	ds	1
  3918  0071                     ??_strcpy:	
  3919  0071                     ??_capture_handdle:	
  3920                           ; 1 bytes @ 0x1
  3921                           
  3922  0071                     ??_led_Blink:	
  3923                           ; 1 bytes @ 0x1
  3924                           
  3925  0071                     key_isPressed@pdata:	
  3926                           ; 1 bytes @ 0x1
  3927                           
  3928  0071                     ___aodiv@counter:	
  3929                           ; 1 bytes @ 0x1
  3930                           
  3931  0071                     ___aomod@counter:	
  3932                           ; 1 bytes @ 0x1
  3933                           
  3934  0071                     i1display_control595_delay@times:	
  3935                           ; 1 bytes @ 0x1
  3936                           
  3937                           
  3938                           ; 1 bytes @ 0x1
  3939  0071                     	ds	1
  3940  0072                     ??_strlen:	
  3941  0072                     ??_key_checkPressed:	
  3942                           ; 1 bytes @ 0x2
  3943                           
  3944  0072                     ??_check_err:	
  3945                           ; 1 bytes @ 0x2
  3946                           
  3947  0072                     ??i1_display_write_byte:	
  3948                           ; 1 bytes @ 0x2
  3949                           
  3950  0072                     ___aodiv@sign:	
  3951                           ; 1 bytes @ 0x2
  3952                           
  3953  0072                     ___aomod@sign:	
  3954                           ; 1 bytes @ 0x2
  3955                           
  3956  0072                     fputc@fp:	
  3957                           ; 1 bytes @ 0x2
  3958                           
  3959  0072                     strcpy@s:	
  3960                           ; 1 bytes @ 0x2
  3961                           
  3962  0072                     cnt_abs@b:	
  3963                           ; 1 bytes @ 0x2
  3964                           
  3965  0072                     i1___awdiv@dividend:	
  3966                           ; 2 bytes @ 0x2
  3967                           
  3968  0072                     i1___awmod@dividend:	
  3969                           ; 2 bytes @ 0x2
  3970                           
  3971                           
  3972                           ; 2 bytes @ 0x2
  3973  0072                     	ds	1
  3974  0073                     ??_fputc:	
  3975  0073                     ?_abs:	
  3976                           ; 1 bytes @ 0x3
  3977                           
  3978  0073                     key_checkPressed@pdata:	
  3979                           ; 2 bytes @ 0x3
  3980                           
  3981  0073                     strcpy@d:	
  3982                           ; 1 bytes @ 0x3
  3983                           
  3984  0073                     abs@a:	
  3985                           ; 1 bytes @ 0x3
  3986                           
  3987  0073                     strlen@a:	
  3988                           ; 2 bytes @ 0x3
  3989                           
  3990  0073                     ___aodiv@quotient:	
  3991                           ; 2 bytes @ 0x3
  3992                           
  3993                           
  3994                           ; 8 bytes @ 0x3
  3995  0073                     	ds	1
  3996  0074                     ??_cnt_abs:	
  3997  0074                     ??_bpc_Cnt2Qua:	
  3998                           ; 1 bytes @ 0x4
  3999                           
  4000  0074                     ??i1___awdiv:	
  4001                           ; 1 bytes @ 0x4
  4002                           
  4003  0074                     ??i1___awmod:	
  4004                           ; 1 bytes @ 0x4
  4005                           
  4006  0074                     strcpy@dest:	
  4007                           ; 1 bytes @ 0x4
  4008                           
  4009  0074                     i1display_write_byte@data:	
  4010                           ; 1 bytes @ 0x4
  4011                           
  4012                           
  4013                           ; 1 bytes @ 0x4
  4014  0074                     	ds	1
  4015  0075                     ??_abs:	
  4016  0075                     i1display_write_byte@i:	
  4017                           ; 1 bytes @ 0x5
  4018                           
  4019  0075                     i1___awdiv@counter:	
  4020                           ; 1 bytes @ 0x5
  4021                           
  4022  0075                     i1___awmod@counter:	
  4023                           ; 1 bytes @ 0x5
  4024                           
  4025                           
  4026                           ; 1 bytes @ 0x5
  4027  0075                     	ds	1
  4028  0076                     bpc_Cnt2Qua@pdata:	
  4029  0076                     i1___awdiv@sign:	
  4030                           ; 1 bytes @ 0x6
  4031                           
  4032  0076                     i1___awmod@sign:	
  4033                           ; 1 bytes @ 0x6
  4034                           
  4035                           
  4036                           ; 1 bytes @ 0x6
  4037  0076                     	ds	1
  4038  0077                     _capture_handdle$1357:	
  4039  0077                     i1___awdiv@quotient:	
  4040                           ; 2 bytes @ 0x7
  4041                           
  4042                           
  4043                           ; 2 bytes @ 0x7
  4044  0077                     	ds	1
  4045  0078                     ?_fputs:	
  4046  0078                     ?_stoa:	
  4047                           ; 2 bytes @ 0x8
  4048                           
  4049  0078                     fputs@fp:	
  4050                           ; 2 bytes @ 0x8
  4051                           
  4052  0078                     stoa@s:	
  4053                           ; 1 bytes @ 0x8
  4054                           
  4055                           
  4056                           ; 2 bytes @ 0x8
  4057  0078                     	ds	1
  4058  0079                     ??_fputs:	
  4059  0079                     ?i1_display_write_once:	
  4060                           ; 1 bytes @ 0x9
  4061                           
  4062  0079                     capture_handdle@pdata:	
  4063                           ; 1 bytes @ 0x9
  4064                           
  4065  0079                     i1display_write_once@HR:	
  4066                           ; 1 bytes @ 0x9
  4067                           
  4068                           
  4069                           ; 1 bytes @ 0x9
  4070  0079                     	ds	1
  4071  007A                     ??_stoa:	
  4072  007A                     i1display_write_once@ML:	
  4073                           ; 1 bytes @ 0xA
  4074                           
  4075  007A                     capture_handdle@cnt_int:	
  4076                           ; 1 bytes @ 0xA
  4077                           
  4078                           
  4079                           ; 2 bytes @ 0xA
  4080  007A                     	ds	1
  4081  007B                     i1display_write_once@MR:	
  4082                           
  4083                           ; 1 bytes @ 0xB
  4084  007B                     	ds	1
  4085  007C                     ??_pad:	
  4086  007C                     ??i1_display_write_once:	
  4087                           ; 1 bytes @ 0xC
  4088                           
  4089  007C                     i1display_write_once@HL:	
  4090                           ; 1 bytes @ 0xC
  4091                           
  4092  007C                     capture_handdle@cnt_tmp:	
  4093                           ; 1 bytes @ 0xC
  4094                           
  4095                           
  4096                           ; 2 bytes @ 0xC
  4097  007C                     	ds	1
  4098  007D                     ??_sprintf:	
  4099  007D                     update_time@pdata:	
  4100                           ; 1 bytes @ 0xD
  4101                           
  4102                           
  4103                           ; 1 bytes @ 0xD
  4104  007D                     	ds	1
  4105  007E                     ??_timer_Timer0Handdle:	
  4106                           
  4107                           	psect	cstackBANK0
  4108  0020                     __pcstackBANK0:	
  4109                           ; 1 bytes @ 0xE
  4110                           
  4111  0020                     ??i1_display_update:	
  4112  0020                     ?___aodiv:	
  4113                           ; 1 bytes @ 0x0
  4114                           
  4115  0020                     ?___aomod:	
  4116                           ; 8 bytes @ 0x0
  4117                           
  4118  0020                     fputs@c:	
  4119                           ; 8 bytes @ 0x0
  4120                           
  4121  0020                     _check_err$1120:	
  4122                           ; 1 bytes @ 0x0
  4123                           
  4124  0020                     stoa@nuls:	
  4125                           ; 2 bytes @ 0x0
  4126                           
  4127  0020                     ___aodiv@divisor:	
  4128                           ; 7 bytes @ 0x0
  4129                           
  4130  0020                     ___aomod@divisor:	
  4131                           ; 8 bytes @ 0x0
  4132                           
  4133                           
  4134                           ; 8 bytes @ 0x0
  4135  0020                     	ds	1
  4136  0021                     fputs@i:	
  4137                           
  4138                           ; 2 bytes @ 0x1
  4139  0021                     	ds	1
  4140  0022                     _check_err$1121:	
  4141                           
  4142                           ; 2 bytes @ 0x2
  4143  0022                     	ds	1
  4144  0023                     fputs@s:	
  4145                           
  4146                           ; 1 bytes @ 0x3
  4147  0023                     	ds	1
  4148  0024                     ?_pad:	
  4149  0024                     pad@buf:	
  4150                           ; 2 bytes @ 0x4
  4151                           
  4152  0024                     _check_err$1124:	
  4153                           ; 1 bytes @ 0x4
  4154                           
  4155                           
  4156                           ; 2 bytes @ 0x4
  4157  0024                     	ds	1
  4158  0025                     pad@p:	
  4159                           
  4160                           ; 2 bytes @ 0x5
  4161  0025                     	ds	1
  4162  0026                     _check_err$1125:	
  4163                           
  4164                           ; 2 bytes @ 0x6
  4165  0026                     	ds	1
  4166  0027                     pad@i:	
  4167  0027                     stoa@i:	
  4168                           ; 2 bytes @ 0x7
  4169                           
  4170                           
  4171                           ; 2 bytes @ 0x7
  4172  0027                     	ds	1
  4173  0028                     check_err@i:	
  4174  0028                     ___aodiv@dividend:	
  4175                           ; 1 bytes @ 0x8
  4176                           
  4177  0028                     ___aomod@dividend:	
  4178                           ; 8 bytes @ 0x8
  4179                           
  4180                           
  4181                           ; 8 bytes @ 0x8
  4182  0028                     	ds	1
  4183  0029                     check_err@check:	
  4184  0029                     pad@w:	
  4185                           ; 1 bytes @ 0x9
  4186                           
  4187  0029                     stoa@w:	
  4188                           ; 2 bytes @ 0x9
  4189                           
  4190  0029                     i1_display_update$1525:	
  4191                           ; 2 bytes @ 0x9
  4192                           
  4193                           
  4194                           ; 2 bytes @ 0x9
  4195  0029                     	ds	1
  4196  002A                     check_err@pdata:	
  4197                           
  4198                           ; 1 bytes @ 0xA
  4199  002A                     	ds	1
  4200  002B                     pad@fp:	
  4201  002B                     stoa@fp:	
  4202                           ; 1 bytes @ 0xB
  4203                           
  4204  002B                     i1display_update@pdata:	
  4205                           ; 1 bytes @ 0xB
  4206                           
  4207                           
  4208                           ; 1 bytes @ 0xB
  4209  002B                     	ds	1
  4210  002C                     ??_bpc_proc:	
  4211  002C                     ??_update_time:	
  4212                           ; 1 bytes @ 0xC
  4213                           
  4214  002C                     stoa@cp:	
  4215                           ; 1 bytes @ 0xC
  4216                           
  4217                           
  4218                           ; 2 bytes @ 0xC
  4219  002C                     	ds	2
  4220  002E                     bpc_proc@last_time_s:	
  4221  002E                     stoa@p:	
  4222                           ; 2 bytes @ 0xE
  4223                           
  4224                           
  4225                           ; 2 bytes @ 0xE
  4226  002E                     	ds	2
  4227  0030                     ?_dtoa:	
  4228  0030                     bpc_proc@last_time_h:	
  4229                           ; 2 bytes @ 0x10
  4230                           
  4231  0030                     stoa@l:	
  4232                           ; 2 bytes @ 0x10
  4233                           
  4234  0030                     dtoa@d:	
  4235                           ; 2 bytes @ 0x10
  4236                           
  4237                           
  4238                           ; 8 bytes @ 0x10
  4239  0030                     	ds	2
  4240  0032                     bpc_proc@last_time_m:	
  4241                           
  4242                           ; 2 bytes @ 0x12
  4243  0032                     	ds	2
  4244  0034                     bpc_proc@i:	
  4245                           
  4246                           ; 2 bytes @ 0x14
  4247  0034                     	ds	2
  4248  0036                     bpc_proc@number:	
  4249                           
  4250                           ; 1 bytes @ 0x16
  4251  0036                     	ds	1
  4252  0037                     bpc_proc@pdata:	
  4253                           
  4254                           ; 1 bytes @ 0x17
  4255  0037                     	ds	1
  4256  0038                     ??_dtoa:	
  4257                           
  4258                           ; 1 bytes @ 0x18
  4259  0038                     	ds	3
  4260  003B                     _dtoa$1749:	
  4261                           
  4262                           ; 2 bytes @ 0x1B
  4263  003B                     	ds	2
  4264  003D                     dtoa@fp:	
  4265                           
  4266                           ; 1 bytes @ 0x1D
  4267  003D                     	ds	1
  4268  003E                     dtoa@p:	
  4269                           
  4270                           ; 2 bytes @ 0x1E
  4271  003E                     	ds	2
  4272  0040                     dtoa@w:	
  4273                           
  4274                           ; 2 bytes @ 0x20
  4275  0040                     	ds	2
  4276  0042                     dtoa@s:	
  4277                           
  4278                           ; 2 bytes @ 0x22
  4279  0042                     	ds	2
  4280  0044                     dtoa@n:	
  4281                           
  4282                           ; 8 bytes @ 0x24
  4283  0044                     	ds	8
  4284  004C                     dtoa@i:	
  4285                           
  4286                           ; 2 bytes @ 0x2C
  4287  004C                     	ds	2
  4288  004E                     ?_vfpfcnvrt:	
  4289  004E                     vfpfcnvrt@fmt:	
  4290                           ; 2 bytes @ 0x2E
  4291                           
  4292                           
  4293                           ; 1 bytes @ 0x2E
  4294  004E                     	ds	1
  4295  004F                     vfpfcnvrt@ap:	
  4296                           
  4297                           ; 1 bytes @ 0x2F
  4298  004F                     	ds	1
  4299  0050                     ??_vfpfcnvrt:	
  4300                           
  4301                           ; 1 bytes @ 0x30
  4302  0050                     	ds	5
  4303  0055                     vfpfcnvrt@ll:	
  4304                           
  4305                           ; 8 bytes @ 0x35
  4306  0055                     	ds	8
  4307  005D                     vfpfcnvrt@cp:	
  4308                           
  4309                           ; 2 bytes @ 0x3D
  4310  005D                     	ds	2
  4311  005F                     vfpfcnvrt@fp:	
  4312                           
  4313                           ; 1 bytes @ 0x3F
  4314  005F                     	ds	1
  4315  0060                     ?_vfprintf:	
  4316  0060                     vfprintf@fmt:	
  4317                           ; 2 bytes @ 0x40
  4318                           
  4319                           
  4320                           ; 2 bytes @ 0x40
  4321  0060                     	ds	2
  4322  0062                     vfprintf@ap:	
  4323                           
  4324                           ; 1 bytes @ 0x42
  4325  0062                     	ds	1
  4326  0063                     ??_vfprintf:	
  4327                           
  4328                           ; 1 bytes @ 0x43
  4329  0063                     	ds	2
  4330  0065                     vfprintf@fp:	
  4331                           
  4332                           ; 1 bytes @ 0x45
  4333  0065                     	ds	1
  4334  0066                     vfprintf@cfmt:	
  4335                           
  4336                           ; 2 bytes @ 0x46
  4337  0066                     	ds	2
  4338  0068                     ?_sprintf:	
  4339  0068                     sprintf@fmt:	
  4340                           ; 2 bytes @ 0x48
  4341                           
  4342                           
  4343                           ; 2 bytes @ 0x48
  4344  0068                     	ds	8
  4345                           
  4346                           	psect	maintext
  4347  099C                     __pmaintext:	
  4348 ;;
  4349 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  4350 ;;
  4351 ;; *************** function _main *****************
  4352 ;; Defined at:
  4353 ;;		line 243 in file "main.c"
  4354 ;; Parameters:    Size  Location     Type
  4355 ;;		None
  4356 ;; Auto vars:     Size  Location     Type
  4357 ;;		None
  4358 ;; Return value:  Size  Location     Type
  4359 ;;                  1    wreg      void 
  4360 ;; Registers used:
  4361 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4362 ;; Tracked objects:
  4363 ;;		On entry : B1F/0
  4364 ;;		On exit  : 0/0
  4365 ;;		Unchanged: 0/0
  4366 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4367 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4368 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4369 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4370 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4371 ;;Total ram usage:        0 bytes
  4372 ;; Hardware stack levels required when called:   14
  4373 ;; This function calls:
  4374 ;;		_capture_Set
  4375 ;;		_capture_init
  4376 ;;		_display_update
  4377 ;;		_init_env
  4378 ;;		_led_SetState
  4379 ;;		_timer_Timer0Init
  4380 ;;		_timer_Timer0Start
  4381 ;;		_timer_Timer1Init
  4382 ;;		_timer_Timer1Start
  4383 ;;		_uart_init
  4384 ;; This function is called by:
  4385 ;;		Startup code after reset
  4386 ;; This function uses a non-reentrant model
  4387 ;;
  4388                           
  4389                           
  4390                           ;psect for function _main
  4391  099C                     _main:	
  4392                           
  4393                           ;main.c: 245:     static u16 i = 0;;main.c: 246:     static u8 cnt = 0;;main.c: 250:    
      +                           init_env();
  4394                           
  4395                           ;incstack = 0
  4396                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4397  099C  318C  24FE  3189   	fcall	_init_env
  4398                           
  4399                           ;main.c: 253:     timer_Timer0Init();
  4400  099F  3188  2091  3189   	fcall	_timer_Timer0Init
  4401                           
  4402                           ;main.c: 254:     timer_Timer0Start();
  4403  09A2  3188  202D  3189   	fcall	_timer_Timer0Start
  4404                           
  4405                           ;main.c: 257:     timer_Timer1Init();
  4406  09A5  3188  20B5  3189   	fcall	_timer_Timer1Init
  4407                           
  4408                           ;main.c: 258:     timer_Timer1Start();
  4409  09A8  3188  201A  3189   	fcall	_timer_Timer1Start
  4410                           
  4411                           ;main.c: 261:     capture_init();
  4412  09AB  3188  2054  3189   	fcall	_capture_init
  4413                           
  4414                           ;main.c: 262:     capture_Set(TRUE);
  4415  09AE  3001               	movlw	1
  4416  09AF  3188  20C2  3189   	fcall	_capture_Set
  4417                           
  4418                           ;main.c: 265:     uart_init();
  4419  09B2  3189  2180  3189   	fcall	_uart_init
  4420                           
  4421                           ;main.c: 268:     display_update();
  4422  09B5  318E  2692  3189   	fcall	_display_update
  4423                           
  4424                           ;main.c: 269:     led_SetState(FALSE);
  4425  09B8  3000               	movlw	0
  4426  09B9  3188  2086  3189   	fcall	_led_SetState
  4427  09BC                     l170:	
  4428                           ;main.c: 271:     while(1)
  4429                           
  4430                           
  4431                           ;main.c: 272:     {;main.c: 281:     }
  4432  09BC  29BC               	goto	l170
  4433  09BD                     __end_of_main:	
  4434                           
  4435                           	psect	text1
  4436  0980                     __ptext1:	
  4437 ;; *************** function _uart_init *****************
  4438 ;; Defined at:
  4439 ;;		line 14 in file "uart.c"
  4440 ;; Parameters:    Size  Location     Type
  4441 ;;		None
  4442 ;; Auto vars:     Size  Location     Type
  4443 ;;		None
  4444 ;; Return value:  Size  Location     Type
  4445 ;;                  1    wreg      void 
  4446 ;; Registers used:
  4447 ;;		wreg, status,2
  4448 ;; Tracked objects:
  4449 ;;		On entry : 0/0
  4450 ;;		On exit  : 0/0
  4451 ;;		Unchanged: 0/0
  4452 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4453 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4454 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4455 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4456 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4457 ;;Total ram usage:        0 bytes
  4458 ;; Hardware stack levels used:    1
  4459 ;; Hardware stack levels required when called:    9
  4460 ;; This function calls:
  4461 ;;		Nothing
  4462 ;; This function is called by:
  4463 ;;		_main
  4464 ;; This function uses a non-reentrant model
  4465 ;;
  4466                           
  4467                           
  4468                           ;psect for function _uart_init
  4469  0980                     _uart_init:	
  4470                           
  4471                           ;uart.c: 17:     TXSEL = 0;
  4472                           
  4473                           ;incstack = 0
  4474                           ; Regs used in _uart_init: [wreg+status,2]
  4475  0980  0022               	movlb	2	; select bank2
  4476  0981  111D               	bcf	29,2	;volatile
  4477                           
  4478                           ;uart.c: 18:     RXSEL = 0;
  4479  0982  109D               	bcf	29,1	;volatile
  4480                           
  4481                           ;uart.c: 19:     TRISCbits.TRISC7 = 1;
  4482  0983  0021               	movlb	1	; select bank1
  4483  0984  178E               	bsf	14,7	;volatile
  4484                           
  4485                           ;uart.c: 20:     TRISCbits.TRISC6 = 0;
  4486  0985  130E               	bcf	14,6	;volatile
  4487                           
  4488                           ;uart.c: 21:     WPUCbits.WPUC7 = 0;
  4489  0986  0024               	movlb	4	; select bank4
  4490  0987  138E               	bcf	14,7	;volatile
  4491                           
  4492                           ;uart.c: 22:     WPUCbits.WPUC6 = 0;
  4493  0988  130E               	bcf	14,6	;volatile
  4494                           
  4495                           ;uart.c: 26:     SYNC = 0;
  4496  0989  0023               	movlb	3	; select bank3
  4497  098A  121E               	bcf	30,4	;volatile
  4498                           
  4499                           ;uart.c: 27:     BRGH = 1;
  4500  098B  151E               	bsf	30,2	;volatile
  4501                           
  4502                           ;uart.c: 28:     BRG16 = 1;
  4503  098C  159F               	bsf	31,3	;volatile
  4504                           
  4505                           ;uart.c: 32:     SPBRGH = 0x00;
  4506  098D  019C               	clrf	28	;volatile
  4507                           
  4508                           ;uart.c: 33:     SPBRGL = 23;
  4509  098E  3017               	movlw	23
  4510  098F  009B               	movwf	27	;volatile
  4511                           
  4512                           ;uart.c: 36:     TXEN = 1;
  4513  0990  169E               	bsf	30,5	;volatile
  4514                           
  4515                           ;uart.c: 37:     SYNC = 0;
  4516  0991  121E               	bcf	30,4	;volatile
  4517                           
  4518                           ;uart.c: 38:     SPEN = 1;
  4519  0992  179D               	bsf	29,7	;volatile
  4520                           
  4521                           ;uart.c: 41:     TXIE = 1;
  4522  0993  0021               	movlb	1	; select bank1
  4523  0994  1611               	bsf	17,4	;volatile
  4524                           
  4525                           ;uart.c: 42:     GIE = 1;
  4526  0995  178B               	bsf	11,7	;volatile
  4527                           
  4528                           ;uart.c: 43:     PEIE = 1;
  4529  0996  170B               	bsf	11,6	;volatile
  4530                           
  4531                           ;uart.c: 46:     CREN = 1;
  4532  0997  0023               	movlb	3	; select bank3
  4533  0998  161D               	bsf	29,4	;volatile
  4534                           
  4535                           ;uart.c: 49:     RCIE = 1;
  4536  0999  0021               	movlb	1	; select bank1
  4537  099A  1691               	bsf	17,5	;volatile
  4538  099B  0008               	return
  4539  099C                     __end_of_uart_init:	
  4540                           
  4541                           	psect	text2
  4542  081A                     __ptext2:	
  4543 ;; *************** function _timer_Timer1Start *****************
  4544 ;; Defined at:
  4545 ;;		line 40 in file "timer.c"
  4546 ;; Parameters:    Size  Location     Type
  4547 ;;		None
  4548 ;; Auto vars:     Size  Location     Type
  4549 ;;		None
  4550 ;; Return value:  Size  Location     Type
  4551 ;;                  1    wreg      void 
  4552 ;; Registers used:
  4553 ;;		None
  4554 ;; Tracked objects:
  4555 ;;		On entry : 0/0
  4556 ;;		On exit  : 0/0
  4557 ;;		Unchanged: 0/0
  4558 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4559 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4560 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4561 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4562 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4563 ;;Total ram usage:        0 bytes
  4564 ;; Hardware stack levels used:    1
  4565 ;; Hardware stack levels required when called:    9
  4566 ;; This function calls:
  4567 ;;		Nothing
  4568 ;; This function is called by:
  4569 ;;		_main
  4570 ;; This function uses a non-reentrant model
  4571 ;;
  4572                           
  4573                           
  4574                           ;psect for function _timer_Timer1Start
  4575  081A                     _timer_Timer1Start:	
  4576                           
  4577                           ;timer.c: 43:     T1CONbits.TMR1ON = 0b1;
  4578                           
  4579                           ;incstack = 0
  4580                           ; Regs used in _timer_Timer1Start: []
  4581  081A  0020               	movlb	0	; select bank0
  4582  081B  1418               	bsf	24,0	;volatile
  4583  081C  0008               	return
  4584  081D                     __end_of_timer_Timer1Start:	
  4585                           
  4586                           	psect	text3
  4587  08B5                     __ptext3:	
  4588 ;; *************** function _timer_Timer1Init *****************
  4589 ;; Defined at:
  4590 ;;		line 9 in file "timer.c"
  4591 ;; Parameters:    Size  Location     Type
  4592 ;;		None
  4593 ;; Auto vars:     Size  Location     Type
  4594 ;;		None
  4595 ;; Return value:  Size  Location     Type
  4596 ;;                  1    wreg      void 
  4597 ;; Registers used:
  4598 ;;		wreg, status,2, status,0
  4599 ;; Tracked objects:
  4600 ;;		On entry : 0/0
  4601 ;;		On exit  : 0/0
  4602 ;;		Unchanged: 0/0
  4603 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4604 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4605 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4606 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4607 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4608 ;;Total ram usage:        0 bytes
  4609 ;; Hardware stack levels used:    1
  4610 ;; Hardware stack levels required when called:    9
  4611 ;; This function calls:
  4612 ;;		Nothing
  4613 ;; This function is called by:
  4614 ;;		_main
  4615 ;; This function uses a non-reentrant model
  4616 ;;
  4617                           
  4618                           
  4619                           ;psect for function _timer_Timer1Init
  4620  08B5                     _timer_Timer1Init:	
  4621                           
  4622                           ;timer.c: 12:     INTCONbits.GIE = 0b1;
  4623                           
  4624                           ;incstack = 0
  4625                           ; Regs used in _timer_Timer1Init: [wreg+status,2+status,0]
  4626  08B5  178B               	bsf	11,7	;volatile
  4627                           
  4628                           ;timer.c: 14:     INTCONbits.PEIE = 0b1;
  4629  08B6  170B               	bsf	11,6	;volatile
  4630                           
  4631                           ;timer.c: 15:     PIE1bits.TMR1IE = 0b1;
  4632  08B7  0021               	movlb	1	; select bank1
  4633  08B8  1411               	bsf	17,0	;volatile
  4634                           
  4635                           ;timer.c: 17:     PIR1bits.TMR1IF = 0b0;
  4636  08B9  0020               	movlb	0	; select bank0
  4637  08BA  1011               	bcf	17,0	;volatile
  4638                           
  4639                           ;timer.c: 19:     TMR1H = 0b0;
  4640  08BB  0197               	clrf	23	;volatile
  4641                           
  4642                           ;timer.c: 20:     TMR1L = 0b0;
  4643  08BC  0196               	clrf	22	;volatile
  4644                           
  4645                           ;timer.c: 30:     T1CONbits.TMR1CS = 0b00;
  4646  08BD  303F               	movlw	-193
  4647  08BE  0598               	andwf	24,f	;volatile
  4648                           
  4649                           ;timer.c: 33:     T1CONbits.T1CKPS = 0b11;
  4650  08BF  3030               	movlw	48
  4651  08C0  0498               	iorwf	24,f	;volatile
  4652  08C1  0008               	return
  4653  08C2                     __end_of_timer_Timer1Init:	
  4654                           
  4655                           	psect	text4
  4656  082D                     __ptext4:	
  4657 ;; *************** function _timer_Timer0Start *****************
  4658 ;; Defined at:
  4659 ;;		line 97 in file "timer.c"
  4660 ;; Parameters:    Size  Location     Type
  4661 ;;		None
  4662 ;; Auto vars:     Size  Location     Type
  4663 ;;		None
  4664 ;; Return value:  Size  Location     Type
  4665 ;;                  1    wreg      void 
  4666 ;; Registers used:
  4667 ;;		wreg, status,2, status,0, pclath, cstack
  4668 ;; Tracked objects:
  4669 ;;		On entry : 0/0
  4670 ;;		On exit  : 0/0
  4671 ;;		Unchanged: 0/0
  4672 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4673 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4674 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4675 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4676 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4677 ;;Total ram usage:        0 bytes
  4678 ;; Hardware stack levels used:    1
  4679 ;; Hardware stack levels required when called:   10
  4680 ;; This function calls:
  4681 ;;		_timer_Timer0Reset
  4682 ;; This function is called by:
  4683 ;;		_main
  4684 ;;		_tmp_change
  4685 ;; This function uses a non-reentrant model
  4686 ;;
  4687                           
  4688                           
  4689                           ;psect for function _timer_Timer0Start
  4690  082D                     _timer_Timer0Start:	
  4691                           
  4692                           ;timer.c: 99:     timer_Timer0Reset();
  4693                           
  4694                           ;incstack = 0
  4695                           ; Regs used in _timer_Timer0Start: [wreg+status,2+status,0+pclath+cstack]
  4696  082D  3188  2036         	fcall	_timer_Timer0Reset
  4697                           
  4698                           ;timer.c: 100:     INTCONbits.TMR0IE = 0b1;
  4699  082F  168B               	bsf	11,5	;volatile
  4700  0830  0008               	return
  4701  0831                     __end_of_timer_Timer0Start:	
  4702                           
  4703                           	psect	text5
  4704  0836                     __ptext5:	
  4705 ;; *************** function _timer_Timer0Reset *****************
  4706 ;; Defined at:
  4707 ;;		line 92 in file "timer.c"
  4708 ;; Parameters:    Size  Location     Type
  4709 ;;		None
  4710 ;; Auto vars:     Size  Location     Type
  4711 ;;		None
  4712 ;; Return value:  Size  Location     Type
  4713 ;;                  1    wreg      void 
  4714 ;; Registers used:
  4715 ;;		wreg
  4716 ;; Tracked objects:
  4717 ;;		On entry : 0/0
  4718 ;;		On exit  : 0/0
  4719 ;;		Unchanged: 0/0
  4720 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4721 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4722 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4723 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4724 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4725 ;;Total ram usage:        0 bytes
  4726 ;; Hardware stack levels used:    1
  4727 ;; Hardware stack levels required when called:    9
  4728 ;; This function calls:
  4729 ;;		Nothing
  4730 ;; This function is called by:
  4731 ;;		_timer_Timer0Start
  4732 ;;		_tmp_change
  4733 ;; This function uses a non-reentrant model
  4734 ;;
  4735                           
  4736                           
  4737                           ;psect for function _timer_Timer0Reset
  4738  0836                     _timer_Timer0Reset:	
  4739                           
  4740                           ;timer.c: 94:     INTCONbits.TMR0IF = 0;
  4741                           
  4742                           ;incstack = 0
  4743                           ; Regs used in _timer_Timer0Reset: [wreg]
  4744  0836  110B               	bcf	11,2	;volatile
  4745                           
  4746                           ;timer.c: 95:     TMR0 = (159 + 0);
  4747  0837  309F               	movlw	159
  4748  0838  0020               	movlb	0	; select bank0
  4749  0839  0095               	movwf	21	;volatile
  4750  083A  0008               	return
  4751  083B                     __end_of_timer_Timer0Reset:	
  4752                           
  4753                           	psect	text6
  4754  0891                     __ptext6:	
  4755 ;; *************** function _timer_Timer0Init *****************
  4756 ;; Defined at:
  4757 ;;		line 63 in file "timer.c"
  4758 ;; Parameters:    Size  Location     Type
  4759 ;;		None
  4760 ;; Auto vars:     Size  Location     Type
  4761 ;;		None
  4762 ;; Return value:  Size  Location     Type
  4763 ;;                  1    wreg      void 
  4764 ;; Registers used:
  4765 ;;		wreg, status,2, status,0
  4766 ;; Tracked objects:
  4767 ;;		On entry : 0/0
  4768 ;;		On exit  : 0/0
  4769 ;;		Unchanged: 0/0
  4770 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4771 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4772 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4773 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4774 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4775 ;;Total ram usage:        0 bytes
  4776 ;; Hardware stack levels used:    1
  4777 ;; Hardware stack levels required when called:    9
  4778 ;; This function calls:
  4779 ;;		Nothing
  4780 ;; This function is called by:
  4781 ;;		_main
  4782 ;; This function uses a non-reentrant model
  4783 ;;
  4784                           
  4785                           
  4786                           ;psect for function _timer_Timer0Init
  4787  0891                     _timer_Timer0Init:	
  4788                           
  4789                           ;timer.c: 66:     INTCONbits.GIE = 0b1;
  4790                           
  4791                           ;incstack = 0
  4792                           ; Regs used in _timer_Timer0Init: [wreg+status,2+status,0]
  4793  0891  178B               	bsf	11,7	;volatile
  4794                           
  4795                           ;timer.c: 69:     INTCONbits.TMR0IE = 0b0;
  4796  0892  128B               	bcf	11,5	;volatile
  4797                           
  4798                           ;timer.c: 76:     OPTION_REGbits.PSA = 0;
  4799  0893  0021               	movlb	1	; select bank1
  4800  0894  1195               	bcf	21,3	;volatile
  4801                           
  4802                           ;timer.c: 77:     OPTION_REGbits.TMR0CS = 0;
  4803  0895  1295               	bcf	21,5	;volatile
  4804                           
  4805                           ;timer.c: 78:     OPTION_REGbits.PS = 7;
  4806  0896  3007               	movlw	7
  4807  0897  0495               	iorwf	21,f	;volatile
  4808                           
  4809                           ;timer.c: 79:     TMR0 = (159 + 0);
  4810  0898  309F               	movlw	159
  4811  0899  0020               	movlb	0	; select bank0
  4812  089A  0095               	movwf	21	;volatile
  4813  089B  0008               	return
  4814  089C                     __end_of_timer_Timer0Init:	
  4815                           
  4816                           	psect	text7
  4817  0886                     __ptext7:	
  4818 ;; *************** function _led_SetState *****************
  4819 ;; Defined at:
  4820 ;;		line 110 in file "hardware.c"
  4821 ;; Parameters:    Size  Location     Type
  4822 ;;  isOn            1    wreg     unsigned char 
  4823 ;; Auto vars:     Size  Location     Type
  4824 ;;  isOn            1    0[BANK3 ] unsigned char 
  4825 ;; Return value:  Size  Location     Type
  4826 ;;                  1    wreg      unsigned char 
  4827 ;; Registers used:
  4828 ;;		wreg, status,2, status,0
  4829 ;; Tracked objects:
  4830 ;;		On entry : 0/0
  4831 ;;		On exit  : 0/0
  4832 ;;		Unchanged: 0/0
  4833 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4834 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4835 ;;      Locals:         0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0
  4836 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4837 ;;      Totals:         0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0
  4838 ;;Total ram usage:        1 bytes
  4839 ;; Hardware stack levels used:    1
  4840 ;; Hardware stack levels required when called:    9
  4841 ;; This function calls:
  4842 ;;		Nothing
  4843 ;; This function is called by:
  4844 ;;		_main
  4845 ;; This function uses a non-reentrant model
  4846 ;;
  4847                           
  4848                           
  4849                           ;psect for function _led_SetState
  4850  0886                     _led_SetState:	
  4851                           
  4852                           ;incstack = 0
  4853                           ; Regs used in _led_SetState: [wreg+status,2+status,0]
  4854                           ;led_SetState@isOn stored from wreg
  4855  0886  0023               	movlb	3	; select bank3
  4856  0887  00C8               	movwf	led_SetState@isOn^(0+384)
  4857                           
  4858                           ;hardware.c: 110: u8 led_SetState(u8 isOn);hardware.c: 111: {;hardware.c: 112:     LATBb
      +                          its.LATB3 = (isOn)? LED_STATE_ON : LED_STATE_OFF;
  4859  0888  0848               	movf	led_SetState@isOn^(0+384),w
  4860  0889  1D03               	btfss	3,2
  4861  088A  288E               	goto	u3840
  4862  088B  0022               	movlb	2	; select bank2
  4863  088C  158D               	bsf	13,3	;volatile
  4864  088D  0008               	return
  4865  088E                     u3840:	
  4866  088E  0022               	movlb	2	; select bank2
  4867  088F  118D               	bcf	13,3	;volatile
  4868  0890  0008               	return
  4869  0891                     __end_of_led_SetState:	
  4870                           
  4871                           	psect	text8
  4872  0CFE                     __ptext8:	
  4873 ;; *************** function _init_env *****************
  4874 ;; Defined at:
  4875 ;;		line 44 in file "main.c"
  4876 ;; Parameters:    Size  Location     Type
  4877 ;;		None
  4878 ;; Auto vars:     Size  Location     Type
  4879 ;;  i               2   27[BANK3 ] int 
  4880 ;;  pdata           1   29[BANK3 ] PTR volatile struct .
  4881 ;;		 -> g_data(39), 
  4882 ;; Return value:  Size  Location     Type
  4883 ;;                  1    wreg      void 
  4884 ;; Registers used:
  4885 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4886 ;; Tracked objects:
  4887 ;;		On entry : 0/0
  4888 ;;		On exit  : 0/0
  4889 ;;		Unchanged: 0/0
  4890 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4891 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4892 ;;      Locals:         0       0       0       0       3       0       0       0       0       0       0       0       
      +0       0
  4893 ;;      Temps:          0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0
  4894 ;;      Totals:         0       0       0       0       5       0       0       0       0       0       0       0       
      +0       0
  4895 ;;Total ram usage:        5 bytes
  4896 ;; Hardware stack levels used:    1
  4897 ;; Hardware stack levels required when called:   13
  4898 ;; This function calls:
  4899 ;;		_data_getdata
  4900 ;;		_display_set
  4901 ;;		_display_update
  4902 ;; This function is called by:
  4903 ;;		_main
  4904 ;; This function uses a non-reentrant model
  4905 ;;
  4906                           
  4907                           
  4908                           ;psect for function _init_env
  4909  0CFE                     _init_env:	
  4910                           
  4911                           ;main.c: 45:     IOCCP = 0;
  4912                           
  4913                           ;incstack = 0
  4914                           ; Regs used in _init_env: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4915  0CFE  3180  2002  318C   	fcall	_data_getdata
  4916  0D01  0023               	movlb	3	; select bank3
  4917  0D02  00E1               	movwf	??_init_env^(0+384)
  4918  0D03  0861               	movf	??_init_env^(0+384),w
  4919  0D04  00E5               	movwf	init_env@pdata^(0+384)
  4920                           
  4921                           ;main.c: 51:     TRISCbits.TRISC5 = 1;
  4922  0D05  178B               	bsf	11,7	;volatile
  4923                           
  4924                           ;main.c: 58: 
  4925  0D06  0021               	movlb	1	; select bank1
  4926  0D07  0819               	movf	25,w	;volatile
  4927  0D08  39FC               	andlw	-4
  4928  0D09  3802               	iorlw	2
  4929  0D0A  0099               	movwf	25	;volatile
  4930                           
  4931                           ;main.c: 62:     pdata->g_time_h = 23;
  4932  0D0B  0819               	movf	25,w	;volatile
  4933  0D0C  3987               	andlw	-121
  4934  0D0D  3858               	iorlw	88
  4935  0D0E  0099               	movwf	25	;volatile
  4936                           
  4937                           ;main.c: 70:     LATBbits.LATB2 = PIN_LOW;
  4938  0D0F  1395               	bcf	21,7	;volatile
  4939                           
  4940                           ;main.c: 72: 
  4941  0D10  018C               	clrf	12	;volatile
  4942                           
  4943                           ;main.c: 73:     PORTCbits.RC2 = BPC_PWR_ON;
  4944  0D11  0022               	movlb	2	; select bank2
  4945  0D12  018C               	clrf	12	;volatile
  4946                           
  4947                           ;main.c: 74: 
  4948  0D13  0024               	movlb	4	; select bank4
  4949  0D14  018C               	clrf	12	;volatile
  4950                           
  4951                           ;main.c: 75: 
  4952  0D15  0027               	movlb	7	; select bank7
  4953  0D16  0191               	clrf	17	;volatile
  4954                           
  4955                           ;main.c: 76:     TRISCbits.TRISC0 = 1;
  4956  0D17  0192               	clrf	18	;volatile
  4957                           
  4958                           ;main.c: 78: 
  4959  0D18  0021               	movlb	1	; select bank1
  4960  0D19  018D               	clrf	13	;volatile
  4961                           
  4962                           ;main.c: 79: 
  4963  0D1A  0022               	movlb	2	; select bank2
  4964  0D1B  018D               	clrf	13	;volatile
  4965                           
  4966                           ;main.c: 80: 
  4967  0D1C  0024               	movlb	4	; select bank4
  4968  0D1D  018D               	clrf	13	;volatile
  4969                           
  4970                           ;main.c: 81: 
  4971  0D1E  0027               	movlb	7	; select bank7
  4972  0D1F  0194               	clrf	20	;volatile
  4973                           
  4974                           ;main.c: 82: 
  4975  0D20  0195               	clrf	21	;volatile
  4976                           
  4977                           ;main.c: 84:     display_set(TRUE);
  4978  0D21  0021               	movlb	1	; select bank1
  4979  0D22  018E               	clrf	14	;volatile
  4980                           
  4981                           ;main.c: 85: }
  4982  0D23  0022               	movlb	2	; select bank2
  4983  0D24  018E               	clrf	14	;volatile
  4984                           
  4985                           ;main.c: 86: 
  4986  0D25  3001               	movlw	1
  4987  0D26  0024               	movlb	4	; select bank4
  4988  0D27  008E               	movwf	14	;volatile
  4989                           
  4990                           ;main.c: 87: 
  4991  0D28  0027               	movlb	7	; select bank7
  4992  0D29  0197               	clrf	23	;volatile
  4993                           
  4994                           ;main.c: 88: void tmp_change(void)
  4995  0D2A  0198               	clrf	24	;volatile
  4996                           
  4997                           ;main.c: 93: 
  4998  0D2B  0021               	movlb	1	; select bank1
  4999  0D2C  168E               	bsf	14,5	;volatile
  5000                           
  5001                           ;main.c: 94: 
  5002  0D2D  0024               	movlb	4	; select bank4
  5003  0D2E  168E               	bsf	14,5	;volatile
  5004                           
  5005                           ;main.c: 96: 
  5006  0D2F  0021               	movlb	1	; select bank1
  5007  0D30  148E               	bsf	14,1	;volatile
  5008                           
  5009                           ;main.c: 97:     if( pdata->g_isDecoding == FALSE && ((pdata->g_flg_switch == TRUE)||(pd
      +                          ata->cnt_update >= 30)) )
  5010  0D31  0024               	movlb	4	; select bank4
  5011  0D32  108E               	bcf	14,1	;volatile
  5012                           
  5013                           ;main.c: 98: 
  5014  0D33  0027               	movlb	7	; select bank7
  5015  0D34  1497               	bsf	23,1	;volatile
  5016                           
  5017                           ;main.c: 101:         pdata->g_find_recv_start = FALSE;
  5018  0D35  0023               	movlb	3	; select bank3
  5019  0D36  01E3               	clrf	init_env@i^(0+384)
  5020  0D37  01E4               	clrf	(init_env@i+1)^(0+384)
  5021  0D38                     l3689:	
  5022                           
  5023                           ;main.c: 102:         pdata->g_isDecoding = TRUE;
  5024  0D38  3005               	movlw	5
  5025  0D39  0023               	movlb	3	; select bank3
  5026  0D3A  00E1               	movwf	??_init_env^(0+384)
  5027  0D3B  0863               	movf	init_env@i^(0+384),w
  5028  0D3C  0765               	addwf	init_env@pdata^(0+384),w
  5029  0D3D  00E2               	movwf	(??_init_env+1)^(0+384)
  5030  0D3E  0862               	movf	(??_init_env+1)^(0+384),w
  5031  0D3F  3E0D               	addlw	13
  5032  0D40  0086               	movwf	6
  5033  0D41  3002               	movlw	2	; select bank4/5
  5034  0D42  0087               	movwf	7
  5035  0D43  0861               	movf	??_init_env^(0+384),w
  5036  0D44  0081               	movwf	1
  5037                           
  5038                           ;main.c: 103:         pdata->g_flg_switch = FALSE;
  5039  0D45  3001               	movlw	1
  5040  0D46  07E3               	addwf	init_env@i^(0+384),f
  5041  0D47  3000               	movlw	0
  5042  0D48  3DE4               	addwfc	(init_env@i+1)^(0+384),f
  5043  0D49  0864               	movf	(init_env@i+1)^(0+384),w
  5044  0D4A  3A80               	xorlw	128
  5045  0D4B  00E1               	movwf	??_init_env^(0+384)
  5046  0D4C  3080               	movlw	128
  5047  0D4D  0261               	subwf	??_init_env^(0+384),w
  5048  0D4E  1D03               	skipz
  5049  0D4F  2D52               	goto	u3655
  5050  0D50  3014               	movlw	20
  5051  0D51  0263               	subwf	init_env@i^(0+384),w
  5052  0D52                     u3655:	
  5053  0D52  1C03               	skipc
  5054  0D53  2D38               	goto	l3689
  5055                           
  5056                           ;main.c: 104:         pdata->cnt_update = 0;
  5057  0D54  3017               	movlw	23
  5058  0D55  0023               	movlb	3	; select bank3
  5059  0D56  00E1               	movwf	??_init_env^(0+384)
  5060  0D57  0865               	movf	init_env@pdata^(0+384),w
  5061  0D58  3E03               	addlw	3
  5062  0D59  0086               	movwf	6
  5063  0D5A  3002               	movlw	2	; select bank4/5
  5064  0D5B  0087               	movwf	7
  5065  0D5C  0861               	movf	??_init_env^(0+384),w
  5066  0D5D  0081               	movwf	1
  5067                           
  5068                           ;main.c: 105:         pdata->g_recv_count = CODE_P0;
  5069  0D5E  3037               	movlw	55
  5070  0D5F  00E1               	movwf	??_init_env^(0+384)
  5071  0D60  0865               	movf	init_env@pdata^(0+384),w
  5072  0D61  3E04               	addlw	4
  5073  0D62  0086               	movwf	6
  5074  0D63  3002               	movlw	2	; select bank4/5
  5075  0D64  0087               	movwf	7
  5076  0D65  0861               	movf	??_init_env^(0+384),w
  5077  0D66  0081               	movwf	1
  5078                           
  5079                           ;main.c: 106:         PORTCbits.RC2 = BPC_PWR_ON;
  5080  0D67  0865               	movf	init_env@pdata^(0+384),w
  5081  0D68  3E05               	addlw	5
  5082  0D69  0086               	movwf	6
  5083  0D6A  3002               	movlw	2	; select bank4/5
  5084  0D6B  0087               	movwf	7
  5085  0D6C  0181               	clrf	1
  5086                           
  5087                           ;main.c: 108:         INTCONbits.IOCIF = FALSE;
  5088  0D6D  318E  2692  318C   	fcall	_display_update
  5089                           
  5090                           ;main.c: 112:     else if(pdata->g_isDecoding == TRUE && IOCCFbits.IOCCF1 == TRUE && TRU
      +                          E == pdata->g_find_recv_start)
  5091  0D70  0022               	movlb	2	; select bank2
  5092  0D71  110D               	bcf	13,2	;volatile
  5093                           
  5094                           ;main.c: 115:         {
  5095  0D72  0020               	movlb	0	; select bank0
  5096  0D73  110E               	bcf	14,2	;volatile
  5097                           
  5098                           ;main.c: 118:         timer_Timer0Start();
  5099  0D74  0021               	movlb	1	; select bank1
  5100  0D75  140E               	bsf	14,0	;volatile
  5101                           
  5102                           ;main.c: 119:     }
  5103  0D76  0024               	movlb	4	; select bank4
  5104  0D77  140E               	bsf	14,0	;volatile
  5105                           
  5106                           ;main.c: 126: 
  5107  0D78  3001               	movlw	1
  5108  0D79  3187  27F7         	fcall	_display_set
  5109  0D7B  0008               	return
  5110  0D7C                     __end_of_init_env:	
  5111                           
  5112                           	psect	text9
  5113  0E92                     __ptext9:	
  5114 ;; *************** function _display_update *****************
  5115 ;; Defined at:
  5116 ;;		line 72 in file "display.c"
  5117 ;; Parameters:    Size  Location     Type
  5118 ;;		None
  5119 ;; Auto vars:     Size  Location     Type
  5120 ;;  pdata           1   24[BANK3 ] PTR volatile struct .
  5121 ;;		 -> g_data(39), 
  5122 ;; Return value:  Size  Location     Type
  5123 ;;                  1    wreg      void 
  5124 ;; Registers used:
  5125 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5126 ;; Tracked objects:
  5127 ;;		On entry : 0/0
  5128 ;;		On exit  : 0/0
  5129 ;;		Unchanged: 0/0
  5130 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5131 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5132 ;;      Locals:         0       0       0       0       3       0       0       0       0       0       0       0       
      +0       0
  5133 ;;      Temps:          0       0       0       0       9       0       0       0       0       0       0       0       
      +0       0
  5134 ;;      Totals:         0       0       0       0      12       0       0       0       0       0       0       0       
      +0       0
  5135 ;;Total ram usage:       12 bytes
  5136 ;; Hardware stack levels used:    1
  5137 ;; Hardware stack levels required when called:   12
  5138 ;; This function calls:
  5139 ;;		___awdiv
  5140 ;;		___awmod
  5141 ;;		_data_getdata
  5142 ;;		_display_write_once
  5143 ;; This function is called by:
  5144 ;;		_init_env
  5145 ;;		_main
  5146 ;; This function uses a non-reentrant model
  5147 ;;
  5148                           
  5149                           
  5150                           ;psect for function _display_update
  5151  0E92                     _display_update:	
  5152                           
  5153                           ;display.c: 86:     G_DATA *pdata = data_getdata();
  5154                           
  5155                           ;incstack = 0
  5156                           ; Regs used in _display_update: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5157  0E92  3180  2002  318E   	fcall	_data_getdata
  5158  0E95  0023               	movlb	3	; select bank3
  5159  0E96  00D5               	movwf	??_display_update^(0+384)
  5160  0E97  0855               	movf	??_display_update^(0+384),w
  5161  0E98  00E0               	movwf	display_update@pdata^(0+384)
  5162                           
  5163                           ;display.c: 87:     display_write_once(segmcode[(pdata->g_time_h/10 == 0? 10:pdata->g_ti
      +                          me_h/10)], segmcode[pdata->g_time_h%10], segmcode[pdata->g_time_m/10], segmcode[pdata->g
      +                          _time_m%10]);
  5164  0E99  300A               	movlw	10
  5165  0E9A  00C8               	movwf	___awdiv@divisor^(0+384)
  5166  0E9B  3000               	movlw	0
  5167  0E9C  00C9               	movwf	(___awdiv@divisor^(0+384)+1)
  5168  0E9D  0860               	movf	display_update@pdata^(0+384),w
  5169  0E9E  3E03               	addlw	3
  5170  0E9F  0086               	movwf	6
  5171  0EA0  3002               	movlw	2	; select bank4/5
  5172  0EA1  0087               	movwf	7
  5173  0EA2  0801               	movf	1,w
  5174  0EA3  00D5               	movwf	??_display_update^(0+384)
  5175  0EA4  01D6               	clrf	(??_display_update^(0+384)+1)
  5176  0EA5  0855               	movf	??_display_update^(0+384),w
  5177  0EA6  00CA               	movwf	___awdiv@dividend^(0+384)
  5178  0EA7  0856               	movf	(??_display_update+1)^(0+384),w
  5179  0EA8  00CB               	movwf	(___awdiv@dividend+1)^(0+384)
  5180  0EA9  318B  23F0  318E   	fcall	___awdiv
  5181  0EAC  0023               	movlb	3	; select bank3
  5182  0EAD  0848               	movf	?___awdiv^(0+384),w
  5183  0EAE  0449               	iorwf	(?___awdiv+1)^(0+384),w
  5184  0EAF  1903               	btfsc	3,2
  5185  0EB0  2ECA               	goto	l3337
  5186  0EB1  300A               	movlw	10
  5187  0EB2  00C8               	movwf	___awdiv@divisor^(0+384)
  5188  0EB3  3000               	movlw	0
  5189  0EB4  00C9               	movwf	(___awdiv@divisor^(0+384)+1)
  5190  0EB5  0860               	movf	display_update@pdata^(0+384),w
  5191  0EB6  3E03               	addlw	3
  5192  0EB7  0086               	movwf	6
  5193  0EB8  3002               	movlw	2	; select bank4/5
  5194  0EB9  0087               	movwf	7
  5195  0EBA  0801               	movf	1,w
  5196  0EBB  00D5               	movwf	??_display_update^(0+384)
  5197  0EBC  01D6               	clrf	(??_display_update^(0+384)+1)
  5198  0EBD  0855               	movf	??_display_update^(0+384),w
  5199  0EBE  00CA               	movwf	___awdiv@dividend^(0+384)
  5200  0EBF  0856               	movf	(??_display_update+1)^(0+384),w
  5201  0EC0  00CB               	movwf	(___awdiv@dividend+1)^(0+384)
  5202  0EC1  318B  23F0  318E   	fcall	___awdiv
  5203  0EC4  0023               	movlb	3	; select bank3
  5204  0EC5  0849               	movf	(?___awdiv+1)^(0+384),w
  5205  0EC6  00DF               	movwf	(_display_update$1525+1)^(0+384)
  5206  0EC7  0848               	movf	?___awdiv^(0+384),w
  5207  0EC8  00DE               	movwf	_display_update$1525^(0+384)
  5208  0EC9  2ECE               	goto	l3339
  5209  0ECA                     l3337:	
  5210  0ECA  300A               	movlw	10
  5211  0ECB  00DE               	movwf	_display_update$1525^(0+384)
  5212  0ECC  3000               	movlw	0
  5213  0ECD  00DF               	movwf	(_display_update$1525^(0+384)+1)
  5214  0ECE                     l3339:	
  5215  0ECE  300A               	movlw	10
  5216  0ECF  00C8               	movwf	___awmod@divisor^(0+384)
  5217  0ED0  3000               	movlw	0
  5218  0ED1  00C9               	movwf	(___awmod@divisor^(0+384)+1)
  5219  0ED2  0860               	movf	display_update@pdata^(0+384),w
  5220  0ED3  3E03               	addlw	3
  5221  0ED4  0086               	movwf	6
  5222  0ED5  3002               	movlw	2	; select bank4/5
  5223  0ED6  0087               	movwf	7
  5224  0ED7  0801               	movf	1,w
  5225  0ED8  00D5               	movwf	??_display_update^(0+384)
  5226  0ED9  01D6               	clrf	(??_display_update^(0+384)+1)
  5227  0EDA  0855               	movf	??_display_update^(0+384),w
  5228  0EDB  00CA               	movwf	___awmod@dividend^(0+384)
  5229  0EDC  0856               	movf	(??_display_update+1)^(0+384),w
  5230  0EDD  00CB               	movwf	(___awmod@dividend+1)^(0+384)
  5231  0EDE  318B  2359  318E   	fcall	___awmod
  5232  0EE1  0023               	movlb	3	; select bank3
  5233  0EE2  0849               	movf	(?___awmod+1)^(0+384),w
  5234  0EE3  0085               	movwf	5
  5235  0EE4  0848               	movf	?___awmod^(0+384),w
  5236  0EE5  0084               	movwf	4
  5237  0EE6  3000               	movlw	low (_segmcode| (0+32768))
  5238  0EE7  0784               	addwf	4,f
  5239  0EE8  3090               	movlw	high (_segmcode| (0+32768))
  5240  0EE9  3D85               	addwfc	5,f
  5241  0EEA  0800               	movf	0,w	;code access
  5242  0EEB  00D7               	movwf	(??_display_update+2)^(0+384)
  5243  0EEC  0857               	movf	(??_display_update+2)^(0+384),w
  5244  0EED  00D1               	movwf	display_write_once@HR^(0+384)
  5245  0EEE  300A               	movlw	10
  5246  0EEF  00C8               	movwf	___awdiv@divisor^(0+384)
  5247  0EF0  3000               	movlw	0
  5248  0EF1  00C9               	movwf	(___awdiv@divisor^(0+384)+1)
  5249  0EF2  0860               	movf	display_update@pdata^(0+384),w
  5250  0EF3  3E04               	addlw	4
  5251  0EF4  0086               	movwf	6
  5252  0EF5  3002               	movlw	2	; select bank4/5
  5253  0EF6  0087               	movwf	7
  5254  0EF7  0801               	movf	1,w
  5255  0EF8  00D8               	movwf	(??_display_update+3)^(0+384)
  5256  0EF9  01D9               	clrf	((??_display_update+3)^(0+384)+1)
  5257  0EFA  0858               	movf	(??_display_update+3)^(0+384),w
  5258  0EFB  00CA               	movwf	___awdiv@dividend^(0+384)
  5259  0EFC  0859               	movf	(??_display_update+4)^(0+384),w
  5260  0EFD  00CB               	movwf	(___awdiv@dividend+1)^(0+384)
  5261  0EFE  318B  23F0  318E   	fcall	___awdiv
  5262  0F01  0023               	movlb	3	; select bank3
  5263  0F02  0849               	movf	(?___awdiv+1)^(0+384),w
  5264  0F03  0085               	movwf	5
  5265  0F04  0848               	movf	?___awdiv^(0+384),w
  5266  0F05  0084               	movwf	4
  5267  0F06  3000               	movlw	low (_segmcode| (0+32768))
  5268  0F07  0784               	addwf	4,f
  5269  0F08  3090               	movlw	high (_segmcode| (0+32768))
  5270  0F09  3D85               	addwfc	5,f
  5271  0F0A  0800               	movf	0,w	;code access
  5272  0F0B  00DA               	movwf	(??_display_update+5)^(0+384)
  5273  0F0C  085A               	movf	(??_display_update+5)^(0+384),w
  5274  0F0D  00D2               	movwf	display_write_once@ML^(0+384)
  5275  0F0E  300A               	movlw	10
  5276  0F0F  00C8               	movwf	___awmod@divisor^(0+384)
  5277  0F10  3000               	movlw	0
  5278  0F11  00C9               	movwf	(___awmod@divisor^(0+384)+1)
  5279  0F12  0860               	movf	display_update@pdata^(0+384),w
  5280  0F13  3E04               	addlw	4
  5281  0F14  0086               	movwf	6
  5282  0F15  3002               	movlw	2	; select bank4/5
  5283  0F16  0087               	movwf	7
  5284  0F17  0801               	movf	1,w
  5285  0F18  00DB               	movwf	(??_display_update+6)^(0+384)
  5286  0F19  01DC               	clrf	((??_display_update+6)^(0+384)+1)
  5287  0F1A  085B               	movf	(??_display_update+6)^(0+384),w
  5288  0F1B  00CA               	movwf	___awmod@dividend^(0+384)
  5289  0F1C  085C               	movf	(??_display_update+7)^(0+384),w
  5290  0F1D  00CB               	movwf	(___awmod@dividend+1)^(0+384)
  5291  0F1E  318B  2359  318E   	fcall	___awmod
  5292  0F21  0023               	movlb	3	; select bank3
  5293  0F22  0849               	movf	(?___awmod+1)^(0+384),w
  5294  0F23  0085               	movwf	5
  5295  0F24  0848               	movf	?___awmod^(0+384),w
  5296  0F25  0084               	movwf	4
  5297  0F26  3000               	movlw	low (_segmcode| (0+32768))
  5298  0F27  0784               	addwf	4,f
  5299  0F28  3090               	movlw	high (_segmcode| (0+32768))
  5300  0F29  3D85               	addwfc	5,f
  5301  0F2A  0800               	movf	0,w	;code access
  5302  0F2B  00DD               	movwf	(??_display_update+8)^(0+384)
  5303  0F2C  085D               	movf	(??_display_update+8)^(0+384),w
  5304  0F2D  00D3               	movwf	display_write_once@MR^(0+384)
  5305  0F2E  085F               	movf	(_display_update$1525+1)^(0+384),w
  5306  0F2F  0085               	movwf	5
  5307  0F30  085E               	movf	_display_update$1525^(0+384),w
  5308  0F31  0084               	movwf	4
  5309  0F32  3000               	movlw	low (_segmcode| (0+32768))
  5310  0F33  0784               	addwf	4,f
  5311  0F34  3090               	movlw	high (_segmcode| (0+32768))
  5312  0F35  3D85               	addwfc	5,f
  5313  0F36  0800               	movf	0,w	;code access
  5314  0F37  318A  2228         	fcall	_display_write_once
  5315  0F39  0008               	return
  5316  0F3A                     __end_of_display_update:	
  5317                           
  5318                           	psect	text10
  5319  0A28                     __ptext10:	
  5320 ;; *************** function _display_write_once *****************
  5321 ;; Defined at:
  5322 ;;		line 54 in file "display.c"
  5323 ;; Parameters:    Size  Location     Type
  5324 ;;  HL              1    wreg     unsigned char 
  5325 ;;  HR              1    9[BANK3 ] unsigned char 
  5326 ;;  ML              1   10[BANK3 ] unsigned char 
  5327 ;;  MR              1   11[BANK3 ] unsigned char 
  5328 ;; Auto vars:     Size  Location     Type
  5329 ;;  HL              1   12[BANK3 ] unsigned char 
  5330 ;; Return value:  Size  Location     Type
  5331 ;;                  1    wreg      void 
  5332 ;; Registers used:
  5333 ;;		wreg, status,2, status,0, pclath, cstack
  5334 ;; Tracked objects:
  5335 ;;		On entry : 0/0
  5336 ;;		On exit  : 0/0
  5337 ;;		Unchanged: 0/0
  5338 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5339 ;;      Params:         0       0       0       0       3       0       0       0       0       0       0       0       
      +0       0
  5340 ;;      Locals:         0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0
  5341 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5342 ;;      Totals:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  5343 ;;Total ram usage:        4 bytes
  5344 ;; Hardware stack levels used:    1
  5345 ;; Hardware stack levels required when called:   11
  5346 ;; This function calls:
  5347 ;;		_display_control595_delay
  5348 ;;		_display_write_byte
  5349 ;; This function is called by:
  5350 ;;		_display_update
  5351 ;; This function uses a non-reentrant model
  5352 ;;
  5353                           
  5354                           
  5355                           ;psect for function _display_write_once
  5356  0A28                     _display_write_once:	
  5357                           
  5358                           ;incstack = 0
  5359                           ; Regs used in _display_write_once: [wreg+status,2+status,0+pclath+cstack]
  5360                           ;display_write_once@HL stored from wreg
  5361  0A28  0023               	movlb	3	; select bank3
  5362  0A29  00D4               	movwf	display_write_once@HL^(0+384)
  5363                           
  5364                           ;display.c: 56:     display_write_byte(HL);
  5365  0A2A  0854               	movf	display_write_once@HL^(0+384),w
  5366  0A2B  318A  2275  318A   	fcall	_display_write_byte
  5367                           
  5368                           ;display.c: 57:     display_write_byte(HR);
  5369  0A2E  0023               	movlb	3	; select bank3
  5370  0A2F  0851               	movf	display_write_once@HR^(0+384),w
  5371  0A30  318A  2275  318A   	fcall	_display_write_byte
  5372                           
  5373                           ;display.c: 58:     display_write_byte(ML);
  5374  0A33  0023               	movlb	3	; select bank3
  5375  0A34  0852               	movf	display_write_once@ML^(0+384),w
  5376  0A35  318A  2275  318A   	fcall	_display_write_byte
  5377                           
  5378                           ;display.c: 59:     display_write_byte(MR);
  5379  0A38  0023               	movlb	3	; select bank3
  5380  0A39  0853               	movf	display_write_once@MR^(0+384),w
  5381  0A3A  318A  2275  318A   	fcall	_display_write_byte
  5382                           
  5383                           ;display.c: 62:     LATBbits.LATB0 = PIN_LOW;
  5384  0A3D  0022               	movlb	2	; select bank2
  5385  0A3E  100D               	bcf	13,0	;volatile
  5386                           
  5387                           ;display.c: 63:     display_control595_delay();
  5388  0A3F  3188  20A8  318A   	fcall	_display_control595_delay
  5389                           
  5390                           ;display.c: 64:     LATBbits.LATB0 = PIN_HIGH;
  5391  0A42  0022               	movlb	2	; select bank2
  5392  0A43  140D               	bsf	13,0	;volatile
  5393                           
  5394                           ;display.c: 65:     display_control595_delay();
  5395  0A44  3188  20A8  318A   	fcall	_display_control595_delay
  5396                           
  5397                           ;display.c: 67:     LATBbits.LATB1 = PIN_HIGH;
  5398  0A47  0022               	movlb	2	; select bank2
  5399  0A48  148D               	bsf	13,1	;volatile
  5400                           
  5401                           ;display.c: 68:  display_control595_delay();
  5402  0A49  3188  20A8         	fcall	_display_control595_delay
  5403                           
  5404                           ;display.c: 69:     LATBbits.LATB1 = PIN_LOW;
  5405  0A4B  0022               	movlb	2	; select bank2
  5406  0A4C  108D               	bcf	13,1	;volatile
  5407  0A4D  0008               	return
  5408  0A4E                     __end_of_display_write_once:	
  5409                           
  5410                           	psect	text11
  5411  0A75                     __ptext11:	
  5412 ;; *************** function _display_write_byte *****************
  5413 ;; Defined at:
  5414 ;;		line 42 in file "display.c"
  5415 ;; Parameters:    Size  Location     Type
  5416 ;;  data            1    wreg     unsigned char 
  5417 ;; Auto vars:     Size  Location     Type
  5418 ;;  data            1    4[BANK3 ] unsigned char 
  5419 ;;  i               1    5[BANK3 ] unsigned char 
  5420 ;; Return value:  Size  Location     Type
  5421 ;;                  1    wreg      void 
  5422 ;; Registers used:
  5423 ;;		wreg, status,2, status,0, pclath, cstack
  5424 ;; Tracked objects:
  5425 ;;		On entry : 0/0
  5426 ;;		On exit  : 0/0
  5427 ;;		Unchanged: 0/0
  5428 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5429 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5430 ;;      Locals:         0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0
  5431 ;;      Temps:          0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0
  5432 ;;      Totals:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  5433 ;;Total ram usage:        4 bytes
  5434 ;; Hardware stack levels used:    1
  5435 ;; Hardware stack levels required when called:   10
  5436 ;; This function calls:
  5437 ;;		_display_control595_delay
  5438 ;; This function is called by:
  5439 ;;		_display_write_once
  5440 ;; This function uses a non-reentrant model
  5441 ;;
  5442                           
  5443                           
  5444                           ;psect for function _display_write_byte
  5445  0A75                     _display_write_byte:	
  5446                           
  5447                           ;incstack = 0
  5448                           ; Regs used in _display_write_byte: [wreg+status,2+status,0+pclath+cstack]
  5449                           ;display_write_byte@data stored from wreg
  5450  0A75  0023               	movlb	3	; select bank3
  5451  0A76  00CC               	movwf	display_write_byte@data^(0+384)
  5452                           
  5453                           ;display.c: 43:     u8 i;;display.c: 44:     for(i = 0; i < 8; i++){
  5454  0A77  01CD               	clrf	display_write_byte@i^(0+384)
  5455  0A78                     l2899:	
  5456                           
  5457                           ;display.c: 45:   LATBbits.LATB5 = (data & 0x80) >> 7;
  5458  0A78  084C               	movf	display_write_byte@data^(0+384),w
  5459  0A79  00CA               	movwf	??_display_write_byte^(0+384)
  5460  0A7A  3007               	movlw	7
  5461  0A7B                     u2445:	
  5462  0A7B  36CA               	lsrf	??_display_write_byte^(0+384),f
  5463  0A7C  0B89               	decfsz	9,f
  5464  0A7D  2A7B               	goto	u2445
  5465  0A7E  084A               	movf	??_display_write_byte^(0+384),w
  5466  0A7F  3901               	andlw	1
  5467  0A80  00CB               	movwf	(??_display_write_byte+1)^(0+384)
  5468  0A81  0ECB               	swapf	(??_display_write_byte+1)^(0+384),f
  5469  0A82  0DCB               	rlf	(??_display_write_byte+1)^(0+384),f
  5470  0A83  0022               	movlb	2	; select bank2
  5471  0A84  080D               	movf	13,w	;volatile
  5472  0A85  0023               	movlb	3	; select bank3
  5473  0A86  064B               	xorwf	(??_display_write_byte+1)^(0+384),w
  5474  0A87  39DF               	andlw	-33
  5475  0A88  064B               	xorwf	(??_display_write_byte+1)^(0+384),w
  5476  0A89  0022               	movlb	2	; select bank2
  5477  0A8A  008D               	movwf	13	;volatile
  5478                           
  5479                           ;display.c: 46:         LATBbits.LATB0 = PIN_LOW;
  5480  0A8B  100D               	bcf	13,0	;volatile
  5481                           
  5482                           ;display.c: 47:   display_control595_delay();
  5483  0A8C  3188  20A8  318A   	fcall	_display_control595_delay
  5484                           
  5485                           ;display.c: 48:         LATBbits.LATB0 = PIN_HIGH;
  5486  0A8F  0022               	movlb	2	; select bank2
  5487  0A90  140D               	bsf	13,0	;volatile
  5488                           
  5489                           ;display.c: 49:   display_control595_delay();
  5490  0A91  3188  20A8  318A   	fcall	_display_control595_delay
  5491                           
  5492                           ;display.c: 50:         data <<= 1;
  5493  0A94  1003               	clrc
  5494  0A95  0023               	movlb	3	; select bank3
  5495  0A96  0DCC               	rlf	display_write_byte@data^(0+384),f
  5496                           
  5497                           ;display.c: 51:     }
  5498  0A97  3001               	movlw	1
  5499  0A98  00CA               	movwf	??_display_write_byte^(0+384)
  5500  0A99  084A               	movf	??_display_write_byte^(0+384),w
  5501  0A9A  07CD               	addwf	display_write_byte@i^(0+384),f
  5502  0A9B  3008               	movlw	8
  5503  0A9C  024D               	subwf	display_write_byte@i^(0+384),w
  5504  0A9D  1803               	btfsc	3,0
  5505  0A9E  0008               	return
  5506  0A9F  2A78               	goto	l2899
  5507  0AA0                     __end_of_display_write_byte:	
  5508                           
  5509                           	psect	text12
  5510  08A8                     __ptext12:	
  5511 ;; *************** function _display_control595_delay *****************
  5512 ;; Defined at:
  5513 ;;		line 26 in file "display.c"
  5514 ;; Parameters:    Size  Location     Type
  5515 ;;		None
  5516 ;; Auto vars:     Size  Location     Type
  5517 ;;  times           1    1[BANK3 ] unsigned char 
  5518 ;; Return value:  Size  Location     Type
  5519 ;;                  1    wreg      void 
  5520 ;; Registers used:
  5521 ;;		wreg, status,2, status,0
  5522 ;; Tracked objects:
  5523 ;;		On entry : 0/0
  5524 ;;		On exit  : 0/0
  5525 ;;		Unchanged: 0/0
  5526 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5527 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5528 ;;      Locals:         0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0
  5529 ;;      Temps:          0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0
  5530 ;;      Totals:         0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0
  5531 ;;Total ram usage:        2 bytes
  5532 ;; Hardware stack levels used:    1
  5533 ;; Hardware stack levels required when called:    9
  5534 ;; This function calls:
  5535 ;;		Nothing
  5536 ;; This function is called by:
  5537 ;;		_display_write_byte
  5538 ;;		_display_write_once
  5539 ;; This function uses a non-reentrant model
  5540 ;;
  5541                           
  5542                           
  5543                           ;psect for function _display_control595_delay
  5544  08A8                     _display_control595_delay:	
  5545                           
  5546                           ;display.c: 27:    u8 times = 10;
  5547                           
  5548                           ;incstack = 0
  5549                           ; Regs used in _display_control595_delay: [wreg+status,2+status,0]
  5550  08A8  300A               	movlw	10
  5551  08A9  0023               	movlb	3	; select bank3
  5552  08AA  00C8               	movwf	??_display_control595_delay^(0+384)
  5553  08AB  0848               	movf	??_display_control595_delay^(0+384),w
  5554  08AC  00C9               	movwf	display_control595_delay@times^(0+384)
  5555  08AD                     l558:	
  5556                           ;display.c: 31:    }
  5557                           
  5558                           ;display.c: 28:    while(times > 0){
  5559                           
  5560                           
  5561                           ;display.c: 28:    while(times > 0){
  5562  08AD  0849               	movf	display_control595_delay@times^(0+384),w
  5563  08AE  1903               	btfsc	3,2
  5564  08AF  0008               	return
  5565                           
  5566                           ;display.c: 29:     __nop();
  5567  08B0  0000               	nop
  5568                           
  5569                           ;display.c: 30:        times--;
  5570  08B1  3001               	movlw	1
  5571  08B2  0023               	movlb	3	; select bank3
  5572  08B3  02C9               	subwf	display_control595_delay@times^(0+384),f
  5573  08B4  28AD               	goto	l558
  5574  08B5                     __end_of_display_control595_delay:	
  5575                           
  5576                           	psect	text13
  5577  0002                     __ptext13:	
  5578 ;; *************** function _data_getdata *****************
  5579 ;; Defined at:
  5580 ;;		line 9 in file "data.c"
  5581 ;; Parameters:    Size  Location     Type
  5582 ;;		None
  5583 ;; Auto vars:     Size  Location     Type
  5584 ;;		None
  5585 ;; Return value:  Size  Location     Type
  5586 ;;                  1    wreg      PTR volatile struct .
  5587 ;; Registers used:
  5588 ;;		wreg
  5589 ;; Tracked objects:
  5590 ;;		On entry : 0/0
  5591 ;;		On exit  : 0/0
  5592 ;;		Unchanged: 0/0
  5593 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5594 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5595 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5596 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5597 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5598 ;;Total ram usage:        0 bytes
  5599 ;; Hardware stack levels used:    1
  5600 ;; Hardware stack levels required when called:    9
  5601 ;; This function calls:
  5602 ;;		Nothing
  5603 ;; This function is called by:
  5604 ;;		_init_env
  5605 ;;		_display_update
  5606 ;;		_tmp_change
  5607 ;; This function uses a non-reentrant model
  5608 ;;
  5609                           
  5610                           
  5611                           ;psect for function _data_getdata
  5612  0002                     _data_getdata:	
  5613                           
  5614                           ;data.c: 11:     return &g_data;
  5615                           
  5616                           ;incstack = 0
  5617                           ; Regs used in _data_getdata: [wreg]
  5618  0002  3020               	movlw	(low (_g_data| (0+512)))& (0+255)
  5619  0003  0008               	return
  5620  0004                     __end_of_data_getdata:	
  5621                           
  5622                           	psect	text14
  5623  0B59                     __ptext14:	
  5624 ;; *************** function ___awmod *****************
  5625 ;; Defined at:
  5626 ;;		line 5 in file "E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\awmod.c"
  5627 ;; Parameters:    Size  Location     Type
  5628 ;;  divisor         2    0[BANK3 ] int 
  5629 ;;  dividend        2    2[BANK3 ] int 
  5630 ;; Auto vars:     Size  Location     Type
  5631 ;;  sign            1    6[BANK3 ] unsigned char 
  5632 ;;  counter         1    5[BANK3 ] unsigned char 
  5633 ;; Return value:  Size  Location     Type
  5634 ;;                  2    0[BANK3 ] int 
  5635 ;; Registers used:
  5636 ;;		wreg, status,2, status,0
  5637 ;; Tracked objects:
  5638 ;;		On entry : 0/0
  5639 ;;		On exit  : 0/0
  5640 ;;		Unchanged: 0/0
  5641 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5642 ;;      Params:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  5643 ;;      Locals:         0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0
  5644 ;;      Temps:          0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0
  5645 ;;      Totals:         0       0       0       0       7       0       0       0       0       0       0       0       
      +0       0
  5646 ;;Total ram usage:        7 bytes
  5647 ;; Hardware stack levels used:    1
  5648 ;; Hardware stack levels required when called:    9
  5649 ;; This function calls:
  5650 ;;		Nothing
  5651 ;; This function is called by:
  5652 ;;		_display_update
  5653 ;; This function uses a non-reentrant model
  5654 ;;
  5655                           
  5656                           
  5657                           ;psect for function ___awmod
  5658  0B59                     ___awmod:	
  5659                           
  5660                           ;incstack = 0
  5661                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  5662  0B59  0023               	movlb	3	; select bank3
  5663  0B5A  01CE               	clrf	___awmod@sign^(0+384)
  5664  0B5B  1FCB               	btfss	(___awmod@dividend+1)^(0+384),7
  5665  0B5C  2B64               	goto	l3283
  5666  0B5D  09CA               	comf	___awmod@dividend^(0+384),f
  5667  0B5E  09CB               	comf	(___awmod@dividend+1)^(0+384),f
  5668  0B5F  0ACA               	incf	___awmod@dividend^(0+384),f
  5669  0B60  1903               	skipnz
  5670  0B61  0ACB               	incf	(___awmod@dividend+1)^(0+384),f
  5671  0B62  01CE               	clrf	___awmod@sign^(0+384)
  5672  0B63  0ACE               	incf	___awmod@sign^(0+384),f
  5673  0B64                     l3283:	
  5674  0B64  1FC9               	btfss	(___awmod@divisor+1)^(0+384),7
  5675  0B65  2B6B               	goto	l3287
  5676  0B66  09C8               	comf	___awmod@divisor^(0+384),f
  5677  0B67  09C9               	comf	(___awmod@divisor+1)^(0+384),f
  5678  0B68  0AC8               	incf	___awmod@divisor^(0+384),f
  5679  0B69  1903               	skipnz
  5680  0B6A  0AC9               	incf	(___awmod@divisor+1)^(0+384),f
  5681  0B6B                     l3287:	
  5682  0B6B  0848               	movf	___awmod@divisor^(0+384),w
  5683  0B6C  0449               	iorwf	(___awmod@divisor+1)^(0+384),w
  5684  0B6D  1903               	btfsc	3,2
  5685  0B6E  2B92               	goto	l3305
  5686  0B6F  01CD               	clrf	___awmod@counter^(0+384)
  5687  0B70  0ACD               	incf	___awmod@counter^(0+384),f
  5688  0B71                     l3295:	
  5689  0B71  1BC9               	btfsc	(___awmod@divisor+1)^(0+384),7
  5690  0B72  2B7D               	goto	l3297
  5691  0B73  3001               	movlw	1
  5692  0B74                     u3135:	
  5693  0B74  35C8               	lslf	___awmod@divisor^(0+384),f
  5694  0B75  0DC9               	rlf	(___awmod@divisor+1)^(0+384),f
  5695  0B76  0B89               	decfsz	9,f
  5696  0B77  2B74               	goto	u3135
  5697  0B78  3001               	movlw	1
  5698  0B79  00CC               	movwf	??___awmod^(0+384)
  5699  0B7A  084C               	movf	??___awmod^(0+384),w
  5700  0B7B  07CD               	addwf	___awmod@counter^(0+384),f
  5701  0B7C  2B71               	goto	l3295
  5702  0B7D                     l3297:	
  5703  0B7D  0849               	movf	(___awmod@divisor+1)^(0+384),w
  5704  0B7E  024B               	subwf	(___awmod@dividend+1)^(0+384),w
  5705  0B7F  1D03               	skipz
  5706  0B80  2B83               	goto	u3155
  5707  0B81  0848               	movf	___awmod@divisor^(0+384),w
  5708  0B82  024A               	subwf	___awmod@dividend^(0+384),w
  5709  0B83                     u3155:	
  5710  0B83  1C03               	skipc
  5711  0B84  2B89               	goto	l3301
  5712  0B85  0848               	movf	___awmod@divisor^(0+384),w
  5713  0B86  02CA               	subwf	___awmod@dividend^(0+384),f
  5714  0B87  0849               	movf	(___awmod@divisor+1)^(0+384),w
  5715  0B88  3BCB               	subwfb	(___awmod@dividend+1)^(0+384),f
  5716  0B89                     l3301:	
  5717  0B89  3001               	movlw	1
  5718  0B8A                     u3165:	
  5719  0B8A  36C9               	lsrf	(___awmod@divisor+1)^(0+384),f
  5720  0B8B  0CC8               	rrf	___awmod@divisor^(0+384),f
  5721  0B8C  0B89               	decfsz	9,f
  5722  0B8D  2B8A               	goto	u3165
  5723  0B8E  3001               	movlw	1
  5724  0B8F  02CD               	subwf	___awmod@counter^(0+384),f
  5725  0B90  1D03               	btfss	3,2
  5726  0B91  2B7D               	goto	l3297
  5727  0B92                     l3305:	
  5728  0B92  084E               	movf	___awmod@sign^(0+384),w
  5729  0B93  1903               	btfsc	3,2
  5730  0B94  2B9A               	goto	l3309
  5731  0B95  09CA               	comf	___awmod@dividend^(0+384),f
  5732  0B96  09CB               	comf	(___awmod@dividend+1)^(0+384),f
  5733  0B97  0ACA               	incf	___awmod@dividend^(0+384),f
  5734  0B98  1903               	skipnz
  5735  0B99  0ACB               	incf	(___awmod@dividend+1)^(0+384),f
  5736  0B9A                     l3309:	
  5737  0B9A  084B               	movf	(___awmod@dividend+1)^(0+384),w
  5738  0B9B  00C9               	movwf	(?___awmod+1)^(0+384)
  5739  0B9C  084A               	movf	___awmod@dividend^(0+384),w
  5740  0B9D  00C8               	movwf	?___awmod^(0+384)
  5741  0B9E  0008               	return
  5742  0B9F                     __end_of___awmod:	
  5743                           
  5744                           	psect	text15
  5745  0BF0                     __ptext15:	
  5746 ;; *************** function ___awdiv *****************
  5747 ;; Defined at:
  5748 ;;		line 5 in file "E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\awdiv.c"
  5749 ;; Parameters:    Size  Location     Type
  5750 ;;  divisor         2    0[BANK3 ] int 
  5751 ;;  dividend        2    2[BANK3 ] int 
  5752 ;; Auto vars:     Size  Location     Type
  5753 ;;  quotient        2    7[BANK3 ] int 
  5754 ;;  sign            1    6[BANK3 ] unsigned char 
  5755 ;;  counter         1    5[BANK3 ] unsigned char 
  5756 ;; Return value:  Size  Location     Type
  5757 ;;                  2    0[BANK3 ] int 
  5758 ;; Registers used:
  5759 ;;		wreg, status,2, status,0
  5760 ;; Tracked objects:
  5761 ;;		On entry : 0/0
  5762 ;;		On exit  : 0/0
  5763 ;;		Unchanged: 0/0
  5764 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5765 ;;      Params:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  5766 ;;      Locals:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  5767 ;;      Temps:          0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0
  5768 ;;      Totals:         0       0       0       0       9       0       0       0       0       0       0       0       
      +0       0
  5769 ;;Total ram usage:        9 bytes
  5770 ;; Hardware stack levels used:    1
  5771 ;; Hardware stack levels required when called:    9
  5772 ;; This function calls:
  5773 ;;		Nothing
  5774 ;; This function is called by:
  5775 ;;		_display_update
  5776 ;; This function uses a non-reentrant model
  5777 ;;
  5778                           
  5779                           
  5780                           ;psect for function ___awdiv
  5781  0BF0                     ___awdiv:	
  5782                           
  5783                           ;incstack = 0
  5784                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  5785  0BF0  0023               	movlb	3	; select bank3
  5786  0BF1  01CE               	clrf	___awdiv@sign^(0+384)
  5787  0BF2  1FC9               	btfss	(___awdiv@divisor+1)^(0+384),7
  5788  0BF3  2BFB               	goto	l3239
  5789  0BF4  09C8               	comf	___awdiv@divisor^(0+384),f
  5790  0BF5  09C9               	comf	(___awdiv@divisor+1)^(0+384),f
  5791  0BF6  0AC8               	incf	___awdiv@divisor^(0+384),f
  5792  0BF7  1903               	skipnz
  5793  0BF8  0AC9               	incf	(___awdiv@divisor+1)^(0+384),f
  5794  0BF9  01CE               	clrf	___awdiv@sign^(0+384)
  5795  0BFA  0ACE               	incf	___awdiv@sign^(0+384),f
  5796  0BFB                     l3239:	
  5797  0BFB  1FCB               	btfss	(___awdiv@dividend+1)^(0+384),7
  5798  0BFC  2C06               	goto	l3245
  5799  0BFD  09CA               	comf	___awdiv@dividend^(0+384),f
  5800  0BFE  09CB               	comf	(___awdiv@dividend+1)^(0+384),f
  5801  0BFF  0ACA               	incf	___awdiv@dividend^(0+384),f
  5802  0C00  1903               	skipnz
  5803  0C01  0ACB               	incf	(___awdiv@dividend+1)^(0+384),f
  5804  0C02  3001               	movlw	1
  5805  0C03  00CC               	movwf	??___awdiv^(0+384)
  5806  0C04  084C               	movf	??___awdiv^(0+384),w
  5807  0C05  06CE               	xorwf	___awdiv@sign^(0+384),f
  5808  0C06                     l3245:	
  5809  0C06  01CF               	clrf	___awdiv@quotient^(0+384)
  5810  0C07  01D0               	clrf	(___awdiv@quotient+1)^(0+384)
  5811  0C08  0848               	movf	___awdiv@divisor^(0+384),w
  5812  0C09  0449               	iorwf	(___awdiv@divisor+1)^(0+384),w
  5813  0C0A  1903               	btfsc	3,2
  5814  0C0B  2C35               	goto	l3267
  5815  0C0C  01CD               	clrf	___awdiv@counter^(0+384)
  5816  0C0D  0ACD               	incf	___awdiv@counter^(0+384),f
  5817  0C0E                     l3255:	
  5818  0C0E  1BC9               	btfsc	(___awdiv@divisor+1)^(0+384),7
  5819  0C0F  2C1A               	goto	l3257
  5820  0C10  3001               	movlw	1
  5821  0C11                     u3035:	
  5822  0C11  35C8               	lslf	___awdiv@divisor^(0+384),f
  5823  0C12  0DC9               	rlf	(___awdiv@divisor+1)^(0+384),f
  5824  0C13  0B89               	decfsz	9,f
  5825  0C14  2C11               	goto	u3035
  5826  0C15  3001               	movlw	1
  5827  0C16  00CC               	movwf	??___awdiv^(0+384)
  5828  0C17  084C               	movf	??___awdiv^(0+384),w
  5829  0C18  07CD               	addwf	___awdiv@counter^(0+384),f
  5830  0C19  2C0E               	goto	l3255
  5831  0C1A                     l3257:	
  5832  0C1A  3001               	movlw	1
  5833  0C1B                     u3055:	
  5834  0C1B  35CF               	lslf	___awdiv@quotient^(0+384),f
  5835  0C1C  0DD0               	rlf	(___awdiv@quotient+1)^(0+384),f
  5836  0C1D  0B89               	decfsz	9,f
  5837  0C1E  2C1B               	goto	u3055
  5838  0C1F  0849               	movf	(___awdiv@divisor+1)^(0+384),w
  5839  0C20  024B               	subwf	(___awdiv@dividend+1)^(0+384),w
  5840  0C21  1D03               	skipz
  5841  0C22  2C25               	goto	u3065
  5842  0C23  0848               	movf	___awdiv@divisor^(0+384),w
  5843  0C24  024A               	subwf	___awdiv@dividend^(0+384),w
  5844  0C25                     u3065:	
  5845  0C25  1C03               	skipc
  5846  0C26  2C2C               	goto	l3263
  5847  0C27  0848               	movf	___awdiv@divisor^(0+384),w
  5848  0C28  02CA               	subwf	___awdiv@dividend^(0+384),f
  5849  0C29  0849               	movf	(___awdiv@divisor+1)^(0+384),w
  5850  0C2A  3BCB               	subwfb	(___awdiv@dividend+1)^(0+384),f
  5851  0C2B  144F               	bsf	___awdiv@quotient^(0+384),0
  5852  0C2C                     l3263:	
  5853  0C2C  3001               	movlw	1
  5854  0C2D                     u3075:	
  5855  0C2D  36C9               	lsrf	(___awdiv@divisor+1)^(0+384),f
  5856  0C2E  0CC8               	rrf	___awdiv@divisor^(0+384),f
  5857  0C2F  0B89               	decfsz	9,f
  5858  0C30  2C2D               	goto	u3075
  5859  0C31  3001               	movlw	1
  5860  0C32  02CD               	subwf	___awdiv@counter^(0+384),f
  5861  0C33  1D03               	btfss	3,2
  5862  0C34  2C1A               	goto	l3257
  5863  0C35                     l3267:	
  5864  0C35  084E               	movf	___awdiv@sign^(0+384),w
  5865  0C36  1903               	btfsc	3,2
  5866  0C37  2C3D               	goto	l3271
  5867  0C38  09CF               	comf	___awdiv@quotient^(0+384),f
  5868  0C39  09D0               	comf	(___awdiv@quotient+1)^(0+384),f
  5869  0C3A  0ACF               	incf	___awdiv@quotient^(0+384),f
  5870  0C3B  1903               	skipnz
  5871  0C3C  0AD0               	incf	(___awdiv@quotient+1)^(0+384),f
  5872  0C3D                     l3271:	
  5873  0C3D  0850               	movf	(___awdiv@quotient+1)^(0+384),w
  5874  0C3E  00C9               	movwf	(?___awdiv+1)^(0+384)
  5875  0C3F  084F               	movf	___awdiv@quotient^(0+384),w
  5876  0C40  00C8               	movwf	?___awdiv^(0+384)
  5877  0C41  0008               	return
  5878  0C42                     __end_of___awdiv:	
  5879                           
  5880                           	psect	text16
  5881  07F7                     __ptext16:	
  5882 ;; *************** function _display_set *****************
  5883 ;; Defined at:
  5884 ;;		line 14 in file "display.c"
  5885 ;; Parameters:    Size  Location     Type
  5886 ;;  ison            1    wreg     enum E5232
  5887 ;; Auto vars:     Size  Location     Type
  5888 ;;  ison            1    0[BANK3 ] enum E5232
  5889 ;; Return value:  Size  Location     Type
  5890 ;;                  1    wreg      void 
  5891 ;; Registers used:
  5892 ;;		wreg, status,0
  5893 ;; Tracked objects:
  5894 ;;		On entry : 0/0
  5895 ;;		On exit  : 0/0
  5896 ;;		Unchanged: 0/0
  5897 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5898 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5899 ;;      Locals:         0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0
  5900 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5901 ;;      Totals:         0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0
  5902 ;;Total ram usage:        1 bytes
  5903 ;; Hardware stack levels used:    1
  5904 ;; Hardware stack levels required when called:    9
  5905 ;; This function calls:
  5906 ;;		Nothing
  5907 ;; This function is called by:
  5908 ;;		_init_env
  5909 ;; This function uses a non-reentrant model
  5910 ;;
  5911                           
  5912                           
  5913                           ;psect for function _display_set
  5914  07F7                     _display_set:	
  5915                           
  5916                           ;incstack = 0
  5917                           ; Regs used in _display_set: [wreg+status,0]
  5918                           ;display_set@ison stored from wreg
  5919  07F7  0023               	movlb	3	; select bank3
  5920  07F8  00C8               	movwf	display_set@ison^(0+384)
  5921                           
  5922                           ;display.c: 14: void display_set(BOOL ison);display.c: 15: {;display.c: 16:     PORTAbit
      +                          s.RA0 = ison;
  5923  07F9  0C48               	rrf	display_set@ison^(0+384),w
  5924  07FA  0020               	movlb	0	; select bank0
  5925  07FB  1C03               	skipc
  5926  07FC  100C               	bcf	12,0	;volatile
  5927  07FD  1803               	skipnc
  5928  07FE  140C               	bsf	12,0	;volatile
  5929  07FF  0008               	return
  5930  0800                     __end_of_display_set:	
  5931                           
  5932                           	psect	text17
  5933  0854                     __ptext17:	
  5934 ;; *************** function _capture_init *****************
  5935 ;; Defined at:
  5936 ;;		line 25 in file "hardware.c"
  5937 ;; Parameters:    Size  Location     Type
  5938 ;;		None
  5939 ;; Auto vars:     Size  Location     Type
  5940 ;;		None
  5941 ;; Return value:  Size  Location     Type
  5942 ;;                  1    wreg      unsigned char 
  5943 ;; Registers used:
  5944 ;;		wreg, status,2, status,0, pclath, cstack
  5945 ;; Tracked objects:
  5946 ;;		On entry : 0/0
  5947 ;;		On exit  : 0/0
  5948 ;;		Unchanged: 0/0
  5949 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5950 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5951 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5952 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5953 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5954 ;;Total ram usage:        0 bytes
  5955 ;; Hardware stack levels used:    1
  5956 ;; Hardware stack levels required when called:   10
  5957 ;; This function calls:
  5958 ;;		_capture_setEdge
  5959 ;; This function is called by:
  5960 ;;		_main
  5961 ;; This function uses a non-reentrant model
  5962 ;;
  5963                           
  5964                           
  5965                           ;psect for function _capture_init
  5966  0854                     _capture_init:	
  5967                           
  5968                           ;hardware.c: 30:     capture_setEdge((0b0100));
  5969                           
  5970                           ;incstack = 0
  5971                           ; Regs used in _capture_init: [wreg+status,2+status,0+pclath+cstack]
  5972  0854  3004               	movlw	4
  5973  0855  3188  20E0         	fcall	_capture_setEdge
  5974                           
  5975                           ;hardware.c: 31:     TRISCbits.TRISC1 = 1;
  5976  0857  0021               	movlb	1	; select bank1
  5977  0858  148E               	bsf	14,1	;volatile
  5978                           
  5979                           ;hardware.c: 33:     PIR2bits.CCP2IF = 0;
  5980  0859  0020               	movlb	0	; select bank0
  5981  085A  1012               	bcf	18,0	;volatile
  5982  085B  0008               	return
  5983  085C                     __end_of_capture_init:	
  5984                           
  5985                           	psect	text18
  5986  08E0                     __ptext18:	
  5987 ;; *************** function _capture_setEdge *****************
  5988 ;; Defined at:
  5989 ;;		line 12 in file "hardware.c"
  5990 ;; Parameters:    Size  Location     Type
  5991 ;;  edge            1    wreg     unsigned char 
  5992 ;; Auto vars:     Size  Location     Type
  5993 ;;  edge            1    0[BANK3 ] unsigned char 
  5994 ;; Return value:  Size  Location     Type
  5995 ;;                  2  485[None  ] int 
  5996 ;; Registers used:
  5997 ;;		wreg, status,2, status,0
  5998 ;; Tracked objects:
  5999 ;;		On entry : 0/0
  6000 ;;		On exit  : 0/0
  6001 ;;		Unchanged: 0/0
  6002 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6003 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6004 ;;      Locals:         0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0
  6005 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6006 ;;      Totals:         0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0
  6007 ;;Total ram usage:        1 bytes
  6008 ;; Hardware stack levels used:    1
  6009 ;; Hardware stack levels required when called:    9
  6010 ;; This function calls:
  6011 ;;		Nothing
  6012 ;; This function is called by:
  6013 ;;		_capture_init
  6014 ;; This function uses a non-reentrant model
  6015 ;;
  6016                           
  6017                           
  6018                           ;psect for function _capture_setEdge
  6019  08E0                     _capture_setEdge:	
  6020                           
  6021                           ;incstack = 0
  6022                           ; Regs used in _capture_setEdge: [wreg+status,2+status,0]
  6023                           ;capture_setEdge@edge stored from wreg
  6024  08E0  0023               	movlb	3	; select bank3
  6025  08E1  00C8               	movwf	capture_setEdge@edge^(0+384)
  6026                           
  6027                           ;hardware.c: 12: static int capture_setEdge(u8 edge);hardware.c: 13: {;hardware.c: 14:  
      +                             if((edge == (0b0101)) || (edge == (0b0100)))
  6028  08E2  3005               	movlw	5
  6029  08E3  0648               	xorwf	capture_setEdge@edge^(0+384),w
  6030  08E4  1903               	btfsc	3,2
  6031  08E5  28EA               	goto	l3605
  6032  08E6  3004               	movlw	4
  6033  08E7  0648               	xorwf	capture_setEdge@edge^(0+384),w
  6034  08E8  1D03               	btfss	3,2
  6035  08E9  0008               	return
  6036  08EA                     l3605:	
  6037                           
  6038                           ;hardware.c: 15:     {;hardware.c: 16:         CCP2CONbits.CCP2M = edge;
  6039  08EA  0025               	movlb	5	; select bank5
  6040  08EB  081A               	movf	26,w	;volatile
  6041  08EC  0023               	movlb	3	; select bank3
  6042  08ED  0648               	xorwf	capture_setEdge@edge^(0+384),w
  6043  08EE  39F0               	andlw	-16
  6044  08EF  0648               	xorwf	capture_setEdge@edge^(0+384),w
  6045  08F0  0025               	movlb	5	; select bank5
  6046  08F1  009A               	movwf	26	;volatile
  6047  08F2  0008               	return
  6048  08F3                     __end_of_capture_setEdge:	
  6049                           
  6050                           	psect	text19
  6051  08C2                     __ptext19:	
  6052 ;; *************** function _capture_Set *****************
  6053 ;; Defined at:
  6054 ;;		line 38 in file "hardware.c"
  6055 ;; Parameters:    Size  Location     Type
  6056 ;;  isON            1    wreg     unsigned char 
  6057 ;; Auto vars:     Size  Location     Type
  6058 ;;  isON            1    0[BANK3 ] unsigned char 
  6059 ;; Return value:  Size  Location     Type
  6060 ;;                  1    wreg      unsigned char 
  6061 ;; Registers used:
  6062 ;;		wreg, status,2, status,0
  6063 ;; Tracked objects:
  6064 ;;		On entry : 0/0
  6065 ;;		On exit  : 0/0
  6066 ;;		Unchanged: 0/0
  6067 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6068 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6069 ;;      Locals:         0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0
  6070 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6071 ;;      Totals:         0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0
  6072 ;;Total ram usage:        1 bytes
  6073 ;; Hardware stack levels used:    1
  6074 ;; Hardware stack levels required when called:    9
  6075 ;; This function calls:
  6076 ;;		Nothing
  6077 ;; This function is called by:
  6078 ;;		_main
  6079 ;; This function uses a non-reentrant model
  6080 ;;
  6081                           
  6082                           
  6083                           ;psect for function _capture_Set
  6084  08C2                     _capture_Set:	
  6085                           
  6086                           ;incstack = 0
  6087                           ; Regs used in _capture_Set: [wreg+status,2+status,0]
  6088                           ;capture_Set@isON stored from wreg
  6089  08C2  0023               	movlb	3	; select bank3
  6090  08C3  00C8               	movwf	capture_Set@isON^(0+384)
  6091                           
  6092                           ;hardware.c: 38: u8 capture_Set(u8 isON);hardware.c: 39: {;hardware.c: 42:     PIR2bits.
      +                          CCP2IF = 0;
  6093  08C4  0020               	movlb	0	; select bank0
  6094  08C5  1012               	bcf	18,0	;volatile
  6095                           
  6096                           ;hardware.c: 45:     PIE2bits.CCP2IE = (isON)? 1 : 0;
  6097  08C6  0023               	movlb	3	; select bank3
  6098  08C7  0848               	movf	capture_Set@isON^(0+384),w
  6099  08C8  1903               	btfsc	3,2
  6100  08C9  28CD               	goto	u3680
  6101  08CA  0021               	movlb	1	; select bank1
  6102  08CB  1412               	bsf	18,0	;volatile
  6103  08CC  0008               	return
  6104  08CD                     u3680:	
  6105  08CD  0021               	movlb	1	; select bank1
  6106  08CE  1012               	bcf	18,0	;volatile
  6107  08CF  0008               	return
  6108  08D0                     __end_of_capture_Set:	
  6109                           
  6110                           	psect	intentry
  6111  0004                     __pintentry:	
  6112 ;; *************** function _ISR *****************
  6113 ;; Defined at:
  6114 ;;		line 197 in file "main.c"
  6115 ;; Parameters:    Size  Location     Type
  6116 ;;		None
  6117 ;; Auto vars:     Size  Location     Type
  6118 ;;  send           64    0[BANK2 ] unsigned char [64]
  6119 ;;  i               1   76[BANK1 ] unsigned char 
  6120 ;;  buf            64   11[BANK1 ] unsigned char [64]
  6121 ;;  b               1   75[BANK1 ] enum E5232
  6122 ;; Return value:  Size  Location     Type
  6123 ;;                  1    wreg      void 
  6124 ;; Registers used:
  6125 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6126 ;; Tracked objects:
  6127 ;;		On entry : 0/0
  6128 ;;		On exit  : 0/0
  6129 ;;		Unchanged: 0/0
  6130 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6131 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6132 ;;      Locals:         0       0      66      64       0       0       0       0       0       0       0       0       
      +0       0
  6133 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6134 ;;      Totals:         0       0      68      64       0       0       0       0       0       0       0       0       
      +0       0
  6135 ;;Total ram usage:      132 bytes
  6136 ;; Hardware stack levels used:    1
  6137 ;; Hardware stack levels required when called:    8
  6138 ;; This function calls:
  6139 ;;		_bpc_proc
  6140 ;;		_capture_IsEnable
  6141 ;;		_capture_IsIntrpt
  6142 ;;		_capture_clrIntrpt
  6143 ;;		_capture_handdle
  6144 ;;		_key_isPressed
  6145 ;;		_sprintf
  6146 ;;		_strcpy
  6147 ;;		_strlen
  6148 ;;		_timer_IsTimer0Itrpt
  6149 ;;		_timer_IsTimer1Itrpt
  6150 ;;		_timer_Timer0Handdle
  6151 ;;		_timer_Timer1ClrIntrpt
  6152 ;;		i1_capture_Set
  6153 ;;		i1_timer_Timer0Reset
  6154 ;; This function is called by:
  6155 ;;		Interrupt level 1
  6156 ;; This function uses a non-reentrant model
  6157 ;;
  6158                           
  6159  0004                     _ISR:	
  6160                           
  6161                           ;incstack = 0
  6162  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  6163                           
  6164                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6165  0005  3180               	pagesel	$
  6166  0006  3188  2029  3180   	fcall	_timer_IsTimer1Itrpt
  6167  0009  3A00               	xorlw	0
  6168  000A  1903               	skipnz
  6169  000B  280F               	goto	i1l4029
  6170  000C  3188  2017  3180   	fcall	_timer_Timer1ClrIntrpt
  6171  000F                     i1l4029:	
  6172  000F  3188  2025  3180   	fcall	_timer_IsTimer0Itrpt
  6173  0012  3A00               	xorlw	0
  6174  0013  1903               	skipnz
  6175  0014  2890               	goto	i1l148
  6176  0015  3188  203B  3180   	fcall	_timer_Timer0Handdle
  6177  0018  3189  2109  3180   	fcall	_key_isPressed
  6178  001B  0021               	movlb	1	; select bank1
  6179  001C  00A9               	movwf	??_ISR^(0+128)
  6180  001D  0829               	movf	??_ISR^(0+128),w
  6181  001E  00EB               	movwf	ISR@b^(0+128)
  6182  001F  036B               	decf	ISR@b^(0+128),w
  6183  0020  1D03               	btfss	3,2
  6184  0021  288D               	goto	i1l149
  6185  0022  30A0               	movlw	low ISR@F5517
  6186  0023  0086               	movwf	6
  6187  0024  3002               	movlw	high ISR@F5517
  6188  0025  0087               	movwf	7
  6189  0026  30AB               	movlw	low ISR@buf
  6190  0027  0084               	movwf	4
  6191  0028  3000               	movlw	high ISR@buf
  6192  0029  0085               	movwf	5
  6193  002A  3040               	movlw	64
  6194  002B  00A9               	movwf	??_ISR^(0+128)
  6195  002C                     u406_20:	
  6196  002C  0016               	moviw fsr1++
  6197  002D  001A               	movwi fsr0++
  6198  002E  0BA9               	decfsz	??_ISR^(0+128),f
  6199  002F  282C               	goto	u406_20
  6200  0030  300B               	movlw	low (STR_1| (0+32768))
  6201  0031  0020               	movlb	0	; select bank0
  6202  0032  00E8               	movwf	sprintf@fmt
  6203  0033  3090               	movlw	high (STR_1| (0+32768))
  6204  0034  00E9               	movwf	sprintf@fmt+1
  6205  0035  301F               	movlw	low (STR_2| (0+32768))
  6206  0036  00EA               	movwf	low ((?_sprintf| 0+2))
  6207  0037  3090               	movlw	high (STR_2| (0+32768))
  6208  0038  00EB               	movwf	(low ((?_sprintf| 0+2))+1)
  6209  0039  30D5               	movlw	213
  6210  003A  00EC               	movwf	?_sprintf+4
  6211  003B  3000               	movlw	0
  6212  003C  00ED               	movwf	?_sprintf+5
  6213  003D  3026               	movlw	low (STR_3| (0+32768))
  6214  003E  00EE               	movwf	low ((?_sprintf| 0+6))
  6215  003F  3090               	movlw	high (STR_3| (0+32768))
  6216  0040  00EF               	movwf	(low ((?_sprintf| 0+6))+1)
  6217  0041  30AB               	movlw	(low (ISR@buf| 0))& (0+255)
  6218  0042  3189  21DF  3180   	fcall	_sprintf
  6219  0045  0021               	movlb	1	; select bank1
  6220  0046  01EC               	clrf	ISR@i^(0+128)
  6221  0047  3020               	movlw	low ISR@F5520
  6222  0048  0086               	movwf	6
  6223  0049  3003               	movlw	high ISR@F5520
  6224  004A  0087               	movwf	7
  6225  004B  3020               	movlw	low ISR@send
  6226  004C  0084               	movwf	4
  6227  004D  3001               	movlw	high ISR@send
  6228  004E  0085               	movwf	5
  6229  004F  3040               	movlw	64
  6230  0050  00A9               	movwf	??_ISR^(0+128)
  6231  0051                     u407_20:	
  6232  0051  0016               	moviw fsr1++
  6233  0052  001A               	movwi fsr0++
  6234  0053  0BA9               	decfsz	??_ISR^(0+128),f
  6235  0054  2851               	goto	u407_20
  6236  0055  30AB               	movlw	(low (ISR@buf| 0))& (0+255)
  6237  0056  00A9               	movwf	??_ISR^(0+128)
  6238  0057  0829               	movf	??_ISR^(0+128),w
  6239  0058  00F0               	movwf	strcpy@src
  6240  0059  3020               	movlw	(low (ISR@send| (0+256)))& (0+255)
  6241  005A  3189  214D  3180   	fcall	_strcpy
  6242  005D                     i1l4053:	
  6243  005D  3020               	movlw	low ISR@send
  6244  005E  00F0               	movwf	strlen@s
  6245  005F  3001               	movlw	high ISR@send
  6246  0060  00F1               	movwf	strlen@s+1
  6247  0061  3189  2136  3180   	fcall	_strlen
  6248  0064  0870               	movf	?_strlen,w
  6249  0065  3E01               	addlw	1
  6250  0066  0021               	movlb	1	; select bank1
  6251  0067  00A9               	movwf	??_ISR^(0+128)
  6252  0068  3000               	movlw	0
  6253  0069  3D71               	addwfc	?_strlen+1,w
  6254  006A  00AA               	movwf	(??_ISR+1)^(0+128)
  6255  006B  086C               	movf	ISR@i^(0+128),w
  6256  006C  0629               	xorwf	??_ISR^(0+128),w
  6257  006D  042A               	iorwf	(??_ISR+1)^(0+128),w
  6258  006E  1903               	btfsc	3,2
  6259  006F  2889               	goto	i1l4055
  6260  0070  0023               	movlb	3	; select bank3
  6261  0071  169E               	bsf	30,5	;volatile
  6262  0072  121E               	bcf	30,4	;volatile
  6263  0073  179D               	bsf	29,7	;volatile
  6264  0074  0021               	movlb	1	; select bank1
  6265  0075  1611               	bsf	17,4	;volatile
  6266  0076                     i1l156:	
  6267  0076  0023               	movlb	3	; select bank3
  6268  0077  1C9E               	btfss	30,1	;volatile
  6269  0078  2876               	goto	i1l156
  6270  0079  0021               	movlb	1	; select bank1
  6271  007A  086C               	movf	ISR@i^(0+128),w
  6272  007B  3E20               	addlw	(low (ISR@send| (0+256)))& (0+255)
  6273  007C  0086               	movwf	6
  6274  007D  3001               	movlw	1	; select bank2/3
  6275  007E  0087               	movwf	7
  6276  007F  0801               	movf	1,w
  6277  0080  0023               	movlb	3	; select bank3
  6278  0081  009A               	movwf	26	;volatile
  6279  0082  3001               	movlw	1
  6280  0083  0021               	movlb	1	; select bank1
  6281  0084  00A9               	movwf	??_ISR^(0+128)
  6282  0085  0829               	movf	??_ISR^(0+128),w
  6283  0086  07EC               	addwf	ISR@i^(0+128),f
  6284  0087  1211               	bcf	17,4	;volatile
  6285  0088  285D               	goto	i1l4053
  6286  0089                     i1l4055:	
  6287  0089  3001               	movlw	1
  6288  008A  3188  209C  3180   	fcall	i1_capture_Set
  6289  008D                     i1l149:	
  6290                           
  6291                           ;main.c: 228:         timer_Timer0Reset();
  6292  008D  3188  2031  3180   	fcall	i1_timer_Timer0Reset
  6293  0090                     i1l148:	
  6294                           ;main.c: 229:     }
  6295                           
  6296                           
  6297                           ;main.c: 231:     if(capture_IsEnable() && capture_IsIntrpt())
  6298  0090  3188  201D  3180   	fcall	_capture_IsEnable
  6299  0093  3A00               	xorlw	0
  6300  0094  1903               	skipnz
  6301  0095  28A4               	goto	i1l161
  6302  0096  3188  2021  3180   	fcall	_capture_IsIntrpt
  6303  0099  3A00               	xorlw	0
  6304  009A  1903               	skipnz
  6305  009B  28A4               	goto	i1l161
  6306                           
  6307                           ;main.c: 232:     {;main.c: 233:         capture_handdle();
  6308  009C  318C  2495  3180   	fcall	_capture_handdle
  6309                           
  6310                           ;main.c: 235:         bpc_proc();
  6311  009F  3180  20E3  3180   	fcall	_bpc_proc
  6312                           
  6313                           ;main.c: 237:         capture_clrIntrpt();
  6314  00A2  3188  2014         	fcall	_capture_clrIntrpt
  6315  00A4                     i1l161:	
  6316  00A4  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  6317  00A5  0009               	retfie
  6318  00A6                     __end_of_ISR:	
  6319                           
  6320                           	psect	text21
  6321  0831                     __ptext21:	
  6322 ;; *************** function i1_timer_Timer0Reset *****************
  6323 ;; Defined at:
  6324 ;;		line 92 in file "timer.c"
  6325 ;; Parameters:    Size  Location     Type
  6326 ;;		None
  6327 ;; Auto vars:     Size  Location     Type
  6328 ;;		None
  6329 ;; Return value:  Size  Location     Type
  6330 ;;                  1    wreg      void 
  6331 ;; Registers used:
  6332 ;;		wreg
  6333 ;; Tracked objects:
  6334 ;;		On entry : 0/0
  6335 ;;		On exit  : 0/0
  6336 ;;		Unchanged: 0/0
  6337 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6338 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6339 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6340 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6341 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6342 ;;Total ram usage:        0 bytes
  6343 ;; Hardware stack levels used:    1
  6344 ;; This function calls:
  6345 ;;		Nothing
  6346 ;; This function is called by:
  6347 ;;		_ISR
  6348 ;; This function uses a non-reentrant model
  6349 ;;
  6350                           
  6351                           
  6352                           ;psect for function i1_timer_Timer0Reset
  6353  0831                     i1_timer_Timer0Reset:	
  6354                           
  6355                           ;timer.c: 94:     INTCONbits.TMR0IF = 0;
  6356                           
  6357                           ;incstack = 0
  6358                           ; Regs used in i1_timer_Timer0Reset: [wreg]
  6359  0831  110B               	bcf	11,2	;volatile
  6360                           
  6361                           ;timer.c: 95:     TMR0 = (159 + 0);
  6362  0832  309F               	movlw	159
  6363  0833  0020               	movlb	0	; select bank0
  6364  0834  0095               	movwf	21	;volatile
  6365  0835  0008               	return
  6366  0836                     __end_ofi1_timer_Timer0Reset:	
  6367                           
  6368                           	psect	text22
  6369  0817                     __ptext22:	
  6370 ;; *************** function _timer_Timer1ClrIntrpt *****************
  6371 ;; Defined at:
  6372 ;;		line 51 in file "timer.c"
  6373 ;; Parameters:    Size  Location     Type
  6374 ;;		None
  6375 ;; Auto vars:     Size  Location     Type
  6376 ;;		None
  6377 ;; Return value:  Size  Location     Type
  6378 ;;                  1    wreg      void 
  6379 ;; Registers used:
  6380 ;;		None
  6381 ;; Tracked objects:
  6382 ;;		On entry : 0/0
  6383 ;;		On exit  : 0/0
  6384 ;;		Unchanged: 0/0
  6385 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6386 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6387 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6388 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6389 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6390 ;;Total ram usage:        0 bytes
  6391 ;; Hardware stack levels used:    1
  6392 ;; This function calls:
  6393 ;;		Nothing
  6394 ;; This function is called by:
  6395 ;;		_ISR
  6396 ;; This function uses a non-reentrant model
  6397 ;;
  6398                           
  6399                           
  6400                           ;psect for function _timer_Timer1ClrIntrpt
  6401  0817                     _timer_Timer1ClrIntrpt:	
  6402                           
  6403                           ;timer.c: 53:     PIR1bits.TMR1IF = 0b0;
  6404                           
  6405                           ;incstack = 0
  6406                           ; Regs used in _timer_Timer1ClrIntrpt: []
  6407  0817  0020               	movlb	0	; select bank0
  6408  0818  1011               	bcf	17,0	;volatile
  6409  0819  0008               	return
  6410  081A                     __end_of_timer_Timer1ClrIntrpt:	
  6411                           
  6412                           	psect	text23
  6413  083B                     __ptext23:	
  6414 ;; *************** function _timer_Timer0Handdle *****************
  6415 ;; Defined at:
  6416 ;;		line 110 in file "timer.c"
  6417 ;; Parameters:    Size  Location     Type
  6418 ;;		None
  6419 ;; Auto vars:     Size  Location     Type
  6420 ;;		None
  6421 ;; Return value:  Size  Location     Type
  6422 ;;                  2   68[None  ] int 
  6423 ;; Registers used:
  6424 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6425 ;; Tracked objects:
  6426 ;;		On entry : 0/0
  6427 ;;		On exit  : 0/0
  6428 ;;		Unchanged: 0/0
  6429 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6430 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6431 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6432 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6433 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6434 ;;Total ram usage:        0 bytes
  6435 ;; Hardware stack levels used:    1
  6436 ;; Hardware stack levels required when called:    5
  6437 ;; This function calls:
  6438 ;;		_key_checkPressed
  6439 ;;		_update_time
  6440 ;; This function is called by:
  6441 ;;		_ISR
  6442 ;; This function uses a non-reentrant model
  6443 ;;
  6444                           
  6445                           
  6446                           ;psect for function _timer_Timer0Handdle
  6447  083B                     _timer_Timer0Handdle:	
  6448                           
  6449                           ;timer.c: 112:     key_checkPressed();
  6450                           
  6451                           ;incstack = 0
  6452                           ; Regs used in _timer_Timer0Handdle: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6453  083B  3189  2165  3188   	fcall	_key_checkPressed
  6454                           
  6455                           ;timer.c: 114:     update_time();
  6456  083E  318E  2602         	fcall	_update_time
  6457  0840  0008               	return
  6458  0841                     __end_of_timer_Timer0Handdle:	
  6459                           
  6460                           	psect	text24
  6461  0E02                     __ptext24:	
  6462 ;; *************** function _update_time *****************
  6463 ;; Defined at:
  6464 ;;		line 95 in file "display.c"
  6465 ;; Parameters:    Size  Location     Type
  6466 ;;		None
  6467 ;; Auto vars:     Size  Location     Type
  6468 ;;  pdata           1   13[COMMON] PTR volatile struct .
  6469 ;;		 -> g_data(39), 
  6470 ;; Return value:  Size  Location     Type
  6471 ;;                  1    wreg      void 
  6472 ;; Registers used:
  6473 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6474 ;; Tracked objects:
  6475 ;;		On entry : 0/0
  6476 ;;		On exit  : 0/0
  6477 ;;		Unchanged: 0/0
  6478 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6479 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6480 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6481 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6482 ;;      Totals:         1       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6483 ;;Total ram usage:        3 bytes
  6484 ;; Hardware stack levels used:    1
  6485 ;; Hardware stack levels required when called:    4
  6486 ;; This function calls:
  6487 ;;		i1___awmod
  6488 ;;		i1_capture_Set
  6489 ;;		i1_data_getdata
  6490 ;;		i1_display_update
  6491 ;; This function is called by:
  6492 ;;		_timer_Timer0Handdle
  6493 ;; This function uses a non-reentrant model
  6494 ;;
  6495                           
  6496                           
  6497                           ;psect for function _update_time
  6498  0E02                     _update_time:	
  6499                           
  6500                           ;display.c: 97:     G_DATA *pdata = data_getdata();
  6501                           
  6502                           ;incstack = 0
  6503                           ; Regs used in _update_time: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6504  0E02  3188  2012  318E   	fcall	i1_data_getdata
  6505  0E05  0020               	movlb	0	; select bank0
  6506  0E06  00AC               	movwf	??_update_time
  6507  0E07  082C               	movf	??_update_time,w
  6508  0E08  00FD               	movwf	update_time@pdata
  6509                           
  6510                           ;display.c: 98:     pdata->g_time_100ms++;
  6511  0E09  3001               	movlw	1
  6512  0E0A  00AC               	movwf	??_update_time
  6513  0E0B  087D               	movf	update_time@pdata,w
  6514  0E0C  3E06               	addlw	6
  6515  0E0D  0086               	movwf	6
  6516  0E0E  3002               	movlw	2	; select bank4/5
  6517  0E0F  0087               	movwf	7
  6518  0E10  082C               	movf	??_update_time,w
  6519  0E11  0781               	addwf	1,f
  6520                           
  6521                           ;display.c: 99:     if(pdata->g_time_100ms == 60)
  6522  0E12  087D               	movf	update_time@pdata,w
  6523  0E13  3E06               	addlw	6
  6524  0E14  0086               	movwf	6
  6525  0E15  3002               	movlw	2	; select bank4/5
  6526  0E16  0087               	movwf	7
  6527  0E17  303C               	movlw	60
  6528  0E18  0601               	xorwf	1,w
  6529  0E19  1D03               	btfss	3,2
  6530  0E1A  0008               	return
  6531                           
  6532                           ;display.c: 100:     {;display.c: 101:         pdata->g_time_100ms = 0;
  6533  0E1B  087D               	movf	update_time@pdata,w
  6534  0E1C  3E06               	addlw	6
  6535  0E1D  0086               	movwf	6
  6536  0E1E  3002               	movlw	2	; select bank4/5
  6537  0E1F  0087               	movwf	7
  6538  0E20  0181               	clrf	1
  6539                           
  6540                           ;display.c: 102:         pdata->g_time_s++;
  6541  0E21  3001               	movlw	1
  6542  0E22  00AC               	movwf	??_update_time
  6543  0E23  087D               	movf	update_time@pdata,w
  6544  0E24  3E05               	addlw	5
  6545  0E25  0086               	movwf	6
  6546  0E26  3002               	movlw	2	; select bank4/5
  6547  0E27  0087               	movwf	7
  6548  0E28  082C               	movf	??_update_time,w
  6549  0E29  0781               	addwf	1,f
  6550                           
  6551                           ;display.c: 104:         if(pdata->g_time_s == 60)
  6552  0E2A  087D               	movf	update_time@pdata,w
  6553  0E2B  3E05               	addlw	5
  6554  0E2C  0086               	movwf	6
  6555  0E2D  3002               	movlw	2	; select bank4/5
  6556  0E2E  0087               	movwf	7
  6557  0E2F  303C               	movlw	60
  6558  0E30  0601               	xorwf	1,w
  6559  0E31  1D03               	btfss	3,2
  6560  0E32  0008               	return
  6561                           
  6562                           ;display.c: 105:         {;display.c: 106:             pdata->g_time_m++;
  6563  0E33  3001               	movlw	1
  6564  0E34  00AC               	movwf	??_update_time
  6565  0E35  087D               	movf	update_time@pdata,w
  6566  0E36  3E04               	addlw	4
  6567  0E37  0086               	movwf	6
  6568  0E38  3002               	movlw	2	; select bank4/5
  6569  0E39  0087               	movwf	7
  6570  0E3A  082C               	movf	??_update_time,w
  6571  0E3B  0781               	addwf	1,f
  6572                           
  6573                           ;display.c: 107:             pdata->g_time_s = 0;
  6574  0E3C  087D               	movf	update_time@pdata,w
  6575  0E3D  3E05               	addlw	5
  6576  0E3E  0086               	movwf	6
  6577  0E3F  3002               	movlw	2	; select bank4/5
  6578  0E40  0087               	movwf	7
  6579  0E41  0181               	clrf	1
  6580                           
  6581                           ;display.c: 108:             pdata->cnt_update++;
  6582  0E42  087D               	movf	update_time@pdata,w
  6583  0E43  3E21               	addlw	33
  6584  0E44  0086               	movwf	6
  6585  0E45  3002               	movlw	2	; select bank4/5
  6586  0E46  0087               	movwf	7
  6587  0E47  3001               	movlw	1
  6588  0E48  0781               	addwf	1,f
  6589  0E49  3141               	addfsr 1,1
  6590  0E4A  1803               	skipnc
  6591  0E4B  0A81               	incf	1,f
  6592                           
  6593                           ;display.c: 109:             if(pdata->g_time_m % 30 == 0){
  6594  0E4C  301E               	movlw	30
  6595  0E4D  00F0               	movwf	i1___awmod@divisor
  6596  0E4E  3000               	movlw	0
  6597  0E4F  00F1               	movwf	i1___awmod@divisor+1
  6598  0E50  087D               	movf	update_time@pdata,w
  6599  0E51  3E04               	addlw	4
  6600  0E52  0086               	movwf	6
  6601  0E53  3002               	movlw	2	; select bank4/5
  6602  0E54  0087               	movwf	7
  6603  0E55  0801               	movf	1,w
  6604  0E56  00AC               	movwf	??_update_time
  6605  0E57  01AD               	clrf	??_update_time+1
  6606  0E58  082C               	movf	??_update_time,w
  6607  0E59  00F2               	movwf	i1___awmod@dividend
  6608  0E5A  082D               	movf	??_update_time+1,w
  6609  0E5B  00F3               	movwf	i1___awmod@dividend+1
  6610  0E5C  318A  22CF  318E   	fcall	i1___awmod
  6611  0E5F  0870               	movf	?i1___awmod,w
  6612  0E60  0471               	iorwf	?i1___awmod+1,w
  6613  0E61  1D03               	btfss	3,2
  6614  0E62  2E67               	goto	i1l3467
  6615                           
  6616                           ;display.c: 110:                 capture_Set(TRUE);
  6617  0E63  3001               	movlw	1
  6618  0E64  3188  209C  318E   	fcall	i1_capture_Set
  6619  0E67                     i1l3467:	
  6620                           
  6621                           ;display.c: 112:             if(pdata->g_time_m == 60)
  6622  0E67  087D               	movf	update_time@pdata,w
  6623  0E68  3E04               	addlw	4
  6624  0E69  0086               	movwf	6
  6625  0E6A  3002               	movlw	2	; select bank4/5
  6626  0E6B  0087               	movwf	7
  6627  0E6C  303C               	movlw	60
  6628  0E6D  0601               	xorwf	1,w
  6629  0E6E  1D03               	btfss	3,2
  6630  0E6F  2E8F               	goto	i1l3473
  6631                           
  6632                           ;display.c: 113:             {;display.c: 114:                 pdata->g_time_h++;
  6633  0E70  3001               	movlw	1
  6634  0E71  0020               	movlb	0	; select bank0
  6635  0E72  00AC               	movwf	??_update_time
  6636  0E73  087D               	movf	update_time@pdata,w
  6637  0E74  3E03               	addlw	3
  6638  0E75  0086               	movwf	6
  6639  0E76  3002               	movlw	2	; select bank4/5
  6640  0E77  0087               	movwf	7
  6641  0E78  082C               	movf	??_update_time,w
  6642  0E79  0781               	addwf	1,f
  6643                           
  6644                           ;display.c: 115:                 pdata->g_time_m = 0;
  6645  0E7A  087D               	movf	update_time@pdata,w
  6646  0E7B  3E04               	addlw	4
  6647  0E7C  0086               	movwf	6
  6648  0E7D  3002               	movlw	2	; select bank4/5
  6649  0E7E  0087               	movwf	7
  6650  0E7F  0181               	clrf	1
  6651                           
  6652                           ;display.c: 117:                 if(pdata->g_time_h == 24)
  6653  0E80  087D               	movf	update_time@pdata,w
  6654  0E81  3E03               	addlw	3
  6655  0E82  0086               	movwf	6
  6656  0E83  3002               	movlw	2	; select bank4/5
  6657  0E84  0087               	movwf	7
  6658  0E85  3018               	movlw	24
  6659  0E86  0601               	xorwf	1,w
  6660  0E87  1D03               	btfss	3,2
  6661  0E88  2E8F               	goto	i1l3473
  6662                           
  6663                           ;display.c: 118:                 {;display.c: 119:                     pdata->g_time_h =
      +                           0;
  6664  0E89  087D               	movf	update_time@pdata,w
  6665  0E8A  3E03               	addlw	3
  6666  0E8B  0086               	movwf	6
  6667  0E8C  3002               	movlw	2	; select bank4/5
  6668  0E8D  0087               	movwf	7
  6669  0E8E  0181               	clrf	1
  6670  0E8F                     i1l3473:	
  6671                           
  6672                           ;display.c: 123:             display_update();
  6673  0E8F  3187  274E         	fcall	i1_display_update
  6674  0E91  0008               	return
  6675  0E92                     __end_of_update_time:	
  6676                           
  6677                           	psect	text25
  6678  0965                     __ptext25:	
  6679 ;; *************** function _key_checkPressed *****************
  6680 ;; Defined at:
  6681 ;;		line 126 in file "hardware.c"
  6682 ;; Parameters:    Size  Location     Type
  6683 ;;		None
  6684 ;; Auto vars:     Size  Location     Type
  6685 ;;  pdata           1    3[COMMON] PTR volatile struct .
  6686 ;;		 -> g_data(39), 
  6687 ;; Return value:  Size  Location     Type
  6688 ;;                  1    wreg      void 
  6689 ;; Registers used:
  6690 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6691 ;; Tracked objects:
  6692 ;;		On entry : 0/0
  6693 ;;		On exit  : 0/0
  6694 ;;		Unchanged: 0/0
  6695 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6696 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6697 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6698 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6699 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6700 ;;Total ram usage:        2 bytes
  6701 ;; Hardware stack levels used:    1
  6702 ;; Hardware stack levels required when called:    2
  6703 ;; This function calls:
  6704 ;;		_led_Blink
  6705 ;;		i1_data_getdata
  6706 ;; This function is called by:
  6707 ;;		_timer_Timer0Handdle
  6708 ;; This function uses a non-reentrant model
  6709 ;;
  6710                           
  6711                           
  6712                           ;psect for function _key_checkPressed
  6713  0965                     _key_checkPressed:	
  6714                           
  6715                           ;hardware.c: 146:     G_DATA *pdata = data_getdata();
  6716                           
  6717                           ;incstack = 0
  6718                           ; Regs used in _key_checkPressed: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6719  0965  3188  2012  3189   	fcall	i1_data_getdata
  6720  0968  00F2               	movwf	??_key_checkPressed
  6721  0969  0872               	movf	??_key_checkPressed,w
  6722  096A  00F3               	movwf	key_checkPressed@pdata
  6723                           
  6724                           ;hardware.c: 148:     if(PORTCbits.RC5 == PIN_HIGH && FALSE == pdata->g_flg_switch)
  6725  096B  0020               	movlb	0	; select bank0
  6726  096C  1E8E               	btfss	14,5	;volatile
  6727  096D  0008               	return
  6728  096E  0873               	movf	key_checkPressed@pdata,w
  6729  096F  0086               	movwf	6
  6730  0970  3002               	movlw	2	; select bank4/5
  6731  0971  0087               	movwf	7
  6732  0972  0801               	movf	1,w
  6733  0973  1D03               	btfss	3,2
  6734  0974  0008               	return
  6735                           
  6736                           ;hardware.c: 149:     {;hardware.c: 151:         pdata->g_flg_switch = TRUE;
  6737  0975  3001               	movlw	1
  6738  0976  00F2               	movwf	??_key_checkPressed
  6739  0977  0873               	movf	key_checkPressed@pdata,w
  6740  0978  0086               	movwf	6
  6741  0979  3002               	movlw	2	; select bank4/5
  6742  097A  0087               	movwf	7
  6743  097B  0872               	movf	??_key_checkPressed,w
  6744  097C  0081               	movwf	1
  6745                           
  6746                           ;hardware.c: 153:         led_Blink();
  6747  097D  3188  207B         	fcall	_led_Blink
  6748  097F  0008               	return
  6749  0980                     __end_of_key_checkPressed:	
  6750                           
  6751                           	psect	text26
  6752  087B                     __ptext26:	
  6753 ;; *************** function _led_Blink *****************
  6754 ;; Defined at:
  6755 ;;		line 116 in file "hardware.c"
  6756 ;; Parameters:    Size  Location     Type
  6757 ;;		None
  6758 ;; Auto vars:     Size  Location     Type
  6759 ;;		None
  6760 ;; Return value:  Size  Location     Type
  6761 ;;                  1    wreg      unsigned char 
  6762 ;; Registers used:
  6763 ;;		wreg, status,2, status,0, pclath, cstack
  6764 ;; Tracked objects:
  6765 ;;		On entry : 0/0
  6766 ;;		On exit  : 0/0
  6767 ;;		Unchanged: 0/0
  6768 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6769 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6770 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6771 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6772 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6773 ;;Total ram usage:        1 bytes
  6774 ;; Hardware stack levels used:    1
  6775 ;; Hardware stack levels required when called:    1
  6776 ;; This function calls:
  6777 ;;		i1_led_SetState
  6778 ;; This function is called by:
  6779 ;;		_key_checkPressed
  6780 ;; This function uses a non-reentrant model
  6781 ;;
  6782                           
  6783                           
  6784                           ;psect for function _led_Blink
  6785  087B                     _led_Blink:	
  6786                           
  6787                           ;hardware.c: 118:     static u8 State = 0;;hardware.c: 119:     led_SetState(State++ & 0
      +                          x01);
  6788                           
  6789                           ;incstack = 0
  6790                           ; Regs used in _led_Blink: [wreg+status,2+status,0+pclath+cstack]
  6791  087B  0022               	movlb	2	; select bank2
  6792  087C  0866               	movf	led_Blink@State^(0+256),w
  6793  087D  3901               	andlw	1
  6794  087E  3188  2066         	fcall	i1_led_SetState
  6795  0880  3001               	movlw	1
  6796  0881  00F1               	movwf	??_led_Blink
  6797  0882  0871               	movf	??_led_Blink,w
  6798  0883  0022               	movlb	2	; select bank2
  6799  0884  07E6               	addwf	led_Blink@State^(0+256),f
  6800  0885  0008               	return
  6801  0886                     __end_of_led_Blink:	
  6802                           
  6803                           	psect	text27
  6804  0829                     __ptext27:	
  6805 ;; *************** function _timer_IsTimer1Itrpt *****************
  6806 ;; Defined at:
  6807 ;;		line 46 in file "timer.c"
  6808 ;; Parameters:    Size  Location     Type
  6809 ;;		None
  6810 ;; Auto vars:     Size  Location     Type
  6811 ;;		None
  6812 ;; Return value:  Size  Location     Type
  6813 ;;                  1    wreg      enum E5232
  6814 ;; Registers used:
  6815 ;;		wreg, status,2, status,0
  6816 ;; Tracked objects:
  6817 ;;		On entry : 0/0
  6818 ;;		On exit  : 0/0
  6819 ;;		Unchanged: 0/0
  6820 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6821 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6822 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6823 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6824 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6825 ;;Total ram usage:        0 bytes
  6826 ;; Hardware stack levels used:    1
  6827 ;; This function calls:
  6828 ;;		Nothing
  6829 ;; This function is called by:
  6830 ;;		_ISR
  6831 ;; This function uses a non-reentrant model
  6832 ;;
  6833                           
  6834                           
  6835                           ;psect for function _timer_IsTimer1Itrpt
  6836  0829                     _timer_IsTimer1Itrpt:	
  6837                           
  6838                           ;timer.c: 48:     return (PIR1bits.TMR1IF == 0b1)? TRUE : FALSE;
  6839                           
  6840                           ;incstack = 0
  6841                           ; Regs used in _timer_IsTimer1Itrpt: [wreg+status,2+status,0]
  6842  0829  0020               	movlb	0	; select bank0
  6843  082A  0811               	movf	17,w	;volatile
  6844  082B  3901               	andlw	1
  6845  082C  0008               	return
  6846  082D                     __end_of_timer_IsTimer1Itrpt:	
  6847                           
  6848                           	psect	text28
  6849  0825                     __ptext28:	
  6850 ;; *************** function _timer_IsTimer0Itrpt *****************
  6851 ;; Defined at:
  6852 ;;		line 103 in file "timer.c"
  6853 ;; Parameters:    Size  Location     Type
  6854 ;;		None
  6855 ;; Auto vars:     Size  Location     Type
  6856 ;;		None
  6857 ;; Return value:  Size  Location     Type
  6858 ;;                  1    wreg      enum E5232
  6859 ;; Registers used:
  6860 ;;		wreg, status,2, status,0
  6861 ;; Tracked objects:
  6862 ;;		On entry : 0/0
  6863 ;;		On exit  : 0/0
  6864 ;;		Unchanged: 0/0
  6865 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6866 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6867 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6868 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6869 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6870 ;;Total ram usage:        0 bytes
  6871 ;; Hardware stack levels used:    1
  6872 ;; This function calls:
  6873 ;;		Nothing
  6874 ;; This function is called by:
  6875 ;;		_ISR
  6876 ;; This function uses a non-reentrant model
  6877 ;;
  6878                           
  6879                           
  6880                           ;psect for function _timer_IsTimer0Itrpt
  6881  0825                     _timer_IsTimer0Itrpt:	
  6882                           
  6883                           ;timer.c: 105:     return (INTCONbits.TMR0IF == 0b1)? TRUE : FALSE;
  6884                           
  6885                           ;incstack = 0
  6886                           ; Regs used in _timer_IsTimer0Itrpt: [wreg+status,2+status,0]
  6887  0825  0C0B               	rrf	11,w	;volatile
  6888  0826  0C89               	rrf	9,f
  6889  0827  3901               	andlw	1
  6890  0828  0008               	return
  6891  0829                     __end_of_timer_IsTimer0Itrpt:	
  6892                           
  6893                           	psect	text29
  6894  094D                     __ptext29:	
  6895 ;; *************** function _strcpy *****************
  6896 ;; Defined at:
  6897 ;;		line 7 in file "E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\strcpy.c"
  6898 ;; Parameters:    Size  Location     Type
  6899 ;;  dest            1    wreg     PTR unsigned char 
  6900 ;;		 -> ISR@send(64), 
  6901 ;;  src             1    0[COMMON] PTR const unsigned char 
  6902 ;;		 -> ISR@buf(64), 
  6903 ;; Auto vars:     Size  Location     Type
  6904 ;;  dest            1    4[COMMON] PTR unsigned char 
  6905 ;;		 -> ISR@send(64), 
  6906 ;;  d               1    3[COMMON] PTR unsigned char 
  6907 ;;		 -> ISR@send(64), 
  6908 ;;  s               1    2[COMMON] PTR const unsigned char 
  6909 ;;		 -> ISR@buf(64), 
  6910 ;; Return value:  Size  Location     Type
  6911 ;;                  1    wreg      PTR unsigned char 
  6912 ;; Registers used:
  6913 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  6914 ;; Tracked objects:
  6915 ;;		On entry : 0/0
  6916 ;;		On exit  : 0/0
  6917 ;;		Unchanged: 0/0
  6918 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6919 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6920 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6921 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6922 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6923 ;;Total ram usage:        5 bytes
  6924 ;; Hardware stack levels used:    1
  6925 ;; This function calls:
  6926 ;;		Nothing
  6927 ;; This function is called by:
  6928 ;;		_ISR
  6929 ;; This function uses a non-reentrant model
  6930 ;;
  6931                           
  6932                           
  6933                           ;psect for function _strcpy
  6934  094D                     _strcpy:	
  6935                           
  6936                           ;incstack = 0
  6937                           ; Regs used in _strcpy: [wreg-fsr1h+status,2+status,0]
  6938                           ;strcpy@dest stored from wreg
  6939  094D  00F4               	movwf	strcpy@dest
  6940  094E  0870               	movf	strcpy@src,w
  6941  094F  00F1               	movwf	??_strcpy
  6942  0950  0871               	movf	??_strcpy,w
  6943  0951  00F2               	movwf	strcpy@s
  6944  0952  0874               	movf	strcpy@dest,w
  6945  0953  00F1               	movwf	??_strcpy
  6946  0954  0871               	movf	??_strcpy,w
  6947  0955  00F3               	movwf	strcpy@d
  6948  0956                     i1l3759:	
  6949  0956  0873               	movf	strcpy@d,w
  6950  0957  0086               	movwf	6
  6951  0958  3001               	movlw	1	; select bank2/3
  6952  0959  0087               	movwf	7
  6953  095A  0AF3               	incf	strcpy@d,f
  6954  095B  0872               	movf	strcpy@s,w
  6955  095C  0084               	movwf	4
  6956  095D  0185               	clrf	5
  6957  095E  0AF2               	incf	strcpy@s,f
  6958  095F  0800               	movf	0,w
  6959  0960  3FC0               	movwi [0]fsr1
  6960  0961  0889               	movf	9,f
  6961  0962  1903               	btfsc	3,2
  6962  0963  0008               	return
  6963  0964  2956               	goto	i1l3759
  6964  0965                     __end_of_strcpy:	
  6965                           
  6966                           	psect	text30
  6967  09DF                     __ptext30:	
  6968 ;; *************** function _sprintf *****************
  6969 ;; Defined at:
  6970 ;;		line 9 in file "E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_sprintf.c"
  6971 ;; Parameters:    Size  Location     Type
  6972 ;;  s               1    wreg     PTR unsigned char 
  6973 ;;		 -> ISR@buf(64), 
  6974 ;;  fmt             2   72[BANK0 ] PTR const unsigned char 
  6975 ;;		 -> STR_1(20), 
  6976 ;; Auto vars:     Size  Location     Type
  6977 ;;  s               1    3[BANK1 ] PTR unsigned char 
  6978 ;;		 -> ISR@buf(64), 
  6979 ;;  f               5    4[BANK1 ] struct _IO_FILE
  6980 ;;  ret             2    0        int 
  6981 ;;  ap              1    2[BANK1 ] PTR void [1]
  6982 ;;		 -> ?_sprintf(2), 
  6983 ;; Return value:  Size  Location     Type
  6984 ;;                  2   72[BANK0 ] int 
  6985 ;; Registers used:
  6986 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6987 ;; Tracked objects:
  6988 ;;		On entry : 0/0
  6989 ;;		On exit  : 0/0
  6990 ;;		Unchanged: 0/0
  6991 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6992 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6993 ;;      Locals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0
  6994 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6995 ;;      Totals:         1       8       9       0       0       0       0       0       0       0       0       0       
      +0       0
  6996 ;;Total ram usage:       18 bytes
  6997 ;; Hardware stack levels used:    1
  6998 ;; Hardware stack levels required when called:    7
  6999 ;; This function calls:
  7000 ;;		_vfprintf
  7001 ;; This function is called by:
  7002 ;;		_ISR
  7003 ;; This function uses a non-reentrant model
  7004 ;;
  7005                           
  7006                           
  7007                           ;psect for function _sprintf
  7008  09DF                     _sprintf:	
  7009                           
  7010                           ;incstack = 0
  7011                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7012                           ;sprintf@s stored from wreg
  7013  09DF  0021               	movlb	1	; select bank1
  7014  09E0  00A3               	movwf	sprintf@s^(0+128)
  7015  09E1  306A               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  7016  09E2  00FD               	movwf	??_sprintf
  7017  09E3  087D               	movf	??_sprintf,w
  7018  09E4  00A2               	movwf	sprintf@ap^(0+128)
  7019  09E5  0823               	movf	sprintf@s^(0+128),w
  7020  09E6  00FD               	movwf	??_sprintf
  7021  09E7  087D               	movf	??_sprintf,w
  7022  09E8  00A4               	movwf	sprintf@f^(0+128)
  7023  09E9  01A5               	clrf	(sprintf@f^(0+128)+1)
  7024  09EA  01A6               	clrf	((sprintf@f+1)^(0+128)+1)
  7025  09EB  01A7               	clrf	(sprintf@f^(0+128)+3)
  7026  09EC  01A8               	clrf	((sprintf@f+1)^(0+128)+3)
  7027  09ED  0020               	movlb	0	; select bank0
  7028  09EE  0869               	movf	sprintf@fmt+1,w
  7029  09EF  00E1               	movwf	vfprintf@fmt+1
  7030  09F0  0868               	movf	sprintf@fmt,w
  7031  09F1  00E0               	movwf	vfprintf@fmt
  7032  09F2  30A2               	movlw	(low (sprintf@ap| 0))& (0+255)
  7033  09F3  00FD               	movwf	??_sprintf
  7034  09F4  087D               	movf	??_sprintf,w
  7035  09F5  00E2               	movwf	vfprintf@ap
  7036  09F6  30A4               	movlw	(low (sprintf@f| 0))& (0+255)
  7037  09F7  318A  22A0         	fcall	_vfprintf
  7038  09F9  0021               	movlb	1	; select bank1
  7039  09FA  0825               	movf	(sprintf@f^(0+128)+1),w
  7040  09FB  0723               	addwf	sprintf@s^(0+128),w
  7041  09FC  00FD               	movwf	??_sprintf
  7042  09FD  087D               	movf	??_sprintf,w
  7043  09FE  0086               	movwf	6
  7044  09FF  0187               	clrf	7
  7045  0A00  0181               	clrf	1
  7046  0A01  0008               	return
  7047  0A02                     __end_of_sprintf:	
  7048                           
  7049                           	psect	text31
  7050  0AA0                     __ptext31:	
  7051 ;; *************** function _vfprintf *****************
  7052 ;; Defined at:
  7053 ;;		line 1368 in file "E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  7054 ;; Parameters:    Size  Location     Type
  7055 ;;  fp              1    wreg     PTR struct _IO_FILE
  7056 ;;		 -> sprintf@f(5), 
  7057 ;;  fmt             2   64[BANK0 ] PTR const unsigned char 
  7058 ;;		 -> STR_1(20), 
  7059 ;;  ap              1   66[BANK0 ] PTR PTR void 
  7060 ;;		 -> sprintf@ap(1), 
  7061 ;; Auto vars:     Size  Location     Type
  7062 ;;  fp              1   69[BANK0 ] PTR struct _IO_FILE
  7063 ;;		 -> sprintf@f(5), 
  7064 ;;  cfmt            2   70[BANK0 ] PTR unsigned char 
  7065 ;;		 -> STR_1(20), 
  7066 ;; Return value:  Size  Location     Type
  7067 ;;                  2   64[BANK0 ] int 
  7068 ;; Registers used:
  7069 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7070 ;; Tracked objects:
  7071 ;;		On entry : 0/0
  7072 ;;		On exit  : 0/0
  7073 ;;		Unchanged: 0/0
  7074 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7075 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7076 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7077 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7078 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7079 ;;Total ram usage:        8 bytes
  7080 ;; Hardware stack levels used:    1
  7081 ;; Hardware stack levels required when called:    6
  7082 ;; This function calls:
  7083 ;;		_vfpfcnvrt
  7084 ;; This function is called by:
  7085 ;;		_sprintf
  7086 ;; This function uses a non-reentrant model
  7087 ;;
  7088                           
  7089                           
  7090                           ;psect for function _vfprintf
  7091  0AA0                     _vfprintf:	
  7092                           
  7093                           ;incstack = 0
  7094                           ; Regs used in _vfprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7095                           ;vfprintf@fp stored from wreg
  7096  0AA0  0020               	movlb	0	; select bank0
  7097  0AA1  00E5               	movwf	vfprintf@fp
  7098                           
  7099                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1368: int v
      +                          fprintf(FILE *fp, const char *fmt, va_list ap);E:\Program Files (x86)\Microchip\xc8\v2.0
      +                          5\pic\sources\c99\common\doprnt.c: 1369: {;E:\Program Files (x86)\Microchip\xc8\v2.05\pi
      +                          c\sources\c99\common\doprnt.c: 1371:     char *cfmt;;E:\Program Files (x86)\Microchip\xc
      +                          8\v2.05\pic\sources\c99\common\doprnt.c: 1373:     cfmt = (char *)fmt;
  7100  0AA2  0861               	movf	vfprintf@fmt+1,w
  7101  0AA3  00E7               	movwf	vfprintf@cfmt+1
  7102  0AA4  0860               	movf	vfprintf@fmt,w
  7103  0AA5  00E6               	movwf	vfprintf@cfmt
  7104                           
  7105                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1374:     n
      +                          out = 0;
  7106  0AA6  0023               	movlb	3	; select bank3
  7107  0AA7  01A0               	clrf	_nout^(0+384)
  7108  0AA8  01A1               	clrf	(_nout+1)^(0+384)
  7109  0AA9                     i1l3617:	
  7110                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
  7111                           
  7112                           
  7113                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
  7114  0AA9  0020               	movlb	0	; select bank0
  7115  0AAA  0866               	movf	vfprintf@cfmt,w
  7116  0AAB  0084               	movwf	4
  7117  0AAC  0867               	movf	vfprintf@cfmt+1,w
  7118  0AAD  0085               	movwf	5
  7119  0AAE  0012               	moviw fsr0++
  7120  0AAF  1903               	btfsc	3,2
  7121  0AB0  2AC6               	goto	i1l3619
  7122                           
  7123                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1376:      
      +                             nout += vfpfcnvrt(fp, &cfmt, ap);
  7124  0AB1  3066               	movlw	(low (vfprintf@cfmt| 0))& (0+255)
  7125  0AB2  00E3               	movwf	??_vfprintf
  7126  0AB3  0863               	movf	??_vfprintf,w
  7127  0AB4  00CE               	movwf	vfpfcnvrt@fmt
  7128  0AB5  0862               	movf	vfprintf@ap,w
  7129  0AB6  00E4               	movwf	??_vfprintf+1
  7130  0AB7  0864               	movf	??_vfprintf+1,w
  7131  0AB8  00CF               	movwf	vfpfcnvrt@ap
  7132  0AB9  0865               	movf	vfprintf@fp,w
  7133  0ABA  3183  238A  318A   	fcall	_vfpfcnvrt
  7134  0ABD  0020               	movlb	0	; select bank0
  7135  0ABE  084E               	movf	?_vfpfcnvrt,w
  7136  0ABF  0023               	movlb	3	; select bank3
  7137  0AC0  07A0               	addwf	_nout^(0+384),f
  7138  0AC1  0020               	movlb	0	; select bank0
  7139  0AC2  084F               	movf	?_vfpfcnvrt+1,w
  7140  0AC3  0023               	movlb	3	; select bank3
  7141  0AC4  3DA1               	addwfc	(_nout+1)^(0+384),f
  7142  0AC5  2AA9               	goto	i1l3617
  7143  0AC6                     i1l3619:	
  7144                           
  7145                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1378:     r
      +                          eturn nout;
  7146  0AC6  0023               	movlb	3	; select bank3
  7147  0AC7  0821               	movf	(_nout+1)^(0+384),w
  7148  0AC8  0020               	movlb	0	; select bank0
  7149  0AC9  00E1               	movwf	?_vfprintf+1
  7150  0ACA  0023               	movlb	3	; select bank3
  7151  0ACB  0820               	movf	_nout^(0+384),w
  7152  0ACC  0020               	movlb	0	; select bank0
  7153  0ACD  00E0               	movwf	?_vfprintf
  7154  0ACE  0008               	return
  7155  0ACF                     __end_of_vfprintf:	
  7156                           
  7157                           	psect	text32
  7158  038A                     __ptext32:	
  7159 ;; *************** function _vfpfcnvrt *****************
  7160 ;; Defined at:
  7161 ;;		line 670 in file "E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  7162 ;; Parameters:    Size  Location     Type
  7163 ;;  fp              1    wreg     PTR struct _IO_FILE
  7164 ;;		 -> sprintf@f(5), 
  7165 ;;  fmt             1   46[BANK0 ] PTR PTR unsigned char 
  7166 ;;		 -> vfprintf@cfmt(2), 
  7167 ;;  ap              1   47[BANK0 ] PTR PTR void 
  7168 ;;		 -> sprintf@ap(1), 
  7169 ;; Auto vars:     Size  Location     Type
  7170 ;;  fp              1   63[BANK0 ] PTR struct _IO_FILE
  7171 ;;		 -> sprintf@f(5), 
  7172 ;;  ll              8   53[BANK0 ] long long 
  7173 ;;  llu             8    0        unsigned long long 
  7174 ;;  f               4    0        unsigned long long 
  7175 ;;  ct              3    0        unsigned char [3]
  7176 ;;  cp              2   61[BANK0 ] PTR unsigned char 
  7177 ;;		 -> ?_sprintf(2), STR_3(4), STR_2(7), 
  7178 ;;  vp              2    0        PTR void 
  7179 ;;  i               2    0        int 
  7180 ;;  done            2    0        int 
  7181 ;;  c               1    0        unsigned char 
  7182 ;; Return value:  Size  Location     Type
  7183 ;;                  2   46[BANK0 ] int 
  7184 ;; Registers used:
  7185 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7186 ;; Tracked objects:
  7187 ;;		On entry : 0/0
  7188 ;;		On exit  : 0/0
  7189 ;;		Unchanged: 0/0
  7190 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7191 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7192 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7193 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7194 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7195 ;;Total ram usage:       18 bytes
  7196 ;; Hardware stack levels used:    1
  7197 ;; Hardware stack levels required when called:    5
  7198 ;; This function calls:
  7199 ;;		_dtoa
  7200 ;;		_fputc
  7201 ;;		_stoa
  7202 ;; This function is called by:
  7203 ;;		_vfprintf
  7204 ;; This function uses a non-reentrant model
  7205 ;;
  7206                           
  7207                           
  7208                           ;psect for function _vfpfcnvrt
  7209  038A                     _vfpfcnvrt:	
  7210                           
  7211                           ;incstack = 0
  7212                           ; Regs used in _vfpfcnvrt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7213                           ;vfpfcnvrt@fp stored from wreg
  7214  038A  0020               	movlb	0	; select bank0
  7215  038B  00DF               	movwf	vfpfcnvrt@fp
  7216                           
  7217                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 670: static
      +                           int vfpfcnvrt(FILE *fp, char *fmt[], va_list ap);E:\Program Files (x86)\Microchip\xc8\v
      +                          2.05\pic\sources\c99\common\doprnt.c: 671: {;E:\Program Files (x86)\Microchip\xc8\v2.05\
      +                          pic\sources\c99\common\doprnt.c: 672:     char c, *cp, ct[3];;E:\Program Files (x86)\Mic
      +                          rochip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 673:     int done, i;;E:\Program Files
      +                           (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 674:     long long ll;
  7218  038C  084E               	movf	vfpfcnvrt@fmt,w
  7219  038D  0086               	movwf	6
  7220  038E  0187               	clrf	7
  7221  038F  3F40               	moviw [0]fsr1
  7222  0390  00D0               	movwf	??_vfpfcnvrt
  7223  0391  3F41               	moviw [1]fsr1
  7224  0392  00D1               	movwf	??_vfpfcnvrt+1
  7225  0393  0850               	movf	??_vfpfcnvrt,w
  7226  0394  0084               	movwf	4
  7227  0395  0851               	movf	??_vfpfcnvrt+1,w
  7228  0396  0085               	movwf	5
  7229  0397  0012               	moviw fsr0++
  7230  0398  3A25               	xorlw	37
  7231  0399  1D03               	btfss	3,2
  7232  039A  2C69               	goto	i1l3223
  7233                           
  7234                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 681:       
      +                            ++*fmt;
  7235  039B  084E               	movf	vfpfcnvrt@fmt,w
  7236  039C  0086               	movwf	6
  7237  039D  0187               	clrf	7
  7238  039E  3001               	movlw	1
  7239  039F  0781               	addwf	1,f
  7240  03A0  3141               	addfsr 1,1
  7241  03A1  1803               	skipnc
  7242  03A2  0A81               	incf	1,f
  7243                           
  7244                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 683:       
      +                            flags = width = 0;
  7245  03A3  0022               	movlb	2	; select bank2
  7246  03A4  01E0               	clrf	_width^(0+256)
  7247  03A5  01E1               	clrf	(_width+1)^(0+256)
  7248  03A6  0021               	movlb	1	; select bank1
  7249  03A7  01ED               	clrf	_flags^(0+128)
  7250  03A8  01EE               	clrf	(_flags+1)^(0+128)
  7251                           
  7252                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 684:       
      +                            prec = -1;
  7253  03A9  30FF               	movlw	255
  7254  03AA  0022               	movlb	2	; select bank2
  7255  03AB  00E2               	movwf	_prec^(0+256)
  7256  03AC  30FF               	movlw	255
  7257  03AD  00E3               	movwf	(_prec^(0+256)+1)
  7258                           
  7259                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 825:       
      +                            if ((*fmt[0] == 'd') || (*fmt[0] == 'i')) {
  7260  03AE  0020               	movlb	0	; select bank0
  7261  03AF  084E               	movf	vfpfcnvrt@fmt,w
  7262  03B0  0086               	movwf	6
  7263  03B1  0187               	clrf	7
  7264  03B2  3F40               	moviw [0]fsr1
  7265  03B3  00D0               	movwf	??_vfpfcnvrt
  7266  03B4  3F41               	moviw [1]fsr1
  7267  03B5  00D1               	movwf	??_vfpfcnvrt+1
  7268  03B6  0850               	movf	??_vfpfcnvrt,w
  7269  03B7  0084               	movwf	4
  7270  03B8  0851               	movf	??_vfpfcnvrt+1,w
  7271  03B9  0085               	movwf	5
  7272  03BA  0012               	moviw fsr0++
  7273  03BB  3A64               	xorlw	100
  7274  03BC  1903               	btfsc	3,2
  7275  03BD  2BCD               	goto	i1l3189
  7276  03BE  084E               	movf	vfpfcnvrt@fmt,w
  7277  03BF  0086               	movwf	6
  7278  03C0  0187               	clrf	7
  7279  03C1  3F40               	moviw [0]fsr1
  7280  03C2  00D0               	movwf	??_vfpfcnvrt
  7281  03C3  3F41               	moviw [1]fsr1
  7282  03C4  00D1               	movwf	??_vfpfcnvrt+1
  7283  03C5  0850               	movf	??_vfpfcnvrt,w
  7284  03C6  0084               	movwf	4
  7285  03C7  0851               	movf	??_vfpfcnvrt+1,w
  7286  03C8  0085               	movwf	5
  7287  03C9  0012               	moviw fsr0++
  7288  03CA  3A69               	xorlw	105
  7289  03CB  1D03               	btfss	3,2
  7290  03CC  2C07               	goto	i1l3197
  7291  03CD                     i1l3189:	
  7292                           
  7293                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 827:       
      +                                ++*fmt;
  7294  03CD  084E               	movf	vfpfcnvrt@fmt,w
  7295  03CE  0086               	movwf	6
  7296  03CF  0187               	clrf	7
  7297  03D0  3001               	movlw	1
  7298  03D1  0781               	addwf	1,f
  7299  03D2  3141               	addfsr 1,1
  7300  03D3  1803               	skipnc
  7301  03D4  0A81               	incf	1,f
  7302                           
  7303                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 828:       
      +                                ll = (long long)(*(int *)__va_arg(*(int **)ap, (int)0));
  7304  03D5  084F               	movf	vfpfcnvrt@ap,w
  7305  03D6  0086               	movwf	6
  7306  03D7  0187               	clrf	7
  7307  03D8  0801               	movf	1,w
  7308  03D9  0084               	movwf	4
  7309  03DA  0185               	clrf	5
  7310  03DB  3002               	movlw	2
  7311  03DC  0781               	addwf	1,f
  7312  03DD  3F00               	moviw [0]fsr0
  7313  03DE  00D0               	movwf	??_vfpfcnvrt
  7314  03DF  3F01               	moviw [1]fsr0
  7315  03E0  00D1               	movwf	??_vfpfcnvrt+1
  7316  03E1  0850               	movf	??_vfpfcnvrt,w
  7317  03E2  00D5               	movwf	vfpfcnvrt@ll
  7318  03E3  0851               	movf	??_vfpfcnvrt+1,w
  7319  03E4  00D6               	movwf	vfpfcnvrt@ll+1
  7320  03E5  0D89               	rlf	9,f
  7321  03E6  3B89               	subwfb	9,f
  7322  03E7  0989               	comf	9,f
  7323  03E8  00D7               	movwf	vfpfcnvrt@ll+2
  7324  03E9  00D8               	movwf	vfpfcnvrt@ll+3
  7325  03EA  00D9               	movwf	vfpfcnvrt@ll+4
  7326  03EB  00DA               	movwf	vfpfcnvrt@ll+5
  7327  03EC  00DB               	movwf	vfpfcnvrt@ll+6
  7328  03ED  00DC               	movwf	vfpfcnvrt@ll+7
  7329                           
  7330                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 830:       
      +                                return dtoa(fp, ll);
  7331  03EE  0855               	movf	vfpfcnvrt@ll,w
  7332  03EF  00B0               	movwf	dtoa@d
  7333  03F0  0856               	movf	vfpfcnvrt@ll+1,w
  7334  03F1  00B1               	movwf	dtoa@d+1
  7335  03F2  0857               	movf	vfpfcnvrt@ll+2,w
  7336  03F3  00B2               	movwf	dtoa@d+2
  7337  03F4  0858               	movf	vfpfcnvrt@ll+3,w
  7338  03F5  00B3               	movwf	dtoa@d+3
  7339  03F6  0859               	movf	vfpfcnvrt@ll+4,w
  7340  03F7  00B4               	movwf	dtoa@d+4
  7341  03F8  085A               	movf	vfpfcnvrt@ll+5,w
  7342  03F9  00B5               	movwf	dtoa@d+5
  7343  03FA  085B               	movf	vfpfcnvrt@ll+6,w
  7344  03FB  00B6               	movwf	dtoa@d+6
  7345  03FC  085C               	movf	vfpfcnvrt@ll+7,w
  7346  03FD  00B7               	movwf	dtoa@d+7
  7347  03FE  085F               	movf	vfpfcnvrt@fp,w
  7348  03FF  3182  2237         	fcall	_dtoa
  7349  0401  0020               	movlb	0	; select bank0
  7350  0402  0831               	movf	?_dtoa+1,w
  7351  0403  00CF               	movwf	?_vfpfcnvrt+1
  7352  0404  0830               	movf	?_dtoa,w
  7353  0405  00CE               	movwf	?_vfpfcnvrt
  7354  0406  0008               	return
  7355  0407                     i1l3197:	
  7356                           
  7357                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1149:      
      +                             if (*fmt[0] == 's') {
  7358  0407  084E               	movf	vfpfcnvrt@fmt,w
  7359  0408  0086               	movwf	6
  7360  0409  0187               	clrf	7
  7361  040A  3F40               	moviw [0]fsr1
  7362  040B  00D0               	movwf	??_vfpfcnvrt
  7363  040C  3F41               	moviw [1]fsr1
  7364  040D  00D1               	movwf	??_vfpfcnvrt+1
  7365  040E  0850               	movf	??_vfpfcnvrt,w
  7366  040F  0084               	movwf	4
  7367  0410  0851               	movf	??_vfpfcnvrt+1,w
  7368  0411  0085               	movwf	5
  7369  0412  0012               	moviw fsr0++
  7370  0413  3A73               	xorlw	115
  7371  0414  1D03               	btfss	3,2
  7372  0415  2C37               	goto	i1l3207
  7373                           
  7374                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1151:      
      +                                 ++*fmt;
  7375  0416  084E               	movf	vfpfcnvrt@fmt,w
  7376  0417  0086               	movwf	6
  7377  0418  0187               	clrf	7
  7378  0419  3001               	movlw	1
  7379  041A  0781               	addwf	1,f
  7380  041B  3141               	addfsr 1,1
  7381  041C  1803               	skipnc
  7382  041D  0A81               	incf	1,f
  7383                           
  7384                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1152:      
      +                                 cp = (*(char * *)__va_arg(*(char * **)ap, (char *)0));
  7385  041E  084F               	movf	vfpfcnvrt@ap,w
  7386  041F  0086               	movwf	6
  7387  0420  0187               	clrf	7
  7388  0421  0801               	movf	1,w
  7389  0422  0084               	movwf	4
  7390  0423  0185               	clrf	5
  7391  0424  3002               	movlw	2
  7392  0425  0781               	addwf	1,f
  7393  0426  3F00               	moviw [0]fsr0
  7394  0427  00DD               	movwf	vfpfcnvrt@cp
  7395  0428  3F01               	moviw [1]fsr0
  7396  0429  00DE               	movwf	vfpfcnvrt@cp+1
  7397                           
  7398                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1154:      
      +                                 return stoa(fp, cp);
  7399  042A  085E               	movf	vfpfcnvrt@cp+1,w
  7400  042B  00F9               	movwf	stoa@s+1
  7401  042C  085D               	movf	vfpfcnvrt@cp,w
  7402  042D  00F8               	movwf	stoa@s
  7403  042E  085F               	movf	vfpfcnvrt@fp,w
  7404  042F  318F  273A         	fcall	_stoa
  7405  0431  0879               	movf	?_stoa+1,w
  7406  0432  0020               	movlb	0	; select bank0
  7407  0433  00CF               	movwf	?_vfpfcnvrt+1
  7408  0434  0878               	movf	?_stoa,w
  7409  0435  00CE               	movwf	?_vfpfcnvrt
  7410  0436  0008               	return
  7411  0437                     i1l3207:	
  7412                           
  7413                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1350:      
      +                             if ((*fmt)[0] == '%') {
  7414  0437  084E               	movf	vfpfcnvrt@fmt,w
  7415  0438  0086               	movwf	6
  7416  0439  0187               	clrf	7
  7417  043A  3F40               	moviw [0]fsr1
  7418  043B  00D0               	movwf	??_vfpfcnvrt
  7419  043C  3F41               	moviw [1]fsr1
  7420  043D  00D1               	movwf	??_vfpfcnvrt+1
  7421  043E  0850               	movf	??_vfpfcnvrt,w
  7422  043F  0084               	movwf	4
  7423  0440  0851               	movf	??_vfpfcnvrt+1,w
  7424  0441  0085               	movwf	5
  7425  0442  0012               	moviw fsr0++
  7426  0443  3A25               	xorlw	37
  7427  0444  1D03               	btfss	3,2
  7428  0445  2C5E               	goto	i1l3217
  7429                           
  7430                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1351:      
      +                                 ++*fmt;
  7431  0446  084E               	movf	vfpfcnvrt@fmt,w
  7432  0447  0086               	movwf	6
  7433  0448  0187               	clrf	7
  7434  0449  3001               	movlw	1
  7435  044A  0781               	addwf	1,f
  7436  044B  3141               	addfsr 1,1
  7437  044C  1803               	skipnc
  7438  044D  0A81               	incf	1,f
  7439                           
  7440                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1352:      
      +                                 fputc((int)'%', fp);
  7441  044E  3025               	movlw	37
  7442  044F  00F0               	movwf	fputc@c
  7443  0450  3000               	movlw	0
  7444  0451  00F1               	movwf	fputc@c+1
  7445  0452  085F               	movf	vfpfcnvrt@fp,w
  7446  0453  00D0               	movwf	??_vfpfcnvrt
  7447  0454  0850               	movf	??_vfpfcnvrt,w
  7448  0455  00F2               	movwf	fputc@fp
  7449  0456  318B  2314         	fcall	_fputc
  7450  0458                     i1l3213:	
  7451                           
  7452                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1353:      
      +                                 return 1;
  7453  0458  3001               	movlw	1
  7454  0459  0020               	movlb	0	; select bank0
  7455  045A  00CE               	movwf	?_vfpfcnvrt
  7456  045B  3000               	movlw	0
  7457  045C  00CF               	movwf	?_vfpfcnvrt+1
  7458  045D  0008               	return
  7459  045E                     i1l3217:	
  7460                           
  7461                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1357:      
      +                             ++*fmt;
  7462  045E  084E               	movf	vfpfcnvrt@fmt,w
  7463  045F  0086               	movwf	6
  7464  0460  0187               	clrf	7
  7465  0461  3001               	movlw	1
  7466  0462  0781               	addwf	1,f
  7467  0463  3141               	addfsr 1,1
  7468  0464  1803               	skipnc
  7469  0465  0A81               	incf	1,f
  7470                           
  7471                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1358:      
      +                             return 0;
  7472  0466  01CE               	clrf	?_vfpfcnvrt
  7473  0467  01CF               	clrf	?_vfpfcnvrt+1
  7474  0468  0008               	return
  7475  0469                     i1l3223:	
  7476                           
  7477                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1362:     f
      +                          putc((int)(*fmt)[0], fp);
  7478  0469  084E               	movf	vfpfcnvrt@fmt,w
  7479  046A  0086               	movwf	6
  7480  046B  0187               	clrf	7
  7481  046C  3F40               	moviw [0]fsr1
  7482  046D  00D0               	movwf	??_vfpfcnvrt
  7483  046E  3F41               	moviw [1]fsr1
  7484  046F  00D1               	movwf	??_vfpfcnvrt+1
  7485  0470  0850               	movf	??_vfpfcnvrt,w
  7486  0471  0084               	movwf	4
  7487  0472  0851               	movf	??_vfpfcnvrt+1,w
  7488  0473  0085               	movwf	5
  7489  0474  0800               	movf	0,w	;code access
  7490  0475  00D2               	movwf	??_vfpfcnvrt+2
  7491  0476  01D3               	clrf	??_vfpfcnvrt+3
  7492  0477  0852               	movf	??_vfpfcnvrt+2,w
  7493  0478  00F0               	movwf	fputc@c
  7494  0479  0853               	movf	??_vfpfcnvrt+3,w
  7495  047A  00F1               	movwf	fputc@c+1
  7496  047B  085F               	movf	vfpfcnvrt@fp,w
  7497  047C  00D4               	movwf	??_vfpfcnvrt+4
  7498  047D  0854               	movf	??_vfpfcnvrt+4,w
  7499  047E  00F2               	movwf	fputc@fp
  7500  047F  318B  2314  3183   	fcall	_fputc
  7501                           
  7502                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1363:     +
      +                          +*fmt;
  7503  0482  0020               	movlb	0	; select bank0
  7504  0483  084E               	movf	vfpfcnvrt@fmt,w
  7505  0484  0086               	movwf	6
  7506  0485  0187               	clrf	7
  7507  0486  3001               	movlw	1
  7508  0487  0781               	addwf	1,f
  7509  0488  3141               	addfsr 1,1
  7510  0489  1803               	skipnc
  7511  048A  0A81               	incf	1,f
  7512  048B  2C58               	goto	i1l3213
  7513  048C                     __end_of_vfpfcnvrt:	
  7514                           
  7515                           	psect	text33
  7516  0F3A                     __ptext33:	
  7517 ;; *************** function _stoa *****************
  7518 ;; Defined at:
  7519 ;;		line 546 in file "E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  7520 ;; Parameters:    Size  Location     Type
  7521 ;;  fp              1    wreg     PTR struct _IO_FILE
  7522 ;;		 -> sprintf@f(5), 
  7523 ;;  s               2    8[COMMON] PTR unsigned char 
  7524 ;;		 -> ?_sprintf(2), STR_3(4), STR_2(7), 
  7525 ;; Auto vars:     Size  Location     Type
  7526 ;;  fp              1   11[BANK0 ] PTR struct _IO_FILE
  7527 ;;		 -> sprintf@f(5), 
  7528 ;;  nuls            7    0[BANK0 ] unsigned char [7]
  7529 ;;  l               2   16[BANK0 ] int 
  7530 ;;  p               2   14[BANK0 ] int 
  7531 ;;  cp              2   12[BANK0 ] PTR unsigned char 
  7532 ;;		 -> ?_sprintf(2), stoa@nuls(7), STR_3(4), STR_2(7), 
  7533 ;;  w               2    9[BANK0 ] int 
  7534 ;;  i               2    7[BANK0 ] int 
  7535 ;; Return value:  Size  Location     Type
  7536 ;;                  2    8[COMMON] int 
  7537 ;; Registers used:
  7538 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7539 ;; Tracked objects:
  7540 ;;		On entry : 0/0
  7541 ;;		On exit  : 0/0
  7542 ;;		Unchanged: 0/0
  7543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7544 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7545 ;;      Locals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7546 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7547 ;;      Totals:         5      18       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7548 ;;Total ram usage:       23 bytes
  7549 ;; Hardware stack levels used:    1
  7550 ;; Hardware stack levels required when called:    2
  7551 ;; This function calls:
  7552 ;;		_fputc
  7553 ;;		_strlen
  7554 ;; This function is called by:
  7555 ;;		_vfpfcnvrt
  7556 ;; This function uses a non-reentrant model
  7557 ;;
  7558                           
  7559                           
  7560                           ;psect for function _stoa
  7561  0F3A                     _stoa:	
  7562                           
  7563                           ;incstack = 0
  7564                           ; Regs used in _stoa: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7565                           ;stoa@fp stored from wreg
  7566  0F3A  0020               	movlb	0	; select bank0
  7567  0F3B  00AB               	movwf	stoa@fp
  7568                           
  7569                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 546: static
      +                           int stoa(FILE *fp, char *s);E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\
      +                          common\doprnt.c: 547: {;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\commo
      +                          n\doprnt.c: 548:     char *cp, nuls[] = "(null)";
  7570  0F3C  30E6               	movlw	low stoa@F1139
  7571  0F3D  0086               	movwf	6
  7572  0F3E  3001               	movlw	high stoa@F1139
  7573  0F3F  0087               	movwf	7
  7574  0F40  3020               	movlw	low stoa@nuls
  7575  0F41  0084               	movwf	4
  7576  0F42  3000               	movlw	high stoa@nuls
  7577  0F43  0085               	movwf	5
  7578  0F44  3007               	movlw	7
  7579  0F45  00FA               	movwf	??_stoa
  7580  0F46                     u262_20:	
  7581  0F46  0016               	moviw fsr1++
  7582  0F47  001A               	movwi fsr0++
  7583  0F48  0BFA               	decfsz	??_stoa,f
  7584  0F49  2F46               	goto	u262_20
  7585                           
  7586                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 549:     in
      +                          t i, l, p, w;;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c
      +                          : 552:     cp = s;
  7587  0F4A  0879               	movf	stoa@s+1,w
  7588  0F4B  00AD               	movwf	stoa@cp+1
  7589  0F4C  0878               	movf	stoa@s,w
  7590  0F4D  00AC               	movwf	stoa@cp
  7591                           
  7592                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 553:     if
      +                           (!cp) {
  7593  0F4E  082C               	movf	stoa@cp,w
  7594  0F4F  042D               	iorwf	stoa@cp+1,w
  7595  0F50  1D03               	btfss	3,2
  7596  0F51  2F56               	goto	i1l2979
  7597                           
  7598                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 554:       
      +                            cp = nuls;
  7599  0F52  3020               	movlw	low stoa@nuls
  7600  0F53  00AC               	movwf	stoa@cp
  7601  0F54  3000               	movlw	high stoa@nuls
  7602  0F55  00AD               	movwf	stoa@cp+1
  7603  0F56                     i1l2979:	
  7604                           
  7605                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 558:     l 
      +                          = strlen(cp);
  7606  0F56  082D               	movf	stoa@cp+1,w
  7607  0F57  00F1               	movwf	strlen@s+1
  7608  0F58  082C               	movf	stoa@cp,w
  7609  0F59  00F0               	movwf	strlen@s
  7610  0F5A  3189  2136  318F   	fcall	_strlen
  7611  0F5D  0871               	movf	?_strlen+1,w
  7612  0F5E  0020               	movlb	0	; select bank0
  7613  0F5F  00B1               	movwf	stoa@l+1
  7614  0F60  0870               	movf	?_strlen,w
  7615  0F61  00B0               	movwf	stoa@l
  7616                           
  7617                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 559:     p 
      +                          = prec;
  7618  0F62  0022               	movlb	2	; select bank2
  7619  0F63  0863               	movf	(_prec+1)^(0+256),w
  7620  0F64  0020               	movlb	0	; select bank0
  7621  0F65  00AF               	movwf	stoa@p+1
  7622  0F66  0022               	movlb	2	; select bank2
  7623  0F67  0862               	movf	_prec^(0+256),w
  7624  0F68  0020               	movlb	0	; select bank0
  7625  0F69  00AE               	movwf	stoa@p
  7626                           
  7627                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 560:     l 
      +                          = (!(p < 0) && (p < l)) ? p : l;
  7628  0F6A  1BAF               	btfsc	stoa@p+1,7
  7629  0F6B  2F7D               	goto	i1l797
  7630  0F6C  082F               	movf	stoa@p+1,w
  7631  0F6D  3A80               	xorlw	128
  7632  0F6E  00FA               	movwf	??_stoa
  7633  0F6F  0831               	movf	stoa@l+1,w
  7634  0F70  3A80               	xorlw	128
  7635  0F71  027A               	subwf	??_stoa,w
  7636  0F72  1D03               	skipz
  7637  0F73  2F76               	goto	u265_25
  7638  0F74  0830               	movf	stoa@l,w
  7639  0F75  022E               	subwf	stoa@p,w
  7640  0F76                     u265_25:	
  7641  0F76  1803               	btfsc	3,0
  7642  0F77  2F7D               	goto	i1l797
  7643  0F78  0020               	movlb	0	; select bank0
  7644  0F79  082F               	movf	stoa@p+1,w
  7645  0F7A  00B1               	movwf	stoa@l+1
  7646  0F7B  082E               	movf	stoa@p,w
  7647  0F7C  00B0               	movwf	stoa@l
  7648  0F7D                     i1l797:	
  7649                           
  7650                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 561:     p 
      +                          = l;
  7651  0F7D  0020               	movlb	0	; select bank0
  7652  0F7E  0831               	movf	stoa@l+1,w
  7653  0F7F  00AF               	movwf	stoa@p+1
  7654  0F80  0830               	movf	stoa@l,w
  7655  0F81  00AE               	movwf	stoa@p
  7656                           
  7657                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 562:     w 
      +                          = width;
  7658  0F82  0022               	movlb	2	; select bank2
  7659  0F83  0861               	movf	(_width+1)^(0+256),w
  7660  0F84  0020               	movlb	0	; select bank0
  7661  0F85  00AA               	movwf	stoa@w+1
  7662  0F86  0022               	movlb	2	; select bank2
  7663  0F87  0860               	movf	_width^(0+256),w
  7664  0F88  0020               	movlb	0	; select bank0
  7665  0F89  00A9               	movwf	stoa@w
  7666                           
  7667                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 565:     if
      +                           (!(flags & (1 << 0))) {
  7668  0F8A  0021               	movlb	1	; select bank1
  7669  0F8B  1C6D               	btfss	_flags^(0+128),0
  7670  0F8C  2F9F               	goto	i1l2997
  7671  0F8D  2FAC               	goto	i1l2999
  7672  0F8E                     i1l2993:	
  7673                           
  7674                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 567:       
      +                                fputc(' ', fp);
  7675  0F8E  3020               	movlw	32
  7676  0F8F  00F0               	movwf	fputc@c
  7677  0F90  3000               	movlw	0
  7678  0F91  00F1               	movwf	fputc@c+1
  7679  0F92  0020               	movlb	0	; select bank0
  7680  0F93  082B               	movf	stoa@fp,w
  7681  0F94  00FA               	movwf	??_stoa
  7682  0F95  087A               	movf	??_stoa,w
  7683  0F96  00F2               	movwf	fputc@fp
  7684  0F97  318B  2314  318F   	fcall	_fputc
  7685                           
  7686                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 568:       
      +                                ++l;
  7687  0F9A  3001               	movlw	1
  7688  0F9B  0020               	movlb	0	; select bank0
  7689  0F9C  07B0               	addwf	stoa@l,f
  7690  0F9D  3000               	movlw	0
  7691  0F9E  3DB1               	addwfc	stoa@l+1,f
  7692  0F9F                     i1l2997:	
  7693                           
  7694                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 566:       
      +                            while (l < w) {
  7695  0F9F  0020               	movlb	0	; select bank0
  7696  0FA0  0831               	movf	stoa@l+1,w
  7697  0FA1  3A80               	xorlw	128
  7698  0FA2  00FA               	movwf	??_stoa
  7699  0FA3  082A               	movf	stoa@w+1,w
  7700  0FA4  3A80               	xorlw	128
  7701  0FA5  027A               	subwf	??_stoa,w
  7702  0FA6  1D03               	skipz
  7703  0FA7  2FAA               	goto	u267_25
  7704  0FA8  0829               	movf	stoa@w,w
  7705  0FA9  0230               	subwf	stoa@l,w
  7706  0FAA                     u267_25:	
  7707  0FAA  1C03               	skipc
  7708  0FAB  2F8E               	goto	i1l2993
  7709  0FAC                     i1l2999:	
  7710                           
  7711                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 573:     i 
      +                          = 0;
  7712  0FAC  0020               	movlb	0	; select bank0
  7713  0FAD  01A7               	clrf	stoa@i
  7714  0FAE  01A8               	clrf	stoa@i+1
  7715  0FAF                     i1l3007:	
  7716                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 574:     wh
      +                          ile (i < p) {
  7717                           
  7718                           
  7719                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 574:     wh
      +                          ile (i < p) {
  7720  0FAF  0828               	movf	stoa@i+1,w
  7721  0FB0  3A80               	xorlw	128
  7722  0FB1  00FA               	movwf	??_stoa
  7723  0FB2  082F               	movf	stoa@p+1,w
  7724  0FB3  3A80               	xorlw	128
  7725  0FB4  027A               	subwf	??_stoa,w
  7726  0FB5  1D03               	skipz
  7727  0FB6  2FB9               	goto	u268_25
  7728  0FB7  082E               	movf	stoa@p,w
  7729  0FB8  0227               	subwf	stoa@i,w
  7730  0FB9                     u268_25:	
  7731  0FB9  1803               	btfsc	3,0
  7732  0FBA  2FD8               	goto	i1l806
  7733                           
  7734                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 575:       
      +                            fputc(*cp, fp);
  7735  0FBB  0020               	movlb	0	; select bank0
  7736  0FBC  082C               	movf	stoa@cp,w
  7737  0FBD  0084               	movwf	4
  7738  0FBE  082D               	movf	stoa@cp+1,w
  7739  0FBF  0085               	movwf	5
  7740  0FC0  0800               	movf	0,w	;code access
  7741  0FC1  00FA               	movwf	??_stoa
  7742  0FC2  01FB               	clrf	??_stoa+1
  7743  0FC3  087A               	movf	??_stoa,w
  7744  0FC4  00F0               	movwf	fputc@c
  7745  0FC5  087B               	movf	??_stoa+1,w
  7746  0FC6  00F1               	movwf	fputc@c+1
  7747  0FC7  082B               	movf	stoa@fp,w
  7748  0FC8  00FC               	movwf	??_stoa+2
  7749  0FC9  087C               	movf	??_stoa+2,w
  7750  0FCA  00F2               	movwf	fputc@fp
  7751  0FCB  318B  2314  318F   	fcall	_fputc
  7752                           
  7753                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 576:       
      +                            ++cp;
  7754  0FCE  3001               	movlw	1
  7755  0FCF  0020               	movlb	0	; select bank0
  7756  0FD0  07AC               	addwf	stoa@cp,f
  7757  0FD1  3000               	movlw	0
  7758  0FD2  3DAD               	addwfc	stoa@cp+1,f
  7759                           
  7760                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 577:       
      +                            ++i;
  7761  0FD3  3001               	movlw	1
  7762  0FD4  07A7               	addwf	stoa@i,f
  7763  0FD5  3000               	movlw	0
  7764  0FD6  3DA8               	addwfc	stoa@i+1,f
  7765  0FD7  2FAF               	goto	i1l3007
  7766  0FD8                     i1l806:	
  7767                           
  7768                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 581:     if
      +                           (flags & (1 << 0)) {
  7769  0FD8  0021               	movlb	1	; select bank1
  7770  0FD9  186D               	btfsc	_flags^(0+128),0
  7771  0FDA  2FED               	goto	i1l3015
  7772  0FDB  2FFA               	goto	i1l3017
  7773  0FDC                     i1l3011:	
  7774                           
  7775                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 583:       
      +                                fputc(' ', fp);
  7776  0FDC  3020               	movlw	32
  7777  0FDD  00F0               	movwf	fputc@c
  7778  0FDE  3000               	movlw	0
  7779  0FDF  00F1               	movwf	fputc@c+1
  7780  0FE0  0020               	movlb	0	; select bank0
  7781  0FE1  082B               	movf	stoa@fp,w
  7782  0FE2  00FA               	movwf	??_stoa
  7783  0FE3  087A               	movf	??_stoa,w
  7784  0FE4  00F2               	movwf	fputc@fp
  7785  0FE5  318B  2314  318F   	fcall	_fputc
  7786                           
  7787                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 584:       
      +                                ++l;
  7788  0FE8  3001               	movlw	1
  7789  0FE9  0020               	movlb	0	; select bank0
  7790  0FEA  07B0               	addwf	stoa@l,f
  7791  0FEB  3000               	movlw	0
  7792  0FEC  3DB1               	addwfc	stoa@l+1,f
  7793  0FED                     i1l3015:	
  7794                           
  7795                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 582:       
      +                            while (l < w) {
  7796  0FED  0020               	movlb	0	; select bank0
  7797  0FEE  0831               	movf	stoa@l+1,w
  7798  0FEF  3A80               	xorlw	128
  7799  0FF0  00FA               	movwf	??_stoa
  7800  0FF1  082A               	movf	stoa@w+1,w
  7801  0FF2  3A80               	xorlw	128
  7802  0FF3  027A               	subwf	??_stoa,w
  7803  0FF4  1D03               	skipz
  7804  0FF5  2FF8               	goto	u270_25
  7805  0FF6  0829               	movf	stoa@w,w
  7806  0FF7  0230               	subwf	stoa@l,w
  7807  0FF8                     u270_25:	
  7808  0FF8  1C03               	skipc
  7809  0FF9  2FDC               	goto	i1l3011
  7810  0FFA                     i1l3017:	
  7811                           
  7812                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 588:     re
      +                          turn l;
  7813  0FFA  0020               	movlb	0	; select bank0
  7814  0FFB  0831               	movf	stoa@l+1,w
  7815  0FFC  00F9               	movwf	?_stoa+1
  7816  0FFD  0830               	movf	stoa@l,w
  7817  0FFE  00F8               	movwf	?_stoa
  7818  0FFF  0008               	return
  7819  1000                     __end_of_stoa:	
  7820                           
  7821                           	psect	text34
  7822  0237                     __ptext34:	
  7823 ;; *************** function _dtoa *****************
  7824 ;; Defined at:
  7825 ;;		line 274 in file "E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  7826 ;; Parameters:    Size  Location     Type
  7827 ;;  fp              1    wreg     PTR struct _IO_FILE
  7828 ;;		 -> sprintf@f(5), 
  7829 ;;  d               8   16[BANK0 ] long long 
  7830 ;; Auto vars:     Size  Location     Type
  7831 ;;  fp              1   29[BANK0 ] PTR struct _IO_FILE
  7832 ;;		 -> sprintf@f(5), 
  7833 ;;  n               8   36[BANK0 ] long long 
  7834 ;;  i               2   44[BANK0 ] int 
  7835 ;;  s               2   34[BANK0 ] int 
  7836 ;;  w               2   32[BANK0 ] int 
  7837 ;;  p               2   30[BANK0 ] int 
  7838 ;; Return value:  Size  Location     Type
  7839 ;;                  2   16[BANK0 ] int 
  7840 ;; Registers used:
  7841 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7842 ;; Tracked objects:
  7843 ;;		On entry : 0/0
  7844 ;;		On exit  : 0/0
  7845 ;;		Unchanged: 0/0
  7846 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7847 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7848 ;;      Locals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7849 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7850 ;;      Totals:         0      30       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7851 ;;Total ram usage:       30 bytes
  7852 ;; Hardware stack levels used:    1
  7853 ;; Hardware stack levels required when called:    4
  7854 ;; This function calls:
  7855 ;;		___aodiv
  7856 ;;		___aomod
  7857 ;;		_abs
  7858 ;;		_pad
  7859 ;; This function is called by:
  7860 ;;		_vfpfcnvrt
  7861 ;; This function uses a non-reentrant model
  7862 ;;
  7863                           
  7864                           
  7865                           ;psect for function _dtoa
  7866  0237                     _dtoa:	
  7867                           
  7868                           ;incstack = 0
  7869                           ; Regs used in _dtoa: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7870                           ;dtoa@fp stored from wreg
  7871  0237  0020               	movlb	0	; select bank0
  7872  0238  00BD               	movwf	dtoa@fp
  7873                           
  7874                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 274: static
      +                           int dtoa(FILE *fp, long long d);E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\
      +                          c99\common\doprnt.c: 275: {;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\c
      +                          ommon\doprnt.c: 276:     int i, p, s, w;;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\
      +                          sources\c99\common\doprnt.c: 277:     long long n;;E:\Program Files (x86)\Microchip\xc8\
      +                          v2.05\pic\sources\c99\common\doprnt.c: 280:     n = d;
  7875  0239  0830               	movf	dtoa@d,w
  7876  023A  00C4               	movwf	dtoa@n
  7877  023B  0831               	movf	dtoa@d+1,w
  7878  023C  00C5               	movwf	dtoa@n+1
  7879  023D  0832               	movf	dtoa@d+2,w
  7880  023E  00C6               	movwf	dtoa@n+2
  7881  023F  0833               	movf	dtoa@d+3,w
  7882  0240  00C7               	movwf	dtoa@n+3
  7883  0241  0834               	movf	dtoa@d+4,w
  7884  0242  00C8               	movwf	dtoa@n+4
  7885  0243  0835               	movf	dtoa@d+5,w
  7886  0244  00C9               	movwf	dtoa@n+5
  7887  0245  0836               	movf	dtoa@d+6,w
  7888  0246  00CA               	movwf	dtoa@n+6
  7889  0247  0837               	movf	dtoa@d+7,w
  7890  0248  00CB               	movwf	dtoa@n+7
  7891                           
  7892                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 281:     s 
      +                          = n < 0 ? 1 : 0;
  7893  0249  3044               	movlw	low dtoa@n
  7894  024A  0086               	movwf	6
  7895  024B  3000               	movlw	high dtoa@n
  7896  024C  0087               	movwf	7
  7897  024D  3F47               	moviw [7]fsr1
  7898  024E  00B8               	movwf	??_dtoa
  7899  024F  1FB8               	btfss	??_dtoa,7
  7900  0250  2A53               	goto	u246_20
  7901  0251  3001               	movlw	1
  7902  0252  2A54               	goto	u247_20
  7903  0253                     u246_20:	
  7904  0253  3000               	movlw	0
  7905  0254                     u247_20:	
  7906  0254  0020               	movlb	0	; select bank0
  7907  0255  00B9               	movwf	??_dtoa+1
  7908  0256  01BA               	clrf	??_dtoa+2
  7909  0257  0839               	movf	??_dtoa+1,w
  7910  0258  00C2               	movwf	dtoa@s
  7911  0259  083A               	movf	??_dtoa+2,w
  7912  025A  00C3               	movwf	dtoa@s+1
  7913                           
  7914                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 282:     if
      +                           (s) {
  7915  025B  0842               	movf	dtoa@s,w
  7916  025C  0443               	iorwf	dtoa@s+1,w
  7917  025D  1903               	btfsc	3,2
  7918  025E  2A7D               	goto	i1l765
  7919                           
  7920                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 283:       
      +                            n = -n;
  7921  025F  09C4               	comf	dtoa@n,f
  7922  0260  09C5               	comf	dtoa@n+1,f
  7923  0261  09C6               	comf	dtoa@n+2,f
  7924  0262  09C7               	comf	dtoa@n+3,f
  7925  0263  09C8               	comf	dtoa@n+4,f
  7926  0264  09C9               	comf	dtoa@n+5,f
  7927  0265  09CA               	comf	dtoa@n+6,f
  7928  0266  09CB               	comf	dtoa@n+7,f
  7929  0267  0AC4               	incf	dtoa@n,f
  7930  0268  1D03               	skipz
  7931  0269  2A7D               	goto	i1l765
  7932  026A  0AC5               	incf	dtoa@n+1,f
  7933  026B  1D03               	skipz
  7934  026C  2A7D               	goto	i1l765
  7935  026D  0AC6               	incf	dtoa@n+2,f
  7936  026E  1D03               	skipz
  7937  026F  2A7D               	goto	i1l765
  7938  0270  0AC7               	incf	dtoa@n+3,f
  7939  0271  1D03               	skipz
  7940  0272  2A7D               	goto	i1l765
  7941  0273  0AC8               	incf	dtoa@n+4,f
  7942  0274  1D03               	skipz
  7943  0275  2A7D               	goto	i1l765
  7944  0276  0AC9               	incf	dtoa@n+5,f
  7945  0277  1D03               	skipz
  7946  0278  2A7D               	goto	i1l765
  7947  0279  0ACA               	incf	dtoa@n+6,f
  7948  027A  1D03               	skipz
  7949  027B  2A7D               	goto	i1l765
  7950  027C  0ACB               	incf	dtoa@n+7,f
  7951  027D                     i1l765:	
  7952                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 284:     }
  7953                           
  7954                           
  7955                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 287:     if
      +                           (!(prec < 0)) {
  7956  027D  0022               	movlb	2	; select bank2
  7957  027E  1BE3               	btfsc	(_prec+1)^(0+256),7
  7958  027F  2A85               	goto	i1l766
  7959                           
  7960                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 288:       
      +                            flags &= ~(1 << 1);
  7961  0280  30FD               	movlw	253
  7962  0281  0021               	movlb	1	; select bank1
  7963  0282  05ED               	andwf	_flags^(0+128),f
  7964  0283  30FF               	movlw	255
  7965  0284  05EE               	andwf	(_flags+1)^(0+128),f
  7966  0285                     i1l766:	
  7967                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 289:     }
  7968                           
  7969                           
  7970                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 290:     p 
      +                          = (0 < prec) ? prec : 1;
  7971  0285  0022               	movlb	2	; select bank2
  7972  0286  0863               	movf	(_prec+1)^(0+256),w
  7973  0287  3A80               	xorlw	128
  7974  0288  0020               	movlb	0	; select bank0
  7975  0289  00B8               	movwf	??_dtoa
  7976  028A  3080               	movlw	128
  7977  028B  0238               	subwf	??_dtoa,w
  7978  028C  1D03               	skipz
  7979  028D  2A91               	goto	u251_25
  7980  028E  3001               	movlw	1
  7981  028F  0022               	movlb	2	; select bank2
  7982  0290  0262               	subwf	_prec^(0+256),w
  7983  0291                     u251_25:	
  7984  0291  1803               	skipnc
  7985  0292  2A99               	goto	i1l2925
  7986  0293  3001               	movlw	1
  7987  0294  0020               	movlb	0	; select bank0
  7988  0295  00BE               	movwf	dtoa@p
  7989  0296  3000               	movlw	0
  7990  0297  00BF               	movwf	dtoa@p+1
  7991  0298  2AA1               	goto	i1l770
  7992  0299                     i1l2925:	
  7993  0299  0022               	movlb	2	; select bank2
  7994  029A  0863               	movf	(_prec+1)^(0+256),w
  7995  029B  0020               	movlb	0	; select bank0
  7996  029C  00BF               	movwf	dtoa@p+1
  7997  029D  0022               	movlb	2	; select bank2
  7998  029E  0862               	movf	_prec^(0+256),w
  7999  029F  0020               	movlb	0	; select bank0
  8000  02A0  00BE               	movwf	dtoa@p
  8001  02A1                     i1l770:	
  8002                           
  8003                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 291:     w 
      +                          = width;
  8004  02A1  0022               	movlb	2	; select bank2
  8005  02A2  0861               	movf	(_width+1)^(0+256),w
  8006  02A3  0020               	movlb	0	; select bank0
  8007  02A4  00C1               	movwf	dtoa@w+1
  8008  02A5  0022               	movlb	2	; select bank2
  8009  02A6  0860               	movf	_width^(0+256),w
  8010  02A7  0020               	movlb	0	; select bank0
  8011  02A8  00C0               	movwf	dtoa@w
  8012                           
  8013                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 292:     if
      +                           (s || (flags & (1 << 2))) {
  8014  02A9  0842               	movf	dtoa@s,w
  8015  02AA  0443               	iorwf	dtoa@s+1,w
  8016  02AB  1D03               	btfss	3,2
  8017  02AC  2AB0               	goto	i1l2931
  8018  02AD  0021               	movlb	1	; select bank1
  8019  02AE  1D6D               	btfss	_flags^(0+128),2
  8020  02AF  2AB5               	goto	i1l771
  8021  02B0                     i1l2931:	
  8022                           
  8023                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 293:       
      +                            --w;
  8024  02B0  30FF               	movlw	255
  8025  02B1  0020               	movlb	0	; select bank0
  8026  02B2  07C0               	addwf	dtoa@w,f
  8027  02B3  30FF               	movlw	255
  8028  02B4  3DC1               	addwfc	dtoa@w+1,f
  8029  02B5                     i1l771:	
  8030                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 294:     }
  8031                           
  8032                           
  8033                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 297:     i 
      +                          = sizeof(dbuf) - 1;
  8034  02B5  301F               	movlw	31
  8035  02B6  0020               	movlb	0	; select bank0
  8036  02B7  00CC               	movwf	dtoa@i
  8037  02B8  3000               	movlw	0
  8038  02B9  00CD               	movwf	dtoa@i+1
  8039                           
  8040                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 298:     db
      +                          uf[i] = '\0';
  8041  02BA  0023               	movlb	3	; select bank3
  8042  02BB  01C7               	clrf	(_dbuf^(0+384)+31)
  8043                           
  8044                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 299:     wh
      +                          ile (!(i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  8045  02BC  2B4B               	goto	i1l774
  8046  02BD                     i1l2945:	
  8047  02BD  0020               	movlb	0	; select bank0
  8048  02BE  0844               	movf	dtoa@n,w
  8049  02BF  0445               	iorwf	dtoa@n+1,w
  8050  02C0  0446               	iorwf	dtoa@n+2,w
  8051  02C1  0447               	iorwf	dtoa@n+3,w
  8052  02C2  0448               	iorwf	dtoa@n+4,w
  8053  02C3  0449               	iorwf	dtoa@n+5,w
  8054  02C4  044A               	iorwf	dtoa@n+6,w
  8055  02C5  044B               	iorwf	dtoa@n+7,w
  8056  02C6  1D03               	skipz
  8057  02C7  2AE2               	goto	i1l2935
  8058  02C8  083F               	movf	dtoa@p+1,w
  8059  02C9  3A80               	xorlw	128
  8060  02CA  00B8               	movwf	??_dtoa
  8061  02CB  3080               	movlw	128
  8062  02CC  0238               	subwf	??_dtoa,w
  8063  02CD  1D03               	skipz
  8064  02CE  2AD1               	goto	u256_25
  8065  02CF  3001               	movlw	1
  8066  02D0  023E               	subwf	dtoa@p,w
  8067  02D1                     u256_25:	
  8068  02D1  1803               	skipnc
  8069  02D2  2AE2               	goto	i1l2935
  8070  02D3  0020               	movlb	0	; select bank0
  8071  02D4  0841               	movf	dtoa@w+1,w
  8072  02D5  3A80               	xorlw	128
  8073  02D6  00B8               	movwf	??_dtoa
  8074  02D7  3080               	movlw	128
  8075  02D8  0238               	subwf	??_dtoa,w
  8076  02D9  1D03               	skipz
  8077  02DA  2ADD               	goto	u257_25
  8078  02DB  3001               	movlw	1
  8079  02DC  0240               	subwf	dtoa@w,w
  8080  02DD                     u257_25:	
  8081  02DD  1C03               	skipc
  8082  02DE  2B57               	goto	i1l2953
  8083  02DF  0021               	movlb	1	; select bank1
  8084  02E0  1CED               	btfss	_flags^(0+128),1
  8085  02E1  2B57               	goto	i1l2953
  8086  02E2                     i1l2935:	
  8087                           
  8088                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 300:       
      +                            --i;
  8089  02E2  30FF               	movlw	255
  8090  02E3  0020               	movlb	0	; select bank0
  8091  02E4  07CC               	addwf	dtoa@i,f
  8092  02E5  30FF               	movlw	255
  8093  02E6  3DCD               	addwfc	dtoa@i+1,f
  8094                           
  8095                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 301:       
      +                            dbuf[i] = '0' + abs(n % 10);
  8096  02E7  300A               	movlw	10
  8097  02E8  00A0               	movwf	___aomod@divisor
  8098  02E9  01A1               	clrf	___aomod@divisor+1
  8099  02EA  01A2               	clrf	___aomod@divisor+2
  8100  02EB  01A3               	clrf	___aomod@divisor+3
  8101  02EC  01A4               	clrf	___aomod@divisor+4
  8102  02ED  01A5               	clrf	___aomod@divisor+5
  8103  02EE  01A6               	clrf	___aomod@divisor+6
  8104  02EF  01A7               	clrf	___aomod@divisor+7
  8105  02F0  0844               	movf	dtoa@n,w
  8106  02F1  00A8               	movwf	___aomod@dividend
  8107  02F2  0845               	movf	dtoa@n+1,w
  8108  02F3  00A9               	movwf	___aomod@dividend+1
  8109  02F4  0846               	movf	dtoa@n+2,w
  8110  02F5  00AA               	movwf	___aomod@dividend+2
  8111  02F6  0847               	movf	dtoa@n+3,w
  8112  02F7  00AB               	movwf	___aomod@dividend+3
  8113  02F8  0848               	movf	dtoa@n+4,w
  8114  02F9  00AC               	movwf	___aomod@dividend+4
  8115  02FA  0849               	movf	dtoa@n+5,w
  8116  02FB  00AD               	movwf	___aomod@dividend+5
  8117  02FC  084A               	movf	dtoa@n+6,w
  8118  02FD  00AE               	movwf	___aomod@dividend+6
  8119  02FE  084B               	movf	dtoa@n+7,w
  8120  02FF  00AF               	movwf	___aomod@dividend+7
  8121  0300  3186  2672  3182   	fcall	___aomod
  8122  0303  0020               	movlb	0	; select bank0
  8123  0304  0821               	movf	?___aomod+1,w
  8124  0305  00F4               	movwf	abs@a+1
  8125  0306  0820               	movf	?___aomod,w
  8126  0307  00F3               	movwf	abs@a
  8127  0308  3189  211F  3182   	fcall	_abs
  8128  030B  0873               	movf	?_abs,w
  8129  030C  3E30               	addlw	48
  8130  030D  0020               	movlb	0	; select bank0
  8131  030E  00B8               	movwf	??_dtoa
  8132  030F  084C               	movf	dtoa@i,w
  8133  0310  3EA8               	addlw	(low (_dbuf| (0+256)))& (0+255)
  8134  0311  0086               	movwf	6
  8135  0312  3001               	movlw	1	; select bank3/4
  8136  0313  0087               	movwf	7
  8137  0314  0838               	movf	??_dtoa,w
  8138  0315  0081               	movwf	1
  8139                           
  8140                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 302:       
      +                            --p;
  8141  0316  30FF               	movlw	255
  8142  0317  07BE               	addwf	dtoa@p,f
  8143  0318  30FF               	movlw	255
  8144  0319  3DBF               	addwfc	dtoa@p+1,f
  8145                           
  8146                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 303:       
      +                            --w;
  8147  031A  30FF               	movlw	255
  8148  031B  07C0               	addwf	dtoa@w,f
  8149  031C  30FF               	movlw	255
  8150  031D  3DC1               	addwfc	dtoa@w+1,f
  8151                           
  8152                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 304:       
      +                            n = n / 10;
  8153  031E  300A               	movlw	10
  8154  031F  00A0               	movwf	___aodiv@divisor
  8155  0320  01A1               	clrf	___aodiv@divisor+1
  8156  0321  01A2               	clrf	___aodiv@divisor+2
  8157  0322  01A3               	clrf	___aodiv@divisor+3
  8158  0323  01A4               	clrf	___aodiv@divisor+4
  8159  0324  01A5               	clrf	___aodiv@divisor+5
  8160  0325  01A6               	clrf	___aodiv@divisor+6
  8161  0326  01A7               	clrf	___aodiv@divisor+7
  8162  0327  0844               	movf	dtoa@n,w
  8163  0328  00A8               	movwf	___aodiv@dividend
  8164  0329  0845               	movf	dtoa@n+1,w
  8165  032A  00A9               	movwf	___aodiv@dividend+1
  8166  032B  0846               	movf	dtoa@n+2,w
  8167  032C  00AA               	movwf	___aodiv@dividend+2
  8168  032D  0847               	movf	dtoa@n+3,w
  8169  032E  00AB               	movwf	___aodiv@dividend+3
  8170  032F  0848               	movf	dtoa@n+4,w
  8171  0330  00AC               	movwf	___aodiv@dividend+4
  8172  0331  0849               	movf	dtoa@n+5,w
  8173  0332  00AD               	movwf	___aodiv@dividend+5
  8174  0333  084A               	movf	dtoa@n+6,w
  8175  0334  00AE               	movwf	___aodiv@dividend+6
  8176  0335  084B               	movf	dtoa@n+7,w
  8177  0336  00AF               	movwf	___aodiv@dividend+7
  8178  0337  3184  248C  3182   	fcall	___aodiv
  8179  033A  0020               	movlb	0	; select bank0
  8180  033B  0820               	movf	?___aodiv,w
  8181  033C  00C4               	movwf	dtoa@n
  8182  033D  0821               	movf	?___aodiv+1,w
  8183  033E  00C5               	movwf	dtoa@n+1
  8184  033F  0822               	movf	?___aodiv+2,w
  8185  0340  00C6               	movwf	dtoa@n+2
  8186  0341  0823               	movf	?___aodiv+3,w
  8187  0342  00C7               	movwf	dtoa@n+3
  8188  0343  0824               	movf	?___aodiv+4,w
  8189  0344  00C8               	movwf	dtoa@n+4
  8190  0345  0825               	movf	?___aodiv+5,w
  8191  0346  00C9               	movwf	dtoa@n+5
  8192  0347  0826               	movf	?___aodiv+6,w
  8193  0348  00CA               	movwf	dtoa@n+6
  8194  0349  0827               	movf	?___aodiv+7,w
  8195  034A  00CB               	movwf	dtoa@n+7
  8196  034B                     i1l774:	
  8197                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 305:     }
  8198                           
  8199                           
  8200                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 299:     wh
      +                          ile (!(i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  8201  034B  0020               	movlb	0	; select bank0
  8202  034C  084D               	movf	dtoa@i+1,w
  8203  034D  3A80               	xorlw	128
  8204  034E  00B8               	movwf	??_dtoa
  8205  034F  3080               	movlw	128
  8206  0350  0238               	subwf	??_dtoa,w
  8207  0351  1D03               	skipz
  8208  0352  2B55               	goto	u254_25
  8209  0353  3001               	movlw	1
  8210  0354  024C               	subwf	dtoa@i,w
  8211  0355                     u254_25:	
  8212  0355  1803               	btfsc	3,0
  8213  0356  2ABD               	goto	i1l2945
  8214  0357                     i1l2953:	
  8215                           
  8216                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 308:     if
      +                           (s || (flags & (1 << 2))) {
  8217  0357  0020               	movlb	0	; select bank0
  8218  0358  0842               	movf	dtoa@s,w
  8219  0359  0443               	iorwf	dtoa@s+1,w
  8220  035A  1D03               	btfss	3,2
  8221  035B  2B5F               	goto	i1l2957
  8222  035C  0021               	movlb	1	; select bank1
  8223  035D  1D6D               	btfss	_flags^(0+128),2
  8224  035E  2B77               	goto	i1l2967
  8225  035F                     i1l2957:	
  8226                           
  8227                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 309:       
      +                            --i;
  8228  035F  30FF               	movlw	255
  8229  0360  0020               	movlb	0	; select bank0
  8230  0361  07CC               	addwf	dtoa@i,f
  8231  0362  30FF               	movlw	255
  8232  0363  3DCD               	addwfc	dtoa@i+1,f
  8233                           
  8234                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 310:       
      +                            dbuf[i] = s ? '-' : '+';
  8235  0364  0842               	movf	dtoa@s,w
  8236  0365  0443               	iorwf	dtoa@s+1,w
  8237  0366  1D03               	btfss	3,2
  8238  0367  2B6A               	goto	i1l2963
  8239  0368  302B               	movlw	43
  8240  0369  2B6B               	goto	L1
  8241  036A                     i1l2963:	
  8242  036A  302D               	movlw	45
  8243  036B                     L1:	
  8244  036B  00BB               	movwf	_dtoa$1749
  8245  036C  3000               	movlw	0
  8246  036D  00BC               	movwf	_dtoa$1749+1
  8247  036E  083B               	movf	_dtoa$1749,w
  8248  036F  00B8               	movwf	??_dtoa
  8249  0370  084C               	movf	dtoa@i,w
  8250  0371  3EA8               	addlw	(low (_dbuf| (0+256)))& (0+255)
  8251  0372  0086               	movwf	6
  8252  0373  3001               	movlw	1	; select bank3/4
  8253  0374  0087               	movwf	7
  8254  0375  0838               	movf	??_dtoa,w
  8255  0376  0081               	movwf	1
  8256  0377                     i1l2967:	
  8257                           
  8258                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 314:     re
      +                          turn pad(fp, &dbuf[i], w);
  8259  0377  0020               	movlb	0	; select bank0
  8260  0378  084C               	movf	dtoa@i,w
  8261  0379  3EA8               	addlw	(low (_dbuf| (0+256)))& (0+255)
  8262  037A  00B8               	movwf	??_dtoa
  8263  037B  0838               	movf	??_dtoa,w
  8264  037C  00A4               	movwf	pad@buf
  8265  037D  0841               	movf	dtoa@w+1,w
  8266  037E  00A6               	movwf	pad@p+1
  8267  037F  0840               	movf	dtoa@w,w
  8268  0380  00A5               	movwf	pad@p
  8269  0381  083D               	movf	dtoa@fp,w
  8270  0382  318C  2442         	fcall	_pad
  8271  0384  0020               	movlb	0	; select bank0
  8272  0385  0825               	movf	?_pad+1,w
  8273  0386  00B1               	movwf	?_dtoa+1
  8274  0387  0824               	movf	?_pad,w
  8275  0388  00B0               	movwf	?_dtoa
  8276  0389  0008               	return
  8277  038A                     __end_of_dtoa:	
  8278                           
  8279                           	psect	text35
  8280  0C42                     __ptext35:	
  8281 ;; *************** function _pad *****************
  8282 ;; Defined at:
  8283 ;;		line 72 in file "E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  8284 ;; Parameters:    Size  Location     Type
  8285 ;;  fp              1    wreg     PTR struct _IO_FILE
  8286 ;;		 -> sprintf@f(5), 
  8287 ;;  buf             1    4[BANK0 ] PTR unsigned char 
  8288 ;;		 -> dbuf(32), 
  8289 ;;  p               2    5[BANK0 ] int 
  8290 ;; Auto vars:     Size  Location     Type
  8291 ;;  fp              1   11[BANK0 ] PTR struct _IO_FILE
  8292 ;;		 -> sprintf@f(5), 
  8293 ;;  w               2    9[BANK0 ] int 
  8294 ;;  i               2    7[BANK0 ] int 
  8295 ;; Return value:  Size  Location     Type
  8296 ;;                  2    4[BANK0 ] int 
  8297 ;; Registers used:
  8298 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8299 ;; Tracked objects:
  8300 ;;		On entry : 0/0
  8301 ;;		On exit  : 0/0
  8302 ;;		Unchanged: 0/0
  8303 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8304 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8305 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8306 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8307 ;;      Totals:         1       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8308 ;;Total ram usage:        9 bytes
  8309 ;; Hardware stack levels used:    1
  8310 ;; Hardware stack levels required when called:    3
  8311 ;; This function calls:
  8312 ;;		_fputc
  8313 ;;		_fputs
  8314 ;;		_strlen
  8315 ;; This function is called by:
  8316 ;;		_dtoa
  8317 ;; This function uses a non-reentrant model
  8318 ;;
  8319                           
  8320                           
  8321                           ;psect for function _pad
  8322  0C42                     _pad:	
  8323                           
  8324                           ;incstack = 0
  8325                           ; Regs used in _pad: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8326                           ;pad@fp stored from wreg
  8327  0C42  0020               	movlb	0	; select bank0
  8328  0C43  00AB               	movwf	pad@fp
  8329                           
  8330                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 72: static 
      +                          int pad(FILE *fp, char *buf, int p);E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 73: {;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99
      +                          \common\doprnt.c: 74:     int i, w;;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 77:     if (flags & (1 << 0)) {
  8331  0C44  0021               	movlb	1	; select bank1
  8332  0C45  1C6D               	btfss	_flags^(0+128),0
  8333  0C46  2C50               	goto	i1l2781
  8334                           
  8335                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 78:        
      +                           fputs((const char *)buf, fp);
  8336  0C47  0020               	movlb	0	; select bank0
  8337  0C48  082B               	movf	pad@fp,w
  8338  0C49  00FC               	movwf	??_pad
  8339  0C4A  087C               	movf	??_pad,w
  8340  0C4B  00F8               	movwf	fputs@fp
  8341  0C4C  0824               	movf	pad@buf,w
  8342  0C4D  318A  2202  318C   	fcall	_fputs
  8343  0C50                     i1l2781:	
  8344                           
  8345                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 82:     w =
      +                           (p < 0) ? 0 : p;
  8346  0C50  0020               	movlb	0	; select bank0
  8347  0C51  1BA6               	btfsc	pad@p+1,7
  8348  0C52  2C58               	goto	i1l2785
  8349  0C53  0826               	movf	pad@p+1,w
  8350  0C54  00AA               	movwf	pad@w+1
  8351  0C55  0825               	movf	pad@p,w
  8352  0C56  00A9               	movwf	pad@w
  8353  0C57  2C5A               	goto	i1l757
  8354  0C58                     i1l2785:	
  8355  0C58  01A9               	clrf	pad@w
  8356  0C59  01AA               	clrf	pad@w+1
  8357  0C5A                     i1l757:	
  8358                           
  8359                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 83:     i =
      +                           0;
  8360  0C5A  01A7               	clrf	pad@i
  8361  0C5B  01A8               	clrf	pad@i+1
  8362  0C5C                     i1l2791:	
  8363                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  8364                           
  8365                           
  8366                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  8367  0C5C  0828               	movf	pad@i+1,w
  8368  0C5D  3A80               	xorlw	128
  8369  0C5E  00FC               	movwf	??_pad
  8370  0C5F  082A               	movf	pad@w+1,w
  8371  0C60  3A80               	xorlw	128
  8372  0C61  027C               	subwf	??_pad,w
  8373  0C62  1D03               	skipz
  8374  0C63  2C66               	goto	u218_25
  8375  0C64  0829               	movf	pad@w,w
  8376  0C65  0227               	subwf	pad@i,w
  8377  0C66                     u218_25:	
  8378  0C66  1803               	btfsc	3,0
  8379  0C67  2C7A               	goto	i1l760
  8380                           
  8381                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 85:        
      +                           fputc(' ', fp);
  8382  0C68  3020               	movlw	32
  8383  0C69  00F0               	movwf	fputc@c
  8384  0C6A  3000               	movlw	0
  8385  0C6B  00F1               	movwf	fputc@c+1
  8386  0C6C  0020               	movlb	0	; select bank0
  8387  0C6D  082B               	movf	pad@fp,w
  8388  0C6E  00FC               	movwf	??_pad
  8389  0C6F  087C               	movf	??_pad,w
  8390  0C70  00F2               	movwf	fputc@fp
  8391  0C71  318B  2314  318C   	fcall	_fputc
  8392                           
  8393                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 86:        
      +                           ++i;
  8394  0C74  3001               	movlw	1
  8395  0C75  0020               	movlb	0	; select bank0
  8396  0C76  07A7               	addwf	pad@i,f
  8397  0C77  3000               	movlw	0
  8398  0C78  3DA8               	addwfc	pad@i+1,f
  8399  0C79  2C5C               	goto	i1l2791
  8400  0C7A                     i1l760:	
  8401                           
  8402                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 90:     if 
      +                          (!(flags & (1 << 0))) {
  8403  0C7A  0021               	movlb	1	; select bank1
  8404  0C7B  186D               	btfsc	_flags^(0+128),0
  8405  0C7C  2C86               	goto	i1l2795
  8406                           
  8407                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 91:        
      +                           fputs((const char *)buf, fp);
  8408  0C7D  0020               	movlb	0	; select bank0
  8409  0C7E  082B               	movf	pad@fp,w
  8410  0C7F  00FC               	movwf	??_pad
  8411  0C80  087C               	movf	??_pad,w
  8412  0C81  00F8               	movwf	fputs@fp
  8413  0C82  0824               	movf	pad@buf,w
  8414  0C83  318A  2202  318C   	fcall	_fputs
  8415  0C86                     i1l2795:	
  8416                           
  8417                           ;E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 94:     ret
      +                          urn strlen(buf) + w;
  8418  0C86  0020               	movlb	0	; select bank0
  8419  0C87  0824               	movf	pad@buf,w
  8420  0C88  00F0               	movwf	strlen@s
  8421  0C89  3001               	movlw	1
  8422  0C8A  00F1               	movwf	strlen@s+1
  8423  0C8B  3189  2136         	fcall	_strlen
  8424  0C8D  0020               	movlb	0	; select bank0
  8425  0C8E  0829               	movf	pad@w,w
  8426  0C8F  0770               	addwf	?_strlen,w
  8427  0C90  00A4               	movwf	?_pad
  8428  0C91  082A               	movf	pad@w+1,w
  8429  0C92  3D71               	addwfc	?_strlen+1,w
  8430  0C93  00A5               	movwf	?_pad+1
  8431  0C94  0008               	return
  8432  0C95                     __end_of_pad:	
  8433                           
  8434                           	psect	text36
  8435  0936                     __ptext36:	
  8436 ;; *************** function _strlen *****************
  8437 ;; Defined at:
  8438 ;;		line 12 in file "E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\strlen.c"
  8439 ;; Parameters:    Size  Location     Type
  8440 ;;  s               2    0[COMMON] PTR const unsigned char 
  8441 ;;		 -> ?_sprintf(2), stoa@nuls(7), dbuf(32), ISR@send(64), 
  8442 ;;		 -> STR_3(4), STR_2(7), 
  8443 ;; Auto vars:     Size  Location     Type
  8444 ;;  a               2    3[COMMON] PTR const unsigned char 
  8445 ;;		 -> ?_sprintf(2), stoa@nuls(7), dbuf(32), ISR@send(64), 
  8446 ;;		 -> STR_3(4), STR_2(7), 
  8447 ;; Return value:  Size  Location     Type
  8448 ;;                  2    0[COMMON] unsigned int 
  8449 ;; Registers used:
  8450 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  8451 ;; Tracked objects:
  8452 ;;		On entry : 0/0
  8453 ;;		On exit  : 0/0
  8454 ;;		Unchanged: 0/0
  8455 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8456 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8457 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8458 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8459 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8460 ;;Total ram usage:        5 bytes
  8461 ;; Hardware stack levels used:    1
  8462 ;; This function calls:
  8463 ;;		Nothing
  8464 ;; This function is called by:
  8465 ;;		_ISR
  8466 ;;		_pad
  8467 ;;		_stoa
  8468 ;; This function uses a non-reentrant model
  8469 ;;
  8470                           
  8471                           
  8472                           ;psect for function _strlen
  8473  0936                     _strlen:	
  8474                           
  8475                           ;incstack = 0
  8476                           ; Regs used in _strlen: [wreg-fsr0h+status,2+status,0]
  8477  0936  0871               	movf	strlen@s+1,w
  8478  0937  00F4               	movwf	strlen@a+1
  8479  0938  0870               	movf	strlen@s,w
  8480  0939  00F3               	movwf	strlen@a
  8481  093A                     i1l2755:	
  8482  093A  0870               	movf	strlen@s,w
  8483  093B  0084               	movwf	4
  8484  093C  0871               	movf	strlen@s+1,w
  8485  093D  0085               	movwf	5
  8486  093E  0012               	moviw fsr0++
  8487  093F  1903               	btfsc	3,2
  8488  0940  2946               	goto	i1l2757
  8489  0941  3001               	movlw	1
  8490  0942  07F0               	addwf	strlen@s,f
  8491  0943  3000               	movlw	0
  8492  0944  3DF1               	addwfc	strlen@s+1,f
  8493  0945  293A               	goto	i1l2755
  8494  0946                     i1l2757:	
  8495  0946  0873               	movf	strlen@a,w
  8496  0947  0270               	subwf	strlen@s,w
  8497  0948  00F0               	movwf	?_strlen
  8498  0949  0874               	movf	strlen@a+1,w
  8499  094A  3B71               	subwfb	strlen@s+1,w
  8500  094B  00F1               	movwf	?_strlen+1
  8501  094C  0008               	return
  8502  094D                     __end_of_strlen:	
  8503                           
  8504                           	psect	text37
  8505  0A02                     __ptext37:	
  8506 ;; *************** function _fputs *****************
  8507 ;; Defined at:
  8508 ;;		line 8 in file "E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputs.c"
  8509 ;; Parameters:    Size  Location     Type
  8510 ;;  s               1    wreg     PTR const unsigned char 
  8511 ;;		 -> dbuf(32), 
  8512 ;;  fp              1    8[COMMON] PTR struct _IO_FILE
  8513 ;;		 -> sprintf@f(5), 
  8514 ;; Auto vars:     Size  Location     Type
  8515 ;;  s               1    3[BANK0 ] PTR const unsigned char 
  8516 ;;		 -> dbuf(32), 
  8517 ;;  i               2    1[BANK0 ] int 
  8518 ;;  c               1    0[BANK0 ] unsigned char 
  8519 ;; Return value:  Size  Location     Type
  8520 ;;                  2    8[COMMON] int 
  8521 ;; Registers used:
  8522 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8523 ;; Tracked objects:
  8524 ;;		On entry : 0/0
  8525 ;;		On exit  : 0/0
  8526 ;;		Unchanged: 0/0
  8527 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8528 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8529 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8530 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8531 ;;      Totals:         4       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8532 ;;Total ram usage:        8 bytes
  8533 ;; Hardware stack levels used:    1
  8534 ;; Hardware stack levels required when called:    2
  8535 ;; This function calls:
  8536 ;;		_fputc
  8537 ;; This function is called by:
  8538 ;;		_pad
  8539 ;; This function uses a non-reentrant model
  8540 ;;
  8541                           
  8542                           
  8543                           ;psect for function _fputs
  8544  0A02                     _fputs:	
  8545                           
  8546                           ;incstack = 0
  8547                           ; Regs used in _fputs: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8548                           ;fputs@s stored from wreg
  8549  0A02  0020               	movlb	0	; select bank0
  8550  0A03  00A3               	movwf	fputs@s
  8551  0A04  01A1               	clrf	fputs@i
  8552  0A05  01A2               	clrf	fputs@i+1
  8553  0A06                     i1l2767:	
  8554  0A06  0821               	movf	fputs@i,w
  8555  0A07  0723               	addwf	fputs@s,w
  8556  0A08  00F9               	movwf	??_fputs
  8557  0A09  0879               	movf	??_fputs,w
  8558  0A0A  0086               	movwf	6
  8559  0A0B  3001               	movlw	1	; select bank2/3
  8560  0A0C  0087               	movwf	7
  8561  0A0D  0801               	movf	1,w
  8562  0A0E  00FA               	movwf	??_fputs+1
  8563  0A0F  087A               	movf	??_fputs+1,w
  8564  0A10  00A0               	movwf	fputs@c
  8565  0A11  0820               	movf	fputs@c,w
  8566  0A12  1903               	btfsc	3,2
  8567  0A13  0008               	return
  8568  0A14  0820               	movf	fputs@c,w
  8569  0A15  00F9               	movwf	??_fputs
  8570  0A16  01FA               	clrf	??_fputs+1
  8571  0A17  0879               	movf	??_fputs,w
  8572  0A18  00F0               	movwf	fputc@c
  8573  0A19  087A               	movf	??_fputs+1,w
  8574  0A1A  00F1               	movwf	fputc@c+1
  8575  0A1B  0878               	movf	fputs@fp,w
  8576  0A1C  00FB               	movwf	??_fputs+2
  8577  0A1D  087B               	movf	??_fputs+2,w
  8578  0A1E  00F2               	movwf	fputc@fp
  8579  0A1F  318B  2314  318A   	fcall	_fputc
  8580  0A22  3001               	movlw	1
  8581  0A23  0020               	movlb	0	; select bank0
  8582  0A24  07A1               	addwf	fputs@i,f
  8583  0A25  3000               	movlw	0
  8584  0A26  3DA2               	addwfc	fputs@i+1,f
  8585  0A27  2A06               	goto	i1l2767
  8586  0A28                     __end_of_fputs:	
  8587                           
  8588                           	psect	text38
  8589  0B14                     __ptext38:	
  8590 ;; *************** function _fputc *****************
  8591 ;; Defined at:
  8592 ;;		line 8 in file "E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputc.c"
  8593 ;; Parameters:    Size  Location     Type
  8594 ;;  c               2    0[COMMON] int 
  8595 ;;  fp              1    2[COMMON] PTR struct _IO_FILE
  8596 ;;		 -> sprintf@f(5), 
  8597 ;; Auto vars:     Size  Location     Type
  8598 ;;		None
  8599 ;; Return value:  Size  Location     Type
  8600 ;;                  2    0[COMMON] int 
  8601 ;; Registers used:
  8602 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8603 ;; Tracked objects:
  8604 ;;		On entry : 0/0
  8605 ;;		On exit  : 0/0
  8606 ;;		Unchanged: 0/0
  8607 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8608 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8609 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8610 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8611 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8612 ;;Total ram usage:        8 bytes
  8613 ;; Hardware stack levels used:    1
  8614 ;; Hardware stack levels required when called:    1
  8615 ;; This function calls:
  8616 ;;		_putch
  8617 ;; This function is called by:
  8618 ;;		_pad
  8619 ;;		_stoa
  8620 ;;		_vfpfcnvrt
  8621 ;;		_fputs
  8622 ;; This function uses a non-reentrant model
  8623 ;;
  8624                           
  8625                           
  8626                           ;psect for function _fputc
  8627  0B14                     _fputc:	
  8628                           
  8629                           ;incstack = 0
  8630                           ; Regs used in _fputc: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8631  0B14  0872               	movf	fputc@fp,w
  8632  0B15  1D03               	btfss	3,2
  8633  0B16  0872               	movf	fputc@fp,w
  8634  0B17  1D03               	btfss	3,2
  8635  0B18  2B1D               	goto	i1l2741
  8636  0B19  0870               	movf	fputc@c,w
  8637  0B1A  3188  2011         	fcall	_putch
  8638  0B1C  0008               	return
  8639  0B1D                     i1l2741:	
  8640  0B1D  0872               	movf	fputc@fp,w
  8641  0B1E  3E03               	addlw	3
  8642  0B1F  0086               	movwf	6
  8643  0B20  0187               	clrf	7
  8644  0B21  0016               	moviw fsr1++
  8645  0B22  0401               	iorwf	1,w
  8646  0B23  1903               	btfsc	3,2
  8647  0B24  2B40               	goto	i1l2745
  8648  0B25  0872               	movf	fputc@fp,w
  8649  0B26  3E03               	addlw	3
  8650  0B27  0086               	movwf	6
  8651  0B28  0187               	clrf	7
  8652  0B29  3F40               	moviw [0]fsr1
  8653  0B2A  00F3               	movwf	??_fputc
  8654  0B2B  3F41               	moviw [1]fsr1
  8655  0B2C  00F4               	movwf	??_fputc+1
  8656  0B2D  0A72               	incf	fputc@fp,w
  8657  0B2E  0086               	movwf	6
  8658  0B2F  0187               	clrf	7
  8659  0B30  3F40               	moviw [0]fsr1
  8660  0B31  00F5               	movwf	??_fputc+2
  8661  0B32  3F41               	moviw [1]fsr1
  8662  0B33  00F6               	movwf	??_fputc+3
  8663  0B34  0876               	movf	??_fputc+3,w
  8664  0B35  3A80               	xorlw	128
  8665  0B36  00F7               	movwf	??_fputc+4
  8666  0B37  0874               	movf	??_fputc+1,w
  8667  0B38  3A80               	xorlw	128
  8668  0B39  0277               	subwf	??_fputc+4,w
  8669  0B3A  1D03               	skipz
  8670  0B3B  2B3E               	goto	u211_25
  8671  0B3C  0873               	movf	??_fputc,w
  8672  0B3D  0275               	subwf	??_fputc+2,w
  8673  0B3E                     u211_25:	
  8674  0B3E  1803               	skipnc
  8675  0B3F  0008               	return
  8676  0B40                     i1l2745:	
  8677  0B40  0870               	movf	fputc@c,w
  8678  0B41  00F3               	movwf	??_fputc
  8679  0B42  0872               	movf	fputc@fp,w
  8680  0B43  0086               	movwf	6
  8681  0B44  0187               	clrf	7
  8682  0B45  0A72               	incf	fputc@fp,w
  8683  0B46  0084               	movwf	4
  8684  0B47  0185               	clrf	5
  8685  0B48  0800               	movf	0,w
  8686  0B49  0701               	addwf	1,w
  8687  0B4A  00F4               	movwf	??_fputc+1
  8688  0B4B  0874               	movf	??_fputc+1,w
  8689  0B4C  0086               	movwf	6
  8690  0B4D  0187               	clrf	7
  8691  0B4E  0873               	movf	??_fputc,w
  8692  0B4F  0081               	movwf	1
  8693  0B50  0A72               	incf	fputc@fp,w
  8694  0B51  0086               	movwf	6
  8695  0B52  0187               	clrf	7
  8696  0B53  3001               	movlw	1
  8697  0B54  0781               	addwf	1,f
  8698  0B55  3141               	addfsr 1,1
  8699  0B56  1803               	skipnc
  8700  0B57  0A81               	incf	1,f
  8701  0B58  0008               	return
  8702  0B59                     __end_of_fputc:	
  8703                           
  8704                           	psect	text39
  8705  0811                     __ptext39:	
  8706 ;; *************** function _putch *****************
  8707 ;; Defined at:
  8708 ;;		line 7 in file "E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\putch.c"
  8709 ;; Parameters:    Size  Location     Type
  8710 ;;  c               1    wreg     unsigned char 
  8711 ;; Auto vars:     Size  Location     Type
  8712 ;;  c               1    0[COMMON] unsigned char 
  8713 ;; Return value:  Size  Location     Type
  8714 ;;                  1    wreg      void 
  8715 ;; Registers used:
  8716 ;;		wreg
  8717 ;; Tracked objects:
  8718 ;;		On entry : 0/0
  8719 ;;		On exit  : 0/0
  8720 ;;		Unchanged: 0/0
  8721 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8722 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8723 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8724 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8725 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8726 ;;Total ram usage:        0 bytes
  8727 ;; Hardware stack levels used:    1
  8728 ;; This function calls:
  8729 ;;		Nothing
  8730 ;; This function is called by:
  8731 ;;		_fputc
  8732 ;; This function uses a non-reentrant model
  8733 ;;
  8734                           
  8735                           
  8736                           ;psect for function _putch
  8737  0811                     _putch:	
  8738                           
  8739                           ;incstack = 0
  8740                           ; Regs used in _putch: [wreg]
  8741  0811  0008               	return
  8742  0812                     __end_of_putch:	
  8743                           
  8744                           	psect	text40
  8745  091F                     __ptext40:	
  8746 ;; *************** function _abs *****************
  8747 ;; Defined at:
  8748 ;;		line 1 in file "E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\abs.c"
  8749 ;; Parameters:    Size  Location     Type
  8750 ;;  a               2    3[COMMON] int 
  8751 ;; Auto vars:     Size  Location     Type
  8752 ;;		None
  8753 ;; Return value:  Size  Location     Type
  8754 ;;                  2    3[COMMON] int 
  8755 ;; Registers used:
  8756 ;;		wreg, status,2, status,0
  8757 ;; Tracked objects:
  8758 ;;		On entry : 0/0
  8759 ;;		On exit  : 0/0
  8760 ;;		Unchanged: 0/0
  8761 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8762 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8763 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8764 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8765 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8766 ;;Total ram usage:        4 bytes
  8767 ;; Hardware stack levels used:    1
  8768 ;; This function calls:
  8769 ;;		Nothing
  8770 ;; This function is called by:
  8771 ;;		_dtoa
  8772 ;; This function uses a non-reentrant model
  8773 ;;
  8774                           
  8775                           
  8776                           ;psect for function _abs
  8777  091F                     _abs:	
  8778                           
  8779                           ;incstack = 0
  8780                           ; Regs used in _abs: [wreg+status,2+status,0]
  8781  091F  0874               	movf	abs@a+1,w
  8782  0920  3A80               	xorlw	128
  8783  0921  00F5               	movwf	??_abs
  8784  0922  3080               	movlw	128
  8785  0923  0275               	subwf	??_abs,w
  8786  0924  1D03               	skipz
  8787  0925  2928               	goto	u220_25
  8788  0926  3001               	movlw	1
  8789  0927  0273               	subwf	abs@a,w
  8790  0928                     u220_25:	
  8791  0928  1803               	skipnc
  8792  0929  0008               	return
  8793  092A  0973               	comf	abs@a,w
  8794  092B  00F5               	movwf	??_abs
  8795  092C  0974               	comf	abs@a+1,w
  8796  092D  00F6               	movwf	??_abs+1
  8797  092E  0AF5               	incf	??_abs,f
  8798  092F  1903               	skipnz
  8799  0930  0AF6               	incf	??_abs+1,f
  8800  0931  0875               	movf	??_abs,w
  8801  0932  00F3               	movwf	?_abs
  8802  0933  0876               	movf	??_abs+1,w
  8803  0934  00F4               	movwf	?_abs+1
  8804  0935  0008               	return
  8805  0936                     __end_of_abs:	
  8806                           
  8807                           	psect	text41
  8808  0672                     __ptext41:	
  8809 ;; *************** function ___aomod *****************
  8810 ;; Defined at:
  8811 ;;		line 7 in file "E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\aomod.c"
  8812 ;; Parameters:    Size  Location     Type
  8813 ;;  divisor         8    0[BANK0 ] long long 
  8814 ;;  dividend        8    8[BANK0 ] long long 
  8815 ;; Auto vars:     Size  Location     Type
  8816 ;;  sign            1    2[COMMON] unsigned char 
  8817 ;;  counter         1    1[COMMON] unsigned char 
  8818 ;; Return value:  Size  Location     Type
  8819 ;;                  8    0[BANK0 ] long long 
  8820 ;; Registers used:
  8821 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8822 ;; Tracked objects:
  8823 ;;		On entry : 0/0
  8824 ;;		On exit  : 0/0
  8825 ;;		Unchanged: 0/0
  8826 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8827 ;;      Params:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8828 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8829 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8830 ;;      Totals:         3      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8831 ;;Total ram usage:       19 bytes
  8832 ;; Hardware stack levels used:    1
  8833 ;; This function calls:
  8834 ;;		Nothing
  8835 ;; This function is called by:
  8836 ;;		_dtoa
  8837 ;; This function uses a non-reentrant model
  8838 ;;
  8839                           
  8840                           
  8841                           ;psect for function ___aomod
  8842  0672                     ___aomod:	
  8843                           
  8844                           ;incstack = 0
  8845                           ; Regs used in ___aomod: [wreg+fsr1l+fsr1h+status,2+status,0]
  8846  0672  01F2               	clrf	___aomod@sign
  8847  0673  3028               	movlw	low ___aomod@dividend
  8848  0674  0086               	movwf	6
  8849  0675  3000               	movlw	high ___aomod@dividend
  8850  0676  0087               	movwf	7
  8851  0677  3F47               	moviw [7]fsr1
  8852  0678  00F0               	movwf	??___aomod
  8853  0679  1FF0               	btfss	??___aomod,7
  8854  067A  2E9C               	goto	i1l2847
  8855  067B  0020               	movlb	0	; select bank0
  8856  067C  09A8               	comf	___aomod@dividend,f
  8857  067D  09A9               	comf	___aomod@dividend+1,f
  8858  067E  09AA               	comf	___aomod@dividend+2,f
  8859  067F  09AB               	comf	___aomod@dividend+3,f
  8860  0680  09AC               	comf	___aomod@dividend+4,f
  8861  0681  09AD               	comf	___aomod@dividend+5,f
  8862  0682  09AE               	comf	___aomod@dividend+6,f
  8863  0683  09AF               	comf	___aomod@dividend+7,f
  8864  0684  0AA8               	incf	___aomod@dividend,f
  8865  0685  1D03               	skipz
  8866  0686  2E9A               	goto	u233_2lld
  8867  0687  0AA9               	incf	___aomod@dividend+1,f
  8868  0688  1D03               	skipz
  8869  0689  2E9A               	goto	u233_2lld
  8870  068A  0AAA               	incf	___aomod@dividend+2,f
  8871  068B  1D03               	skipz
  8872  068C  2E9A               	goto	u233_2lld
  8873  068D  0AAB               	incf	___aomod@dividend+3,f
  8874  068E  1D03               	skipz
  8875  068F  2E9A               	goto	u233_2lld
  8876  0690  0AAC               	incf	___aomod@dividend+4,f
  8877  0691  1D03               	skipz
  8878  0692  2E9A               	goto	u233_2lld
  8879  0693  0AAD               	incf	___aomod@dividend+5,f
  8880  0694  1D03               	skipz
  8881  0695  2E9A               	goto	u233_2lld
  8882  0696  0AAE               	incf	___aomod@dividend+6,f
  8883  0697  1D03               	skipz
  8884  0698  2E9A               	goto	u233_2lld
  8885  0699  0AAF               	incf	___aomod@dividend+7,f
  8886  069A                     u233_2lld:	
  8887  069A  01F2               	clrf	___aomod@sign
  8888  069B  0AF2               	incf	___aomod@sign,f
  8889  069C                     i1l2847:	
  8890  069C  3020               	movlw	low ___aomod@divisor
  8891  069D  0086               	movwf	6
  8892  069E  3000               	movlw	high ___aomod@divisor
  8893  069F  0087               	movwf	7
  8894  06A0  3F47               	moviw [7]fsr1
  8895  06A1  00F0               	movwf	??___aomod
  8896  06A2  1FF0               	btfss	??___aomod,7
  8897  06A3  2EC3               	goto	i1l2851
  8898  06A4  0020               	movlb	0	; select bank0
  8899  06A5  09A0               	comf	___aomod@divisor,f
  8900  06A6  09A1               	comf	___aomod@divisor+1,f
  8901  06A7  09A2               	comf	___aomod@divisor+2,f
  8902  06A8  09A3               	comf	___aomod@divisor+3,f
  8903  06A9  09A4               	comf	___aomod@divisor+4,f
  8904  06AA  09A5               	comf	___aomod@divisor+5,f
  8905  06AB  09A6               	comf	___aomod@divisor+6,f
  8906  06AC  09A7               	comf	___aomod@divisor+7,f
  8907  06AD  0AA0               	incf	___aomod@divisor,f
  8908  06AE  1D03               	skipz
  8909  06AF  2EC3               	goto	i1l2851
  8910  06B0  0AA1               	incf	___aomod@divisor+1,f
  8911  06B1  1D03               	skipz
  8912  06B2  2EC3               	goto	i1l2851
  8913  06B3  0AA2               	incf	___aomod@divisor+2,f
  8914  06B4  1D03               	skipz
  8915  06B5  2EC3               	goto	i1l2851
  8916  06B6  0AA3               	incf	___aomod@divisor+3,f
  8917  06B7  1D03               	skipz
  8918  06B8  2EC3               	goto	i1l2851
  8919  06B9  0AA4               	incf	___aomod@divisor+4,f
  8920  06BA  1D03               	skipz
  8921  06BB  2EC3               	goto	i1l2851
  8922  06BC  0AA5               	incf	___aomod@divisor+5,f
  8923  06BD  1D03               	skipz
  8924  06BE  2EC3               	goto	i1l2851
  8925  06BF  0AA6               	incf	___aomod@divisor+6,f
  8926  06C0  1D03               	skipz
  8927  06C1  2EC3               	goto	i1l2851
  8928  06C2  0AA7               	incf	___aomod@divisor+7,f
  8929  06C3                     i1l2851:	
  8930  06C3  0020               	movlb	0	; select bank0
  8931  06C4  0820               	movf	___aomod@divisor,w
  8932  06C5  0421               	iorwf	___aomod@divisor+1,w
  8933  06C6  0422               	iorwf	___aomod@divisor+2,w
  8934  06C7  0423               	iorwf	___aomod@divisor+3,w
  8935  06C8  0424               	iorwf	___aomod@divisor+4,w
  8936  06C9  0425               	iorwf	___aomod@divisor+5,w
  8937  06CA  0426               	iorwf	___aomod@divisor+6,w
  8938  06CB  0427               	iorwf	___aomod@divisor+7,w
  8939  06CC  1903               	skipnz
  8940  06CD  2F1B               	goto	i1l2867
  8941  06CE  01F1               	clrf	___aomod@counter
  8942  06CF  0AF1               	incf	___aomod@counter,f
  8943  06D0                     i1l2859:	
  8944  06D0  1BA7               	btfsc	___aomod@divisor+7,7
  8945  06D1  2EDF               	goto	i1l2861
  8946  06D2  35A0               	lslf	___aomod@divisor,f
  8947  06D3  0DA1               	rlf	___aomod@divisor+1,f
  8948  06D4  0DA2               	rlf	___aomod@divisor+2,f
  8949  06D5  0DA3               	rlf	___aomod@divisor+3,f
  8950  06D6  0DA4               	rlf	___aomod@divisor+4,f
  8951  06D7  0DA5               	rlf	___aomod@divisor+5,f
  8952  06D8  0DA6               	rlf	___aomod@divisor+6,f
  8953  06D9  0DA7               	rlf	___aomod@divisor+7,f
  8954  06DA  3001               	movlw	1
  8955  06DB  00F0               	movwf	??___aomod
  8956  06DC  0870               	movf	??___aomod,w
  8957  06DD  07F1               	addwf	___aomod@counter,f
  8958  06DE  2ED0               	goto	i1l2859
  8959  06DF                     i1l2861:	
  8960  06DF  0827               	movf	___aomod@divisor+7,w
  8961  06E0  022F               	subwf	___aomod@dividend+7,w
  8962  06E1  1D03               	skipz
  8963  06E2  2EFD               	goto	u238_25
  8964  06E3  0826               	movf	___aomod@divisor+6,w
  8965  06E4  022E               	subwf	___aomod@dividend+6,w
  8966  06E5  1D03               	skipz
  8967  06E6  2EFD               	goto	u238_25
  8968  06E7  0825               	movf	___aomod@divisor+5,w
  8969  06E8  022D               	subwf	___aomod@dividend+5,w
  8970  06E9  1D03               	skipz
  8971  06EA  2EFD               	goto	u238_25
  8972  06EB  0824               	movf	___aomod@divisor+4,w
  8973  06EC  022C               	subwf	___aomod@dividend+4,w
  8974  06ED  1D03               	skipz
  8975  06EE  2EFD               	goto	u238_25
  8976  06EF  0823               	movf	___aomod@divisor+3,w
  8977  06F0  022B               	subwf	___aomod@dividend+3,w
  8978  06F1  1D03               	skipz
  8979  06F2  2EFD               	goto	u238_25
  8980  06F3  0822               	movf	___aomod@divisor+2,w
  8981  06F4  022A               	subwf	___aomod@dividend+2,w
  8982  06F5  1D03               	skipz
  8983  06F6  2EFD               	goto	u238_25
  8984  06F7  0821               	movf	___aomod@divisor+1,w
  8985  06F8  0229               	subwf	___aomod@dividend+1,w
  8986  06F9  1D03               	skipz
  8987  06FA  2EFD               	goto	u238_25
  8988  06FB  0820               	movf	___aomod@divisor,w
  8989  06FC  0228               	subwf	___aomod@dividend,w
  8990  06FD                     u238_25:	
  8991  06FD  1C03               	skipc
  8992  06FE  2F0F               	goto	i1l2865
  8993  06FF  0820               	movf	___aomod@divisor,w
  8994  0700  02A8               	subwf	___aomod@dividend,f
  8995  0701  0821               	movf	___aomod@divisor+1,w
  8996  0702  3BA9               	subwfb	___aomod@dividend+1,f
  8997  0703  0822               	movf	___aomod@divisor+2,w
  8998  0704  3BAA               	subwfb	___aomod@dividend+2,f
  8999  0705  0823               	movf	___aomod@divisor+3,w
  9000  0706  3BAB               	subwfb	___aomod@dividend+3,f
  9001  0707  0824               	movf	___aomod@divisor+4,w
  9002  0708  3BAC               	subwfb	___aomod@dividend+4,f
  9003  0709  0825               	movf	___aomod@divisor+5,w
  9004  070A  3BAD               	subwfb	___aomod@dividend+5,f
  9005  070B  0826               	movf	___aomod@divisor+6,w
  9006  070C  3BAE               	subwfb	___aomod@dividend+6,f
  9007  070D  0827               	movf	___aomod@divisor+7,w
  9008  070E  3BAF               	subwfb	___aomod@dividend+7,f
  9009  070F                     i1l2865:	
  9010  070F  36A7               	lsrf	___aomod@divisor+7,f
  9011  0710  0CA6               	rrf	___aomod@divisor+6,f
  9012  0711  0CA5               	rrf	___aomod@divisor+5,f
  9013  0712  0CA4               	rrf	___aomod@divisor+4,f
  9014  0713  0CA3               	rrf	___aomod@divisor+3,f
  9015  0714  0CA2               	rrf	___aomod@divisor+2,f
  9016  0715  0CA1               	rrf	___aomod@divisor+1,f
  9017  0716  0CA0               	rrf	___aomod@divisor,f
  9018  0717  3001               	movlw	1
  9019  0718  02F1               	subwf	___aomod@counter,f
  9020  0719  1D03               	btfss	3,2
  9021  071A  2EDF               	goto	i1l2861
  9022  071B                     i1l2867:	
  9023  071B  0872               	movf	___aomod@sign,w
  9024  071C  1903               	btfsc	3,2
  9025  071D  2F3C               	goto	i1l943
  9026  071E  09A8               	comf	___aomod@dividend,f
  9027  071F  09A9               	comf	___aomod@dividend+1,f
  9028  0720  09AA               	comf	___aomod@dividend+2,f
  9029  0721  09AB               	comf	___aomod@dividend+3,f
  9030  0722  09AC               	comf	___aomod@dividend+4,f
  9031  0723  09AD               	comf	___aomod@dividend+5,f
  9032  0724  09AE               	comf	___aomod@dividend+6,f
  9033  0725  09AF               	comf	___aomod@dividend+7,f
  9034  0726  0AA8               	incf	___aomod@dividend,f
  9035  0727  1D03               	skipz
  9036  0728  2F3C               	goto	i1l943
  9037  0729  0AA9               	incf	___aomod@dividend+1,f
  9038  072A  1D03               	skipz
  9039  072B  2F3C               	goto	i1l943
  9040  072C  0AAA               	incf	___aomod@dividend+2,f
  9041  072D  1D03               	skipz
  9042  072E  2F3C               	goto	i1l943
  9043  072F  0AAB               	incf	___aomod@dividend+3,f
  9044  0730  1D03               	skipz
  9045  0731  2F3C               	goto	i1l943
  9046  0732  0AAC               	incf	___aomod@dividend+4,f
  9047  0733  1D03               	skipz
  9048  0734  2F3C               	goto	i1l943
  9049  0735  0AAD               	incf	___aomod@dividend+5,f
  9050  0736  1D03               	skipz
  9051  0737  2F3C               	goto	i1l943
  9052  0738  0AAE               	incf	___aomod@dividend+6,f
  9053  0739  1D03               	skipz
  9054  073A  2F3C               	goto	i1l943
  9055  073B  0AAF               	incf	___aomod@dividend+7,f
  9056  073C                     i1l943:	
  9057  073C  0020               	movlb	0	; select bank0
  9058  073D  0828               	movf	___aomod@dividend,w
  9059  073E  00A0               	movwf	?___aomod
  9060  073F  0829               	movf	___aomod@dividend+1,w
  9061  0740  00A1               	movwf	?___aomod+1
  9062  0741  082A               	movf	___aomod@dividend+2,w
  9063  0742  00A2               	movwf	?___aomod+2
  9064  0743  082B               	movf	___aomod@dividend+3,w
  9065  0744  00A3               	movwf	?___aomod+3
  9066  0745  082C               	movf	___aomod@dividend+4,w
  9067  0746  00A4               	movwf	?___aomod+4
  9068  0747  082D               	movf	___aomod@dividend+5,w
  9069  0748  00A5               	movwf	?___aomod+5
  9070  0749  082E               	movf	___aomod@dividend+6,w
  9071  074A  00A6               	movwf	?___aomod+6
  9072  074B  082F               	movf	___aomod@dividend+7,w
  9073  074C  00A7               	movwf	?___aomod+7
  9074  074D  0008               	return
  9075  074E                     __end_of___aomod:	
  9076                           
  9077                           	psect	text42
  9078  048C                     __ptext42:	
  9079 ;; *************** function ___aodiv *****************
  9080 ;; Defined at:
  9081 ;;		line 7 in file "E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\aodiv.c"
  9082 ;; Parameters:    Size  Location     Type
  9083 ;;  divisor         8    0[BANK0 ] long long 
  9084 ;;  dividend        8    8[BANK0 ] long long 
  9085 ;; Auto vars:     Size  Location     Type
  9086 ;;  quotient        8    3[COMMON] long long 
  9087 ;;  sign            1    2[COMMON] unsigned char 
  9088 ;;  counter         1    1[COMMON] unsigned char 
  9089 ;; Return value:  Size  Location     Type
  9090 ;;                  8    0[BANK0 ] long long 
  9091 ;; Registers used:
  9092 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9093 ;; Tracked objects:
  9094 ;;		On entry : 0/0
  9095 ;;		On exit  : 0/0
  9096 ;;		Unchanged: 0/0
  9097 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9098 ;;      Params:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9099 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9100 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9101 ;;      Totals:        11      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9102 ;;Total ram usage:       27 bytes
  9103 ;; Hardware stack levels used:    1
  9104 ;; This function calls:
  9105 ;;		Nothing
  9106 ;; This function is called by:
  9107 ;;		_dtoa
  9108 ;; This function uses a non-reentrant model
  9109 ;;
  9110                           
  9111                           
  9112                           ;psect for function ___aodiv
  9113  048C                     ___aodiv:	
  9114                           
  9115                           ;incstack = 0
  9116                           ; Regs used in ___aodiv: [wreg+fsr1l+fsr1h+status,2+status,0]
  9117  048C  01F2               	clrf	___aodiv@sign
  9118  048D  3020               	movlw	low ___aodiv@divisor
  9119  048E  0086               	movwf	6
  9120  048F  3000               	movlw	high ___aodiv@divisor
  9121  0490  0087               	movwf	7
  9122  0491  3F47               	moviw [7]fsr1
  9123  0492  00F0               	movwf	??___aodiv
  9124  0493  1FF0               	btfss	??___aodiv,7
  9125  0494  2CB6               	goto	i1l2809
  9126  0495  0020               	movlb	0	; select bank0
  9127  0496  09A0               	comf	___aodiv@divisor,f
  9128  0497  09A1               	comf	___aodiv@divisor+1,f
  9129  0498  09A2               	comf	___aodiv@divisor+2,f
  9130  0499  09A3               	comf	___aodiv@divisor+3,f
  9131  049A  09A4               	comf	___aodiv@divisor+4,f
  9132  049B  09A5               	comf	___aodiv@divisor+5,f
  9133  049C  09A6               	comf	___aodiv@divisor+6,f
  9134  049D  09A7               	comf	___aodiv@divisor+7,f
  9135  049E  0AA0               	incf	___aodiv@divisor,f
  9136  049F  1D03               	skipz
  9137  04A0  2CB4               	goto	u222_2lld
  9138  04A1  0AA1               	incf	___aodiv@divisor+1,f
  9139  04A2  1D03               	skipz
  9140  04A3  2CB4               	goto	u222_2lld
  9141  04A4  0AA2               	incf	___aodiv@divisor+2,f
  9142  04A5  1D03               	skipz
  9143  04A6  2CB4               	goto	u222_2lld
  9144  04A7  0AA3               	incf	___aodiv@divisor+3,f
  9145  04A8  1D03               	skipz
  9146  04A9  2CB4               	goto	u222_2lld
  9147  04AA  0AA4               	incf	___aodiv@divisor+4,f
  9148  04AB  1D03               	skipz
  9149  04AC  2CB4               	goto	u222_2lld
  9150  04AD  0AA5               	incf	___aodiv@divisor+5,f
  9151  04AE  1D03               	skipz
  9152  04AF  2CB4               	goto	u222_2lld
  9153  04B0  0AA6               	incf	___aodiv@divisor+6,f
  9154  04B1  1D03               	skipz
  9155  04B2  2CB4               	goto	u222_2lld
  9156  04B3  0AA7               	incf	___aodiv@divisor+7,f
  9157  04B4                     u222_2lld:	
  9158  04B4  01F2               	clrf	___aodiv@sign
  9159  04B5  0AF2               	incf	___aodiv@sign,f
  9160  04B6                     i1l2809:	
  9161  04B6  3028               	movlw	low ___aodiv@dividend
  9162  04B7  0086               	movwf	6
  9163  04B8  3000               	movlw	high ___aodiv@dividend
  9164  04B9  0087               	movwf	7
  9165  04BA  3F47               	moviw [7]fsr1
  9166  04BB  00F0               	movwf	??___aodiv
  9167  04BC  1FF0               	btfss	??___aodiv,7
  9168  04BD  2CE1               	goto	i1l2815
  9169  04BE  0020               	movlb	0	; select bank0
  9170  04BF  09A8               	comf	___aodiv@dividend,f
  9171  04C0  09A9               	comf	___aodiv@dividend+1,f
  9172  04C1  09AA               	comf	___aodiv@dividend+2,f
  9173  04C2  09AB               	comf	___aodiv@dividend+3,f
  9174  04C3  09AC               	comf	___aodiv@dividend+4,f
  9175  04C4  09AD               	comf	___aodiv@dividend+5,f
  9176  04C5  09AE               	comf	___aodiv@dividend+6,f
  9177  04C6  09AF               	comf	___aodiv@dividend+7,f
  9178  04C7  0AA8               	incf	___aodiv@dividend,f
  9179  04C8  1D03               	skipz
  9180  04C9  2CDD               	goto	i1l2813
  9181  04CA  0AA9               	incf	___aodiv@dividend+1,f
  9182  04CB  1D03               	skipz
  9183  04CC  2CDD               	goto	i1l2813
  9184  04CD  0AAA               	incf	___aodiv@dividend+2,f
  9185  04CE  1D03               	skipz
  9186  04CF  2CDD               	goto	i1l2813
  9187  04D0  0AAB               	incf	___aodiv@dividend+3,f
  9188  04D1  1D03               	skipz
  9189  04D2  2CDD               	goto	i1l2813
  9190  04D3  0AAC               	incf	___aodiv@dividend+4,f
  9191  04D4  1D03               	skipz
  9192  04D5  2CDD               	goto	i1l2813
  9193  04D6  0AAD               	incf	___aodiv@dividend+5,f
  9194  04D7  1D03               	skipz
  9195  04D8  2CDD               	goto	i1l2813
  9196  04D9  0AAE               	incf	___aodiv@dividend+6,f
  9197  04DA  1D03               	skipz
  9198  04DB  2CDD               	goto	i1l2813
  9199  04DC  0AAF               	incf	___aodiv@dividend+7,f
  9200  04DD                     i1l2813:	
  9201  04DD  3001               	movlw	1
  9202  04DE  00F0               	movwf	??___aodiv
  9203  04DF  0870               	movf	??___aodiv,w
  9204  04E0  06F2               	xorwf	___aodiv@sign,f
  9205  04E1                     i1l2815:	
  9206  04E1  3073               	movlw	low ___aodiv@quotient
  9207  04E2  0086               	movwf	6
  9208  04E3  3000               	movlw	high ___aodiv@quotient
  9209  04E4  0087               	movwf	7
  9210  04E5  3008               	movlw	8
  9211  04E6  00F0               	movwf	??___aodiv
  9212  04E7  3000               	movlw	0
  9213  04E8                     u225_20:	
  9214  04E8  001E               	movwi fsr1++
  9215  04E9  0BF0               	decfsz	??___aodiv,f
  9216  04EA  2CE8               	goto	u225_20
  9217  04EB  0020               	movlb	0	; select bank0
  9218  04EC  0820               	movf	___aodiv@divisor,w
  9219  04ED  0421               	iorwf	___aodiv@divisor+1,w
  9220  04EE  0422               	iorwf	___aodiv@divisor+2,w
  9221  04EF  0423               	iorwf	___aodiv@divisor+3,w
  9222  04F0  0424               	iorwf	___aodiv@divisor+4,w
  9223  04F1  0425               	iorwf	___aodiv@divisor+5,w
  9224  04F2  0426               	iorwf	___aodiv@divisor+6,w
  9225  04F3  0427               	iorwf	___aodiv@divisor+7,w
  9226  04F4  1903               	skipnz
  9227  04F5  2D4C               	goto	i1l2837
  9228  04F6  01F1               	clrf	___aodiv@counter
  9229  04F7  0AF1               	incf	___aodiv@counter,f
  9230  04F8                     i1l2825:	
  9231  04F8  1BA7               	btfsc	___aodiv@divisor+7,7
  9232  04F9  2D07               	goto	i1l2827
  9233  04FA  35A0               	lslf	___aodiv@divisor,f
  9234  04FB  0DA1               	rlf	___aodiv@divisor+1,f
  9235  04FC  0DA2               	rlf	___aodiv@divisor+2,f
  9236  04FD  0DA3               	rlf	___aodiv@divisor+3,f
  9237  04FE  0DA4               	rlf	___aodiv@divisor+4,f
  9238  04FF  0DA5               	rlf	___aodiv@divisor+5,f
  9239  0500  0DA6               	rlf	___aodiv@divisor+6,f
  9240  0501  0DA7               	rlf	___aodiv@divisor+7,f
  9241  0502  3001               	movlw	1
  9242  0503  00F0               	movwf	??___aodiv
  9243  0504  0870               	movf	??___aodiv,w
  9244  0505  07F1               	addwf	___aodiv@counter,f
  9245  0506  2CF8               	goto	i1l2825
  9246  0507                     i1l2827:	
  9247  0507  35F3               	lslf	___aodiv@quotient,f
  9248  0508  0DF4               	rlf	___aodiv@quotient+1,f
  9249  0509  0DF5               	rlf	___aodiv@quotient+2,f
  9250  050A  0DF6               	rlf	___aodiv@quotient+3,f
  9251  050B  0DF7               	rlf	___aodiv@quotient+4,f
  9252  050C  0DF8               	rlf	___aodiv@quotient+5,f
  9253  050D  0DF9               	rlf	___aodiv@quotient+6,f
  9254  050E  0DFA               	rlf	___aodiv@quotient+7,f
  9255  050F  0827               	movf	___aodiv@divisor+7,w
  9256  0510  022F               	subwf	___aodiv@dividend+7,w
  9257  0511  1D03               	skipz
  9258  0512  2D2D               	goto	u228_25
  9259  0513  0826               	movf	___aodiv@divisor+6,w
  9260  0514  022E               	subwf	___aodiv@dividend+6,w
  9261  0515  1D03               	skipz
  9262  0516  2D2D               	goto	u228_25
  9263  0517  0825               	movf	___aodiv@divisor+5,w
  9264  0518  022D               	subwf	___aodiv@dividend+5,w
  9265  0519  1D03               	skipz
  9266  051A  2D2D               	goto	u228_25
  9267  051B  0824               	movf	___aodiv@divisor+4,w
  9268  051C  022C               	subwf	___aodiv@dividend+4,w
  9269  051D  1D03               	skipz
  9270  051E  2D2D               	goto	u228_25
  9271  051F  0823               	movf	___aodiv@divisor+3,w
  9272  0520  022B               	subwf	___aodiv@dividend+3,w
  9273  0521  1D03               	skipz
  9274  0522  2D2D               	goto	u228_25
  9275  0523  0822               	movf	___aodiv@divisor+2,w
  9276  0524  022A               	subwf	___aodiv@dividend+2,w
  9277  0525  1D03               	skipz
  9278  0526  2D2D               	goto	u228_25
  9279  0527  0821               	movf	___aodiv@divisor+1,w
  9280  0528  0229               	subwf	___aodiv@dividend+1,w
  9281  0529  1D03               	skipz
  9282  052A  2D2D               	goto	u228_25
  9283  052B  0820               	movf	___aodiv@divisor,w
  9284  052C  0228               	subwf	___aodiv@dividend,w
  9285  052D                     u228_25:	
  9286  052D  1C03               	skipc
  9287  052E  2D40               	goto	i1l2835
  9288  052F  0820               	movf	___aodiv@divisor,w
  9289  0530  02A8               	subwf	___aodiv@dividend,f
  9290  0531  0821               	movf	___aodiv@divisor+1,w
  9291  0532  3BA9               	subwfb	___aodiv@dividend+1,f
  9292  0533  0822               	movf	___aodiv@divisor+2,w
  9293  0534  3BAA               	subwfb	___aodiv@dividend+2,f
  9294  0535  0823               	movf	___aodiv@divisor+3,w
  9295  0536  3BAB               	subwfb	___aodiv@dividend+3,f
  9296  0537  0824               	movf	___aodiv@divisor+4,w
  9297  0538  3BAC               	subwfb	___aodiv@dividend+4,f
  9298  0539  0825               	movf	___aodiv@divisor+5,w
  9299  053A  3BAD               	subwfb	___aodiv@dividend+5,f
  9300  053B  0826               	movf	___aodiv@divisor+6,w
  9301  053C  3BAE               	subwfb	___aodiv@dividend+6,f
  9302  053D  0827               	movf	___aodiv@divisor+7,w
  9303  053E  3BAF               	subwfb	___aodiv@dividend+7,f
  9304  053F  1473               	bsf	___aodiv@quotient,0
  9305  0540                     i1l2835:	
  9306  0540  36A7               	lsrf	___aodiv@divisor+7,f
  9307  0541  0CA6               	rrf	___aodiv@divisor+6,f
  9308  0542  0CA5               	rrf	___aodiv@divisor+5,f
  9309  0543  0CA4               	rrf	___aodiv@divisor+4,f
  9310  0544  0CA3               	rrf	___aodiv@divisor+3,f
  9311  0545  0CA2               	rrf	___aodiv@divisor+2,f
  9312  0546  0CA1               	rrf	___aodiv@divisor+1,f
  9313  0547  0CA0               	rrf	___aodiv@divisor,f
  9314  0548  3001               	movlw	1
  9315  0549  02F1               	subwf	___aodiv@counter,f
  9316  054A  1D03               	btfss	3,2
  9317  054B  2D07               	goto	i1l2827
  9318  054C                     i1l2837:	
  9319  054C  0872               	movf	___aodiv@sign,w
  9320  054D  1903               	btfsc	3,2
  9321  054E  2D6D               	goto	i1l930
  9322  054F  09F3               	comf	___aodiv@quotient,f
  9323  0550  09F4               	comf	___aodiv@quotient+1,f
  9324  0551  09F5               	comf	___aodiv@quotient+2,f
  9325  0552  09F6               	comf	___aodiv@quotient+3,f
  9326  0553  09F7               	comf	___aodiv@quotient+4,f
  9327  0554  09F8               	comf	___aodiv@quotient+5,f
  9328  0555  09F9               	comf	___aodiv@quotient+6,f
  9329  0556  09FA               	comf	___aodiv@quotient+7,f
  9330  0557  0AF3               	incf	___aodiv@quotient,f
  9331  0558  1D03               	skipz
  9332  0559  2D6D               	goto	i1l930
  9333  055A  0AF4               	incf	___aodiv@quotient+1,f
  9334  055B  1D03               	skipz
  9335  055C  2D6D               	goto	i1l930
  9336  055D  0AF5               	incf	___aodiv@quotient+2,f
  9337  055E  1D03               	skipz
  9338  055F  2D6D               	goto	i1l930
  9339  0560  0AF6               	incf	___aodiv@quotient+3,f
  9340  0561  1D03               	skipz
  9341  0562  2D6D               	goto	i1l930
  9342  0563  0AF7               	incf	___aodiv@quotient+4,f
  9343  0564  1D03               	skipz
  9344  0565  2D6D               	goto	i1l930
  9345  0566  0AF8               	incf	___aodiv@quotient+5,f
  9346  0567  1D03               	skipz
  9347  0568  2D6D               	goto	i1l930
  9348  0569  0AF9               	incf	___aodiv@quotient+6,f
  9349  056A  1D03               	skipz
  9350  056B  2D6D               	goto	i1l930
  9351  056C  0AFA               	incf	___aodiv@quotient+7,f
  9352  056D                     i1l930:	
  9353  056D  0873               	movf	___aodiv@quotient,w
  9354  056E  0020               	movlb	0	; select bank0
  9355  056F  00A0               	movwf	?___aodiv
  9356  0570  0874               	movf	___aodiv@quotient+1,w
  9357  0571  00A1               	movwf	?___aodiv+1
  9358  0572  0875               	movf	___aodiv@quotient+2,w
  9359  0573  00A2               	movwf	?___aodiv+2
  9360  0574  0876               	movf	___aodiv@quotient+3,w
  9361  0575  00A3               	movwf	?___aodiv+3
  9362  0576  0877               	movf	___aodiv@quotient+4,w
  9363  0577  00A4               	movwf	?___aodiv+4
  9364  0578  0878               	movf	___aodiv@quotient+5,w
  9365  0579  00A5               	movwf	?___aodiv+5
  9366  057A  0879               	movf	___aodiv@quotient+6,w
  9367  057B  00A6               	movwf	?___aodiv+6
  9368  057C  087A               	movf	___aodiv@quotient+7,w
  9369  057D  00A7               	movwf	?___aodiv+7
  9370  057E  0008               	return
  9371  057F                     __end_of___aodiv:	
  9372                           
  9373                           	psect	text43
  9374  0909                     __ptext43:	
  9375 ;; *************** function _key_isPressed *****************
  9376 ;; Defined at:
  9377 ;;		line 158 in file "hardware.c"
  9378 ;; Parameters:    Size  Location     Type
  9379 ;;		None
  9380 ;; Auto vars:     Size  Location     Type
  9381 ;;  pdata           1    1[COMMON] PTR volatile struct .
  9382 ;;		 -> g_data(39), 
  9383 ;; Return value:  Size  Location     Type
  9384 ;;                  1    wreg      enum E5232
  9385 ;; Registers used:
  9386 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9387 ;; Tracked objects:
  9388 ;;		On entry : 0/0
  9389 ;;		On exit  : 0/0
  9390 ;;		Unchanged: 0/0
  9391 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9392 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9393 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9394 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9395 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9396 ;;Total ram usage:        2 bytes
  9397 ;; Hardware stack levels used:    1
  9398 ;; Hardware stack levels required when called:    1
  9399 ;; This function calls:
  9400 ;;		i1_data_getdata
  9401 ;; This function is called by:
  9402 ;;		_ISR
  9403 ;; This function uses a non-reentrant model
  9404 ;;
  9405                           
  9406                           
  9407                           ;psect for function _key_isPressed
  9408  0909                     _key_isPressed:	
  9409                           
  9410                           ;hardware.c: 160:     G_DATA *pdata = data_getdata();
  9411                           
  9412                           ;incstack = 0
  9413                           ; Regs used in _key_isPressed: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9414  0909  3188  2012  3189   	fcall	i1_data_getdata
  9415  090C  00F0               	movwf	??_key_isPressed
  9416  090D  0870               	movf	??_key_isPressed,w
  9417  090E  00F1               	movwf	key_isPressed@pdata
  9418                           
  9419                           ;hardware.c: 161:     if(pdata->g_flg_switch == TRUE){
  9420  090F  0871               	movf	key_isPressed@pdata,w
  9421  0910  0086               	movwf	6
  9422  0911  3002               	movlw	2	; select bank4/5
  9423  0912  0087               	movwf	7
  9424  0913  0301               	decf	1,w
  9425  0914  1D03               	btfss	3,2
  9426  0915  291D               	goto	i1l3741
  9427                           
  9428                           ;hardware.c: 162:         pdata->g_flg_switch = FALSE;
  9429  0916  0871               	movf	key_isPressed@pdata,w
  9430  0917  0086               	movwf	6
  9431  0918  3002               	movlw	2	; select bank4/5
  9432  0919  0087               	movwf	7
  9433  091A  0181               	clrf	1
  9434                           
  9435                           ;hardware.c: 163:         return TRUE;
  9436  091B  3001               	movlw	1
  9437  091C  0008               	return
  9438  091D                     i1l3741:	
  9439                           
  9440                           ;hardware.c: 165:         return FALSE;
  9441  091D  3000               	movlw	0
  9442  091E  0008               	return
  9443  091F                     __end_of_key_isPressed:	
  9444                           
  9445                           	psect	text44
  9446  0C95                     __ptext44:	
  9447 ;; *************** function _capture_handdle *****************
  9448 ;; Defined at:
  9449 ;;		line 65 in file "hardware.c"
  9450 ;; Parameters:    Size  Location     Type
  9451 ;;		None
  9452 ;; Auto vars:     Size  Location     Type
  9453 ;;  cnt_tmp         2   12[COMMON] unsigned short 
  9454 ;;  cnt_int         2   10[COMMON] unsigned short 
  9455 ;;  pdata           1    9[COMMON] PTR volatile struct .
  9456 ;;		 -> g_data(39), 
  9457 ;; Return value:  Size  Location     Type
  9458 ;;                  2   96[None  ] int 
  9459 ;; Registers used:
  9460 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9461 ;; Tracked objects:
  9462 ;;		On entry : 0/0
  9463 ;;		On exit  : 0/0
  9464 ;;		Unchanged: 0/0
  9465 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9466 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9467 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9468 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9469 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9470 ;;Total ram usage:       13 bytes
  9471 ;; Hardware stack levels used:    1
  9472 ;; Hardware stack levels required when called:    1
  9473 ;; This function calls:
  9474 ;;		_capture_IsNegEdge
  9475 ;;		i1_capture_setEdge
  9476 ;;		i1_data_getdata
  9477 ;;		i1_led_SetState
  9478 ;; This function is called by:
  9479 ;;		_ISR
  9480 ;; This function uses a non-reentrant model
  9481 ;;
  9482                           
  9483                           
  9484                           ;psect for function _capture_handdle
  9485  0C95                     _capture_handdle:	
  9486                           
  9487                           ;hardware.c: 67:     G_DATA *pdata = data_getdata();
  9488                           
  9489                           ;incstack = 0
  9490                           ; Regs used in _capture_handdle: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9491  0C95  3188  2012  318C   	fcall	i1_data_getdata
  9492  0C98  00F1               	movwf	??_capture_handdle
  9493  0C99  0871               	movf	??_capture_handdle,w
  9494  0C9A  00F9               	movwf	capture_handdle@pdata
  9495                           
  9496                           ;hardware.c: 72:     cnt_tmp = CCPR2H;
  9497  0C9B  0025               	movlb	5	; select bank5
  9498  0C9C  0819               	movf	25,w	;volatile
  9499  0C9D  00F1               	movwf	??_capture_handdle
  9500  0C9E  01F2               	clrf	??_capture_handdle+1
  9501  0C9F  0871               	movf	??_capture_handdle,w
  9502  0CA0  00FC               	movwf	capture_handdle@cnt_tmp
  9503  0CA1  0872               	movf	??_capture_handdle+1,w
  9504  0CA2  00FD               	movwf	capture_handdle@cnt_tmp+1
  9505                           
  9506                           ;hardware.c: 73:     cnt_tmp = (cnt_tmp << 8) + CCPR2L;
  9507  0CA3  0818               	movf	24,w	;volatile
  9508  0CA4  00F1               	movwf	??_capture_handdle
  9509  0CA5  01F2               	clrf	??_capture_handdle+1
  9510  0CA6  087C               	movf	capture_handdle@cnt_tmp,w
  9511  0CA7  00F4               	movwf	??_capture_handdle+3
  9512  0CA8  01F3               	clrf	??_capture_handdle+2
  9513  0CA9  0871               	movf	??_capture_handdle,w
  9514  0CAA  0773               	addwf	??_capture_handdle+2,w
  9515  0CAB  00F5               	movwf	??_capture_handdle+4
  9516  0CAC  0872               	movf	??_capture_handdle+1,w
  9517  0CAD  3D74               	addwfc	??_capture_handdle+3,w
  9518  0CAE  00F6               	movwf	??_capture_handdle+5
  9519  0CAF  0875               	movf	??_capture_handdle+4,w
  9520  0CB0  00FC               	movwf	capture_handdle@cnt_tmp
  9521  0CB1  0876               	movf	??_capture_handdle+5,w
  9522  0CB2  00FD               	movwf	capture_handdle@cnt_tmp+1
  9523                           
  9524                           ;hardware.c: 75:     if(cnt_tmp > last_cnt)
  9525  0CB3  087D               	movf	capture_handdle@cnt_tmp+1,w
  9526  0CB4  0022               	movlb	2	; select bank2
  9527  0CB5  0265               	subwf	(capture_handdle@last_cnt+1)^(0+256),w
  9528  0CB6  1D03               	skipz
  9529  0CB7  2CBA               	goto	u370_25
  9530  0CB8  087C               	movf	capture_handdle@cnt_tmp,w
  9531  0CB9  0264               	subwf	capture_handdle@last_cnt^(0+256),w
  9532  0CBA                     u370_25:	
  9533  0CBA  1803               	skipnc
  9534  0CBB  2CC3               	goto	i1l3789
  9535                           
  9536                           ;hardware.c: 76:     {;hardware.c: 77:         cnt_int = cnt_tmp - last_cnt;
  9537  0CBC  0864               	movf	capture_handdle@last_cnt^(0+256),w
  9538  0CBD  027C               	subwf	capture_handdle@cnt_tmp,w
  9539  0CBE  00FA               	movwf	capture_handdle@cnt_int
  9540  0CBF  0865               	movf	(capture_handdle@last_cnt+1)^(0+256),w
  9541  0CC0  3B7D               	subwfb	capture_handdle@cnt_tmp+1,w
  9542  0CC1  00FB               	movwf	capture_handdle@cnt_int+1
  9543                           
  9544                           ;hardware.c: 78:     }
  9545  0CC2  2CCB               	goto	i1l3793
  9546  0CC3                     i1l3789:	
  9547                           
  9548                           ;hardware.c: 80:     {;hardware.c: 81:         cnt_int = 0xffff - last_cnt;
  9549  0CC3  0964               	comf	capture_handdle@last_cnt^(0+256),w
  9550  0CC4  00FA               	movwf	capture_handdle@cnt_int
  9551  0CC5  0965               	comf	(capture_handdle@last_cnt+1)^(0+256),w
  9552  0CC6  00FB               	movwf	capture_handdle@cnt_int+1
  9553                           
  9554                           ;hardware.c: 82:         cnt_int += cnt_tmp;
  9555  0CC7  087C               	movf	capture_handdle@cnt_tmp,w
  9556  0CC8  07FA               	addwf	capture_handdle@cnt_int,f
  9557  0CC9  087D               	movf	capture_handdle@cnt_tmp+1,w
  9558  0CCA  3DFB               	addwfc	capture_handdle@cnt_int+1,f
  9559  0CCB                     i1l3793:	
  9560                           
  9561                           ;hardware.c: 87:     if(capture_IsNegEdge())
  9562  0CCB  3188  205C  318C   	fcall	_capture_IsNegEdge
  9563  0CCE  3A00               	xorlw	0
  9564  0CCF  1903               	skipnz
  9565  0CD0  2CDC               	goto	i1l3799
  9566                           
  9567                           ;hardware.c: 88:     {;hardware.c: 89:         pdata->cnt_high = cnt_int;
  9568  0CD1  0879               	movf	capture_handdle@pdata,w
  9569  0CD2  3E23               	addlw	35
  9570  0CD3  0086               	movwf	6
  9571  0CD4  3002               	movlw	2	; select bank4/5
  9572  0CD5  0087               	movwf	7
  9573  0CD6  087A               	movf	capture_handdle@cnt_int,w
  9574  0CD7  3FC0               	movwi [0]fsr1
  9575  0CD8  087B               	movf	capture_handdle@cnt_int+1,w
  9576  0CD9  3FC1               	movwi [1]fsr1
  9577                           
  9578                           ;hardware.c: 90:         led_SetState(FALSE);
  9579  0CDA  3000               	movlw	0
  9580  0CDB  2CE6               	goto	L2
  9581  0CDC                     i1l3799:	
  9582                           ;hardware.c: 91:     }
  9583                           
  9584                           
  9585                           ;hardware.c: 93:     {;hardware.c: 94:         pdata->cnt_low = cnt_int;
  9586  0CDC  0879               	movf	capture_handdle@pdata,w
  9587  0CDD  3E25               	addlw	37
  9588  0CDE  0086               	movwf	6
  9589  0CDF  3002               	movlw	2	; select bank4/5
  9590  0CE0  0087               	movwf	7
  9591  0CE1  087A               	movf	capture_handdle@cnt_int,w
  9592  0CE2  3FC0               	movwi [0]fsr1
  9593  0CE3  087B               	movf	capture_handdle@cnt_int+1,w
  9594  0CE4  3FC1               	movwi [1]fsr1
  9595                           
  9596                           ;hardware.c: 95:         led_SetState(TRUE);
  9597  0CE5  3001               	movlw	1
  9598  0CE6                     L2:	
  9599  0CE6  3188  2066  318C   	fcall	i1_led_SetState
  9600                           
  9601                           ;hardware.c: 98:     last_cnt = cnt_tmp;
  9602  0CE9  087D               	movf	capture_handdle@cnt_tmp+1,w
  9603  0CEA  0022               	movlb	2	; select bank2
  9604  0CEB  00E5               	movwf	(capture_handdle@last_cnt+1)^(0+256)
  9605  0CEC  087C               	movf	capture_handdle@cnt_tmp,w
  9606  0CED  00E4               	movwf	capture_handdle@last_cnt^(0+256)
  9607                           
  9608                           ;hardware.c: 101:     capture_setEdge( (capture_IsNegEdge())? (0b0101) : (0b0100));
  9609  0CEE  3188  205C  318C   	fcall	_capture_IsNegEdge
  9610  0CF1  3A00               	xorlw	0
  9611  0CF2  1D03               	skipz
  9612  0CF3  2CF6               	goto	i1l3809
  9613  0CF4  3004               	movlw	4
  9614  0CF5  2CF7               	goto	L3
  9615  0CF6                     i1l3809:	
  9616  0CF6  3005               	movlw	5
  9617  0CF7                     L3:	
  9618  0CF7  00F7               	movwf	_capture_handdle$1357
  9619  0CF8  3000               	movlw	0
  9620  0CF9  00F8               	movwf	_capture_handdle$1357+1
  9621  0CFA  0877               	movf	_capture_handdle$1357,w
  9622  0CFB  3188  20D0         	fcall	i1_capture_setEdge
  9623  0CFD  0008               	return
  9624  0CFE                     __end_of_capture_handdle:	
  9625                           
  9626                           	psect	text45
  9627  0866                     __ptext45:	
  9628 ;; *************** function i1_led_SetState *****************
  9629 ;; Defined at:
  9630 ;;		line 110 in file "hardware.c"
  9631 ;; Parameters:    Size  Location     Type
  9632 ;;  isOn            1    wreg     unsigned char 
  9633 ;; Auto vars:     Size  Location     Type
  9634 ;;  isOn            1    0[COMMON] unsigned char 
  9635 ;; Return value:  Size  Location     Type
  9636 ;;                  1    wreg      unsigned char 
  9637 ;; Registers used:
  9638 ;;		wreg, status,2, status,0
  9639 ;; Tracked objects:
  9640 ;;		On entry : 0/0
  9641 ;;		On exit  : 0/0
  9642 ;;		Unchanged: 0/0
  9643 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9644 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9645 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9646 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9647 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9648 ;;Total ram usage:        1 bytes
  9649 ;; Hardware stack levels used:    1
  9650 ;; This function calls:
  9651 ;;		Nothing
  9652 ;; This function is called by:
  9653 ;;		_capture_handdle
  9654 ;;		_led_Blink
  9655 ;; This function uses a non-reentrant model
  9656 ;;
  9657                           
  9658                           
  9659                           ;psect for function i1_led_SetState
  9660  0866                     i1_led_SetState:	
  9661                           
  9662                           ;incstack = 0
  9663                           ; Regs used in i1_led_SetState: [wreg+status,2+status,0]
  9664                           ;i1led_SetState@isOn stored from wreg
  9665  0866  00F0               	movwf	i1led_SetState@isOn
  9666                           
  9667                           ;hardware.c: 110: u8 led_SetState(u8 isOn);hardware.c: 111: {;hardware.c: 112:     LATBb
      +                          its.LATB3 = (isOn)? LED_STATE_ON : LED_STATE_OFF;
  9668  0867  0870               	movf	i1led_SetState@isOn,w
  9669  0868  1D03               	btfss	3,2
  9670  0869  286D               	goto	u271_20
  9671  086A  0022               	movlb	2	; select bank2
  9672  086B  158D               	bsf	13,3	;volatile
  9673  086C  0008               	return
  9674  086D                     u271_20:	
  9675  086D  0022               	movlb	2	; select bank2
  9676  086E  118D               	bcf	13,3	;volatile
  9677  086F  0008               	return
  9678  0870                     __end_ofi1_led_SetState:	
  9679                           
  9680                           	psect	text46
  9681  08D0                     __ptext46:	
  9682 ;; *************** function i1_capture_setEdge *****************
  9683 ;; Defined at:
  9684 ;;		line 12 in file "hardware.c"
  9685 ;; Parameters:    Size  Location     Type
  9686 ;;  edge            1    wreg     unsigned char 
  9687 ;; Auto vars:     Size  Location     Type
  9688 ;;  edge            1    0[COMMON] unsigned char 
  9689 ;; Return value:  Size  Location     Type
  9690 ;;                  2    0[None  ] int 
  9691 ;; Registers used:
  9692 ;;		wreg, status,2, status,0
  9693 ;; Tracked objects:
  9694 ;;		On entry : 0/0
  9695 ;;		On exit  : 0/0
  9696 ;;		Unchanged: 0/0
  9697 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9698 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9699 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9700 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9701 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9702 ;;Total ram usage:        1 bytes
  9703 ;; Hardware stack levels used:    1
  9704 ;; This function calls:
  9705 ;;		Nothing
  9706 ;; This function is called by:
  9707 ;;		_capture_handdle
  9708 ;; This function uses a non-reentrant model
  9709 ;;
  9710                           
  9711                           
  9712                           ;psect for function i1_capture_setEdge
  9713  08D0                     i1_capture_setEdge:	
  9714                           
  9715                           ;incstack = 0
  9716                           ; Regs used in i1_capture_setEdge: [wreg+status,2+status,0]
  9717                           ;i1capture_setEdge@edge stored from wreg
  9718  08D0  00F0               	movwf	i1capture_setEdge@edge
  9719                           
  9720                           ;hardware.c: 12: static int capture_setEdge(u8 edge);hardware.c: 13: {;hardware.c: 14:  
      +                             if((edge == (0b0101)) || (edge == (0b0100)))
  9721  08D1  3005               	movlw	5
  9722  08D2  0670               	xorwf	i1capture_setEdge@edge,w
  9723  08D3  1903               	btfsc	3,2
  9724  08D4  28D9               	goto	i1l3627
  9725  08D5  3004               	movlw	4
  9726  08D6  0670               	xorwf	i1capture_setEdge@edge,w
  9727  08D7  1D03               	btfss	3,2
  9728  08D8  0008               	return
  9729  08D9                     i1l3627:	
  9730                           
  9731                           ;hardware.c: 15:     {;hardware.c: 16:         CCP2CONbits.CCP2M = edge;
  9732  08D9  0025               	movlb	5	; select bank5
  9733  08DA  081A               	movf	26,w	;volatile
  9734  08DB  0670               	xorwf	i1capture_setEdge@edge,w
  9735  08DC  39F0               	andlw	-16
  9736  08DD  0670               	xorwf	i1capture_setEdge@edge,w
  9737  08DE  009A               	movwf	26	;volatile
  9738  08DF  0008               	return
  9739  08E0                     __end_ofi1_capture_setEdge:	
  9740                           
  9741                           	psect	text47
  9742  0814                     __ptext47:	
  9743 ;; *************** function _capture_clrIntrpt *****************
  9744 ;; Defined at:
  9745 ;;		line 56 in file "hardware.c"
  9746 ;; Parameters:    Size  Location     Type
  9747 ;;		None
  9748 ;; Auto vars:     Size  Location     Type
  9749 ;;		None
  9750 ;; Return value:  Size  Location     Type
  9751 ;;                  1    wreg      void 
  9752 ;; Registers used:
  9753 ;;		None
  9754 ;; Tracked objects:
  9755 ;;		On entry : 0/0
  9756 ;;		On exit  : 0/0
  9757 ;;		Unchanged: 0/0
  9758 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9759 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9760 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9761 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9762 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9763 ;;Total ram usage:        0 bytes
  9764 ;; Hardware stack levels used:    1
  9765 ;; This function calls:
  9766 ;;		Nothing
  9767 ;; This function is called by:
  9768 ;;		_ISR
  9769 ;; This function uses a non-reentrant model
  9770 ;;
  9771                           
  9772                           
  9773                           ;psect for function _capture_clrIntrpt
  9774  0814                     _capture_clrIntrpt:	
  9775                           
  9776                           ;hardware.c: 58:     PIR2bits.CCP2IF = 0;
  9777                           
  9778                           ;incstack = 0
  9779                           ; Regs used in _capture_clrIntrpt: []
  9780  0814  0020               	movlb	0	; select bank0
  9781  0815  1012               	bcf	18,0	;volatile
  9782  0816  0008               	return
  9783  0817                     __end_of_capture_clrIntrpt:	
  9784                           
  9785                           	psect	text48
  9786  0821                     __ptext48:	
  9787 ;; *************** function _capture_IsIntrpt *****************
  9788 ;; Defined at:
  9789 ;;		line 52 in file "hardware.c"
  9790 ;; Parameters:    Size  Location     Type
  9791 ;;		None
  9792 ;; Auto vars:     Size  Location     Type
  9793 ;;		None
  9794 ;; Return value:  Size  Location     Type
  9795 ;;                  1    wreg      enum E5232
  9796 ;; Registers used:
  9797 ;;		wreg, status,2, status,0
  9798 ;; Tracked objects:
  9799 ;;		On entry : 0/0
  9800 ;;		On exit  : 0/0
  9801 ;;		Unchanged: 0/0
  9802 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9803 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9804 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9805 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9806 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9807 ;;Total ram usage:        0 bytes
  9808 ;; Hardware stack levels used:    1
  9809 ;; This function calls:
  9810 ;;		Nothing
  9811 ;; This function is called by:
  9812 ;;		_ISR
  9813 ;; This function uses a non-reentrant model
  9814 ;;
  9815                           
  9816                           
  9817                           ;psect for function _capture_IsIntrpt
  9818  0821                     _capture_IsIntrpt:	
  9819                           
  9820                           ;hardware.c: 54:     return (PIR2bits.CCP2IF == 0b1)? TRUE : FALSE;
  9821                           
  9822                           ;incstack = 0
  9823                           ; Regs used in _capture_IsIntrpt: [wreg+status,2+status,0]
  9824  0821  0020               	movlb	0	; select bank0
  9825  0822  0812               	movf	18,w	;volatile
  9826  0823  3901               	andlw	1
  9827  0824  0008               	return
  9828  0825                     __end_of_capture_IsIntrpt:	
  9829                           
  9830                           	psect	text49
  9831  081D                     __ptext49:	
  9832 ;; *************** function _capture_IsEnable *****************
  9833 ;; Defined at:
  9834 ;;		line 48 in file "hardware.c"
  9835 ;; Parameters:    Size  Location     Type
  9836 ;;		None
  9837 ;; Auto vars:     Size  Location     Type
  9838 ;;		None
  9839 ;; Return value:  Size  Location     Type
  9840 ;;                  1    wreg      enum E5232
  9841 ;; Registers used:
  9842 ;;		wreg, status,2, status,0
  9843 ;; Tracked objects:
  9844 ;;		On entry : 0/0
  9845 ;;		On exit  : 0/0
  9846 ;;		Unchanged: 0/0
  9847 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9848 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9849 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9850 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9851 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9852 ;;Total ram usage:        0 bytes
  9853 ;; Hardware stack levels used:    1
  9854 ;; This function calls:
  9855 ;;		Nothing
  9856 ;; This function is called by:
  9857 ;;		_ISR
  9858 ;; This function uses a non-reentrant model
  9859 ;;
  9860                           
  9861                           
  9862                           ;psect for function _capture_IsEnable
  9863  081D                     _capture_IsEnable:	
  9864                           
  9865                           ;hardware.c: 50:     return (PIE2bits.CCP2IE == 0b1)? TRUE : FALSE;
  9866                           
  9867                           ;incstack = 0
  9868                           ; Regs used in _capture_IsEnable: [wreg+status,2+status,0]
  9869  081D  0021               	movlb	1	; select bank1
  9870  081E  0812               	movf	18,w	;volatile
  9871  081F  3901               	andlw	1
  9872  0820  0008               	return
  9873  0821                     __end_of_capture_IsEnable:	
  9874                           
  9875                           	psect	text50
  9876  00E3                     __ptext50:	
  9877 ;; *************** function _bpc_proc *****************
  9878 ;; Defined at:
  9879 ;;		line 80 in file "bpc.c"
  9880 ;; Parameters:    Size  Location     Type
  9881 ;;		None
  9882 ;; Auto vars:     Size  Location     Type
  9883 ;;  i               2   20[BANK0 ] int 
  9884 ;;  last_time_m     2   18[BANK0 ] unsigned short 
  9885 ;;  last_time_h     2   16[BANK0 ] unsigned short 
  9886 ;;  last_time_s     2   14[BANK0 ] unsigned short 
  9887 ;;  pdata           1   23[BANK0 ] PTR volatile struct .
  9888 ;;		 -> g_data(39), 
  9889 ;;  number          1   22[BANK0 ] unsigned char 
  9890 ;; Return value:  Size  Location     Type
  9891 ;;                  2   98[None  ] int 
  9892 ;; Registers used:
  9893 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9894 ;; Tracked objects:
  9895 ;;		On entry : 0/0
  9896 ;;		On exit  : 0/0
  9897 ;;		Unchanged: 0/0
  9898 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9899 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9900 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9901 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9902 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9903 ;;Total ram usage:       12 bytes
  9904 ;; Hardware stack levels used:    1
  9905 ;; Hardware stack levels required when called:    4
  9906 ;; This function calls:
  9907 ;;		_bpc_Cnt2Qua
  9908 ;;		_check_err
  9909 ;;		i1_capture_Set
  9910 ;;		i1_data_getdata
  9911 ;;		i1_display_update
  9912 ;; This function is called by:
  9913 ;;		_ISR
  9914 ;; This function uses a non-reentrant model
  9915 ;;
  9916                           
  9917                           
  9918                           ;psect for function _bpc_proc
  9919  00E3                     _bpc_proc:	
  9920                           
  9921                           ;bpc.c: 82:     G_DATA *pdata = data_getdata();
  9922                           
  9923                           ;incstack = 0
  9924                           ; Regs used in _bpc_proc: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9925  00E3  3188  2012  3180   	fcall	i1_data_getdata
  9926  00E6  0020               	movlb	0	; select bank0
  9927  00E7  00AC               	movwf	??_bpc_proc
  9928  00E8  082C               	movf	??_bpc_proc,w
  9929  00E9  00B7               	movwf	bpc_proc@pdata
  9930                           
  9931                           ;bpc.c: 83:     u8 number = bpc_Cnt2Qua();
  9932  00EA  318D  257C  3180   	fcall	_bpc_Cnt2Qua
  9933  00ED  0020               	movlb	0	; select bank0
  9934  00EE  00AC               	movwf	??_bpc_proc
  9935  00EF  082C               	movf	??_bpc_proc,w
  9936  00F0  00B6               	movwf	bpc_proc@number
  9937                           
  9938                           ;bpc.c: 85:     if(6 == number){
  9939  00F1  3006               	movlw	6
  9940  00F2  0636               	xorwf	bpc_proc@number,w
  9941  00F3  1903               	btfsc	3,2
  9942  00F4  0008               	return
  9943  00F5  3004               	movlw	4
  9944  00F6  0636               	xorwf	bpc_proc@number,w
  9945  00F7  1D03               	btfss	3,2
  9946  00F8  2908               	goto	i1l3831
  9947                           
  9948                           ;bpc.c: 88:         pdata->g_find_recv_start = FALSE;
  9949  00F9  0837               	movf	bpc_proc@pdata,w
  9950  00FA  3E02               	addlw	2
  9951  00FB  0086               	movwf	6
  9952  00FC  3002               	movlw	2	; select bank4/5
  9953  00FD  0087               	movwf	7
  9954  00FE  0181               	clrf	1
  9955                           
  9956                           ;bpc.c: 89:         pdata->g_recv_count = 0;
  9957  00FF  0837               	movf	bpc_proc@pdata,w
  9958  0100  3E0B               	addlw	11
  9959  0101  0086               	movwf	6
  9960  0102  3002               	movlw	2	; select bank4/5
  9961  0103  0087               	movwf	7
  9962  0104  3000               	movlw	0
  9963  0105  3FC0               	movwi [0]fsr1
  9964  0106  3FC1               	movwi [1]fsr1
  9965  0107  0008               	return
  9966  0108                     i1l3831:	
  9967                           
  9968                           ;bpc.c: 95:     if(pdata->g_find_recv_start || 5 == number){
  9969  0108  0837               	movf	bpc_proc@pdata,w
  9970  0109  3E02               	addlw	2
  9971  010A  0086               	movwf	6
  9972  010B  3002               	movlw	2	; select bank4/5
  9973  010C  0087               	movwf	7
  9974  010D  0801               	movf	1,w
  9975  010E  1D03               	btfss	3,2
  9976  010F  2914               	goto	i1l3835
  9977  0110  3005               	movlw	5
  9978  0111  0636               	xorwf	bpc_proc@number,w
  9979  0112  1D03               	btfss	3,2
  9980  0113  2941               	goto	i1l3841
  9981  0114                     i1l3835:	
  9982                           
  9983                           ;bpc.c: 96:         if(!pdata->g_find_recv_start){
  9984  0114  0837               	movf	bpc_proc@pdata,w
  9985  0115  3E02               	addlw	2
  9986  0116  0086               	movwf	6
  9987  0117  3002               	movlw	2	; select bank4/5
  9988  0118  0087               	movwf	7
  9989  0119  0801               	movf	1,w
  9990  011A  1D03               	btfss	3,2
  9991  011B  294A               	goto	i1l3845
  9992                           
  9993                           ;bpc.c: 97:             pdata->g_find_recv_start = TRUE;
  9994  011C  3001               	movlw	1
  9995  011D  00AC               	movwf	??_bpc_proc
  9996  011E  0837               	movf	bpc_proc@pdata,w
  9997  011F  3E02               	addlw	2
  9998  0120  0086               	movwf	6
  9999  0121  3002               	movlw	2	; select bank4/5
 10000  0122  0087               	movwf	7
 10001  0123  082C               	movf	??_bpc_proc,w
 10002  0124  0081               	movwf	1
 10003                           
 10004                           ;bpc.c: 98:             pdata->g_recv_buf[pdata->g_recv_count++] = number;
 10005  0125  0836               	movf	bpc_proc@number,w
 10006  0126  00AC               	movwf	??_bpc_proc
 10007  0127  0837               	movf	bpc_proc@pdata,w
 10008  0128  3E0B               	addlw	11
 10009  0129  0086               	movwf	6
 10010  012A  3002               	movlw	2	; select bank4/5
 10011  012B  0087               	movwf	7
 10012  012C  0801               	movf	1,w
 10013  012D  0737               	addwf	bpc_proc@pdata,w
 10014  012E  00AD               	movwf	??_bpc_proc+1
 10015  012F  082D               	movf	??_bpc_proc+1,w
 10016  0130  3E0D               	addlw	13
 10017  0131  0086               	movwf	6
 10018  0132  3002               	movlw	2	; select bank4/5
 10019  0133  0087               	movwf	7
 10020  0134  082C               	movf	??_bpc_proc,w
 10021  0135  0081               	movwf	1
 10022  0136  0837               	movf	bpc_proc@pdata,w
 10023  0137  3E0B               	addlw	11
 10024  0138  0086               	movwf	6
 10025  0139  3002               	movlw	2	; select bank4/5
 10026  013A  0087               	movwf	7
 10027  013B  3001               	movlw	1
 10028  013C  0781               	addwf	1,f
 10029  013D  3141               	addfsr 1,1
 10030  013E  1803               	skipnc
 10031  013F  0A81               	incf	1,f
 10032  0140  0008               	return
 10033  0141                     i1l3841:	
 10034                           
 10035                           ;bpc.c: 102:         pdata->g_recv_count = 0;
 10036  0141  0837               	movf	bpc_proc@pdata,w
 10037  0142  3E0B               	addlw	11
 10038  0143  0086               	movwf	6
 10039  0144  3002               	movlw	2	; select bank4/5
 10040  0145  0087               	movwf	7
 10041  0146  3000               	movlw	0
 10042  0147  3FC0               	movwi [0]fsr1
 10043  0148  3FC1               	movwi [1]fsr1
 10044  0149  0008               	return
 10045  014A                     i1l3845:	
 10046                           
 10047                           ;bpc.c: 107:     pdata->g_recv_buf[pdata->g_recv_count++] = number;
 10048  014A  0836               	movf	bpc_proc@number,w
 10049  014B  00AC               	movwf	??_bpc_proc
 10050  014C  0837               	movf	bpc_proc@pdata,w
 10051  014D  3E0B               	addlw	11
 10052  014E  0086               	movwf	6
 10053  014F  3002               	movlw	2	; select bank4/5
 10054  0150  0087               	movwf	7
 10055  0151  0801               	movf	1,w
 10056  0152  0737               	addwf	bpc_proc@pdata,w
 10057  0153  00AD               	movwf	??_bpc_proc+1
 10058  0154  082D               	movf	??_bpc_proc+1,w
 10059  0155  3E0D               	addlw	13
 10060  0156  0086               	movwf	6
 10061  0157  3002               	movlw	2	; select bank4/5
 10062  0158  0087               	movwf	7
 10063  0159  082C               	movf	??_bpc_proc,w
 10064  015A  0081               	movwf	1
 10065  015B  0837               	movf	bpc_proc@pdata,w
 10066  015C  3E0B               	addlw	11
 10067  015D  0086               	movwf	6
 10068  015E  3002               	movlw	2	; select bank4/5
 10069  015F  0087               	movwf	7
 10070  0160  3001               	movlw	1
 10071  0161  0781               	addwf	1,f
 10072  0162  3141               	addfsr 1,1
 10073  0163  1803               	skipnc
 10074  0164  0A81               	incf	1,f
 10075                           
 10076                           ;bpc.c: 108:     if(pdata->g_recv_count <= CODE_P3){
 10077  0165  0837               	movf	bpc_proc@pdata,w
 10078  0166  3E0B               	addlw	11
 10079  0167  0086               	movwf	6
 10080  0168  3002               	movlw	2	; select bank4/5
 10081  0169  0087               	movwf	7
 10082  016A  3F40               	moviw [0]fsr1
 10083  016B  00AC               	movwf	??_bpc_proc
 10084  016C  3F41               	moviw [1]fsr1
 10085  016D  00AD               	movwf	??_bpc_proc+1
 10086  016E  3000               	movlw	0
 10087  016F  022D               	subwf	??_bpc_proc+1,w
 10088  0170  300B               	movlw	11
 10089  0171  1903               	skipnz
 10090  0172  022C               	subwf	??_bpc_proc,w
 10091  0173  1C03               	btfss	3,0
 10092  0174  0008               	return
 10093                           
 10094                           ;bpc.c: 113:     if(pdata->g_recv_buf[CODE_P1] > 2)
 10095  0175  0837               	movf	bpc_proc@pdata,w
 10096  0176  3E0E               	addlw	14
 10097  0177  0086               	movwf	6
 10098  0178  3002               	movlw	2	; select bank4/5
 10099  0179  0087               	movwf	7
 10100  017A  3003               	movlw	3
 10101  017B  0201               	subwf	1,w
 10102  017C  1C03               	skipc
 10103  017D  2992               	goto	i1l3859
 10104                           
 10105                           ;bpc.c: 114:     {;bpc.c: 115:         pdata->g_find_recv_start = FALSE;
 10106  017E  0837               	movf	bpc_proc@pdata,w
 10107  017F  3E02               	addlw	2
 10108  0180  0086               	movwf	6
 10109  0181  3002               	movlw	2	; select bank4/5
 10110  0182  0087               	movwf	7
 10111  0183  0181               	clrf	1
 10112                           
 10113                           ;bpc.c: 116:         pdata->g_isDecoding = 0;
 10114  0184  0A37               	incf	bpc_proc@pdata,w
 10115  0185  0086               	movwf	6
 10116  0186  3002               	movlw	2	; select bank4/5
 10117  0187  0087               	movwf	7
 10118  0188  0181               	clrf	1
 10119                           
 10120                           ;bpc.c: 117:         pdata->g_recv_count = 0;
 10121  0189  0837               	movf	bpc_proc@pdata,w
 10122  018A  3E0B               	addlw	11
 10123  018B  0086               	movwf	6
 10124  018C  3002               	movlw	2	; select bank4/5
 10125  018D  0087               	movwf	7
 10126  018E  3000               	movlw	0
 10127  018F  3FC0               	movwi [0]fsr1
 10128  0190  3FC1               	movwi [1]fsr1
 10129  0191  0008               	return
 10130  0192                     i1l3859:	
 10131                           
 10132                           ;bpc.c: 121:     u16 last_time_h = pdata->g_time_h;
 10133  0192  0837               	movf	bpc_proc@pdata,w
 10134  0193  3E03               	addlw	3
 10135  0194  0086               	movwf	6
 10136  0195  3002               	movlw	2	; select bank4/5
 10137  0196  0087               	movwf	7
 10138  0197  0801               	movf	1,w
 10139  0198  00AC               	movwf	??_bpc_proc
 10140  0199  01AD               	clrf	??_bpc_proc+1
 10141  019A  082C               	movf	??_bpc_proc,w
 10142  019B  00B0               	movwf	bpc_proc@last_time_h
 10143  019C  082D               	movf	??_bpc_proc+1,w
 10144  019D  00B1               	movwf	bpc_proc@last_time_h+1
 10145                           
 10146                           ;bpc.c: 122:     u16 last_time_m = pdata->g_time_m;
 10147  019E  0837               	movf	bpc_proc@pdata,w
 10148  019F  3E04               	addlw	4
 10149  01A0  0086               	movwf	6
 10150  01A1  3002               	movlw	2	; select bank4/5
 10151  01A2  0087               	movwf	7
 10152  01A3  0801               	movf	1,w
 10153  01A4  00AC               	movwf	??_bpc_proc
 10154  01A5  01AD               	clrf	??_bpc_proc+1
 10155  01A6  082C               	movf	??_bpc_proc,w
 10156  01A7  00B2               	movwf	bpc_proc@last_time_m
 10157  01A8  082D               	movf	??_bpc_proc+1,w
 10158  01A9  00B3               	movwf	bpc_proc@last_time_m+1
 10159                           
 10160                           ;bpc.c: 123:     u16 last_time_s = pdata->g_time_s;
 10161  01AA  0837               	movf	bpc_proc@pdata,w
 10162  01AB  3E05               	addlw	5
 10163  01AC  0086               	movwf	6
 10164  01AD  3002               	movlw	2	; select bank4/5
 10165  01AE  0087               	movwf	7
 10166  01AF  0801               	movf	1,w
 10167  01B0  00AC               	movwf	??_bpc_proc
 10168  01B1  01AD               	clrf	??_bpc_proc+1
 10169  01B2  082C               	movf	??_bpc_proc,w
 10170  01B3  00AE               	movwf	bpc_proc@last_time_s
 10171  01B4  082D               	movf	??_bpc_proc+1,w
 10172  01B5  00AF               	movwf	bpc_proc@last_time_s+1
 10173                           
 10174                           ;bpc.c: 125:     if(check_err(pdata))
 10175  01B6  0837               	movf	bpc_proc@pdata,w
 10176  01B7  3185  257F  3180   	fcall	_check_err
 10177  01BA  0870               	movf	?_check_err,w
 10178  01BB  0471               	iorwf	?_check_err+1,w
 10179  01BC  1903               	btfsc	3,2
 10180  01BD  29DB               	goto	i1l3867
 10181                           
 10182                           ;bpc.c: 126:     {;bpc.c: 128:         pdata->g_time_h = last_time_h;
 10183  01BE  0020               	movlb	0	; select bank0
 10184  01BF  0830               	movf	bpc_proc@last_time_h,w
 10185  01C0  00AC               	movwf	??_bpc_proc
 10186  01C1  0837               	movf	bpc_proc@pdata,w
 10187  01C2  3E03               	addlw	3
 10188  01C3  0086               	movwf	6
 10189  01C4  3002               	movlw	2	; select bank4/5
 10190  01C5  0087               	movwf	7
 10191  01C6  082C               	movf	??_bpc_proc,w
 10192  01C7  0081               	movwf	1
 10193                           
 10194                           ;bpc.c: 129:         pdata->g_time_m = last_time_m;
 10195  01C8  0832               	movf	bpc_proc@last_time_m,w
 10196  01C9  00AC               	movwf	??_bpc_proc
 10197  01CA  0837               	movf	bpc_proc@pdata,w
 10198  01CB  3E04               	addlw	4
 10199  01CC  0086               	movwf	6
 10200  01CD  3002               	movlw	2	; select bank4/5
 10201  01CE  0087               	movwf	7
 10202  01CF  082C               	movf	??_bpc_proc,w
 10203  01D0  0081               	movwf	1
 10204                           
 10205                           ;bpc.c: 130:         pdata->g_time_s = last_time_s;
 10206  01D1  082E               	movf	bpc_proc@last_time_s,w
 10207  01D2  00AC               	movwf	??_bpc_proc
 10208  01D3  0837               	movf	bpc_proc@pdata,w
 10209  01D4  3E05               	addlw	5
 10210  01D5  0086               	movwf	6
 10211  01D6  3002               	movlw	2	; select bank4/5
 10212  01D7  0087               	movwf	7
 10213  01D8  082C               	movf	??_bpc_proc,w
 10214  01D9  0081               	movwf	1
 10215  01DA  0008               	return
 10216  01DB                     i1l3867:	
 10217                           
 10218                           ;bpc.c: 135:     if(last_time_h != pdata->g_time_h || last_time_m != pdata->g_time_m)
 10219  01DB  0020               	movlb	0	; select bank0
 10220  01DC  0837               	movf	bpc_proc@pdata,w
 10221  01DD  3E03               	addlw	3
 10222  01DE  0086               	movwf	6
 10223  01DF  3002               	movlw	2	; select bank4/5
 10224  01E0  0087               	movwf	7
 10225  01E1  0801               	movf	1,w
 10226  01E2  00AC               	movwf	??_bpc_proc
 10227  01E3  01AD               	clrf	??_bpc_proc+1
 10228  01E4  0831               	movf	bpc_proc@last_time_h+1,w
 10229  01E5  062D               	xorwf	??_bpc_proc+1,w
 10230  01E6  1D03               	skipz
 10231  01E7  29EA               	goto	u381_25
 10232  01E8  0830               	movf	bpc_proc@last_time_h,w
 10233  01E9  062C               	xorwf	??_bpc_proc,w
 10234  01EA                     u381_25:	
 10235  01EA  1D03               	skipz
 10236  01EB  29FC               	goto	i1l3871
 10237  01EC  0837               	movf	bpc_proc@pdata,w
 10238  01ED  3E04               	addlw	4
 10239  01EE  0086               	movwf	6
 10240  01EF  3002               	movlw	2	; select bank4/5
 10241  01F0  0087               	movwf	7
 10242  01F1  0801               	movf	1,w
 10243  01F2  00AC               	movwf	??_bpc_proc
 10244  01F3  01AD               	clrf	??_bpc_proc+1
 10245  01F4  0833               	movf	bpc_proc@last_time_m+1,w
 10246  01F5  062D               	xorwf	??_bpc_proc+1,w
 10247  01F6  1D03               	skipz
 10248  01F7  29FA               	goto	u382_25
 10249  01F8  0832               	movf	bpc_proc@last_time_m,w
 10250  01F9  062C               	xorwf	??_bpc_proc,w
 10251  01FA                     u382_25:	
 10252  01FA  1903               	skipnz
 10253  01FB  29FF               	goto	i1l3873
 10254  01FC                     i1l3871:	
 10255                           
 10256                           ;bpc.c: 136:     {;bpc.c: 137:         display_update();
 10257  01FC  3187  274E  3180   	fcall	i1_display_update
 10258  01FF                     i1l3873:	
 10259                           
 10260                           ;bpc.c: 141:     pdata->g_find_recv_start = FALSE;
 10261  01FF  0020               	movlb	0	; select bank0
 10262  0200  0837               	movf	bpc_proc@pdata,w
 10263  0201  3E02               	addlw	2
 10264  0202  0086               	movwf	6
 10265  0203  3002               	movlw	2	; select bank4/5
 10266  0204  0087               	movwf	7
 10267  0205  0181               	clrf	1
 10268                           
 10269                           ;bpc.c: 143:     pdata->g_isDecoding = FALSE;
 10270  0206  0A37               	incf	bpc_proc@pdata,w
 10271  0207  0086               	movwf	6
 10272  0208  3002               	movlw	2	; select bank4/5
 10273  0209  0087               	movwf	7
 10274  020A  0181               	clrf	1
 10275                           
 10276                           ;bpc.c: 146:  capture_Set(FALSE);
 10277  020B  3000               	movlw	0
 10278  020C  3188  209C  3180   	fcall	i1_capture_Set
 10279                           
 10280                           ;bpc.c: 147:     pdata->g_recv_count = CODE_P0;
 10281  020F  0020               	movlb	0	; select bank0
 10282  0210  0837               	movf	bpc_proc@pdata,w
 10283  0211  3E0B               	addlw	11
 10284  0212  0086               	movwf	6
 10285  0213  3002               	movlw	2	; select bank4/5
 10286  0214  0087               	movwf	7
 10287  0215  3000               	movlw	0
 10288  0216  3FC0               	movwi [0]fsr1
 10289  0217  3FC1               	movwi [1]fsr1
 10290                           
 10291                           ;bpc.c: 148:     for(int i = 0;i < 20; i++)
 10292  0218  01B4               	clrf	bpc_proc@i
 10293  0219  01B5               	clrf	bpc_proc@i+1
 10294  021A                     i1l3887:	
 10295                           
 10296                           ;bpc.c: 149:     {;bpc.c: 150:         pdata->g_recv_buf[i] = 5;
 10297  021A  3005               	movlw	5
 10298  021B  0020               	movlb	0	; select bank0
 10299  021C  00AC               	movwf	??_bpc_proc
 10300  021D  0834               	movf	bpc_proc@i,w
 10301  021E  0737               	addwf	bpc_proc@pdata,w
 10302  021F  00AD               	movwf	??_bpc_proc+1
 10303  0220  082D               	movf	??_bpc_proc+1,w
 10304  0221  3E0D               	addlw	13
 10305  0222  0086               	movwf	6
 10306  0223  3002               	movlw	2	; select bank4/5
 10307  0224  0087               	movwf	7
 10308  0225  082C               	movf	??_bpc_proc,w
 10309  0226  0081               	movwf	1
 10310                           
 10311                           ;bpc.c: 151:     }
 10312  0227  3001               	movlw	1
 10313  0228  07B4               	addwf	bpc_proc@i,f
 10314  0229  3000               	movlw	0
 10315  022A  3DB5               	addwfc	bpc_proc@i+1,f
 10316  022B  0835               	movf	bpc_proc@i+1,w
 10317  022C  3A80               	xorlw	128
 10318  022D  00AC               	movwf	??_bpc_proc
 10319  022E  3080               	movlw	128
 10320  022F  022C               	subwf	??_bpc_proc,w
 10321  0230  1D03               	skipz
 10322  0231  2A34               	goto	u383_25
 10323  0232  3014               	movlw	20
 10324  0233  0234               	subwf	bpc_proc@i,w
 10325  0234                     u383_25:	
 10326  0234  1803               	btfsc	3,0
 10327  0235  0008               	return
 10328  0236  2A1A               	goto	i1l3887
 10329  0237                     __end_of_bpc_proc:	
 10330                           
 10331                           	psect	text51
 10332  074E                     __ptext51:	
 10333 ;; *************** function i1_display_update *****************
 10334 ;; Defined at:
 10335 ;;		line 72 in file "display.c"
 10336 ;; Parameters:    Size  Location     Type
 10337 ;;		None
 10338 ;; Auto vars:     Size  Location     Type
 10339 ;;  display_upda    1   11[BANK0 ] PTR volatile struct .
 10340 ;;		 -> g_data(39), 
 10341 ;; Return value:  Size  Location     Type
 10342 ;;                  1    wreg      void 
 10343 ;; Registers used:
 10344 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10345 ;; Tracked objects:
 10346 ;;		On entry : 0/0
 10347 ;;		On exit  : 0/0
 10348 ;;		Unchanged: 0/0
 10349 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10350 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10351 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10352 ;;      Temps:          0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10353 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10354 ;;Total ram usage:       12 bytes
 10355 ;; Hardware stack levels used:    1
 10356 ;; Hardware stack levels required when called:    3
 10357 ;; This function calls:
 10358 ;;		i1___awdiv
 10359 ;;		i1___awmod
 10360 ;;		i1_data_getdata
 10361 ;;		i1_display_write_once
 10362 ;; This function is called by:
 10363 ;;		_bpc_proc
 10364 ;;		_update_time
 10365 ;; This function uses a non-reentrant model
 10366 ;;
 10367                           
 10368                           
 10369                           ;psect for function i1_display_update
 10370  074E                     i1_display_update:	
 10371                           
 10372                           ;display.c: 86:     G_DATA *pdata = data_getdata();
 10373                           
 10374                           ;incstack = 0
 10375                           ; Regs used in i1_display_update: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10376  074E  3188  2012  3187   	fcall	i1_data_getdata
 10377  0751  0020               	movlb	0	; select bank0
 10378  0752  00A0               	movwf	??i1_display_update
 10379  0753  0820               	movf	??i1_display_update,w
 10380  0754  00AB               	movwf	i1display_update@pdata
 10381                           
 10382                           ;display.c: 87:     display_write_once(segmcode[(pdata->g_time_h/10 == 0? 10:pdata->g_ti
      +                          me_h/10)], segmcode[pdata->g_time_h%10], segmcode[pdata->g_time_m/10], segmcode[pdata->g
      +                          _time_m%10]);
 10383  0755  300A               	movlw	10
 10384  0756  00F0               	movwf	i1___awdiv@divisor
 10385  0757  3000               	movlw	0
 10386  0758  00F1               	movwf	i1___awdiv@divisor+1
 10387  0759  082B               	movf	i1display_update@pdata,w
 10388  075A  3E03               	addlw	3
 10389  075B  0086               	movwf	6
 10390  075C  3002               	movlw	2	; select bank4/5
 10391  075D  0087               	movwf	7
 10392  075E  0801               	movf	1,w
 10393  075F  00A0               	movwf	??i1_display_update
 10394  0760  01A1               	clrf	??i1_display_update+1
 10395  0761  0820               	movf	??i1_display_update,w
 10396  0762  00F2               	movwf	i1___awdiv@dividend
 10397  0763  0821               	movf	??i1_display_update+1,w
 10398  0764  00F3               	movwf	i1___awdiv@dividend+1
 10399  0765  318B  239F  3187   	fcall	i1___awdiv
 10400  0768  0870               	movf	?i1___awdiv,w
 10401  0769  0471               	iorwf	?i1___awdiv+1,w
 10402  076A  1903               	btfsc	3,2
 10403  076B  2F86               	goto	i1l3325
 10404  076C  300A               	movlw	10
 10405  076D  00F0               	movwf	i1___awdiv@divisor
 10406  076E  3000               	movlw	0
 10407  076F  00F1               	movwf	i1___awdiv@divisor+1
 10408  0770  0020               	movlb	0	; select bank0
 10409  0771  082B               	movf	i1display_update@pdata,w
 10410  0772  3E03               	addlw	3
 10411  0773  0086               	movwf	6
 10412  0774  3002               	movlw	2	; select bank4/5
 10413  0775  0087               	movwf	7
 10414  0776  0801               	movf	1,w
 10415  0777  00A0               	movwf	??i1_display_update
 10416  0778  01A1               	clrf	??i1_display_update+1
 10417  0779  0820               	movf	??i1_display_update,w
 10418  077A  00F2               	movwf	i1___awdiv@dividend
 10419  077B  0821               	movf	??i1_display_update+1,w
 10420  077C  00F3               	movwf	i1___awdiv@dividend+1
 10421  077D  318B  239F  3187   	fcall	i1___awdiv
 10422  0780  0871               	movf	?i1___awdiv+1,w
 10423  0781  0020               	movlb	0	; select bank0
 10424  0782  00AA               	movwf	i1_display_update$1525+1
 10425  0783  0870               	movf	?i1___awdiv,w
 10426  0784  00A9               	movwf	i1_display_update$1525
 10427  0785  2F8B               	goto	i1l3327
 10428  0786                     i1l3325:	
 10429  0786  300A               	movlw	10
 10430  0787  0020               	movlb	0	; select bank0
 10431  0788  00A9               	movwf	i1_display_update$1525
 10432  0789  3000               	movlw	0
 10433  078A  00AA               	movwf	i1_display_update$1525+1
 10434  078B                     i1l3327:	
 10435  078B  300A               	movlw	10
 10436  078C  00F0               	movwf	i1___awmod@divisor
 10437  078D  3000               	movlw	0
 10438  078E  00F1               	movwf	i1___awmod@divisor+1
 10439  078F  082B               	movf	i1display_update@pdata,w
 10440  0790  3E03               	addlw	3
 10441  0791  0086               	movwf	6
 10442  0792  3002               	movlw	2	; select bank4/5
 10443  0793  0087               	movwf	7
 10444  0794  0801               	movf	1,w
 10445  0795  00A0               	movwf	??i1_display_update
 10446  0796  01A1               	clrf	??i1_display_update+1
 10447  0797  0820               	movf	??i1_display_update,w
 10448  0798  00F2               	movwf	i1___awmod@dividend
 10449  0799  0821               	movf	??i1_display_update+1,w
 10450  079A  00F3               	movwf	i1___awmod@dividend+1
 10451  079B  318A  22CF  3187   	fcall	i1___awmod
 10452  079E  0871               	movf	?i1___awmod+1,w
 10453  079F  0085               	movwf	5
 10454  07A0  0870               	movf	?i1___awmod,w
 10455  07A1  0084               	movwf	4
 10456  07A2  3000               	movlw	low (_segmcode| (0+32768))
 10457  07A3  0784               	addwf	4,f
 10458  07A4  3090               	movlw	high (_segmcode| (0+32768))
 10459  07A5  3D85               	addwfc	5,f
 10460  07A6  0800               	movf	0,w	;code access
 10461  07A7  0020               	movlb	0	; select bank0
 10462  07A8  00A2               	movwf	??i1_display_update+2
 10463  07A9  0822               	movf	??i1_display_update+2,w
 10464  07AA  00F9               	movwf	i1display_write_once@HR
 10465  07AB  300A               	movlw	10
 10466  07AC  00F0               	movwf	i1___awdiv@divisor
 10467  07AD  3000               	movlw	0
 10468  07AE  00F1               	movwf	i1___awdiv@divisor+1
 10469  07AF  082B               	movf	i1display_update@pdata,w
 10470  07B0  3E04               	addlw	4
 10471  07B1  0086               	movwf	6
 10472  07B2  3002               	movlw	2	; select bank4/5
 10473  07B3  0087               	movwf	7
 10474  07B4  0801               	movf	1,w
 10475  07B5  00A3               	movwf	??i1_display_update+3
 10476  07B6  01A4               	clrf	??i1_display_update+4
 10477  07B7  0823               	movf	??i1_display_update+3,w
 10478  07B8  00F2               	movwf	i1___awdiv@dividend
 10479  07B9  0824               	movf	??i1_display_update+4,w
 10480  07BA  00F3               	movwf	i1___awdiv@dividend+1
 10481  07BB  318B  239F  3187   	fcall	i1___awdiv
 10482  07BE  0871               	movf	?i1___awdiv+1,w
 10483  07BF  0085               	movwf	5
 10484  07C0  0870               	movf	?i1___awdiv,w
 10485  07C1  0084               	movwf	4
 10486  07C2  3000               	movlw	low (_segmcode| (0+32768))
 10487  07C3  0784               	addwf	4,f
 10488  07C4  3090               	movlw	high (_segmcode| (0+32768))
 10489  07C5  3D85               	addwfc	5,f
 10490  07C6  0800               	movf	0,w	;code access
 10491  07C7  0020               	movlb	0	; select bank0
 10492  07C8  00A5               	movwf	??i1_display_update+5
 10493  07C9  0825               	movf	??i1_display_update+5,w
 10494  07CA  00FA               	movwf	i1display_write_once@ML
 10495  07CB  300A               	movlw	10
 10496  07CC  00F0               	movwf	i1___awmod@divisor
 10497  07CD  3000               	movlw	0
 10498  07CE  00F1               	movwf	i1___awmod@divisor+1
 10499  07CF  082B               	movf	i1display_update@pdata,w
 10500  07D0  3E04               	addlw	4
 10501  07D1  0086               	movwf	6
 10502  07D2  3002               	movlw	2	; select bank4/5
 10503  07D3  0087               	movwf	7
 10504  07D4  0801               	movf	1,w
 10505  07D5  00A6               	movwf	??i1_display_update+6
 10506  07D6  01A7               	clrf	??i1_display_update+7
 10507  07D7  0826               	movf	??i1_display_update+6,w
 10508  07D8  00F2               	movwf	i1___awmod@dividend
 10509  07D9  0827               	movf	??i1_display_update+7,w
 10510  07DA  00F3               	movwf	i1___awmod@dividend+1
 10511  07DB  318A  22CF  3187   	fcall	i1___awmod
 10512  07DE  0871               	movf	?i1___awmod+1,w
 10513  07DF  0085               	movwf	5
 10514  07E0  0870               	movf	?i1___awmod,w
 10515  07E1  0084               	movwf	4
 10516  07E2  3000               	movlw	low (_segmcode| (0+32768))
 10517  07E3  0784               	addwf	4,f
 10518  07E4  3090               	movlw	high (_segmcode| (0+32768))
 10519  07E5  3D85               	addwfc	5,f
 10520  07E6  0800               	movf	0,w	;code access
 10521  07E7  0020               	movlb	0	; select bank0
 10522  07E8  00A8               	movwf	??i1_display_update+8
 10523  07E9  0828               	movf	??i1_display_update+8,w
 10524  07EA  00FB               	movwf	i1display_write_once@MR
 10525  07EB  082A               	movf	i1_display_update$1525+1,w
 10526  07EC  0085               	movwf	5
 10527  07ED  0829               	movf	i1_display_update$1525,w
 10528  07EE  0084               	movwf	4
 10529  07EF  3000               	movlw	low (_segmcode| (0+32768))
 10530  07F0  0784               	addwf	4,f
 10531  07F1  3090               	movlw	high (_segmcode| (0+32768))
 10532  07F2  3D85               	addwfc	5,f
 10533  07F3  0800               	movf	0,w	;code access
 10534  07F4  3189  21BD         	fcall	i1_display_write_once
 10535  07F6  0008               	return
 10536  07F7                     __end_ofi1_display_update:	
 10537                           
 10538                           	psect	text52
 10539  09BD                     __ptext52:	
 10540 ;; *************** function i1_display_write_once *****************
 10541 ;; Defined at:
 10542 ;;		line 54 in file "display.c"
 10543 ;; Parameters:    Size  Location     Type
 10544 ;;  HL              1    wreg     unsigned char 
 10545 ;;  HR              1    9[COMMON] unsigned char 
 10546 ;;  ML              1   10[COMMON] unsigned char 
 10547 ;;  MR              1   11[COMMON] unsigned char 
 10548 ;; Auto vars:     Size  Location     Type
 10549 ;;  HL              1   12[COMMON] unsigned char 
 10550 ;; Return value:  Size  Location     Type
 10551 ;;                  1    wreg      void 
 10552 ;; Registers used:
 10553 ;;		wreg, status,2, status,0, pclath, cstack
 10554 ;; Tracked objects:
 10555 ;;		On entry : 0/0
 10556 ;;		On exit  : 0/0
 10557 ;;		Unchanged: 0/0
 10558 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10559 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10560 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10561 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10562 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10563 ;;Total ram usage:        4 bytes
 10564 ;; Hardware stack levels used:    1
 10565 ;; Hardware stack levels required when called:    2
 10566 ;; This function calls:
 10567 ;;		i1_display_control595_delay
 10568 ;;		i1_display_write_byte
 10569 ;; This function is called by:
 10570 ;;		i1_display_update
 10571 ;; This function uses a non-reentrant model
 10572 ;;
 10573                           
 10574                           
 10575                           ;psect for function i1_display_write_once
 10576  09BD                     i1_display_write_once:	
 10577                           
 10578                           ;incstack = 0
 10579                           ; Regs used in i1_display_write_once: [wreg+status,2+status,0+pclath+cstack]
 10580                           ;i1display_write_once@HL stored from wreg
 10581  09BD  00FC               	movwf	i1display_write_once@HL
 10582                           
 10583                           ;display.c: 56:     display_write_byte(HL);
 10584  09BE  087C               	movf	i1display_write_once@HL,w
 10585  09BF  318A  224E  3189   	fcall	i1_display_write_byte
 10586                           
 10587                           ;display.c: 57:     display_write_byte(HR);
 10588  09C2  0879               	movf	i1display_write_once@HR,w
 10589  09C3  318A  224E  3189   	fcall	i1_display_write_byte
 10590                           
 10591                           ;display.c: 58:     display_write_byte(ML);
 10592  09C6  087A               	movf	i1display_write_once@ML,w
 10593  09C7  318A  224E  3189   	fcall	i1_display_write_byte
 10594                           
 10595                           ;display.c: 59:     display_write_byte(MR);
 10596  09CA  087B               	movf	i1display_write_once@MR,w
 10597  09CB  318A  224E  3189   	fcall	i1_display_write_byte
 10598                           
 10599                           ;display.c: 62:     LATBbits.LATB0 = PIN_LOW;
 10600  09CE  0022               	movlb	2	; select bank2
 10601  09CF  100D               	bcf	13,0	;volatile
 10602                           
 10603                           ;display.c: 63:     display_control595_delay();
 10604  09D0  3188  2070  3189   	fcall	i1_display_control595_delay
 10605                           
 10606                           ;display.c: 64:     LATBbits.LATB0 = PIN_HIGH;
 10607  09D3  0022               	movlb	2	; select bank2
 10608  09D4  140D               	bsf	13,0	;volatile
 10609                           
 10610                           ;display.c: 65:     display_control595_delay();
 10611  09D5  3188  2070  3189   	fcall	i1_display_control595_delay
 10612                           
 10613                           ;display.c: 67:     LATBbits.LATB1 = PIN_HIGH;
 10614  09D8  0022               	movlb	2	; select bank2
 10615  09D9  148D               	bsf	13,1	;volatile
 10616                           
 10617                           ;display.c: 68:  display_control595_delay();
 10618  09DA  3188  2070         	fcall	i1_display_control595_delay
 10619                           
 10620                           ;display.c: 69:     LATBbits.LATB1 = PIN_LOW;
 10621  09DC  0022               	movlb	2	; select bank2
 10622  09DD  108D               	bcf	13,1	;volatile
 10623  09DE  0008               	return
 10624  09DF                     __end_ofi1_display_write_once:	
 10625                           
 10626                           	psect	text53
 10627  0A4E                     __ptext53:	
 10628 ;; *************** function i1_display_write_byte *****************
 10629 ;; Defined at:
 10630 ;;		line 42 in file "display.c"
 10631 ;; Parameters:    Size  Location     Type
 10632 ;;  data            1    wreg     unsigned char 
 10633 ;; Auto vars:     Size  Location     Type
 10634 ;;  data            1    4[COMMON] unsigned char 
 10635 ;;  display_writ    1    5[COMMON] unsigned char 
 10636 ;; Return value:  Size  Location     Type
 10637 ;;                  1    wreg      void 
 10638 ;; Registers used:
 10639 ;;		wreg, status,2, status,0, pclath, cstack
 10640 ;; Tracked objects:
 10641 ;;		On entry : 0/0
 10642 ;;		On exit  : 0/0
 10643 ;;		Unchanged: 0/0
 10644 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10645 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10646 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10647 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10648 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10649 ;;Total ram usage:        4 bytes
 10650 ;; Hardware stack levels used:    1
 10651 ;; Hardware stack levels required when called:    1
 10652 ;; This function calls:
 10653 ;;		i1_display_control595_delay
 10654 ;; This function is called by:
 10655 ;;		i1_display_write_once
 10656 ;; This function uses a non-reentrant model
 10657 ;;
 10658                           
 10659                           
 10660                           ;psect for function i1_display_write_byte
 10661  0A4E                     i1_display_write_byte:	
 10662                           
 10663                           ;incstack = 0
 10664                           ; Regs used in i1_display_write_byte: [wreg+status,2+status,0+pclath+cstack]
 10665                           ;i1display_write_byte@data stored from wreg
 10666  0A4E  00F4               	movwf	i1display_write_byte@data
 10667                           
 10668                           ;display.c: 43:     u8 i;;display.c: 44:     for(i = 0; i < 8; i++){
 10669  0A4F  01F5               	clrf	i1display_write_byte@i
 10670  0A50                     i1l2877:	
 10671                           
 10672                           ;display.c: 45:   LATBbits.LATB5 = (data & 0x80) >> 7;
 10673  0A50  0874               	movf	i1display_write_byte@data,w
 10674  0A51  00F2               	movwf	??i1_display_write_byte
 10675  0A52  3007               	movlw	7
 10676  0A53                     u242_25:	
 10677  0A53  36F2               	lsrf	??i1_display_write_byte,f
 10678  0A54  0B89               	decfsz	9,f
 10679  0A55  2A53               	goto	u242_25
 10680  0A56  0872               	movf	??i1_display_write_byte,w
 10681  0A57  3901               	andlw	1
 10682  0A58  00F3               	movwf	??i1_display_write_byte+1
 10683  0A59  0EF3               	swapf	??i1_display_write_byte+1,f
 10684  0A5A  0DF3               	rlf	??i1_display_write_byte+1,f
 10685  0A5B  0022               	movlb	2	; select bank2
 10686  0A5C  080D               	movf	13,w	;volatile
 10687  0A5D  0673               	xorwf	??i1_display_write_byte+1,w
 10688  0A5E  39DF               	andlw	-33
 10689  0A5F  0673               	xorwf	??i1_display_write_byte+1,w
 10690  0A60  008D               	movwf	13	;volatile
 10691                           
 10692                           ;display.c: 46:         LATBbits.LATB0 = PIN_LOW;
 10693  0A61  100D               	bcf	13,0	;volatile
 10694                           
 10695                           ;display.c: 47:   display_control595_delay();
 10696  0A62  3188  2070  318A   	fcall	i1_display_control595_delay
 10697                           
 10698                           ;display.c: 48:         LATBbits.LATB0 = PIN_HIGH;
 10699  0A65  0022               	movlb	2	; select bank2
 10700  0A66  140D               	bsf	13,0	;volatile
 10701                           
 10702                           ;display.c: 49:   display_control595_delay();
 10703  0A67  3188  2070  318A   	fcall	i1_display_control595_delay
 10704                           
 10705                           ;display.c: 50:         data <<= 1;
 10706  0A6A  1003               	clrc
 10707  0A6B  0DF4               	rlf	i1display_write_byte@data,f
 10708                           
 10709                           ;display.c: 51:     }
 10710  0A6C  3001               	movlw	1
 10711  0A6D  00F2               	movwf	??i1_display_write_byte
 10712  0A6E  0872               	movf	??i1_display_write_byte,w
 10713  0A6F  07F5               	addwf	i1display_write_byte@i,f
 10714  0A70  3008               	movlw	8
 10715  0A71  0275               	subwf	i1display_write_byte@i,w
 10716  0A72  1803               	btfsc	3,0
 10717  0A73  0008               	return
 10718  0A74  2A50               	goto	i1l2877
 10719  0A75                     __end_ofi1_display_write_byte:	
 10720                           
 10721                           	psect	text54
 10722  0870                     __ptext54:	
 10723 ;; *************** function i1_display_control595_delay *****************
 10724 ;; Defined at:
 10725 ;;		line 26 in file "display.c"
 10726 ;; Parameters:    Size  Location     Type
 10727 ;;		None
 10728 ;; Auto vars:     Size  Location     Type
 10729 ;;  display_cont    1    1[COMMON] unsigned char 
 10730 ;; Return value:  Size  Location     Type
 10731 ;;                  1    wreg      void 
 10732 ;; Registers used:
 10733 ;;		wreg, status,2, status,0
 10734 ;; Tracked objects:
 10735 ;;		On entry : 0/0
 10736 ;;		On exit  : 0/0
 10737 ;;		Unchanged: 0/0
 10738 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10739 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10740 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10741 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10742 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10743 ;;Total ram usage:        2 bytes
 10744 ;; Hardware stack levels used:    1
 10745 ;; This function calls:
 10746 ;;		Nothing
 10747 ;; This function is called by:
 10748 ;;		i1_display_write_byte
 10749 ;;		i1_display_write_once
 10750 ;; This function uses a non-reentrant model
 10751 ;;
 10752                           
 10753                           
 10754                           ;psect for function i1_display_control595_delay
 10755  0870                     i1_display_control595_delay:	
 10756                           
 10757                           ;display.c: 27:    u8 times = 10;
 10758                           
 10759                           ;incstack = 0
 10760                           ; Regs used in i1_display_control595_delay: [wreg+status,2+status,0]
 10761  0870  300A               	movlw	10
 10762  0871  00F0               	movwf	??i1_display_control595_delay
 10763  0872  0870               	movf	??i1_display_control595_delay,w
 10764  0873  00F1               	movwf	i1display_control595_delay@times
 10765  0874                     i1l558:	
 10766                           ;display.c: 31:    }
 10767                           
 10768                           ;display.c: 28:    while(times > 0){
 10769                           
 10770                           
 10771                           ;display.c: 28:    while(times > 0){
 10772  0874  0871               	movf	i1display_control595_delay@times,w
 10773  0875  1903               	btfsc	3,2
 10774  0876  0008               	return
 10775                           
 10776                           ;display.c: 29:     __nop();
 10777  0877  0000               	nop
 10778                           
 10779                           ;display.c: 30:        times--;
 10780  0878  3001               	movlw	1
 10781  0879  02F1               	subwf	i1display_control595_delay@times,f
 10782  087A  2874               	goto	i1l558
 10783  087B                     __end_ofi1_display_control595_delay:	
 10784                           
 10785                           	psect	text55
 10786  0ACF                     __ptext55:	
 10787 ;; *************** function i1___awmod *****************
 10788 ;; Defined at:
 10789 ;;		line 5 in file "E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\awmod.c"
 10790 ;; Parameters:    Size  Location     Type
 10791 ;;  divisor         2    0[COMMON] int 
 10792 ;;  dividend        2    2[COMMON] int 
 10793 ;; Auto vars:     Size  Location     Type
 10794 ;;  __awmod         1    6[COMMON] unsigned char 
 10795 ;;  __awmod         1    5[COMMON] unsigned char 
 10796 ;; Return value:  Size  Location     Type
 10797 ;;                  2    0[COMMON] int 
 10798 ;; Registers used:
 10799 ;;		wreg, status,2, status,0
 10800 ;; Tracked objects:
 10801 ;;		On entry : 0/0
 10802 ;;		On exit  : 0/0
 10803 ;;		Unchanged: 0/0
 10804 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10805 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10806 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10807 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10808 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10809 ;;Total ram usage:        7 bytes
 10810 ;; Hardware stack levels used:    1
 10811 ;; This function calls:
 10812 ;;		Nothing
 10813 ;; This function is called by:
 10814 ;;		_update_time
 10815 ;;		i1_display_update
 10816 ;; This function uses a non-reentrant model
 10817 ;;
 10818                           
 10819                           
 10820                           ;psect for function i1___awmod
 10821  0ACF                     i1___awmod:	
 10822                           
 10823                           ;incstack = 0
 10824                           ; Regs used in i1___awmod: [wreg+status,2+status,0]
 10825  0ACF  01F6               	clrf	i1___awmod@sign
 10826  0AD0  1FF3               	btfss	i1___awmod@dividend+1,7
 10827  0AD1  2AD9               	goto	i1l3091
 10828  0AD2  09F2               	comf	i1___awmod@dividend,f
 10829  0AD3  09F3               	comf	i1___awmod@dividend+1,f
 10830  0AD4  0AF2               	incf	i1___awmod@dividend,f
 10831  0AD5  1903               	skipnz
 10832  0AD6  0AF3               	incf	i1___awmod@dividend+1,f
 10833  0AD7  01F6               	clrf	i1___awmod@sign
 10834  0AD8  0AF6               	incf	i1___awmod@sign,f
 10835  0AD9                     i1l3091:	
 10836  0AD9  1FF1               	btfss	i1___awmod@divisor+1,7
 10837  0ADA  2AE0               	goto	i1l3095
 10838  0ADB  09F0               	comf	i1___awmod@divisor,f
 10839  0ADC  09F1               	comf	i1___awmod@divisor+1,f
 10840  0ADD  0AF0               	incf	i1___awmod@divisor,f
 10841  0ADE  1903               	skipnz
 10842  0ADF  0AF1               	incf	i1___awmod@divisor+1,f
 10843  0AE0                     i1l3095:	
 10844  0AE0  0870               	movf	i1___awmod@divisor,w
 10845  0AE1  0471               	iorwf	i1___awmod@divisor+1,w
 10846  0AE2  1903               	btfsc	3,2
 10847  0AE3  2B07               	goto	i1l3113
 10848  0AE4  01F5               	clrf	i1___awmod@counter
 10849  0AE5  0AF5               	incf	i1___awmod@counter,f
 10850  0AE6                     i1l3103:	
 10851  0AE6  1BF1               	btfsc	i1___awmod@divisor+1,7
 10852  0AE7  2AF2               	goto	i1l3105
 10853  0AE8  3001               	movlw	1
 10854  0AE9                     u286_25:	
 10855  0AE9  35F0               	lslf	i1___awmod@divisor,f
 10856  0AEA  0DF1               	rlf	i1___awmod@divisor+1,f
 10857  0AEB  0B89               	decfsz	9,f
 10858  0AEC  2AE9               	goto	u286_25
 10859  0AED  3001               	movlw	1
 10860  0AEE  00F4               	movwf	??i1___awmod
 10861  0AEF  0874               	movf	??i1___awmod,w
 10862  0AF0  07F5               	addwf	i1___awmod@counter,f
 10863  0AF1  2AE6               	goto	i1l3103
 10864  0AF2                     i1l3105:	
 10865  0AF2  0871               	movf	i1___awmod@divisor+1,w
 10866  0AF3  0273               	subwf	i1___awmod@dividend+1,w
 10867  0AF4  1D03               	skipz
 10868  0AF5  2AF8               	goto	u288_25
 10869  0AF6  0870               	movf	i1___awmod@divisor,w
 10870  0AF7  0272               	subwf	i1___awmod@dividend,w
 10871  0AF8                     u288_25:	
 10872  0AF8  1C03               	skipc
 10873  0AF9  2AFE               	goto	i1l3109
 10874  0AFA  0870               	movf	i1___awmod@divisor,w
 10875  0AFB  02F2               	subwf	i1___awmod@dividend,f
 10876  0AFC  0871               	movf	i1___awmod@divisor+1,w
 10877  0AFD  3BF3               	subwfb	i1___awmod@dividend+1,f
 10878  0AFE                     i1l3109:	
 10879  0AFE  3001               	movlw	1
 10880  0AFF                     u289_25:	
 10881  0AFF  36F1               	lsrf	i1___awmod@divisor+1,f
 10882  0B00  0CF0               	rrf	i1___awmod@divisor,f
 10883  0B01  0B89               	decfsz	9,f
 10884  0B02  2AFF               	goto	u289_25
 10885  0B03  3001               	movlw	1
 10886  0B04  02F5               	subwf	i1___awmod@counter,f
 10887  0B05  1D03               	btfss	3,2
 10888  0B06  2AF2               	goto	i1l3105
 10889  0B07                     i1l3113:	
 10890  0B07  0876               	movf	i1___awmod@sign,w
 10891  0B08  1903               	btfsc	3,2
 10892  0B09  2B0F               	goto	i1l3117
 10893  0B0A  09F2               	comf	i1___awmod@dividend,f
 10894  0B0B  09F3               	comf	i1___awmod@dividend+1,f
 10895  0B0C  0AF2               	incf	i1___awmod@dividend,f
 10896  0B0D  1903               	skipnz
 10897  0B0E  0AF3               	incf	i1___awmod@dividend+1,f
 10898  0B0F                     i1l3117:	
 10899  0B0F  0873               	movf	i1___awmod@dividend+1,w
 10900  0B10  00F1               	movwf	?i1___awmod+1
 10901  0B11  0872               	movf	i1___awmod@dividend,w
 10902  0B12  00F0               	movwf	?i1___awmod
 10903  0B13  0008               	return
 10904  0B14                     __end_ofi1___awmod:	
 10905                           
 10906                           	psect	text56
 10907  0B9F                     __ptext56:	
 10908 ;; *************** function i1___awdiv *****************
 10909 ;; Defined at:
 10910 ;;		line 5 in file "E:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\awdiv.c"
 10911 ;; Parameters:    Size  Location     Type
 10912 ;;  divisor         2    0[COMMON] int 
 10913 ;;  dividend        2    2[COMMON] int 
 10914 ;; Auto vars:     Size  Location     Type
 10915 ;;  __awdiv         2    7[COMMON] int 
 10916 ;;  __awdiv         1    6[COMMON] unsigned char 
 10917 ;;  __awdiv         1    5[COMMON] unsigned char 
 10918 ;; Return value:  Size  Location     Type
 10919 ;;                  2    0[COMMON] int 
 10920 ;; Registers used:
 10921 ;;		wreg, status,2, status,0
 10922 ;; Tracked objects:
 10923 ;;		On entry : 0/0
 10924 ;;		On exit  : 0/0
 10925 ;;		Unchanged: 0/0
 10926 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10927 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10928 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10929 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10930 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10931 ;;Total ram usage:        9 bytes
 10932 ;; Hardware stack levels used:    1
 10933 ;; This function calls:
 10934 ;;		Nothing
 10935 ;; This function is called by:
 10936 ;;		i1_display_update
 10937 ;; This function uses a non-reentrant model
 10938 ;;
 10939                           
 10940                           
 10941                           ;psect for function i1___awdiv
 10942  0B9F                     i1___awdiv:	
 10943                           
 10944                           ;incstack = 0
 10945                           ; Regs used in i1___awdiv: [wreg+status,2+status,0]
 10946  0B9F  01F6               	clrf	i1___awdiv@sign
 10947  0BA0  1FF1               	btfss	i1___awdiv@divisor+1,7
 10948  0BA1  2BA9               	goto	i1l3047
 10949  0BA2  09F0               	comf	i1___awdiv@divisor,f
 10950  0BA3  09F1               	comf	i1___awdiv@divisor+1,f
 10951  0BA4  0AF0               	incf	i1___awdiv@divisor,f
 10952  0BA5  1903               	skipnz
 10953  0BA6  0AF1               	incf	i1___awdiv@divisor+1,f
 10954  0BA7  01F6               	clrf	i1___awdiv@sign
 10955  0BA8  0AF6               	incf	i1___awdiv@sign,f
 10956  0BA9                     i1l3047:	
 10957  0BA9  1FF3               	btfss	i1___awdiv@dividend+1,7
 10958  0BAA  2BB4               	goto	i1l3053
 10959  0BAB  09F2               	comf	i1___awdiv@dividend,f
 10960  0BAC  09F3               	comf	i1___awdiv@dividend+1,f
 10961  0BAD  0AF2               	incf	i1___awdiv@dividend,f
 10962  0BAE  1903               	skipnz
 10963  0BAF  0AF3               	incf	i1___awdiv@dividend+1,f
 10964  0BB0  3001               	movlw	1
 10965  0BB1  00F4               	movwf	??i1___awdiv
 10966  0BB2  0874               	movf	??i1___awdiv,w
 10967  0BB3  06F6               	xorwf	i1___awdiv@sign,f
 10968  0BB4                     i1l3053:	
 10969  0BB4  01F7               	clrf	i1___awdiv@quotient
 10970  0BB5  01F8               	clrf	i1___awdiv@quotient+1
 10971  0BB6  0870               	movf	i1___awdiv@divisor,w
 10972  0BB7  0471               	iorwf	i1___awdiv@divisor+1,w
 10973  0BB8  1903               	btfsc	3,2
 10974  0BB9  2BE3               	goto	i1l3075
 10975  0BBA  01F5               	clrf	i1___awdiv@counter
 10976  0BBB  0AF5               	incf	i1___awdiv@counter,f
 10977  0BBC                     i1l3063:	
 10978  0BBC  1BF1               	btfsc	i1___awdiv@divisor+1,7
 10979  0BBD  2BC8               	goto	i1l3065
 10980  0BBE  3001               	movlw	1
 10981  0BBF                     u276_25:	
 10982  0BBF  35F0               	lslf	i1___awdiv@divisor,f
 10983  0BC0  0DF1               	rlf	i1___awdiv@divisor+1,f
 10984  0BC1  0B89               	decfsz	9,f
 10985  0BC2  2BBF               	goto	u276_25
 10986  0BC3  3001               	movlw	1
 10987  0BC4  00F4               	movwf	??i1___awdiv
 10988  0BC5  0874               	movf	??i1___awdiv,w
 10989  0BC6  07F5               	addwf	i1___awdiv@counter,f
 10990  0BC7  2BBC               	goto	i1l3063
 10991  0BC8                     i1l3065:	
 10992  0BC8  3001               	movlw	1
 10993  0BC9                     u278_25:	
 10994  0BC9  35F7               	lslf	i1___awdiv@quotient,f
 10995  0BCA  0DF8               	rlf	i1___awdiv@quotient+1,f
 10996  0BCB  0B89               	decfsz	9,f
 10997  0BCC  2BC9               	goto	u278_25
 10998  0BCD  0871               	movf	i1___awdiv@divisor+1,w
 10999  0BCE  0273               	subwf	i1___awdiv@dividend+1,w
 11000  0BCF  1D03               	skipz
 11001  0BD0  2BD3               	goto	u279_25
 11002  0BD1  0870               	movf	i1___awdiv@divisor,w
 11003  0BD2  0272               	subwf	i1___awdiv@dividend,w
 11004  0BD3                     u279_25:	
 11005  0BD3  1C03               	skipc
 11006  0BD4  2BDA               	goto	i1l3071
 11007  0BD5  0870               	movf	i1___awdiv@divisor,w
 11008  0BD6  02F2               	subwf	i1___awdiv@dividend,f
 11009  0BD7  0871               	movf	i1___awdiv@divisor+1,w
 11010  0BD8  3BF3               	subwfb	i1___awdiv@dividend+1,f
 11011  0BD9  1477               	bsf	i1___awdiv@quotient,0
 11012  0BDA                     i1l3071:	
 11013  0BDA  3001               	movlw	1
 11014  0BDB                     u280_25:	
 11015  0BDB  36F1               	lsrf	i1___awdiv@divisor+1,f
 11016  0BDC  0CF0               	rrf	i1___awdiv@divisor,f
 11017  0BDD  0B89               	decfsz	9,f
 11018  0BDE  2BDB               	goto	u280_25
 11019  0BDF  3001               	movlw	1
 11020  0BE0  02F5               	subwf	i1___awdiv@counter,f
 11021  0BE1  1D03               	btfss	3,2
 11022  0BE2  2BC8               	goto	i1l3065
 11023  0BE3                     i1l3075:	
 11024  0BE3  0876               	movf	i1___awdiv@sign,w
 11025  0BE4  1903               	btfsc	3,2
 11026  0BE5  2BEB               	goto	i1l3079
 11027  0BE6  09F7               	comf	i1___awdiv@quotient,f
 11028  0BE7  09F8               	comf	i1___awdiv@quotient+1,f
 11029  0BE8  0AF7               	incf	i1___awdiv@quotient,f
 11030  0BE9  1903               	skipnz
 11031  0BEA  0AF8               	incf	i1___awdiv@quotient+1,f
 11032  0BEB                     i1l3079:	
 11033  0BEB  0878               	movf	i1___awdiv@quotient+1,w
 11034  0BEC  00F1               	movwf	?i1___awdiv+1
 11035  0BED  0877               	movf	i1___awdiv@quotient,w
 11036  0BEE  00F0               	movwf	?i1___awdiv
 11037  0BEF  0008               	return
 11038  0BF0                     __end_ofi1___awdiv:	
 11039                           
 11040                           	psect	text57
 11041  089C                     __ptext57:	
 11042 ;; *************** function i1_capture_Set *****************
 11043 ;; Defined at:
 11044 ;;		line 38 in file "hardware.c"
 11045 ;; Parameters:    Size  Location     Type
 11046 ;;  isON            1    wreg     unsigned char 
 11047 ;; Auto vars:     Size  Location     Type
 11048 ;;  isON            1    0[COMMON] unsigned char 
 11049 ;; Return value:  Size  Location     Type
 11050 ;;                  1    wreg      unsigned char 
 11051 ;; Registers used:
 11052 ;;		wreg, status,2, status,0
 11053 ;; Tracked objects:
 11054 ;;		On entry : 0/0
 11055 ;;		On exit  : 0/0
 11056 ;;		Unchanged: 0/0
 11057 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11058 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11059 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11060 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11061 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11062 ;;Total ram usage:        1 bytes
 11063 ;; Hardware stack levels used:    1
 11064 ;; This function calls:
 11065 ;;		Nothing
 11066 ;; This function is called by:
 11067 ;;		_ISR
 11068 ;;		_bpc_proc
 11069 ;;		_update_time
 11070 ;; This function uses a non-reentrant model
 11071 ;;
 11072                           
 11073                           
 11074                           ;psect for function i1_capture_Set
 11075  089C                     i1_capture_Set:	
 11076                           
 11077                           ;incstack = 0
 11078                           ; Regs used in i1_capture_Set: [wreg+status,2+status,0]
 11079                           ;i1capture_Set@isON stored from wreg
 11080  089C  00F0               	movwf	i1capture_Set@isON
 11081                           
 11082                           ;hardware.c: 38: u8 capture_Set(u8 isON);hardware.c: 39: {;hardware.c: 42:     PIR2bits.
      +                          CCP2IF = 0;
 11083  089D  0020               	movlb	0	; select bank0
 11084  089E  1012               	bcf	18,0	;volatile
 11085                           
 11086                           ;hardware.c: 45:     PIE2bits.CCP2IE = (isON)? 1 : 0;
 11087  089F  0870               	movf	i1capture_Set@isON,w
 11088  08A0  1903               	btfsc	3,2
 11089  08A1  28A5               	goto	u319_20
 11090  08A2  0021               	movlb	1	; select bank1
 11091  08A3  1412               	bsf	18,0	;volatile
 11092  08A4  0008               	return
 11093  08A5                     u319_20:	
 11094  08A5  0021               	movlb	1	; select bank1
 11095  08A6  1012               	bcf	18,0	;volatile
 11096  08A7  0008               	return
 11097  08A8                     __end_ofi1_capture_Set:	
 11098                           
 11099                           	psect	text58
 11100  057F                     __ptext58:	
 11101 ;; *************** function _check_err *****************
 11102 ;; Defined at:
 11103 ;;		line 50 in file "bpc.c"
 11104 ;; Parameters:    Size  Location     Type
 11105 ;;  pdata           1    wreg     PTR volatile struct .
 11106 ;;		 -> g_data(39), 
 11107 ;; Auto vars:     Size  Location     Type
 11108 ;;  pdata           1   10[BANK0 ] PTR volatile struct .
 11109 ;;		 -> g_data(39), 
 11110 ;;  i               1    8[BANK0 ] unsigned char 
 11111 ;;  check           1    9[BANK0 ] unsigned char 
 11112 ;; Return value:  Size  Location     Type
 11113 ;;                  2    0[COMMON] int 
 11114 ;; Registers used:
 11115 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 11116 ;; Tracked objects:
 11117 ;;		On entry : 0/0
 11118 ;;		On exit  : 0/0
 11119 ;;		Unchanged: 0/0
 11120 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11121 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11122 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11123 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11124 ;;      Totals:         5      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11125 ;;Total ram usage:       16 bytes
 11126 ;; Hardware stack levels used:    1
 11127 ;; This function calls:
 11128 ;;		Nothing
 11129 ;; This function is called by:
 11130 ;;		_bpc_proc
 11131 ;; This function uses a non-reentrant model
 11132 ;;
 11133                           
 11134                           
 11135                           ;psect for function _check_err
 11136  057F                     _check_err:	
 11137                           
 11138                           ;incstack = 0
 11139                           ; Regs used in _check_err: [wreg-fsr1h+status,2+status,0]
 11140                           ;check_err@pdata stored from wreg
 11141  057F  0020               	movlb	0	; select bank0
 11142  0580  00AA               	movwf	check_err@pdata
 11143                           
 11144                           ;bpc.c: 50: static int check_err(G_DATA *pdata);bpc.c: 51: {;bpc.c: 53:     pdata->g_tim
      +                          e_h = pdata->g_recv_buf[CODE_H_1] * 4 + pdata->g_recv_buf[CODE_H_2];
 11145  0581  082A               	movf	check_err@pdata,w
 11146  0582  3E11               	addlw	17
 11147  0583  0086               	movwf	6
 11148  0584  3002               	movlw	2	; select bank4/5
 11149  0585  0087               	movwf	7
 11150  0586  082A               	movf	check_err@pdata,w
 11151  0587  3E10               	addlw	16
 11152  0588  0084               	movwf	4
 11153  0589  3002               	movlw	2	; select bank4/5
 11154  058A  0085               	movwf	5
 11155  058B  0800               	movf	0,w
 11156  058C  00F2               	movwf	??_check_err
 11157  058D  3001               	movlw	1
 11158  058E                     u345_25:	
 11159  058E  35F2               	lslf	??_check_err,f
 11160  058F  3EFF               	addlw	-1
 11161  0590  1D03               	skipz
 11162  0591  2D8E               	goto	u345_25
 11163  0592  3572               	lslf	??_check_err,w
 11164  0593  0701               	addwf	1,w
 11165  0594  00F3               	movwf	??_check_err+1
 11166  0595  082A               	movf	check_err@pdata,w
 11167  0596  3E03               	addlw	3
 11168  0597  0086               	movwf	6
 11169  0598  3002               	movlw	2	; select bank4/5
 11170  0599  0087               	movwf	7
 11171  059A  0873               	movf	??_check_err+1,w
 11172  059B  0081               	movwf	1
 11173                           
 11174                           ;bpc.c: 54:     pdata->g_time_m = pdata->g_recv_buf[CODE_M_1] * 16 + pdata->g_recv_buf[C
      +                          ODE_M_2] * 4 + pdata->g_recv_buf[CODE_M_3];
 11175  059C  082A               	movf	check_err@pdata,w
 11176  059D  3E14               	addlw	20
 11177  059E  0086               	movwf	6
 11178  059F  3002               	movlw	2	; select bank4/5
 11179  05A0  0087               	movwf	7
 11180  05A1  082A               	movf	check_err@pdata,w
 11181  05A2  3E13               	addlw	19
 11182  05A3  0084               	movwf	4
 11183  05A4  3002               	movlw	2	; select bank4/5
 11184  05A5  0085               	movwf	5
 11185  05A6  0800               	movf	0,w
 11186  05A7  00F2               	movwf	??_check_err
 11187  05A8  3002               	movlw	2
 11188  05A9                     u346_25:	
 11189  05A9  35F2               	lslf	??_check_err,f
 11190  05AA  0B89               	decfsz	9,f
 11191  05AB  2DA9               	goto	u346_25
 11192  05AC  082A               	movf	check_err@pdata,w
 11193  05AD  3E12               	addlw	18
 11194  05AE  0084               	movwf	4
 11195  05AF  3002               	movlw	2	; select bank4/5
 11196  05B0  0085               	movwf	5
 11197  05B1  0800               	movf	0,w
 11198  05B2  00F3               	movwf	??_check_err+1
 11199  05B3  3003               	movlw	3
 11200  05B4                     u347_25:	
 11201  05B4  35F3               	lslf	??_check_err+1,f
 11202  05B5  3EFF               	addlw	-1
 11203  05B6  1D03               	skipz
 11204  05B7  2DB4               	goto	u347_25
 11205  05B8  3573               	lslf	??_check_err+1,w
 11206  05B9  0772               	addwf	??_check_err,w
 11207  05BA  0701               	addwf	1,w
 11208  05BB  00F4               	movwf	??_check_err+2
 11209  05BC  082A               	movf	check_err@pdata,w
 11210  05BD  3E04               	addlw	4
 11211  05BE  0086               	movwf	6
 11212  05BF  3002               	movlw	2	; select bank4/5
 11213  05C0  0087               	movwf	7
 11214  05C1  0874               	movf	??_check_err+2,w
 11215  05C2  0081               	movwf	1
 11216                           
 11217                           ;bpc.c: 55:     pdata->g_time_s = 10 + ((pdata->g_recv_buf[CODE_P1] == 1)? 20: (pdata->g
      +                          _recv_buf[CODE_P1] == 2)? 40: 0);
 11218  05C3  082A               	movf	check_err@pdata,w
 11219  05C4  3E0E               	addlw	14
 11220  05C5  0086               	movwf	6
 11221  05C6  3002               	movlw	2	; select bank4/5
 11222  05C7  0087               	movwf	7
 11223  05C8  0301               	decf	1,w
 11224  05C9  1903               	btfsc	3,2
 11225  05CA  2DE0               	goto	i1l3539
 11226  05CB  082A               	movf	check_err@pdata,w
 11227  05CC  3E0E               	addlw	14
 11228  05CD  0086               	movwf	6
 11229  05CE  3002               	movlw	2	; select bank4/5
 11230  05CF  0087               	movwf	7
 11231  05D0  3002               	movlw	2
 11232  05D1  0601               	xorwf	1,w
 11233  05D2  1903               	btfsc	3,2
 11234  05D3  2DD7               	goto	i1l3537
 11235  05D4  01A2               	clrf	_check_err$1121
 11236  05D5  01A3               	clrf	_check_err$1121+1
 11237  05D6  2DDB               	goto	i1l421
 11238  05D7                     i1l3537:	
 11239  05D7  3028               	movlw	40
 11240  05D8  00A2               	movwf	_check_err$1121
 11241  05D9  3000               	movlw	0
 11242  05DA  00A3               	movwf	_check_err$1121+1
 11243  05DB                     i1l421:	
 11244  05DB  0823               	movf	_check_err$1121+1,w
 11245  05DC  00A1               	movwf	_check_err$1120+1
 11246  05DD  0822               	movf	_check_err$1121,w
 11247  05DE  00A0               	movwf	_check_err$1120
 11248  05DF  2DE4               	goto	i1l3541
 11249  05E0                     i1l3539:	
 11250  05E0  3014               	movlw	20
 11251  05E1  00A0               	movwf	_check_err$1120
 11252  05E2  3000               	movlw	0
 11253  05E3  00A1               	movwf	_check_err$1120+1
 11254  05E4                     i1l3541:	
 11255  05E4  0820               	movf	_check_err$1120,w
 11256  05E5  3E0A               	addlw	10
 11257  05E6  00F2               	movwf	??_check_err
 11258  05E7  082A               	movf	check_err@pdata,w
 11259  05E8  3E05               	addlw	5
 11260  05E9  0086               	movwf	6
 11261  05EA  3002               	movlw	2	; select bank4/5
 11262  05EB  0087               	movwf	7
 11263  05EC  0872               	movf	??_check_err,w
 11264  05ED  0081               	movwf	1
 11265                           
 11266                           ;bpc.c: 57:     u8 check = 0;
 11267  05EE  01A9               	clrf	check_err@check
 11268                           
 11269                           ;bpc.c: 58:     for(u8 i = CODE_P1; i < CODE_P3; i++)
 11270  05EF  01A8               	clrf	check_err@i
 11271  05F0  0AA8               	incf	check_err@i,f
 11272  05F1                     i1l3551:	
 11273                           
 11274                           ;bpc.c: 59:     {;bpc.c: 60:         check ^= pdata->g_recv_buf[i];
 11275  05F1  0828               	movf	check_err@i,w
 11276  05F2  072A               	addwf	check_err@pdata,w
 11277  05F3  00F2               	movwf	??_check_err
 11278  05F4  0872               	movf	??_check_err,w
 11279  05F5  3E0D               	addlw	13
 11280  05F6  0086               	movwf	6
 11281  05F7  3002               	movlw	2	; select bank4/5
 11282  05F8  0087               	movwf	7
 11283  05F9  0801               	movf	1,w
 11284  05FA  00F3               	movwf	??_check_err+1
 11285  05FB  0873               	movf	??_check_err+1,w
 11286  05FC  06A9               	xorwf	check_err@check,f
 11287                           
 11288                           ;bpc.c: 61:     }
 11289  05FD  3001               	movlw	1
 11290  05FE  00F2               	movwf	??_check_err
 11291  05FF  0872               	movf	??_check_err,w
 11292  0600  07A8               	addwf	check_err@i,f
 11293  0601  300A               	movlw	10
 11294  0602  0228               	subwf	check_err@i,w
 11295  0603  1C03               	skipc
 11296  0604  2DF1               	goto	i1l3551
 11297                           
 11298                           ;bpc.c: 62:     if( (((0 == check) || (3 == check))) && (pdata->g_recv_buf[CODE_P3] % 2 
      +                          == 0) )
 11299  0605  0829               	movf	check_err@check,w
 11300  0606  1903               	btfsc	3,2
 11301  0607  2E0C               	goto	i1l3561
 11302  0608  3003               	movlw	3
 11303  0609  0629               	xorwf	check_err@check,w
 11304  060A  1D03               	btfss	3,2
 11305  060B  2E25               	goto	i1l3571
 11306  060C                     i1l3561:	
 11307  060C  082A               	movf	check_err@pdata,w
 11308  060D  3E17               	addlw	23
 11309  060E  0086               	movwf	6
 11310  060F  3002               	movlw	2	; select bank4/5
 11311  0610  0087               	movwf	7
 11312  0611  1801               	btfsc	1,0
 11313  0612  2E25               	goto	i1l3571
 11314                           
 11315                           ;bpc.c: 63:     {;bpc.c: 64:         pdata->g_time_h += (2 ==pdata->g_recv_buf[CODE_P3])
      +                          ? 12 : 0;
 11316  0613  082A               	movf	check_err@pdata,w
 11317  0614  3E17               	addlw	23
 11318  0615  0086               	movwf	6
 11319  0616  3002               	movlw	2	; select bank4/5
 11320  0617  0087               	movwf	7
 11321  0618  3002               	movlw	2
 11322  0619  0601               	xorwf	1,w
 11323  061A  1903               	btfsc	3,2
 11324  061B  2E1F               	goto	i1l3567
 11325  061C  01A4               	clrf	_check_err$1124
 11326  061D  01A5               	clrf	_check_err$1124+1
 11327  061E  2E23               	goto	i1l3569
 11328  061F                     i1l3567:	
 11329  061F  300C               	movlw	12
 11330  0620  00A4               	movwf	_check_err$1124
 11331  0621  3000               	movlw	0
 11332  0622  00A5               	movwf	_check_err$1124+1
 11333  0623                     i1l3569:	
 11334  0623  0824               	movf	_check_err$1124,w
 11335  0624  2E4E               	goto	L4
 11336  0625                     i1l3571:	
 11337                           ;bpc.c: 65:     }else if( (((1 == check) || (2 == check))) && ((pdata->g_recv_buf[CODE_P
      +                          3] == 1) || (pdata->g_recv_buf[CODE_P3] == 3)) )
 11338                           
 11339  0625  0329               	decf	check_err@check,w
 11340  0626  1903               	btfsc	3,2
 11341  0627  2E2C               	goto	i1l3575
 11342  0628  3002               	movlw	2
 11343  0629  0629               	xorwf	check_err@check,w
 11344  062A  1D03               	btfss	3,2
 11345  062B  2E57               	goto	i1l3587
 11346  062C                     i1l3575:	
 11347  062C  082A               	movf	check_err@pdata,w
 11348  062D  3E17               	addlw	23
 11349  062E  0086               	movwf	6
 11350  062F  3002               	movlw	2	; select bank4/5
 11351  0630  0087               	movwf	7
 11352  0631  0301               	decf	1,w
 11353  0632  1903               	btfsc	3,2
 11354  0633  2E3D               	goto	i1l3579
 11355  0634  082A               	movf	check_err@pdata,w
 11356  0635  3E17               	addlw	23
 11357  0636  0086               	movwf	6
 11358  0637  3002               	movlw	2	; select bank4/5
 11359  0638  0087               	movwf	7
 11360  0639  3003               	movlw	3
 11361  063A  0601               	xorwf	1,w
 11362  063B  1D03               	btfss	3,2
 11363  063C  2E57               	goto	i1l3587
 11364  063D                     i1l3579:	
 11365                           
 11366                           ;bpc.c: 67:     {;bpc.c: 68:         pdata->g_time_h += (3 ==pdata->g_recv_buf[CODE_P3])
      +                          ? 12 : 0;
 11367  063D  082A               	movf	check_err@pdata,w
 11368  063E  3E17               	addlw	23
 11369  063F  0086               	movwf	6
 11370  0640  3002               	movlw	2	; select bank4/5
 11371  0641  0087               	movwf	7
 11372  0642  3003               	movlw	3
 11373  0643  0601               	xorwf	1,w
 11374  0644  1903               	btfsc	3,2
 11375  0645  2E49               	goto	i1l3583
 11376  0646  01A6               	clrf	_check_err$1125
 11377  0647  01A7               	clrf	_check_err$1125+1
 11378  0648  2E4D               	goto	i1l3585
 11379  0649                     i1l3583:	
 11380  0649  300C               	movlw	12
 11381  064A  00A6               	movwf	_check_err$1125
 11382  064B  3000               	movlw	0
 11383  064C  00A7               	movwf	_check_err$1125+1
 11384  064D                     i1l3585:	
 11385  064D  0826               	movf	_check_err$1125,w
 11386  064E                     L4:	
 11387  064E  00F2               	movwf	??_check_err
 11388  064F  082A               	movf	check_err@pdata,w
 11389  0650  3E03               	addlw	3
 11390  0651  0086               	movwf	6
 11391  0652  3002               	movlw	2	; select bank4/5
 11392  0653  0087               	movwf	7
 11393  0654  0872               	movf	??_check_err,w
 11394  0655  0781               	addwf	1,f
 11395                           
 11396                           ;bpc.c: 69:     }
 11397  0656  2E6F               	goto	i1l3597
 11398  0657                     i1l3587:	
 11399                           
 11400                           ;bpc.c: 71:     {;bpc.c: 72:         pdata->g_find_recv_start = FALSE;
 11401  0657  082A               	movf	check_err@pdata,w
 11402  0658  3E02               	addlw	2
 11403  0659  0086               	movwf	6
 11404  065A  3002               	movlw	2	; select bank4/5
 11405  065B  0087               	movwf	7
 11406  065C  0181               	clrf	1
 11407                           
 11408                           ;bpc.c: 73:         pdata->g_isDecoding = 0;
 11409  065D  0A2A               	incf	check_err@pdata,w
 11410  065E  0086               	movwf	6
 11411  065F  3002               	movlw	2	; select bank4/5
 11412  0660  0087               	movwf	7
 11413  0661  0181               	clrf	1
 11414                           
 11415                           ;bpc.c: 74:         pdata->g_recv_count = 0;
 11416  0662  082A               	movf	check_err@pdata,w
 11417  0663  3E0B               	addlw	11
 11418  0664  0086               	movwf	6
 11419  0665  3002               	movlw	2	; select bank4/5
 11420  0666  0087               	movwf	7
 11421  0667  3000               	movlw	0
 11422  0668  3FC0               	movwi [0]fsr1
 11423  0669  3FC1               	movwi [1]fsr1
 11424                           
 11425                           ;bpc.c: 75:         return -1;
 11426  066A  30FF               	movlw	255
 11427  066B  00F0               	movwf	?_check_err
 11428  066C  30FF               	movlw	255
 11429  066D  00F1               	movwf	?_check_err+1
 11430  066E  0008               	return
 11431  066F                     i1l3597:	
 11432                           
 11433                           ;bpc.c: 77:     return 0;
 11434  066F  01F0               	clrf	?_check_err
 11435  0670  01F1               	clrf	?_check_err+1
 11436  0671  0008               	return
 11437  0672                     __end_of_check_err:	
 11438                           
 11439                           	psect	text59
 11440  0D7C                     __ptext59:	
 11441 ;; *************** function _bpc_Cnt2Qua *****************
 11442 ;; Defined at:
 11443 ;;		line 22 in file "bpc.c"
 11444 ;; Parameters:    Size  Location     Type
 11445 ;;		None
 11446 ;; Auto vars:     Size  Location     Type
 11447 ;;  pdata           1    6[COMMON] PTR volatile struct .
 11448 ;;		 -> g_data(39), 
 11449 ;; Return value:  Size  Location     Type
 11450 ;;                  1    wreg      unsigned char 
 11451 ;; Registers used:
 11452 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11453 ;; Tracked objects:
 11454 ;;		On entry : 0/0
 11455 ;;		On exit  : 0/0
 11456 ;;		Unchanged: 0/0
 11457 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11458 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11459 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11460 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11461 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11462 ;;Total ram usage:        3 bytes
 11463 ;; Hardware stack levels used:    1
 11464 ;; Hardware stack levels required when called:    1
 11465 ;; This function calls:
 11466 ;;		_capture_IsNegEdge
 11467 ;;		_cnt_abs
 11468 ;;		i1_data_getdata
 11469 ;; This function is called by:
 11470 ;;		_bpc_proc
 11471 ;; This function uses a non-reentrant model
 11472 ;;
 11473                           
 11474                           
 11475                           ;psect for function _bpc_Cnt2Qua
 11476  0D7C                     _bpc_Cnt2Qua:	
 11477                           
 11478                           ;bpc.c: 24:     G_DATA *pdata = data_getdata();
 11479                           
 11480                           ;incstack = 0
 11481                           ; Regs used in _bpc_Cnt2Qua: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11482  0D7C  3188  2012  318D   	fcall	i1_data_getdata
 11483  0D7F  00F4               	movwf	??_bpc_Cnt2Qua
 11484  0D80  0874               	movf	??_bpc_Cnt2Qua,w
 11485  0D81  00F6               	movwf	bpc_Cnt2Qua@pdata
 11486                           
 11487                           ;bpc.c: 25:     if(capture_IsNegEdge()){
 11488  0D82  3188  205C  318D   	fcall	_capture_IsNegEdge
 11489  0D85  3A00               	xorlw	0
 11490  0D86  1903               	skipnz
 11491  0D87  2D9C               	goto	i1l3493
 11492                           
 11493                           ;bpc.c: 27:         if(pdata->cnt_low > 31030 - 1550){
 11494  0D88  0876               	movf	bpc_Cnt2Qua@pdata,w
 11495  0D89  3E25               	addlw	37
 11496  0D8A  0086               	movwf	6
 11497  0D8B  3002               	movlw	2	; select bank4/5
 11498  0D8C  0087               	movwf	7
 11499  0D8D  3F40               	moviw [0]fsr1
 11500  0D8E  00F4               	movwf	??_bpc_Cnt2Qua
 11501  0D8F  3F41               	moviw [1]fsr1
 11502  0D90  00F5               	movwf	??_bpc_Cnt2Qua+1
 11503  0D91  3073               	movlw	115
 11504  0D92  0275               	subwf	??_bpc_Cnt2Qua+1,w
 11505  0D93  3029               	movlw	41
 11506  0D94  1903               	skipnz
 11507  0D95  0274               	subwf	??_bpc_Cnt2Qua,w
 11508  0D96  1C03               	skipc
 11509  0D97  2D9A               	goto	i1l3489
 11510                           
 11511                           ;bpc.c: 28:             return 5;
 11512  0D98  3005               	movlw	5
 11513  0D99  0008               	return
 11514  0D9A                     i1l3489:	
 11515                           
 11516                           ;bpc.c: 30:             return 6;
 11517  0D9A  3006               	movlw	6
 11518  0D9B  0008               	return
 11519  0D9C                     i1l3493:	
 11520                           
 11521                           ;bpc.c: 35:         if(cnt_abs(pdata->cnt_high, 3103) < 1550){
 11522  0D9C  0876               	movf	bpc_Cnt2Qua@pdata,w
 11523  0D9D  3E23               	addlw	35
 11524  0D9E  0086               	movwf	6
 11525  0D9F  3002               	movlw	2	; select bank4/5
 11526  0DA0  0087               	movwf	7
 11527  0DA1  3F40               	moviw [0]fsr1
 11528  0DA2  00F0               	movwf	cnt_abs@a
 11529  0DA3  3F41               	moviw [1]fsr1
 11530  0DA4  00F1               	movwf	cnt_abs@a+1
 11531  0DA5  301F               	movlw	31
 11532  0DA6  00F2               	movwf	cnt_abs@b
 11533  0DA7  300C               	movlw	12
 11534  0DA8  00F3               	movwf	cnt_abs@b+1
 11535  0DA9  3188  20F3  318D   	fcall	_cnt_abs
 11536  0DAC  3006               	movlw	6
 11537  0DAD  0271               	subwf	?_cnt_abs+1,w
 11538  0DAE  300E               	movlw	14
 11539  0DAF  1903               	skipnz
 11540  0DB0  0270               	subwf	?_cnt_abs,w
 11541  0DB1  1803               	skipnc
 11542  0DB2  2DB5               	goto	i1l3501
 11543                           
 11544                           ;bpc.c: 36:             return 0;
 11545  0DB3  3000               	movlw	0
 11546  0DB4  0008               	return
 11547  0DB5                     i1l3501:	
 11548  0DB5  0876               	movf	bpc_Cnt2Qua@pdata,w
 11549  0DB6  3E23               	addlw	35
 11550  0DB7  0086               	movwf	6
 11551  0DB8  3002               	movlw	2	; select bank4/5
 11552  0DB9  0087               	movwf	7
 11553  0DBA  3F40               	moviw [0]fsr1
 11554  0DBB  00F0               	movwf	cnt_abs@a
 11555  0DBC  3F41               	moviw [1]fsr1
 11556  0DBD  00F1               	movwf	cnt_abs@a+1
 11557  0DBE  3040               	movlw	64
 11558  0DBF  00F2               	movwf	cnt_abs@b
 11559  0DC0  3018               	movlw	24
 11560  0DC1  00F3               	movwf	cnt_abs@b+1
 11561  0DC2  3188  20F3  318D   	fcall	_cnt_abs
 11562  0DC5  3006               	movlw	6
 11563  0DC6  0271               	subwf	?_cnt_abs+1,w
 11564  0DC7  300E               	movlw	14
 11565  0DC8  1903               	skipnz
 11566  0DC9  0270               	subwf	?_cnt_abs,w
 11567  0DCA  1803               	skipnc
 11568  0DCB  2DCE               	goto	i1l3509
 11569                           
 11570                           ;bpc.c: 38:             return 1;
 11571  0DCC  3001               	movlw	1
 11572  0DCD  0008               	return
 11573  0DCE                     i1l3509:	
 11574  0DCE  0876               	movf	bpc_Cnt2Qua@pdata,w
 11575  0DCF  3E23               	addlw	35
 11576  0DD0  0086               	movwf	6
 11577  0DD1  3002               	movlw	2	; select bank4/5
 11578  0DD2  0087               	movwf	7
 11579  0DD3  3F40               	moviw [0]fsr1
 11580  0DD4  00F0               	movwf	cnt_abs@a
 11581  0DD5  3F41               	moviw [1]fsr1
 11582  0DD6  00F1               	movwf	cnt_abs@a+1
 11583  0DD7  305F               	movlw	95
 11584  0DD8  00F2               	movwf	cnt_abs@b
 11585  0DD9  3024               	movlw	36
 11586  0DDA  00F3               	movwf	cnt_abs@b+1
 11587  0DDB  3188  20F3  318D   	fcall	_cnt_abs
 11588  0DDE  3006               	movlw	6
 11589  0DDF  0271               	subwf	?_cnt_abs+1,w
 11590  0DE0  300E               	movlw	14
 11591  0DE1  1903               	skipnz
 11592  0DE2  0270               	subwf	?_cnt_abs,w
 11593  0DE3  1803               	skipnc
 11594  0DE4  2DE7               	goto	i1l3517
 11595                           
 11596                           ;bpc.c: 40:             return 2;
 11597  0DE5  3002               	movlw	2
 11598  0DE6  0008               	return
 11599  0DE7                     i1l3517:	
 11600  0DE7  0876               	movf	bpc_Cnt2Qua@pdata,w
 11601  0DE8  3E23               	addlw	35
 11602  0DE9  0086               	movwf	6
 11603  0DEA  3002               	movlw	2	; select bank4/5
 11604  0DEB  0087               	movwf	7
 11605  0DEC  3F40               	moviw [0]fsr1
 11606  0DED  00F0               	movwf	cnt_abs@a
 11607  0DEE  3F41               	moviw [1]fsr1
 11608  0DEF  00F1               	movwf	cnt_abs@a+1
 11609  0DF0  3081               	movlw	129
 11610  0DF1  00F2               	movwf	cnt_abs@b
 11611  0DF2  3030               	movlw	48
 11612  0DF3  00F3               	movwf	cnt_abs@b+1
 11613  0DF4  3188  20F3  318D   	fcall	_cnt_abs
 11614  0DF7  3006               	movlw	6
 11615  0DF8  0271               	subwf	?_cnt_abs+1,w
 11616  0DF9  300E               	movlw	14
 11617  0DFA  1903               	skipnz
 11618  0DFB  0270               	subwf	?_cnt_abs,w
 11619  0DFC  1803               	skipnc
 11620  0DFD  2E00               	goto	i1l3525
 11621                           
 11622                           ;bpc.c: 42:             return 3;
 11623  0DFE  3003               	movlw	3
 11624  0DFF  0008               	return
 11625  0E00                     i1l3525:	
 11626                           
 11627                           ;bpc.c: 44:             return 4;
 11628  0E00  3004               	movlw	4
 11629  0E01  0008               	return
 11630  0E02                     __end_of_bpc_Cnt2Qua:	
 11631                           
 11632                           	psect	text60
 11633  0812                     __ptext60:	
 11634 ;; *************** function i1_data_getdata *****************
 11635 ;; Defined at:
 11636 ;;		line 9 in file "data.c"
 11637 ;; Parameters:    Size  Location     Type
 11638 ;;		None
 11639 ;; Auto vars:     Size  Location     Type
 11640 ;;		None
 11641 ;; Return value:  Size  Location     Type
 11642 ;;                  1    wreg      PTR volatile struct .
 11643 ;; Registers used:
 11644 ;;		wreg
 11645 ;; Tracked objects:
 11646 ;;		On entry : 0/0
 11647 ;;		On exit  : 0/0
 11648 ;;		Unchanged: 0/0
 11649 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11650 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11651 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11652 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11653 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11654 ;;Total ram usage:        0 bytes
 11655 ;; Hardware stack levels used:    1
 11656 ;; This function calls:
 11657 ;;		Nothing
 11658 ;; This function is called by:
 11659 ;;		_bpc_Cnt2Qua
 11660 ;;		_bpc_proc
 11661 ;;		_capture_handdle
 11662 ;;		_key_checkPressed
 11663 ;;		_key_isPressed
 11664 ;;		_update_time
 11665 ;;		i1_display_update
 11666 ;; This function uses a non-reentrant model
 11667 ;;
 11668                           
 11669                           
 11670                           ;psect for function i1_data_getdata
 11671  0812                     i1_data_getdata:	
 11672                           
 11673                           ;data.c: 11:     return &g_data;
 11674                           
 11675                           ;incstack = 0
 11676                           ; Regs used in i1_data_getdata: [wreg]
 11677  0812  3020               	movlw	(low (_g_data| (0+512)))& (0+255)
 11678  0813  0008               	return
 11679  0814                     __end_ofi1_data_getdata:	
 11680                           
 11681                           	psect	text61
 11682  08F3                     __ptext61:	
 11683 ;; *************** function _cnt_abs *****************
 11684 ;; Defined at:
 11685 ;;		line 18 in file "bpc.c"
 11686 ;; Parameters:    Size  Location     Type
 11687 ;;  a               2    0[COMMON] unsigned short 
 11688 ;;  b               2    2[COMMON] unsigned short 
 11689 ;; Auto vars:     Size  Location     Type
 11690 ;;		None
 11691 ;; Return value:  Size  Location     Type
 11692 ;;                  2    0[COMMON] unsigned short 
 11693 ;; Registers used:
 11694 ;;		wreg, status,2, status,0
 11695 ;; Tracked objects:
 11696 ;;		On entry : 0/0
 11697 ;;		On exit  : 0/0
 11698 ;;		Unchanged: 0/0
 11699 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11700 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11701 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11702 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11703 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11704 ;;Total ram usage:        4 bytes
 11705 ;; Hardware stack levels used:    1
 11706 ;; This function calls:
 11707 ;;		Nothing
 11708 ;; This function is called by:
 11709 ;;		_bpc_Cnt2Qua
 11710 ;; This function uses a non-reentrant model
 11711 ;;
 11712                           
 11713                           
 11714                           ;psect for function _cnt_abs
 11715  08F3                     _cnt_abs:	
 11716                           
 11717                           ;bpc.c: 19:     return a>b? (a-b):(b-a);
 11718                           
 11719                           ;incstack = 0
 11720                           ; Regs used in _cnt_abs: [wreg+status,2+status,0]
 11721  08F3  0871               	movf	cnt_abs@a+1,w
 11722  08F4  0273               	subwf	cnt_abs@b+1,w
 11723  08F5  1D03               	skipz
 11724  08F6  28F9               	goto	u292_25
 11725  08F7  0870               	movf	cnt_abs@a,w
 11726  08F8  0272               	subwf	cnt_abs@b,w
 11727  08F9                     u292_25:	
 11728  08F9  1C03               	skipc
 11729  08FA  2902               	goto	i1l3153
 11730  08FB  0870               	movf	cnt_abs@a,w
 11731  08FC  0272               	subwf	cnt_abs@b,w
 11732  08FD  00F0               	movwf	?_cnt_abs
 11733  08FE  0871               	movf	cnt_abs@a+1,w
 11734  08FF  3B73               	subwfb	cnt_abs@b+1,w
 11735  0900  00F1               	movwf	?_cnt_abs+1
 11736  0901  0008               	return
 11737  0902                     i1l3153:	
 11738  0902  0872               	movf	cnt_abs@b,w
 11739  0903  0270               	subwf	cnt_abs@a,w
 11740  0904  00F0               	movwf	?_cnt_abs
 11741  0905  0873               	movf	cnt_abs@b+1,w
 11742  0906  3B71               	subwfb	cnt_abs@a+1,w
 11743  0907  00F1               	movwf	?_cnt_abs+1
 11744  0908  0008               	return
 11745  0909                     __end_of_cnt_abs:	
 11746                           
 11747                           	psect	text62
 11748  085C                     __ptext62:	
 11749 ;; *************** function _capture_IsNegEdge *****************
 11750 ;; Defined at:
 11751 ;;		line 60 in file "hardware.c"
 11752 ;; Parameters:    Size  Location     Type
 11753 ;;		None
 11754 ;; Auto vars:     Size  Location     Type
 11755 ;;		None
 11756 ;; Return value:  Size  Location     Type
 11757 ;;                  1    wreg      enum E5232
 11758 ;; Registers used:
 11759 ;;		wreg, status,2, status,0
 11760 ;; Tracked objects:
 11761 ;;		On entry : 0/0
 11762 ;;		On exit  : 0/0
 11763 ;;		Unchanged: 0/0
 11764 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11765 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11766 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11767 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11768 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11769 ;;Total ram usage:        0 bytes
 11770 ;; Hardware stack levels used:    1
 11771 ;; This function calls:
 11772 ;;		Nothing
 11773 ;; This function is called by:
 11774 ;;		_bpc_Cnt2Qua
 11775 ;;		_capture_handdle
 11776 ;; This function uses a non-reentrant model
 11777 ;;
 11778                           
 11779                           
 11780                           ;psect for function _capture_IsNegEdge
 11781  085C                     _capture_IsNegEdge:	
 11782                           
 11783                           ;hardware.c: 62:     return (CCP2CONbits.CCP2M == (0b0100))? TRUE : FALSE;
 11784                           
 11785                           ;incstack = 0
 11786                           ; Regs used in _capture_IsNegEdge: [wreg+status,2+status,0]
 11787  085C  0025               	movlb	5	; select bank5
 11788  085D  081A               	movf	26,w	;volatile
 11789  085E  390F               	andlw	15
 11790  085F  3A04               	xorlw	4
 11791  0860  1D03               	btfss	3,2
 11792  0861  2864               	goto	u293_20
 11793  0862  3001               	movlw	1
 11794  0863  0008               	return
 11795  0864                     u293_20:	
 11796  0864  3000               	movlw	0
 11797  0865  0008               	return
 11798  0866                     __end_of_capture_IsNegEdge:	
 11799  007E                     btemp	set	126	;btemp
 11800  007E                     int$flags	set	126
 11801  007E                     wtemp0	set	126


Data Sizes:
    Strings     31
    Constant    11
    Data        7
    BSS         225
    Persistent  32
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     80      80
    BANK1            80     77      80
    BANK2            80     64      79
    BANK3            80     30      77
    BANK4            80      0      39
    BANK5            80      0      64
    BANK6            80      0      64
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 64
		 -> ?_sprintf(BANK0[2]), stoa@nuls(BANK0[7]), dbuf(BANK3[32]), ISR@send(BANK2[64]), 
		 -> STR_3(CODE[4]), STR_2(CODE[7]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 64
		 -> ?_sprintf(BANK0[2]), stoa@nuls(BANK0[7]), dbuf(BANK3[32]), ISR@send(BANK2[64]), 
		 -> STR_3(CODE[4]), STR_2(CODE[7]), 

    strcpy@dest	PTR unsigned char  size(1) Largest target is 64
		 -> ISR@send(BANK2[64]), 

    strcpy@d	PTR unsigned char  size(1) Largest target is 64
		 -> ISR@send(BANK2[64]), 

    strcpy@src	PTR const unsigned char  size(1) Largest target is 64
		 -> ISR@buf(BANK1[64]), 

    strcpy@s	PTR const unsigned char  size(1) Largest target is 64
		 -> ISR@buf(BANK1[64]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_1(CODE[20]), 

    sprintf@s	PTR unsigned char  size(1) Largest target is 64
		 -> ISR@buf(BANK1[64]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    f.buffer	PTR unsigned char  size(1) Largest target is 64
		 -> ISR@buf(BANK1[64]), 

    fputs@s	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK3[32]), 

    fputs@fp	PTR struct _IO_FILE size(1) Largest target is 6
		 -> sprintf@f(BANK1[5]), 

    S2060_IO_FILE$buffer	PTR unsigned char  size(1) Largest target is 64
		 -> ISR@buf(BANK1[64]), 

    fputc@fp.buffer	PTR unsigned char  size(1) Largest target is 64
		 -> ISR@buf(BANK1[64]), 

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 6
		 -> sprintf@f(BANK1[5]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK1[1]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 6
		 -> sprintf@f(BANK1[5]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_1(CODE[20]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 20
		 -> STR_1(CODE[20]), 

    vfpfcnvrt@cp	PTR unsigned char  size(2) Largest target is 7
		 -> ?_sprintf(BANK0[2]), STR_3(CODE[4]), STR_2(CODE[7]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 6
		 -> sprintf@f(BANK1[5]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK1[1]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 2
		 -> vfprintf@cfmt(BANK0[2]), 

    stoa@fp	PTR struct _IO_FILE size(1) Largest target is 6
		 -> sprintf@f(BANK1[5]), 

    stoa@s	PTR unsigned char  size(2) Largest target is 7
		 -> ?_sprintf(BANK0[2]), STR_3(CODE[4]), STR_2(CODE[7]), 

    stoa@cp	PTR unsigned char  size(2) Largest target is 7
		 -> ?_sprintf(BANK0[2]), stoa@nuls(BANK0[7]), STR_3(CODE[4]), STR_2(CODE[7]), 

    dtoa@fp	PTR struct _IO_FILE size(1) Largest target is 6
		 -> sprintf@f(BANK1[5]), 

    pad@fp	PTR struct _IO_FILE size(1) Largest target is 6
		 -> sprintf@f(BANK1[5]), 

    pad@buf	PTR unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK3[32]), 

    update_time@pdata	PTR volatile struct . size(1) Largest target is 39
		 -> g_data(BANK4[39]), 

    display_update@pdata	PTR volatile struct . size(1) Largest target is 39
		 -> g_data(BANK4[39]), 

    key_isPressed@pdata	PTR volatile struct . size(1) Largest target is 39
		 -> g_data(BANK4[39]), 

    key_checkPressed@pdata	PTR volatile struct . size(1) Largest target is 39
		 -> g_data(BANK4[39]), 

    capture_handdle@pdata	PTR volatile struct . size(1) Largest target is 39
		 -> g_data(BANK4[39]), 

    bpc_proc@pdata	PTR volatile struct . size(1) Largest target is 39
		 -> g_data(BANK4[39]), 

    check_err@pdata	PTR volatile struct . size(1) Largest target is 39
		 -> g_data(BANK4[39]), 

    bpc_Cnt2Qua@pdata	PTR volatile struct . size(1) Largest target is 39
		 -> g_data(BANK4[39]), 

    sp__strcpy	PTR unsigned char  size(1) Largest target is 64
		 -> ISR@send(BANK2[64]), 

    sp__data_getdata	PTR volatile struct . size(1) Largest target is 39
		 -> g_data(BANK4[39]), 

    init_env@pdata	PTR volatile struct . size(1) Largest target is 39
		 -> g_data(BANK4[39]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_capture_handdle
    _ISR->_sprintf
    _timer_Timer0Handdle->_update_time
    _key_checkPressed->_led_Blink
    _led_Blink->i1_led_SetState
    _vfpfcnvrt->_stoa
    _stoa->_fputc
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___aomod
    _capture_handdle->i1_capture_setEdge
    _capture_handdle->i1_led_SetState
    i1_display_update->i1_display_write_once
    i1_display_write_once->i1___awdiv
    i1_display_write_byte->i1_display_control595_delay
    _bpc_Cnt2Qua->_cnt_abs

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    _ISR->_sprintf
    _timer_Timer0Handdle->_update_time
    _update_time->i1_display_update
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->___aodiv
    _dtoa->___aomod
    _pad->_fputs
    _abs->___aomod
    _bpc_proc->i1_display_update

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    _ISR->_sprintf

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    _main->_init_env
    _init_env->_display_update
    _display_update->_display_write_once
    _display_write_once->___awdiv
    _display_write_byte->_display_control595_delay
    _capture_init->_capture_setEdge

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    4337
                        _capture_Set
                       _capture_init
                     _display_update
                           _init_env
                       _led_SetState
                   _timer_Timer0Init
                  _timer_Timer0Start
                   _timer_Timer1Init
                  _timer_Timer1Start
                          _uart_init
 ---------------------------------------------------------------------------------
 (1) _uart_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _timer_Timer1Start                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _timer_Timer1Init                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _timer_Timer0Start                                    0     0      0       0
                  _timer_Timer0Reset
 ---------------------------------------------------------------------------------
 (2) _timer_Timer0Reset                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _timer_Timer0Init                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _led_SetState                                         1     1      0      22
                                              0 BANK3      1     1      0
 ---------------------------------------------------------------------------------
 (1) _init_env                                             5     5      0    2203
                                             25 BANK3      5     5      0
                       _data_getdata
                        _display_set
                     _display_update
 ---------------------------------------------------------------------------------
 (2) _display_update                                      12    12      0    2024
                                             13 BANK3     12    12      0
                            ___awdiv
                            ___awmod
                       _data_getdata
                 _display_write_once
 ---------------------------------------------------------------------------------
 (3) _display_write_once                                   4     1      3     433
                                              9 BANK3      4     1      3
                            ___awdiv (ARG)
                            ___awmod (ARG)
           _display_control595_delay
                 _display_write_byte
 ---------------------------------------------------------------------------------
 (4) _display_write_byte                                   4     4      0      93
                                              2 BANK3      4     4      0
           _display_control595_delay
 ---------------------------------------------------------------------------------
 (5) _display_control595_delay                             2     2      0      24
                                              0 BANK3      2     2      0
 ---------------------------------------------------------------------------------
 (3) _data_getdata                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4     700
                                              0 BANK3      7     3      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     756
                                              0 BANK3      9     5      4
 ---------------------------------------------------------------------------------
 (2) _display_set                                          1     1      0      22
                                              0 BANK3      1     1      0
 ---------------------------------------------------------------------------------
 (1) _capture_init                                         0     0      0      66
                    _capture_setEdge
 ---------------------------------------------------------------------------------
 (2) _capture_setEdge                                      1     1      0      66
                                              0 BANK3      1     1      0
 ---------------------------------------------------------------------------------
 (1) _capture_Set                                          1     1      0      22
                                              0 BANK3      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR                                                132   132      0   16874
                                              9 BANK1     68    68      0
                                              0 BANK2     64    64      0
                           _bpc_proc
                   _capture_IsEnable
                   _capture_IsIntrpt
                  _capture_clrIntrpt
                    _capture_handdle
                      _key_isPressed
                            _sprintf
                             _strcpy
                             _strlen
                _timer_IsTimer0Itrpt
                _timer_IsTimer1Itrpt
                _timer_Timer0Handdle
              _timer_Timer1ClrIntrpt
                      i1_capture_Set
                i1_timer_Timer0Reset
 ---------------------------------------------------------------------------------
 (7) i1_timer_Timer0Reset                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _timer_Timer1ClrIntrpt                                0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _timer_Timer0Handdle                                  0     0      0    2176
                   _key_checkPressed
                        _update_time
 ---------------------------------------------------------------------------------
 (8) _update_time                                          3     3      0    2109
                                             13 COMMON     1     1      0
                                             12 BANK0      2     2      0
                          i1___awmod
                      i1_capture_Set
                     i1_data_getdata
                   i1_display_update
 ---------------------------------------------------------------------------------
 (8) _key_checkPressed                                     2     2      0      67
                                              2 COMMON     2     2      0
                          _led_Blink
                     i1_data_getdata
 ---------------------------------------------------------------------------------
 (9) _led_Blink                                            1     1      0      22
                                              1 COMMON     1     1      0
                     i1_led_SetState
 ---------------------------------------------------------------------------------
 (7) _timer_IsTimer1Itrpt                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _timer_IsTimer0Itrpt                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _strcpy                                               5     4      1     205
                                              0 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (7) _sprintf                                             18    10      8    9789
                                             13 COMMON     1     1      0
                                             72 BANK0      8     0      8
                                              0 BANK1      9     9      0
                           _vfprintf
 ---------------------------------------------------------------------------------
 (8) _vfprintf                                             8     5      3    9479
                                             64 BANK0      8     5      3
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (9) _vfpfcnvrt                                           40    38      2    9165
                                             46 BANK0     18    16      2
                               _dtoa
                              _fputc
                               _stoa
 ---------------------------------------------------------------------------------
 (10) _stoa                                               23    21      2    2088
                                              8 COMMON     5     3      2
                                              0 BANK0     18    18      0
                              _fputc
                             _strlen
 ---------------------------------------------------------------------------------
 (10) _dtoa                                               30    22      8    5160
                                             16 BANK0     30    22      8
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (11) _pad                                                 9     6      3    3554
                                             12 COMMON     1     1      0
                                              4 BANK0      8     5      3
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (7) _strlen                                               5     3      2     228
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (12) _fputs                                               8     7      1    1605
                                              8 COMMON     4     3      1
                                              0 BANK0      4     4      0
                              _fputc
 ---------------------------------------------------------------------------------
 (11) _fputc                                               8     5      3    1290
                                              0 COMMON     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (12) _putch                                               1     1      0       0
 ---------------------------------------------------------------------------------
 (11) _abs                                                 4     2      2     142
                                              3 COMMON     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (11) ___aomod                                            19     3     16     448
                                              0 COMMON     3     3      0
                                              0 BANK0     16     0     16
 ---------------------------------------------------------------------------------
 (11) ___aodiv                                            27    11     16     452
                                              0 COMMON    11    11      0
                                              0 BANK0     16     0     16
 ---------------------------------------------------------------------------------
 (7) _key_isPressed                                        2     2      0      45
                                              0 COMMON     2     2      0
                     i1_data_getdata
 ---------------------------------------------------------------------------------
 (7) _capture_handdle                                     13    13      0     318
                                              1 COMMON    13    13      0
                  _capture_IsNegEdge
                  i1_capture_setEdge
                     i1_data_getdata
                     i1_led_SetState
 ---------------------------------------------------------------------------------
 (10) i1_led_SetState                                      1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) i1_capture_setEdge                                    1     1      0      66
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _capture_clrIntrpt                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _capture_IsIntrpt                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _capture_IsEnable                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _bpc_proc                                            12    12      0    3901
                                             12 BANK0     12    12      0
                        _bpc_Cnt2Qua
                          _check_err
                      i1_capture_Set
                     i1_data_getdata
                   i1_display_update
 ---------------------------------------------------------------------------------
 (9) i1_display_update                                    12    12      0    1326
                                              0 BANK0     12    12      0
                          i1___awdiv
                          i1___awmod
                     i1_data_getdata
               i1_display_write_once
 ---------------------------------------------------------------------------------
 (10) i1_display_write_once                                4     1      3     283
                                              9 COMMON     4     1      3
                          i1___awdiv (ARG)
                          i1___awmod (ARG)
         i1_display_control595_delay
               i1_display_write_byte
 ---------------------------------------------------------------------------------
 (11) i1_display_write_byte                                4     4      0      93
                                              2 COMMON     4     4      0
         i1_display_control595_delay
 ---------------------------------------------------------------------------------
 (12) i1_display_control595_delay                          2     2      0      24
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (10) i1___awmod                                           7     3      4     452
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (10) i1___awdiv                                           9     5      4     456
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (7) i1_capture_Set                                        1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) _check_err                                           16    14      2     749
                                              0 COMMON     5     3      2
                                              0 BANK0     11    11      0
 ---------------------------------------------------------------------------------
 (8) _bpc_Cnt2Qua                                          3     3      0     851
                                              4 COMMON     3     3      0
                  _capture_IsNegEdge
                            _cnt_abs
                     i1_data_getdata
 ---------------------------------------------------------------------------------
 (10) i1_data_getdata                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _cnt_abs                                              4     0      4     740
                                              0 COMMON     4     0      4
 ---------------------------------------------------------------------------------
 (8) _capture_IsNegEdge                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _capture_Set
   _capture_init
     _capture_setEdge
   _display_update
     ___awdiv
     ___awmod
     _data_getdata
     _display_write_once
       ___awdiv (ARG)
       ___awmod (ARG)
       _display_control595_delay (ARG)
       _display_write_byte (ARG)
         _display_control595_delay
   _init_env
     _data_getdata
     _display_set
     _display_update
       ___awdiv
       ___awmod
       _data_getdata
       _display_write_once
         ___awdiv (ARG)
         ___awmod (ARG)
         _display_control595_delay (ARG)
         _display_write_byte (ARG)
           _display_control595_delay
   _led_SetState
   _timer_Timer0Init
   _timer_Timer0Start
     _timer_Timer0Reset
   _timer_Timer1Init
   _timer_Timer1Start
   _uart_init

 _ISR (ROOT)
   _bpc_proc
     _bpc_Cnt2Qua
       _capture_IsNegEdge
       _cnt_abs
       i1_data_getdata
     _check_err
     i1_capture_Set
     i1_data_getdata
     i1_display_update
       i1___awdiv
       i1___awmod
       i1_data_getdata
       i1_display_write_once
         i1___awdiv (ARG)
         i1___awmod (ARG)
         i1_display_control595_delay (ARG)
         i1_display_write_byte (ARG)
           i1_display_control595_delay
   _capture_IsEnable
   _capture_IsIntrpt
   _capture_clrIntrpt
   _capture_handdle
     _capture_IsNegEdge
     i1_capture_setEdge
     i1_data_getdata
     i1_led_SetState
   _key_isPressed
     i1_data_getdata
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _dtoa
           ___aodiv
           ___aomod
           _abs
             ___aomod (ARG)
           _pad
             _fputc
               _putch
             _fputs
               _fputc
                 _putch
             _strlen
         _fputc
           _putch
         _stoa
           _fputc
             _putch
           _strlen
   _strcpy
   _strlen
   _timer_IsTimer0Itrpt
   _timer_IsTimer1Itrpt
   _timer_Timer0Handdle
     _key_checkPressed
       _led_Blink
         i1_led_SetState
       i1_data_getdata
     _update_time
       i1___awmod
       i1_capture_Set
       i1_data_getdata
       i1_display_update
         i1___awdiv
         i1___awmod
         i1_data_getdata
         i1_display_write_once
           i1___awdiv (ARG)
           i1___awmod (ARG)
           i1_display_control595_delay (ARG)
           i1_display_write_byte (ARG)
             i1_display_control595_delay
   _timer_Timer1ClrIntrpt
   i1_capture_Set
   i1_timer_Timer0Reset

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     4D      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     40      4F       9       98.8%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50     1E      4D      11       96.3%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      27      13       48.8%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0      40      15       80.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0      40      17       80.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     1F1      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     1F1      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Tue Jun 18 11:22:09 2019

                        _update_time 0E02   __end_ofi1_display_control595_delay 087B  
         i1_display_control595_delay 0870                          __CFG_CP$OFF 0000  
                       ?_display_set 0070                         ___awdiv@sign 01CE  
                _display_update$1525 01DE                          __CFG_LVP$ON 0000  
                                l170 09BC                                  l558 08AD  
                                _GIE 005F                                  _RC4 0074  
                       __CFG_CPD$OFF 0000                                  _ISR 0004  
                                _abs 091F                                  _pad 0C42  
                       ___awmod@sign 01CE               __end_of_display_update 0F3A  
                       __CFG_BORV$LO 0000                                  wreg 0009  
                       __CFG_IESO$ON 0000                         __CFG_FOSC$HS 0000  
         __size_of_capture_clrIntrpt 0003                       ??_led_SetState 01C8  
              i1display_write_byte@i 0075                 __end_of_data_getdata 0004  
               capture_handdle@pdata 0079                                 ?_ISR 0070  
                               ISR@b 00EB                                 ISR@i 00EC  
                               ?_abs 0073                                 l3301 0B89  
                               l3305 0B92                                 l3245 0C06  
                               l3309 0B9A                                 l3271 0C3D  
                               l3263 0C2C                                 l3255 0C0E  
                               l3239 0BFB                                 l3257 0C1A  
                               l3337 0ECA                                 l3267 0C35  
                               l3283 0B64                                 l3339 0ECE  
                               l3605 08EA                                 l3295 0B71  
                               l3287 0B6B                                 l3297 0B7D  
                               ?_pad 0024                                 l3689 0D38  
                               l2899 0A78                                 STR_1 100B  
                               STR_2 101F                                 STR_3 1026  
                               _BRGH 0CF2                                 _CREN 0CEC  
                               _LATA 010C                                 _LATB 010D  
                               _LATC 010E                                 u3035 0C11  
                               u3055 0C1B                                 u3135 0B74  
                               _ENUM 016E                                 u3065 0C25  
                               u3075 0C2D                                 u3155 0B83  
                               u3165 0B8A                                 u2445 0A7B  
                               _PEIE 005E                                 u3655 0D52  
                               u3680 08CD                                 u3840 088E  
                               _RCIE 048D                                 _TMR0 0015  
                               _SPEN 0CEF                    i1capture_Set@isON 0070  
                               _TXIE 048C                                 _TXEN 0CF5  
                               _SYNC 0CF4                                 _WPUA 020C  
                               _WPUB 020D                                 _WPUC 020E  
                       __CFG_WRT$OFF 0000                        __CFG_FCMEN$ON 0000  
                               _Temp 01A2                                 abs@a 0073  
                               _dbuf 01A8                                 _main 099C  
                               _dtoa 0237                                 _prec 0162  
                               _nout 01A0                                 pad@i 0027  
                               pad@p 0025                                 fsr0h 0005  
                               fsr1h 0007                                 indf0 0000  
                               fsr0l 0004                                 indf1 0001  
                               fsr1l 0006                                 pad@w 0029  
                               _stoa 0F3A                                 btemp 007E  
                      __CFG_BOREN$ON 0000                                 start 00A6  
                      __CFG_MCLRE$ON 0000            __size_ofi1_display_update 00A9  
                i1_timer_Timer0Reset 0831                                ??_ISR 00A9  
             i1display_write_once@HL 007C               i1display_write_once@HR 0079  
             i1display_write_once@ML 007A               i1display_write_once@MR 007B  
                              ??_abs 0075                                ??_pad 007C  
                      __CFG_PLLEN$ON 0000             __end_of_timer_Timer0Init 089C  
           __end_of_timer_Timer1Init 08C2                      __end_of___aodiv 057F  
                              ?_main 0070                                ?_dtoa 0030  
                     i1___awdiv@sign 0076                      __end_of___aomod 074E  
                    __end_of___awdiv 0C42                                _BRG16 0CFB  
                      __CFG_WDTE$OFF 0000                      __end_of___awmod 0B9F  
                              ?_stoa 0078                      ___awdiv@divisor 01C8  
                              _LATC3 0873                                _LATC4 0874  
                              _IOCAN 0392                                _IOCAP 0391  
                              _IOCBN 0395                                _IOCBP 0394  
                              _IOCCN 0398                                _IOCCP 0397  
                              i1l161 00A4                                i1l156 0076  
                              i1l148 0090                                i1l421 05DB  
                              i1l149 008D                                i1l558 0874  
                              i1l806 0FD8                                i1l760 0C7A  
                              i1l930 056D                                i1l770 02A1  
                              i1l771 02B5                                i1l757 0C5A  
                              i1l765 027D                                i1l774 034B  
                              i1l766 0285                                i1l943 073C  
                              i1l797 0F7D                      ___awdiv@counter 01CD  
                              _RCREG 0199                         vfpfcnvrt@fmt 004E  
                              _TMR1H 0017                                _TMR1L 0016  
                              _TRISA 008C                                _TRISB 008D  
                              _TRISC 008E                                _WPUC3 1073  
                              _WPUC4 1074                                _RXSEL 08E9  
                              _TXREG 019A                                _TXSEL 08EA  
                    ?_display_update 0070                                _TX_en 0168  
               __size_of_bpc_Cnt2Qua 0086                 ?i1_timer_Timer0Reset 0070  
                _timer_IsTimer0Itrpt 0825                      __end_of_cnt_abs 0909  
           __end_of_key_checkPressed 0980                  _timer_IsTimer1Itrpt 0829  
                     i1___awmod@sign 0076                 __end_of_capture_init 085C  
                              _flags 00ED               __size_ofi1_capture_Set 000C  
                              _fputc 0B14                                _fputs 0A02  
                              pad@fp 002B                                _width 0160  
                              _putch 0811                                main@i 01A4  
                              dtoa@d 0030                                dtoa@i 004C  
                              dtoa@n 0044                                dtoa@p 003E  
                              dtoa@s 0042                                dtoa@w 0040  
                              stoa@i 0027                                stoa@l 0030  
                              stoa@p 002E                                stoa@s 0078  
                              stoa@w 0029                                status 0003  
                              wtemp0 007E                      __end_of_sprintf 0A02  
                 __size_ofi1___awdiv 0051                   __size_ofi1___awmod 0045  
               ?_timer_IsTimer0Itrpt 0070                 ?_timer_IsTimer1Itrpt 0070  
       __end_ofi1_display_write_byte 0A75         __end_ofi1_display_write_once 09DF  
                    __initialization 00A8                         __end_of_main 09BD  
                       __end_of_dtoa 038A                         __end_of_stoa 1000  
               __size_of_capture_Set 000E                 display_write_once@HL 01D4  
               display_write_once@HR 01D1                 display_write_once@ML 01D2  
               display_write_once@MR 01D3                       __CFG_LPBOR$OFF 0000  
             capture_handdle@cnt_int 007A               capture_handdle@cnt_tmp 007C  
            __size_ofi1_data_getdata 0002                               ??_main 01E6  
                             ??_dtoa 0038                               ??_stoa 007A  
          __size_of_capture_IsEnable 0004            __size_of_capture_IsIntrpt 0004  
              ??i1_timer_Timer0Reset 0070                               ISR@buf 00AB  
             __size_of_key_isPressed 0016                               ?_fputc 0070  
                             ?_fputs 0078                               _CCPR2H 0299  
                             _CCPR2L 0298                     ___awdiv@dividend 01CA  
                bpc_proc@last_time_h 0030                               ?_putch 0070  
                bpc_proc@last_time_m 0032                  bpc_proc@last_time_s 002E  
              _timer_Timer1ClrIntrpt 0817                               i1l3011 0FDC  
                             i1l3103 0AE6                               i1l3015 0FED  
                             i1l3007 0FAF                               i1l3105 0AF2  
                             i1l3113 0B07                               i1l3017 0FFA  
                             i1l3053 0BB4                               i1l3117 0B0F  
                             i1l3109 0AFE                               i1l3213 0458  
                             i1l3071 0BDA                               i1l3063 0BBC  
                             i1l3047 0BA9                               i1l3207 0437  
                             i1l3223 0469                               i1l3153 0902  
                             i1l3065 0BC8                               i1l3217 045E  
                             i1l3075 0BE3                               i1l3091 0AD9  
                             i1l3501 0DB5                               i1l3325 0786  
                             i1l4053 005D                               i1l4029 000F  
                             i1l3079 0BEB                               i1l3095 0AE0  
                             i1l3327 078B                               i1l4055 0089  
                             i1l3525 0E00                               i1l3517 0DE7  
                             i1l3509 0DCE                               i1l3541 05E4  
                             i1l2813 04DD                               i1l2741 0B1D  
                             i1l3197 0407                               i1l3189 03CD  
                             i1l3551 05F1                               i1l2815 04E1  
                             i1l3561 060C                               i1l3537 05D7  
                             i1l2825 04F8                               i1l2809 04B6  
                             i1l2745 0B40                               i1l3617 0AA9  
                             i1l3473 0E8F                               i1l3571 0625  
                             i1l3539 05E0                               i1l3627 08D9  
                             i1l2835 0540                               i1l2827 0507  
                             i1l2851 06C3                               i1l2755 093A  
                             i1l2931 02B0                               i1l3619 0AC6  
                             i1l3467 0E67                               i1l3493 0D9C  
                             i1l3741 091D                               i1l2837 054C  
                             i1l2861 06DF                               u211_25 0B3E  
                             i1l2757 0946                               i1l2781 0C50  
                             i1l2925 0299                               i1l3583 0649  
                             i1l3575 062C                               i1l3567 061F  
                             i1l3831 0108                               i1l2847 069C  
                             i1l2767 0A06                               i1l2791 0C5C  
                             i1l2935 02E2                               i1l3489 0D9A  
                             i1l3585 064D                               i1l3569 0623  
                             i1l3841 0141                               i1l3809 0CF6  
                             i1l2865 070F                               i1l2785 0C58  
                             i1l2945 02BD                               i1l2953 0357  
                             i1l3579 063D                               i1l3587 0657  
                             i1l3835 0114                               i1l2859 06D0  
                             i1l2867 071B                               i1l2795 0C86  
                             i1l2963 036A                               i1l3597 066F  
                             i1l2877 0A50                               i1l3845 014A  
                             u220_25 0928                               i1l2957 035F  
                             i1l3871 01FC                               i1l2967 0377  
                             i1l3759 0956                               i1l3873 01FF  
                             i1l3793 0CCB                               i1l2993 0F8E  
                             i1l3867 01DB                               i1l3859 0192  
                             i1l2979 0F56                               i1l3789 0CC3  
                             i1l2997 0F9F                               i1l3887 021A  
                             i1l3799 0CDC                               i1l2999 0FAC  
                             u225_20 04E8                               u242_25 0A53  
                             u218_25 0C66                               u251_25 0291  
                             u228_25 052D                               u246_20 0253  
                             u262_20 0F46                               u406_20 002C  
                             u238_25 06FD                               u254_25 0355  
                             u270_25 0FF8                               u319_20 08A5  
                             u271_20 086D                               u247_20 0254  
                             u407_20 0051                               u280_25 0BDB  
                             u256_25 02D1                               u345_25 058E  
                             u257_25 02DD                               u265_25 0F76  
                             u346_25 05A9                               u370_25 0CBA  
                             u347_25 05B4                               u267_25 0FAA  
                             u292_25 08F9                               u276_25 0BBF  
                             u268_25 0FB9                               u293_20 0864  
                             u381_25 01EA                               u278_25 0BC9  
                             u286_25 0AE9                               u382_25 01FA  
                             u279_25 0BD3                               u383_25 0234  
                             u288_25 0AF8                               u289_25 0AFF  
                             _SPBRGH 019C                               _SPBRGL 019B  
                             _TRISC3 0473                               _TRISC4 0474  
                     __CFG_PWRTE$OFF 0000                     __end_of_bpc_proc 0237  
              ??_timer_IsTimer0Itrpt 0070                ??_timer_IsTimer1Itrpt 0070  
                       vfprintf@cfmt 0066                        i1_capture_Set 089C  
                          ??___aodiv 0070                            ??___aomod 0070  
               __end_of_led_SetState 0891                            ??___awdiv 01CC  
                             _g_data 0220                       __CFG_STVREN$ON 0000  
        __end_of_timer_Timer0Handdle 0841                            ??___awmod 01CC  
         ??_display_control595_delay 01C8                               _flg_rc 0167  
                   __end_of_init_env 0D7C                     ___awdiv@quotient 01CF  
                    ___awmod@divisor 01C8                               _temp_h 016C  
                             _temp_l 016B                      ___awmod@counter 01CD  
                             pad@buf 0024                            ??_cnt_abs 0074  
                             dtoa@fp 003D                               _strcpy 094D  
                             _strlen 0936                 __size_of_display_set 0009  
                   __end_of_segmcode 100B                    __end_ofi1___awdiv 0BF0  
              __size_of_data_getdata 0002                    __end_ofi1___awmod 0B14  
                             fputc@c 0070                               fputs@c 0020  
                             fputs@i 0021                               fputs@s 0023  
                             stoa@cp 002C                               stoa@fp 002B  
                             putch@c 0070                     __end_of_vfprintf 0ACF  
                          ??_sprintf 007D              __end_of__initialization 00DF  
                   i1_display_update 074E                       ?i1_capture_Set 0070  
                     __pcstackCOMMON 0070                         ?_update_time 0070  
                      _key_isPressed 0909                         __pidataBANK3 084D  
                       _data_getdata 0002                   __size_of_check_err 00F3  
                      __end_of_fputc 0B59                        __end_of_fputs 0A28  
        ?i1_display_control595_delay 0070           __end_of_display_write_byte 0AA0  
         __end_of_display_write_once 0A4E                        __end_of_putch 0812  
                   led_SetState@isOn 01C8             i1display_write_byte@data 0074  
              __size_of_capture_init 0008                       _OPTION_REGbits 0095  
                 __size_of_led_Blink 000B                tmp_change@history_key 00EF  
            capture_handdle@last_cnt 0164                 i1_display_write_byte 0A4E  
             ?_timer_Timer1ClrIntrpt 0070                 i1_display_write_once 09BD  
                            ??_fputc 0073                              ??_fputs 0079  
                            ??_putch 0070                           __pbssBANK1 00ED  
                         __pbssBANK2 0160                           __pbssBANK3 01A0  
                         __pbssBANK4 0220                           __pbssBANK5 02A0  
                         __pbssBANK6 0320                    i1_capture_setEdge 08D0  
           __size_of_capture_handdle 0069              __size_ofi1_led_SetState 000A  
                    __CFG_VCAPEN$OFF 0000                   ?i1_capture_setEdge 0070  
           __size_of_capture_setEdge 0013                              ISR@send 0120  
                     ?_key_isPressed 0070                           __pmaintext 099C  
                ??i1_capture_setEdge 0070                         _capture_init 0854  
                         __pintentry 0004                       i1_data_getdata 0812  
                   ??_display_update 01D5                       bpc_proc@number 0036  
                  ?_timer_Timer0Init 0070                              ?_strcpy 0070  
                            ?_strlen 0070                    ?_timer_Timer1Init 0070  
                   _capture_IsEnable 081D                   i1___awdiv@dividend 0072  
                 __size_of_uart_init 001C                              _ODCONC3 1473  
                            _ODCONC4 1474                     _capture_IsIntrpt 0821  
                 ??_timer_Timer0Init 01C8                   ??_timer_Timer1Init 01C8  
                display_update@pdata 01E0                   __size_of_vfpfcnvrt 0102  
                          ?_bpc_proc 0070                ?i1_display_write_byte 0070  
              ?i1_display_write_once 0079                    ?_key_checkPressed 0070  
          __end_ofi1_capture_setEdge 08E0                  capture_setEdge@edge 01C8  
                  __end_of_check_err 0672                     update_time@pdata 007D  
                 ??_key_checkPressed 0072                              _RX_data 0169  
                          ?_init_env 0070                              _TX_data 016A  
              __size_of_led_SetState 000B                      ??i1_capture_Set 0070  
                  __end_of_led_Blink 0886                   i1___awdiv@quotient 0077  
   __end_of_display_control595_delay 08B5               __end_ofi1_data_getdata 0814  
                            ___aodiv 048C                              ___aomod 0672  
                            ___awdiv 0BF0                              ___awmod 0B59  
    i1display_control595_delay@times 0071                            ?_vfprintf 0060  
                         check_err@i 0028                              __ptext1 0980  
                            __ptext2 081A                              __ptext3 08B5  
                            __ptext4 082D                              __ptext5 0836  
                            __ptext6 0891                              __ptext7 0886  
                            __ptext8 0CFE                        ??_bpc_Cnt2Qua 0074  
                            __ptext9 0E92                              _cnt_abs 08F3  
                    __size_of_strcpy 0018                      __size_of_strlen 0017  
                       __size_of_ISR 00A2                            _T1CONbits 0018  
                       __size_of_abs 0017                         __size_of_pad 0053  
                   ___awmod@dividend 01CA                            _IOCCFbits 0399  
                         ??_bpc_proc 002C                            _IOCCPbits 0397  
                            main@cnt 016D                              _sprintf 09DF  
                            clrloop0 0842                         _led_SetState 0886  
               end_of_initialization 00DF                              fputc@fp 0072  
                            init_ram 0847  __size_ofi1_display_control595_delay 000B  
                         ??_init_env 01E1                              fputs@fp 0078  
                            initloop 0848                      capture_Set@isON 01C8  
                    ??_key_isPressed 0070                    __end_of_uart_init 099C  
                      ??_capture_Set 01C8                    ??_capture_handdle 0071  
                 i1led_SetState@isOn 0070                    __end_of_vfpfcnvrt 048C  
                    ?i1_data_getdata 0070                           ??_vfprintf 0063  
                  ??_capture_setEdge 01C8                 __size_of_update_time 0090  
                            strcpy@d 0073                              strlen@a 0073  
                            strcpy@s 0072                              strlen@s 0070  
        __end_ofi1_timer_Timer0Reset 0836                i1_display_update$1525 0029  
                          _PORTAbits 000C                            _PORTCbits 000E  
             ??i1_display_write_byte 0072               ??i1_display_write_once 007C  
                          _TRISCbits 008E             __end_ofi1_display_update 07F7  
                          i1___awdiv 0B9F                            i1___awmod 0ACF  
                __end_of_bpc_Cnt2Qua 0E02           __size_ofi1_capture_setEdge 0010  
        __end_of_timer_IsTimer0Itrpt 0829          __end_of_timer_IsTimer1Itrpt 082D  
                     i1_led_SetState 0866                          _CCP2CONbits 029A  
                          _TXSTAbits 019E                        ??_display_set 01C8  
                        vfpfcnvrt@ap 004F                          vfpfcnvrt@cp 005D  
                        vfpfcnvrt@fp 005F                          vfpfcnvrt@ll 0055  
                __end_of_capture_Set 08D0         __size_of_timer_Timer0Handdle 0006  
            ??_timer_Timer1ClrIntrpt 0070                       __end_of_strcpy 0965  
                     __end_of_strlen 094D                  start_initialization 00A8  
                        __end_of_ISR 00A6                          __end_of_abs 0936  
                        __end_of_pad 0C95                           ?i1___awdiv 0070  
                         ?i1___awmod 0070                  display_write_byte@i 01CD  
  __size_of_display_control595_delay 000D                   _display_write_byte 0A75  
             display_write_byte@data 01CC                   _display_write_once 0A28  
          ?_display_control595_delay 0070               __end_ofi1_led_SetState 0870  
                     check_err@check 0029                key_checkPressed@pdata 0073  
                     check_err@pdata 002A               tmp_change@key_time_cnt 01A6  
                ?_display_write_byte 0070                  ?_display_write_once 01D1  
           __end_of_capture_IsEnable 0821             __end_of_capture_IsIntrpt 0825  
                        vfprintf@fmt 0060                          __pdataBANK3 01E6  
                 i1___awmod@dividend 0072                 ??_display_write_byte 01CA  
               ??_display_write_once 01D4                             ??_strcpy 0071  
                           ??_strlen 0072                          _bpc_Cnt2Qua 0D7C  
                __end_of_display_set 0800                            ___latbits 0002  
                      __pcstackBANK0 0020                        __pcstackBANK1 00A0  
                      __pcstackBANK2 0120                        __pcstackBANK3 01C8  
                   ___aodiv@dividend 0028                             ISR@F5520 0320  
                           ISR@F5517 02A0                      ?i1_led_SetState 0070  
                  __size_of_bpc_proc 0154            __size_of_timer_Timer0Init 000B  
          __size_of_timer_Timer1Init 000D                            _check_err 057F  
                  __size_of_init_env 007E                            _dtoa$1749 003B  
          __size_of_key_checkPressed 001B                          _capture_Set 08C2  
                           ?___aodiv 0020                             ?___aomod 0020  
                           ?___awdiv 01C8                     ___aodiv@quotient 0073  
                           ?___awmod 01C8                        bpc_proc@pdata 0037  
                          _led_Blink 087B                    i1___awdiv@divisor 0070  
                  i1___awdiv@counter 0075                    __size_of_vfprintf 002F  
                           ?_cnt_abs 0070                    _timer_Timer0Reset 0836  
                        ??i1___awdiv 0074                          ??i1___awmod 0074  
                  _timer_Timer0Start 082D                    _timer_Timer1Start 081A  
                           ?_sprintf 0068                       __size_of_fputc 0045  
                     __size_of_fputs 0026                   ?_timer_Timer0Reset 0070  
                    _capture_handdle 0C95                       __size_of_putch 0001  
                 ?_timer_Timer0Start 0070                   ?_timer_Timer1Start 0070  
                  _capture_IsNegEdge 085C                 _capture_handdle$1357 0077  
                 ?_capture_IsNegEdge 0070                             _LATBbits 010D  
                    _capture_setEdge 08E0                           ?_check_err 0070  
                          clear_ram0 0841                     ??i1_data_getdata 0070  
                           _PIE1bits 0091                             _PIE2bits 0092  
                ??_timer_Timer0Reset 01C8                             u222_2lld 04B4  
                ??_timer_Timer0Start 01C8                             u233_2lld 069A  
                ??_timer_Timer1Start 01C8                            bpc_proc@i 0034  
                           _PIR1bits 0011                             _PIR2bits 0012  
              __end_ofi1_capture_Set 08A8                  ??_capture_IsNegEdge 0070  
                          _uart_init 0980                           ?_led_Blink 0070  
                        _display_set 07F7                            _vfpfcnvrt 038A  
          __end_of_timer_Timer0Reset 083B                             _WPUCbits 020E  
          __end_of_timer_Timer0Start 0831            __end_of_timer_Timer1Start 081D  
                  ?i1_display_update 0070            __end_of_capture_IsNegEdge 0866  
            __size_of_display_update 00A8                   ??i1_display_update 0020  
                _timer_Timer0Handdle 083B                __end_of_key_isPressed 091F  
                         vfprintf@ap 0062                           vfprintf@fp 0065  
                      ??_update_time 002C                            init_env@i 01E3  
                      ?_data_getdata 0070                           ?_uart_init 0070  
                  i1___awmod@divisor 0070                    i1___awmod@counter 0075  
                   __size_of___aodiv 00F3                     __size_of___aomod 00DC  
                   __size_of___awdiv 0052                     __size_of___awmod 0046  
                         ?_vfpfcnvrt 004E         ??i1_display_control595_delay 0070  
                    ___aodiv@divisor 0020                      ___aodiv@counter 0071  
                     led_Blink@State 0166                 ?_timer_Timer0Handdle 0070  
                   __size_of_cnt_abs 0016                           sprintf@fmt 0068  
            __end_of_capture_handdle 0CFE                i1display_update@pdata 002B  
     __size_of_timer_Timer1ClrIntrpt 0003        __end_of_timer_Timer1ClrIntrpt 081A  
       __size_ofi1_timer_Timer0Reset 0005                             _bpc_proc 00E3  
              i1capture_setEdge@edge 0070        __size_ofi1_display_write_byte 0027  
                           __ptext10 0A28                             __ptext11 0A75  
                           __ptext12 08A8                             __ptext21 0831  
                           __ptext13 0002                             __ptext30 09DF  
                           __ptext22 0817                             __ptext14 0B59  
                           __ptext31 0AA0                             __ptext23 083B  
                           __ptext15 0BF0                             __ptext40 091F  
                           __ptext32 038A                             __ptext24 0E02  
                           __ptext16 07F7                             __ptext41 0672  
                           __ptext33 0F3A                             __ptext25 0965  
                           __ptext17 0854                             __ptext50 00E3  
                           __ptext42 048C                             __ptext34 0237  
                           __ptext26 087B                             __ptext18 08E0  
                           __ptext51 074E                             __ptext43 0909  
                           __ptext35 0C42                             __ptext27 0829  
                           __ptext19 08C2                             __ptext60 0812  
                           __ptext52 09BD                             __ptext44 0C95  
                           __ptext36 0936                             __ptext28 0825  
                           __ptext61 08F3                             __ptext53 0A4E  
                           __ptext45 0866                             __ptext37 0A02  
                           __ptext29 094D                             __ptext62 085C  
                           __ptext54 0870                             __ptext46 08D0  
                           __ptext38 0B14                             __ptext55 0ACF  
                           __ptext47 0814                             __ptext39 0811  
                           __ptext56 0B9F                             __ptext48 0821  
                           __ptext57 089C                             __ptext49 081D  
                           __ptext58 057F                             __ptext59 0D7C  
      __size_ofi1_display_write_once 0022              __end_of_capture_setEdge 08F3  
                  _capture_clrIntrpt 0814                     __size_of_sprintf 0023  
                         strcpy@dest 0074                   ?_capture_clrIntrpt 0070  
      display_control595_delay@times 01C9                     _timer_Timer0Init 0891  
                   _timer_Timer1Init 08B5                             _init_env 0CFE  
                      __size_of_main 0021                        __size_of_dtoa 0153  
                      __size_of_stoa 00C6                          ??_check_err 0072  
                  ?_capture_IsEnable 0070                             _segmcode 1000  
                ??_capture_clrIntrpt 0070                        init_env@pdata 01E5  
                  ?_capture_IsIntrpt 0070                     _key_checkPressed 0965  
       __size_of_timer_IsTimer0Itrpt 0004                   ??_capture_IsEnable 0070  
       __size_of_timer_IsTimer1Itrpt 0004                       ??_data_getdata 01C8  
                          stoa@F1139 01E6                        ?_capture_init 0070  
                 ??_capture_IsIntrpt 0070                             int$flags 007E  
                        ??_led_Blink 0071                             cnt_abs@a 0070  
                           cnt_abs@b 0072                             _vfprintf 0AA0  
                __end_of_update_time 0E92                     ___aomod@dividend 0028  
                       ?_bpc_Cnt2Qua 0070                ??_timer_Timer0Handdle 007E  
         __size_of_timer_Timer0Reset 0005                     ??i1_led_SetState 0070  
                         _INTCONbits 000B           __size_of_timer_Timer0Start 0004  
         __size_of_timer_Timer1Start 0003            __end_of_capture_clrIntrpt 0817  
         __size_of_capture_IsNegEdge 000A                             intlevel1 0000  
                          sprintf@ap 00A2                    __CFG_CLKOUTEN$OFF 0000  
                          strcpy@src 0070                           _OSCCONbits 0099  
                       ?_capture_Set 0070                   key_isPressed@pdata 0071  
                     ??_capture_init 01C9                          ??_uart_init 01C8  
                    ___aomod@divisor 0020                      display_set@ison 01C8  
                        ??_vfpfcnvrt 0050                     bpc_Cnt2Qua@pdata 0076  
                           stoa@nuls 0020                      ___aomod@counter 0071  
                      __pstringtext1 1000                        __pstringtext2 101F  
                      __pstringtext3 1026                        __pstringtext4 0000  
        __size_of_display_write_byte 002B          __size_of_display_write_once 0026  
                           sprintf@f 00A4                             sprintf@s 00A3  
           _display_control595_delay 08A8                     ?_capture_handdle 0070  
                     _display_update 0E92                        ?_led_SetState 0070  
                   ?_capture_setEdge 0070                         ___aodiv@sign 0072  
                       ___aomod@sign 0072                       _check_err$1120 0020  
                     _check_err$1121 0022                       _check_err$1124 0024  
                     _check_err$1125 0026  
