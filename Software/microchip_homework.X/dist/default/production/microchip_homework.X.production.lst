

Microchip Technology PIC LITE Macro Assembler V1.38 build -256452561 
                                                                                               Sun Mar 17 22:28:39 2019

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	16F1786
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	inittext,global,class=CODE,delta=2
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	intentry,global,class=CODE,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	dabs	1,0x7E,2
    24  0000                     	;# 
    25  0001                     	;# 
    26  0002                     	;# 
    27  0003                     	;# 
    28  0004                     	;# 
    29  0005                     	;# 
    30  0006                     	;# 
    31  0007                     	;# 
    32  0008                     	;# 
    33  0009                     	;# 
    34  000A                     	;# 
    35  000B                     	;# 
    36  000C                     	;# 
    37  000D                     	;# 
    38  000E                     	;# 
    39  0010                     	;# 
    40  0011                     	;# 
    41  0012                     	;# 
    42  0013                     	;# 
    43  0014                     	;# 
    44  0015                     	;# 
    45  0016                     	;# 
    46  0016                     	;# 
    47  0017                     	;# 
    48  0018                     	;# 
    49  0019                     	;# 
    50  001A                     	;# 
    51  001B                     	;# 
    52  001C                     	;# 
    53  008C                     	;# 
    54  008D                     	;# 
    55  008E                     	;# 
    56  0090                     	;# 
    57  0091                     	;# 
    58  0092                     	;# 
    59  0093                     	;# 
    60  0094                     	;# 
    61  0095                     	;# 
    62  0096                     	;# 
    63  0097                     	;# 
    64  0098                     	;# 
    65  0099                     	;# 
    66  009A                     	;# 
    67  009B                     	;# 
    68  009B                     	;# 
    69  009C                     	;# 
    70  009D                     	;# 
    71  009E                     	;# 
    72  009F                     	;# 
    73  010C                     	;# 
    74  010D                     	;# 
    75  010E                     	;# 
    76  0111                     	;# 
    77  0112                     	;# 
    78  0113                     	;# 
    79  0114                     	;# 
    80  0115                     	;# 
    81  0116                     	;# 
    82  0117                     	;# 
    83  0118                     	;# 
    84  0119                     	;# 
    85  011A                     	;# 
    86  011B                     	;# 
    87  011C                     	;# 
    88  011D                     	;# 
    89  011D                     	;# 
    90  011D                     	;# 
    91  011E                     	;# 
    92  011F                     	;# 
    93  018C                     	;# 
    94  018D                     	;# 
    95  0191                     	;# 
    96  0191                     	;# 
    97  0192                     	;# 
    98  0193                     	;# 
    99  0193                     	;# 
   100  0193                     	;# 
   101  0194                     	;# 
   102  0195                     	;# 
   103  0196                     	;# 
   104  0197                     	;# 
   105  0199                     	;# 
   106  0199                     	;# 
   107  0199                     	;# 
   108  019A                     	;# 
   109  019A                     	;# 
   110  019A                     	;# 
   111  019B                     	;# 
   112  019B                     	;# 
   113  019B                     	;# 
   114  019B                     	;# 
   115  019B                     	;# 
   116  019C                     	;# 
   117  019C                     	;# 
   118  019C                     	;# 
   119  019D                     	;# 
   120  019D                     	;# 
   121  019D                     	;# 
   122  019E                     	;# 
   123  019E                     	;# 
   124  019E                     	;# 
   125  019F                     	;# 
   126  019F                     	;# 
   127  019F                     	;# 
   128  019F                     	;# 
   129  019F                     	;# 
   130  020C                     	;# 
   131  020D                     	;# 
   132  020E                     	;# 
   133  0210                     	;# 
   134  0211                     	;# 
   135  0211                     	;# 
   136  0212                     	;# 
   137  0212                     	;# 
   138  0213                     	;# 
   139  0213                     	;# 
   140  0214                     	;# 
   141  0214                     	;# 
   142  0215                     	;# 
   143  0215                     	;# 
   144  0215                     	;# 
   145  0215                     	;# 
   146  0216                     	;# 
   147  0216                     	;# 
   148  0217                     	;# 
   149  0217                     	;# 
   150  028C                     	;# 
   151  028D                     	;# 
   152  028E                     	;# 
   153  0291                     	;# 
   154  0291                     	;# 
   155  0292                     	;# 
   156  0293                     	;# 
   157  0298                     	;# 
   158  0298                     	;# 
   159  0299                     	;# 
   160  029A                     	;# 
   161  030C                     	;# 
   162  030D                     	;# 
   163  030E                     	;# 
   164  0311                     	;# 
   165  0311                     	;# 
   166  0312                     	;# 
   167  0313                     	;# 
   168  038C                     	;# 
   169  038D                     	;# 
   170  038E                     	;# 
   171  0390                     	;# 
   172  0391                     	;# 
   173  0392                     	;# 
   174  0393                     	;# 
   175  0394                     	;# 
   176  0395                     	;# 
   177  0396                     	;# 
   178  0397                     	;# 
   179  0398                     	;# 
   180  0399                     	;# 
   181  039D                     	;# 
   182  039E                     	;# 
   183  039F                     	;# 
   184  0511                     	;# 
   185  0513                     	;# 
   186  051A                     	;# 
   187  0811                     	;# 
   188  0812                     	;# 
   189  0813                     	;# 
   190  0814                     	;# 
   191  0815                     	;# 
   192  0816                     	;# 
   193  0817                     	;# 
   194  0818                     	;# 
   195  0819                     	;# 
   196  081A                     	;# 
   197  081B                     	;# 
   198  081C                     	;# 
   199  081D                     	;# 
   200  081E                     	;# 
   201  081F                     	;# 
   202  0820                     	;# 
   203  0821                     	;# 
   204  0821                     	;# 
   205  0822                     	;# 
   206  0823                     	;# 
   207  0823                     	;# 
   208  0824                     	;# 
   209  0825                     	;# 
   210  0825                     	;# 
   211  0826                     	;# 
   212  0827                     	;# 
   213  0827                     	;# 
   214  0828                     	;# 
   215  0829                     	;# 
   216  082A                     	;# 
   217  082B                     	;# 
   218  082C                     	;# 
   219  082D                     	;# 
   220  082E                     	;# 
   221  082F                     	;# 
   222  0831                     	;# 
   223  0832                     	;# 
   224  0833                     	;# 
   225  0834                     	;# 
   226  0835                     	;# 
   227  0836                     	;# 
   228  0837                     	;# 
   229  0838                     	;# 
   230  0839                     	;# 
   231  083A                     	;# 
   232  083B                     	;# 
   233  083C                     	;# 
   234  083D                     	;# 
   235  083E                     	;# 
   236  083F                     	;# 
   237  0840                     	;# 
   238  0841                     	;# 
   239  0841                     	;# 
   240  0842                     	;# 
   241  0843                     	;# 
   242  0843                     	;# 
   243  0844                     	;# 
   244  0845                     	;# 
   245  0845                     	;# 
   246  0846                     	;# 
   247  0847                     	;# 
   248  0847                     	;# 
   249  0848                     	;# 
   250  0849                     	;# 
   251  084A                     	;# 
   252  084B                     	;# 
   253  084C                     	;# 
   254  084D                     	;# 
   255  084E                     	;# 
   256  084F                     	;# 
   257  0851                     	;# 
   258  0852                     	;# 
   259  0853                     	;# 
   260  0854                     	;# 
   261  0855                     	;# 
   262  0856                     	;# 
   263  0857                     	;# 
   264  0858                     	;# 
   265  0859                     	;# 
   266  085A                     	;# 
   267  085B                     	;# 
   268  085C                     	;# 
   269  085D                     	;# 
   270  085E                     	;# 
   271  085F                     	;# 
   272  0860                     	;# 
   273  0861                     	;# 
   274  0861                     	;# 
   275  0862                     	;# 
   276  0863                     	;# 
   277  0863                     	;# 
   278  0864                     	;# 
   279  0865                     	;# 
   280  0865                     	;# 
   281  0866                     	;# 
   282  0867                     	;# 
   283  0867                     	;# 
   284  0868                     	;# 
   285  0869                     	;# 
   286  086A                     	;# 
   287  086B                     	;# 
   288  086C                     	;# 
   289  086D                     	;# 
   290  086E                     	;# 
   291  086F                     	;# 
   292  0FE4                     	;# 
   293  0FE5                     	;# 
   294  0FE6                     	;# 
   295  0FE7                     	;# 
   296  0FE8                     	;# 
   297  0FE9                     	;# 
   298  0FEA                     	;# 
   299  0FEB                     	;# 
   300  0FED                     	;# 
   301  0FEE                     	;# 
   302  0FEF                     	;# 
   303  0000                     	;# 
   304  0001                     	;# 
   305  0002                     	;# 
   306  0003                     	;# 
   307  0004                     	;# 
   308  0005                     	;# 
   309  0006                     	;# 
   310  0007                     	;# 
   311  0008                     	;# 
   312  0009                     	;# 
   313  000A                     	;# 
   314  000B                     	;# 
   315  000C                     	;# 
   316  000D                     	;# 
   317  000E                     	;# 
   318  0010                     	;# 
   319  0011                     	;# 
   320  0012                     	;# 
   321  0013                     	;# 
   322  0014                     	;# 
   323  0015                     	;# 
   324  0016                     	;# 
   325  0016                     	;# 
   326  0017                     	;# 
   327  0018                     	;# 
   328  0019                     	;# 
   329  001A                     	;# 
   330  001B                     	;# 
   331  001C                     	;# 
   332  008C                     	;# 
   333  008D                     	;# 
   334  008E                     	;# 
   335  0090                     	;# 
   336  0091                     	;# 
   337  0092                     	;# 
   338  0093                     	;# 
   339  0094                     	;# 
   340  0095                     	;# 
   341  0096                     	;# 
   342  0097                     	;# 
   343  0098                     	;# 
   344  0099                     	;# 
   345  009A                     	;# 
   346  009B                     	;# 
   347  009B                     	;# 
   348  009C                     	;# 
   349  009D                     	;# 
   350  009E                     	;# 
   351  009F                     	;# 
   352  010C                     	;# 
   353  010D                     	;# 
   354  010E                     	;# 
   355  0111                     	;# 
   356  0112                     	;# 
   357  0113                     	;# 
   358  0114                     	;# 
   359  0115                     	;# 
   360  0116                     	;# 
   361  0117                     	;# 
   362  0118                     	;# 
   363  0119                     	;# 
   364  011A                     	;# 
   365  011B                     	;# 
   366  011C                     	;# 
   367  011D                     	;# 
   368  011D                     	;# 
   369  011D                     	;# 
   370  011E                     	;# 
   371  011F                     	;# 
   372  018C                     	;# 
   373  018D                     	;# 
   374  0191                     	;# 
   375  0191                     	;# 
   376  0192                     	;# 
   377  0193                     	;# 
   378  0193                     	;# 
   379  0193                     	;# 
   380  0194                     	;# 
   381  0195                     	;# 
   382  0196                     	;# 
   383  0197                     	;# 
   384  0199                     	;# 
   385  0199                     	;# 
   386  0199                     	;# 
   387  019A                     	;# 
   388  019A                     	;# 
   389  019A                     	;# 
   390  019B                     	;# 
   391  019B                     	;# 
   392  019B                     	;# 
   393  019B                     	;# 
   394  019B                     	;# 
   395  019C                     	;# 
   396  019C                     	;# 
   397  019C                     	;# 
   398  019D                     	;# 
   399  019D                     	;# 
   400  019D                     	;# 
   401  019E                     	;# 
   402  019E                     	;# 
   403  019E                     	;# 
   404  019F                     	;# 
   405  019F                     	;# 
   406  019F                     	;# 
   407  019F                     	;# 
   408  019F                     	;# 
   409  020C                     	;# 
   410  020D                     	;# 
   411  020E                     	;# 
   412  0210                     	;# 
   413  0211                     	;# 
   414  0211                     	;# 
   415  0212                     	;# 
   416  0212                     	;# 
   417  0213                     	;# 
   418  0213                     	;# 
   419  0214                     	;# 
   420  0214                     	;# 
   421  0215                     	;# 
   422  0215                     	;# 
   423  0215                     	;# 
   424  0215                     	;# 
   425  0216                     	;# 
   426  0216                     	;# 
   427  0217                     	;# 
   428  0217                     	;# 
   429  028C                     	;# 
   430  028D                     	;# 
   431  028E                     	;# 
   432  0291                     	;# 
   433  0291                     	;# 
   434  0292                     	;# 
   435  0293                     	;# 
   436  0298                     	;# 
   437  0298                     	;# 
   438  0299                     	;# 
   439  029A                     	;# 
   440  030C                     	;# 
   441  030D                     	;# 
   442  030E                     	;# 
   443  0311                     	;# 
   444  0311                     	;# 
   445  0312                     	;# 
   446  0313                     	;# 
   447  038C                     	;# 
   448  038D                     	;# 
   449  038E                     	;# 
   450  0390                     	;# 
   451  0391                     	;# 
   452  0392                     	;# 
   453  0393                     	;# 
   454  0394                     	;# 
   455  0395                     	;# 
   456  0396                     	;# 
   457  0397                     	;# 
   458  0398                     	;# 
   459  0399                     	;# 
   460  039D                     	;# 
   461  039E                     	;# 
   462  039F                     	;# 
   463  0511                     	;# 
   464  0513                     	;# 
   465  051A                     	;# 
   466  0811                     	;# 
   467  0812                     	;# 
   468  0813                     	;# 
   469  0814                     	;# 
   470  0815                     	;# 
   471  0816                     	;# 
   472  0817                     	;# 
   473  0818                     	;# 
   474  0819                     	;# 
   475  081A                     	;# 
   476  081B                     	;# 
   477  081C                     	;# 
   478  081D                     	;# 
   479  081E                     	;# 
   480  081F                     	;# 
   481  0820                     	;# 
   482  0821                     	;# 
   483  0821                     	;# 
   484  0822                     	;# 
   485  0823                     	;# 
   486  0823                     	;# 
   487  0824                     	;# 
   488  0825                     	;# 
   489  0825                     	;# 
   490  0826                     	;# 
   491  0827                     	;# 
   492  0827                     	;# 
   493  0828                     	;# 
   494  0829                     	;# 
   495  082A                     	;# 
   496  082B                     	;# 
   497  082C                     	;# 
   498  082D                     	;# 
   499  082E                     	;# 
   500  082F                     	;# 
   501  0831                     	;# 
   502  0832                     	;# 
   503  0833                     	;# 
   504  0834                     	;# 
   505  0835                     	;# 
   506  0836                     	;# 
   507  0837                     	;# 
   508  0838                     	;# 
   509  0839                     	;# 
   510  083A                     	;# 
   511  083B                     	;# 
   512  083C                     	;# 
   513  083D                     	;# 
   514  083E                     	;# 
   515  083F                     	;# 
   516  0840                     	;# 
   517  0841                     	;# 
   518  0841                     	;# 
   519  0842                     	;# 
   520  0843                     	;# 
   521  0843                     	;# 
   522  0844                     	;# 
   523  0845                     	;# 
   524  0845                     	;# 
   525  0846                     	;# 
   526  0847                     	;# 
   527  0847                     	;# 
   528  0848                     	;# 
   529  0849                     	;# 
   530  084A                     	;# 
   531  084B                     	;# 
   532  084C                     	;# 
   533  084D                     	;# 
   534  084E                     	;# 
   535  084F                     	;# 
   536  0851                     	;# 
   537  0852                     	;# 
   538  0853                     	;# 
   539  0854                     	;# 
   540  0855                     	;# 
   541  0856                     	;# 
   542  0857                     	;# 
   543  0858                     	;# 
   544  0859                     	;# 
   545  085A                     	;# 
   546  085B                     	;# 
   547  085C                     	;# 
   548  085D                     	;# 
   549  085E                     	;# 
   550  085F                     	;# 
   551  0860                     	;# 
   552  0861                     	;# 
   553  0861                     	;# 
   554  0862                     	;# 
   555  0863                     	;# 
   556  0863                     	;# 
   557  0864                     	;# 
   558  0865                     	;# 
   559  0865                     	;# 
   560  0866                     	;# 
   561  0867                     	;# 
   562  0867                     	;# 
   563  0868                     	;# 
   564  0869                     	;# 
   565  086A                     	;# 
   566  086B                     	;# 
   567  086C                     	;# 
   568  086D                     	;# 
   569  086E                     	;# 
   570  086F                     	;# 
   571  0FE4                     	;# 
   572  0FE5                     	;# 
   573  0FE6                     	;# 
   574  0FE7                     	;# 
   575  0FE8                     	;# 
   576  0FE9                     	;# 
   577  0FEA                     	;# 
   578  0FEB                     	;# 
   579  0FED                     	;# 
   580  0FEE                     	;# 
   581  0FEF                     	;# 
   582  0000                     	;# 
   583  0001                     	;# 
   584  0002                     	;# 
   585  0003                     	;# 
   586  0004                     	;# 
   587  0005                     	;# 
   588  0006                     	;# 
   589  0007                     	;# 
   590  0008                     	;# 
   591  0009                     	;# 
   592  000A                     	;# 
   593  000B                     	;# 
   594  000C                     	;# 
   595  000D                     	;# 
   596  000E                     	;# 
   597  0010                     	;# 
   598  0011                     	;# 
   599  0012                     	;# 
   600  0013                     	;# 
   601  0014                     	;# 
   602  0015                     	;# 
   603  0016                     	;# 
   604  0016                     	;# 
   605  0017                     	;# 
   606  0018                     	;# 
   607  0019                     	;# 
   608  001A                     	;# 
   609  001B                     	;# 
   610  001C                     	;# 
   611  008C                     	;# 
   612  008D                     	;# 
   613  008E                     	;# 
   614  0090                     	;# 
   615  0091                     	;# 
   616  0092                     	;# 
   617  0093                     	;# 
   618  0094                     	;# 
   619  0095                     	;# 
   620  0096                     	;# 
   621  0097                     	;# 
   622  0098                     	;# 
   623  0099                     	;# 
   624  009A                     	;# 
   625  009B                     	;# 
   626  009B                     	;# 
   627  009C                     	;# 
   628  009D                     	;# 
   629  009E                     	;# 
   630  009F                     	;# 
   631  010C                     	;# 
   632  010D                     	;# 
   633  010E                     	;# 
   634  0111                     	;# 
   635  0112                     	;# 
   636  0113                     	;# 
   637  0114                     	;# 
   638  0115                     	;# 
   639  0116                     	;# 
   640  0117                     	;# 
   641  0118                     	;# 
   642  0119                     	;# 
   643  011A                     	;# 
   644  011B                     	;# 
   645  011C                     	;# 
   646  011D                     	;# 
   647  011D                     	;# 
   648  011D                     	;# 
   649  011E                     	;# 
   650  011F                     	;# 
   651  018C                     	;# 
   652  018D                     	;# 
   653  0191                     	;# 
   654  0191                     	;# 
   655  0192                     	;# 
   656  0193                     	;# 
   657  0193                     	;# 
   658  0193                     	;# 
   659  0194                     	;# 
   660  0195                     	;# 
   661  0196                     	;# 
   662  0197                     	;# 
   663  0199                     	;# 
   664  0199                     	;# 
   665  0199                     	;# 
   666  019A                     	;# 
   667  019A                     	;# 
   668  019A                     	;# 
   669  019B                     	;# 
   670  019B                     	;# 
   671  019B                     	;# 
   672  019B                     	;# 
   673  019B                     	;# 
   674  019C                     	;# 
   675  019C                     	;# 
   676  019C                     	;# 
   677  019D                     	;# 
   678  019D                     	;# 
   679  019D                     	;# 
   680  019E                     	;# 
   681  019E                     	;# 
   682  019E                     	;# 
   683  019F                     	;# 
   684  019F                     	;# 
   685  019F                     	;# 
   686  019F                     	;# 
   687  019F                     	;# 
   688  020C                     	;# 
   689  020D                     	;# 
   690  020E                     	;# 
   691  0210                     	;# 
   692  0211                     	;# 
   693  0211                     	;# 
   694  0212                     	;# 
   695  0212                     	;# 
   696  0213                     	;# 
   697  0213                     	;# 
   698  0214                     	;# 
   699  0214                     	;# 
   700  0215                     	;# 
   701  0215                     	;# 
   702  0215                     	;# 
   703  0215                     	;# 
   704  0216                     	;# 
   705  0216                     	;# 
   706  0217                     	;# 
   707  0217                     	;# 
   708  028C                     	;# 
   709  028D                     	;# 
   710  028E                     	;# 
   711  0291                     	;# 
   712  0291                     	;# 
   713  0292                     	;# 
   714  0293                     	;# 
   715  0298                     	;# 
   716  0298                     	;# 
   717  0299                     	;# 
   718  029A                     	;# 
   719  030C                     	;# 
   720  030D                     	;# 
   721  030E                     	;# 
   722  0311                     	;# 
   723  0311                     	;# 
   724  0312                     	;# 
   725  0313                     	;# 
   726  038C                     	;# 
   727  038D                     	;# 
   728  038E                     	;# 
   729  0390                     	;# 
   730  0391                     	;# 
   731  0392                     	;# 
   732  0393                     	;# 
   733  0394                     	;# 
   734  0395                     	;# 
   735  0396                     	;# 
   736  0397                     	;# 
   737  0398                     	;# 
   738  0399                     	;# 
   739  039D                     	;# 
   740  039E                     	;# 
   741  039F                     	;# 
   742  0511                     	;# 
   743  0513                     	;# 
   744  051A                     	;# 
   745  0811                     	;# 
   746  0812                     	;# 
   747  0813                     	;# 
   748  0814                     	;# 
   749  0815                     	;# 
   750  0816                     	;# 
   751  0817                     	;# 
   752  0818                     	;# 
   753  0819                     	;# 
   754  081A                     	;# 
   755  081B                     	;# 
   756  081C                     	;# 
   757  081D                     	;# 
   758  081E                     	;# 
   759  081F                     	;# 
   760  0820                     	;# 
   761  0821                     	;# 
   762  0821                     	;# 
   763  0822                     	;# 
   764  0823                     	;# 
   765  0823                     	;# 
   766  0824                     	;# 
   767  0825                     	;# 
   768  0825                     	;# 
   769  0826                     	;# 
   770  0827                     	;# 
   771  0827                     	;# 
   772  0828                     	;# 
   773  0829                     	;# 
   774  082A                     	;# 
   775  082B                     	;# 
   776  082C                     	;# 
   777  082D                     	;# 
   778  082E                     	;# 
   779  082F                     	;# 
   780  0831                     	;# 
   781  0832                     	;# 
   782  0833                     	;# 
   783  0834                     	;# 
   784  0835                     	;# 
   785  0836                     	;# 
   786  0837                     	;# 
   787  0838                     	;# 
   788  0839                     	;# 
   789  083A                     	;# 
   790  083B                     	;# 
   791  083C                     	;# 
   792  083D                     	;# 
   793  083E                     	;# 
   794  083F                     	;# 
   795  0840                     	;# 
   796  0841                     	;# 
   797  0841                     	;# 
   798  0842                     	;# 
   799  0843                     	;# 
   800  0843                     	;# 
   801  0844                     	;# 
   802  0845                     	;# 
   803  0845                     	;# 
   804  0846                     	;# 
   805  0847                     	;# 
   806  0847                     	;# 
   807  0848                     	;# 
   808  0849                     	;# 
   809  084A                     	;# 
   810  084B                     	;# 
   811  084C                     	;# 
   812  084D                     	;# 
   813  084E                     	;# 
   814  084F                     	;# 
   815  0851                     	;# 
   816  0852                     	;# 
   817  0853                     	;# 
   818  0854                     	;# 
   819  0855                     	;# 
   820  0856                     	;# 
   821  0857                     	;# 
   822  0858                     	;# 
   823  0859                     	;# 
   824  085A                     	;# 
   825  085B                     	;# 
   826  085C                     	;# 
   827  085D                     	;# 
   828  085E                     	;# 
   829  085F                     	;# 
   830  0860                     	;# 
   831  0861                     	;# 
   832  0861                     	;# 
   833  0862                     	;# 
   834  0863                     	;# 
   835  0863                     	;# 
   836  0864                     	;# 
   837  0865                     	;# 
   838  0865                     	;# 
   839  0866                     	;# 
   840  0867                     	;# 
   841  0867                     	;# 
   842  0868                     	;# 
   843  0869                     	;# 
   844  086A                     	;# 
   845  086B                     	;# 
   846  086C                     	;# 
   847  086D                     	;# 
   848  086E                     	;# 
   849  086F                     	;# 
   850  0FE4                     	;# 
   851  0FE5                     	;# 
   852  0FE6                     	;# 
   853  0FE7                     	;# 
   854  0FE8                     	;# 
   855  0FE9                     	;# 
   856  0FEA                     	;# 
   857  0FEB                     	;# 
   858  0FED                     	;# 
   859  0FEE                     	;# 
   860  0FEF                     	;# 
   861  0000                     	;# 
   862  0001                     	;# 
   863  0002                     	;# 
   864  0003                     	;# 
   865  0004                     	;# 
   866  0005                     	;# 
   867  0006                     	;# 
   868  0007                     	;# 
   869  0008                     	;# 
   870  0009                     	;# 
   871  000A                     	;# 
   872  000B                     	;# 
   873  000C                     	;# 
   874  000D                     	;# 
   875  000E                     	;# 
   876  0010                     	;# 
   877  0011                     	;# 
   878  0012                     	;# 
   879  0013                     	;# 
   880  0014                     	;# 
   881  0015                     	;# 
   882  0016                     	;# 
   883  0016                     	;# 
   884  0017                     	;# 
   885  0018                     	;# 
   886  0019                     	;# 
   887  001A                     	;# 
   888  001B                     	;# 
   889  001C                     	;# 
   890  008C                     	;# 
   891  008D                     	;# 
   892  008E                     	;# 
   893  0090                     	;# 
   894  0091                     	;# 
   895  0092                     	;# 
   896  0093                     	;# 
   897  0094                     	;# 
   898  0095                     	;# 
   899  0096                     	;# 
   900  0097                     	;# 
   901  0098                     	;# 
   902  0099                     	;# 
   903  009A                     	;# 
   904  009B                     	;# 
   905  009B                     	;# 
   906  009C                     	;# 
   907  009D                     	;# 
   908  009E                     	;# 
   909  009F                     	;# 
   910  010C                     	;# 
   911  010D                     	;# 
   912  010E                     	;# 
   913  0111                     	;# 
   914  0112                     	;# 
   915  0113                     	;# 
   916  0114                     	;# 
   917  0115                     	;# 
   918  0116                     	;# 
   919  0117                     	;# 
   920  0118                     	;# 
   921  0119                     	;# 
   922  011A                     	;# 
   923  011B                     	;# 
   924  011C                     	;# 
   925  011D                     	;# 
   926  011D                     	;# 
   927  011D                     	;# 
   928  011E                     	;# 
   929  011F                     	;# 
   930  018C                     	;# 
   931  018D                     	;# 
   932  0191                     	;# 
   933  0191                     	;# 
   934  0192                     	;# 
   935  0193                     	;# 
   936  0193                     	;# 
   937  0193                     	;# 
   938  0194                     	;# 
   939  0195                     	;# 
   940  0196                     	;# 
   941  0197                     	;# 
   942  0199                     	;# 
   943  0199                     	;# 
   944  0199                     	;# 
   945  019A                     	;# 
   946  019A                     	;# 
   947  019A                     	;# 
   948  019B                     	;# 
   949  019B                     	;# 
   950  019B                     	;# 
   951  019B                     	;# 
   952  019B                     	;# 
   953  019C                     	;# 
   954  019C                     	;# 
   955  019C                     	;# 
   956  019D                     	;# 
   957  019D                     	;# 
   958  019D                     	;# 
   959  019E                     	;# 
   960  019E                     	;# 
   961  019E                     	;# 
   962  019F                     	;# 
   963  019F                     	;# 
   964  019F                     	;# 
   965  019F                     	;# 
   966  019F                     	;# 
   967  020C                     	;# 
   968  020D                     	;# 
   969  020E                     	;# 
   970  0210                     	;# 
   971  0211                     	;# 
   972  0211                     	;# 
   973  0212                     	;# 
   974  0212                     	;# 
   975  0213                     	;# 
   976  0213                     	;# 
   977  0214                     	;# 
   978  0214                     	;# 
   979  0215                     	;# 
   980  0215                     	;# 
   981  0215                     	;# 
   982  0215                     	;# 
   983  0216                     	;# 
   984  0216                     	;# 
   985  0217                     	;# 
   986  0217                     	;# 
   987  028C                     	;# 
   988  028D                     	;# 
   989  028E                     	;# 
   990  0291                     	;# 
   991  0291                     	;# 
   992  0292                     	;# 
   993  0293                     	;# 
   994  0298                     	;# 
   995  0298                     	;# 
   996  0299                     	;# 
   997  029A                     	;# 
   998  030C                     	;# 
   999  030D                     	;# 
  1000  030E                     	;# 
  1001  0311                     	;# 
  1002  0311                     	;# 
  1003  0312                     	;# 
  1004  0313                     	;# 
  1005  038C                     	;# 
  1006  038D                     	;# 
  1007  038E                     	;# 
  1008  0390                     	;# 
  1009  0391                     	;# 
  1010  0392                     	;# 
  1011  0393                     	;# 
  1012  0394                     	;# 
  1013  0395                     	;# 
  1014  0396                     	;# 
  1015  0397                     	;# 
  1016  0398                     	;# 
  1017  0399                     	;# 
  1018  039D                     	;# 
  1019  039E                     	;# 
  1020  039F                     	;# 
  1021  0511                     	;# 
  1022  0513                     	;# 
  1023  051A                     	;# 
  1024  0811                     	;# 
  1025  0812                     	;# 
  1026  0813                     	;# 
  1027  0814                     	;# 
  1028  0815                     	;# 
  1029  0816                     	;# 
  1030  0817                     	;# 
  1031  0818                     	;# 
  1032  0819                     	;# 
  1033  081A                     	;# 
  1034  081B                     	;# 
  1035  081C                     	;# 
  1036  081D                     	;# 
  1037  081E                     	;# 
  1038  081F                     	;# 
  1039  0820                     	;# 
  1040  0821                     	;# 
  1041  0821                     	;# 
  1042  0822                     	;# 
  1043  0823                     	;# 
  1044  0823                     	;# 
  1045  0824                     	;# 
  1046  0825                     	;# 
  1047  0825                     	;# 
  1048  0826                     	;# 
  1049  0827                     	;# 
  1050  0827                     	;# 
  1051  0828                     	;# 
  1052  0829                     	;# 
  1053  082A                     	;# 
  1054  082B                     	;# 
  1055  082C                     	;# 
  1056  082D                     	;# 
  1057  082E                     	;# 
  1058  082F                     	;# 
  1059  0831                     	;# 
  1060  0832                     	;# 
  1061  0833                     	;# 
  1062  0834                     	;# 
  1063  0835                     	;# 
  1064  0836                     	;# 
  1065  0837                     	;# 
  1066  0838                     	;# 
  1067  0839                     	;# 
  1068  083A                     	;# 
  1069  083B                     	;# 
  1070  083C                     	;# 
  1071  083D                     	;# 
  1072  083E                     	;# 
  1073  083F                     	;# 
  1074  0840                     	;# 
  1075  0841                     	;# 
  1076  0841                     	;# 
  1077  0842                     	;# 
  1078  0843                     	;# 
  1079  0843                     	;# 
  1080  0844                     	;# 
  1081  0845                     	;# 
  1082  0845                     	;# 
  1083  0846                     	;# 
  1084  0847                     	;# 
  1085  0847                     	;# 
  1086  0848                     	;# 
  1087  0849                     	;# 
  1088  084A                     	;# 
  1089  084B                     	;# 
  1090  084C                     	;# 
  1091  084D                     	;# 
  1092  084E                     	;# 
  1093  084F                     	;# 
  1094  0851                     	;# 
  1095  0852                     	;# 
  1096  0853                     	;# 
  1097  0854                     	;# 
  1098  0855                     	;# 
  1099  0856                     	;# 
  1100  0857                     	;# 
  1101  0858                     	;# 
  1102  0859                     	;# 
  1103  085A                     	;# 
  1104  085B                     	;# 
  1105  085C                     	;# 
  1106  085D                     	;# 
  1107  085E                     	;# 
  1108  085F                     	;# 
  1109  0860                     	;# 
  1110  0861                     	;# 
  1111  0861                     	;# 
  1112  0862                     	;# 
  1113  0863                     	;# 
  1114  0863                     	;# 
  1115  0864                     	;# 
  1116  0865                     	;# 
  1117  0865                     	;# 
  1118  0866                     	;# 
  1119  0867                     	;# 
  1120  0867                     	;# 
  1121  0868                     	;# 
  1122  0869                     	;# 
  1123  086A                     	;# 
  1124  086B                     	;# 
  1125  086C                     	;# 
  1126  086D                     	;# 
  1127  086E                     	;# 
  1128  086F                     	;# 
  1129  0FE4                     	;# 
  1130  0FE5                     	;# 
  1131  0FE6                     	;# 
  1132  0FE7                     	;# 
  1133  0FE8                     	;# 
  1134  0FE9                     	;# 
  1135  0FEA                     	;# 
  1136  0FEB                     	;# 
  1137  0FED                     	;# 
  1138  0FEE                     	;# 
  1139  0FEF                     	;# 
  1140                           
  1141                           	psect	idataBANK1
  1142  036C                     __pidataBANK1:	
  1143                           
  1144                           ;initializer for _segmcode
  1145  036C  343F               	retlw	63
  1146  036D  3406               	retlw	6
  1147  036E  345B               	retlw	91
  1148  036F  344F               	retlw	79
  1149  0370  3466               	retlw	102
  1150  0371  346D               	retlw	109
  1151  0372  347D               	retlw	125
  1152  0373  3407               	retlw	7
  1153  0374  347F               	retlw	127
  1154  0375  346F               	retlw	111
  1155  0376  3477               	retlw	119
  1156  0377  347C               	retlw	124
  1157  0378  3439               	retlw	57
  1158  0379  345E               	retlw	94
  1159  037A  3479               	retlw	121
  1160  037B  3471               	retlw	113
  1161  000B                     _INTCONbits	set	11
  1162  000D                     _PORTBbits	set	13
  1163  000E                     _PORTCbits	set	14
  1164  0015                     _TMR0	set	21
  1165  0095                     _OPTION_REGbits	set	149
  1166  0099                     _OSCCONbits	set	153
  1167  008C                     _TRISA	set	140
  1168  008D                     _TRISB	set	141
  1169  008E                     _TRISC	set	142
  1170  008E                     _TRISCbits	set	142
  1171  010C                     _LATA	set	268
  1172  010C                     _LATAbits	set	268
  1173  010D                     _LATB	set	269
  1174  010E                     _LATC	set	270
  1175  020C                     _WPUA	set	524
  1176  020D                     _WPUB	set	525
  1177  020E                     _WPUC	set	526
  1178  020E                     _WPUCbits	set	526
  1179  0392                     _IOCAN	set	914
  1180  0391                     _IOCAP	set	913
  1181  0395                     _IOCBN	set	917
  1182  0394                     _IOCBP	set	916
  1183  0399                     _IOCCFbits	set	921
  1184  0398                     _IOCCN	set	920
  1185  0397                     _IOCCP	set	919
  1186  0397                     _IOCCPbits	set	919
  1187                           
  1188                           ; #config settings
  1189  0000                     
  1190                           	psect	cinit
  1191  004E                     start_initialization:	
  1192  004E                     __initialization:	
  1193                           
  1194                           ; Initialize objects allocated to BANK1
  1195  004E  306C               	movlw	low __pidataBANK1
  1196  004F  0084               	movwf	4
  1197  0050  3083               	movlw	(high __pidataBANK1)| (0+128)
  1198  0051  0085               	movwf	5
  1199  0052  30A0               	movlw	low __pdataBANK1
  1200  0053  0086               	movwf	6
  1201  0054  3000               	movlw	high __pdataBANK1
  1202  0055  0087               	movwf	7
  1203  0056  3010               	movlw	16
  1204  0057  3183  237C  3180   	fcall	init_ram
  1205                           
  1206                           ; Clear objects allocated to BANK0
  1207  005A  3020               	movlw	low __pbssBANK0
  1208  005B  0084               	movwf	4
  1209  005C  3000               	movlw	high __pbssBANK0
  1210  005D  0085               	movwf	5
  1211  005E  303C               	movlw	60
  1212  005F  3183  2382         	fcall	clear_ram0
  1213  0061                     end_of_initialization:	
  1214                           ;End of C runtime variable initialization code
  1215                           
  1216  0061                     __end_of__initialization:	
  1217  0061  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1218  0062  0020               	movlb	0
  1219  0063  3183  2B88         	ljmp	_main	;jump to C main() function
  1220                           
  1221                           	psect	bssBANK0
  1222  0020                     __pbssBANK0:	
  1223  0020                     _g_recv_buf:	
  1224  0020                     	ds	40
  1225  0048                     _g_all_level_times:	
  1226  0048                     	ds	2
  1227  004A                     _g_find_recv_start:	
  1228  004A                     	ds	2
  1229  004C                     _g_high_level_times:	
  1230  004C                     	ds	2
  1231  004E                     _g_recv_count:	
  1232  004E                     	ds	2
  1233  0050                     _g_start_read_data:	
  1234  0050                     	ds	2
  1235  0052                     _g_start_read_switch:	
  1236  0052                     	ds	2
  1237  0054                     _g_time_h:	
  1238  0054                     	ds	2
  1239  0056                     _g_time_m:	
  1240  0056                     	ds	2
  1241  0058                     _g_time_s:	
  1242  0058                     	ds	2
  1243  005A                     _g_time_u:	
  1244  005A                     	ds	2
  1245                           
  1246                           	psect	dataBANK1
  1247  00A0                     __pdataBANK1:	
  1248  00A0                     _segmcode:	
  1249  00A0                     	ds	16
  1250                           
  1251                           	psect	inittext
  1252  037C                     init_ram:	
  1253  037C  00FE               	movwf	126
  1254  037D                     initloop:	
  1255  037D  0012               	moviw fsr0++
  1256  037E  001E               	movwi fsr1++
  1257  037F  0BFE               	decfsz	126,f
  1258  0380  2B7D               	goto	initloop
  1259  0381  3400               	retlw	0
  1260                           
  1261                           	psect	clrtext
  1262  0382                     clear_ram0:	
  1263                           ;	Called with FSR0 containing the base address, and
  1264                           ;	WREG with the size to clear
  1265                           
  1266  0382  0064               	clrwdt	;clear the watchdog before getting into this loop
  1267  0383                     clrloop0:	
  1268  0383  0180               	clrf	0	;clear RAM location pointed to by FSR
  1269  0384  3101               	addfsr 0,1
  1270  0385  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1271  0386  2B83               	goto	clrloop0	;have we reached the end yet?
  1272  0387  3400               	retlw	0	;all done for this memory range, return
  1273                           
  1274                           	psect	cstackCOMMON
  1275  0070                     __pcstackCOMMON:	
  1276  0070                     ?_update_time:	
  1277  0070                     ?_receive_decode:	
  1278                           ; 1 bytes @ 0x0
  1279                           
  1280  0070                     ?_init_env:	
  1281                           ; 1 bytes @ 0x0
  1282                           
  1283  0070                     ?_update_display:	
  1284                           ; 1 bytes @ 0x0
  1285                           
  1286  0070                     ?_ISR:	
  1287                           ; 1 bytes @ 0x0
  1288                           
  1289  0070                     ?_main:	
  1290                           ; 1 bytes @ 0x0
  1291                           
  1292  0070                     ?_test_value:	
  1293                           ; 1 bytes @ 0x0
  1294                           
  1295  0070                     ?_control595_delay:	
  1296                           ; 1 bytes @ 0x0
  1297                           
  1298  0070                     ??_control595_delay:	
  1299                           ; 1 bytes @ 0x0
  1300                           
  1301  0070                     ?_write_char:	
  1302                           ; 1 bytes @ 0x0
  1303                           
  1304  0070                     ?_times2number:	
  1305                           ; 1 bytes @ 0x0
  1306                           
  1307  0070                     ?___awmod:	
  1308                           ; 2 bytes @ 0x0
  1309                           
  1310  0070                     times2number@high_level_times:	
  1311                           ; 2 bytes @ 0x0
  1312                           
  1313  0070                     test_value@value:	
  1314                           ; 2 bytes @ 0x0
  1315                           
  1316  0070                     ___awmod@divisor:	
  1317                           ; 2 bytes @ 0x0
  1318                           
  1319                           
  1320                           ; 2 bytes @ 0x0
  1321  0070                     	ds	1
  1322  0071                     control595_delay@times:	
  1323                           
  1324                           ; 2 bytes @ 0x1
  1325  0071                     	ds	1
  1326  0072                     ??_times2number:	
  1327  0072                     ??_test_value:	
  1328                           ; 1 bytes @ 0x2
  1329                           
  1330  0072                     ___awmod@dividend:	
  1331                           ; 1 bytes @ 0x2
  1332                           
  1333                           
  1334                           ; 2 bytes @ 0x2
  1335  0072                     	ds	1
  1336  0073                     ??_write_char:	
  1337                           
  1338                           ; 1 bytes @ 0x3
  1339  0073                     	ds	1
  1340  0074                     ??___awmod:	
  1341                           
  1342                           ; 1 bytes @ 0x4
  1343  0074                     	ds	1
  1344  0075                     write_char@dat:	
  1345  0075                     ___awmod@counter:	
  1346                           ; 1 bytes @ 0x5
  1347                           
  1348                           
  1349                           ; 1 bytes @ 0x5
  1350  0075                     	ds	1
  1351  0076                     write_char@i:	
  1352  0076                     ___awmod@sign:	
  1353                           ; 1 bytes @ 0x6
  1354                           
  1355                           
  1356                           ; 1 bytes @ 0x6
  1357  0076                     	ds	1
  1358  0077                     ??_update_time:	
  1359  0077                     ??_receive_decode:	
  1360                           ; 1 bytes @ 0x7
  1361                           
  1362  0077                     ??_update_display:	
  1363                           ; 1 bytes @ 0x7
  1364                           
  1365                           
  1366                           ; 1 bytes @ 0x7
  1367  0077                     	ds	6
  1368  007D                     ??_ISR:	
  1369                           
  1370                           ; 1 bytes @ 0xD
  1371  007D                     	ds	1
  1372                           
  1373                           	psect	cstackBANK0
  1374  005C                     __pcstackBANK0:	
  1375  005C                     receive_decode@old_time_h:	
  1376                           
  1377                           ; 2 bytes @ 0x0
  1378  005C                     	ds	2
  1379  005E                     receive_decode@old_time_m:	
  1380                           
  1381                           ; 2 bytes @ 0x2
  1382  005E                     	ds	2
  1383  0060                     receive_decode@i:	
  1384                           
  1385                           ; 2 bytes @ 0x4
  1386  0060                     	ds	2
  1387  0062                     receive_decode@read_value:	
  1388                           
  1389                           ; 2 bytes @ 0x6
  1390  0062                     	ds	2
  1391  0064                     ??_init_env:	
  1392                           
  1393                           ; 1 bytes @ 0x8
  1394  0064                     	ds	1
  1395  0065                     init_env@i:	
  1396                           
  1397                           ; 2 bytes @ 0x9
  1398  0065                     	ds	2
  1399  0067                     ??_main:	
  1400                           
  1401                           	psect	maintext
  1402  0388                     __pmaintext:	
  1403                           ; 1 bytes @ 0xB
  1404 ;;
  1405 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1406 ;;
  1407 ;; *************** function _main *****************
  1408 ;; Defined at:
  1409 ;;		line 78 in file "main.c"
  1410 ;; Parameters:    Size  Location     Type
  1411 ;;		None
  1412 ;; Auto vars:     Size  Location     Type
  1413 ;;		None
  1414 ;; Return value:  Size  Location     Type
  1415 ;;                  1    wreg      void 
  1416 ;; Registers used:
  1417 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1418 ;; Tracked objects:
  1419 ;;		On entry : B1F/0
  1420 ;;		On exit  : 0/0
  1421 ;;		Unchanged: 0/0
  1422 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1423 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1424 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1425 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1426 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1427 ;;Total ram usage:        0 bytes
  1428 ;; Hardware stack levels required when called:    6
  1429 ;; This function calls:
  1430 ;;		_init_env
  1431 ;; This function is called by:
  1432 ;;		Startup code after reset
  1433 ;; This function uses a non-reentrant model
  1434 ;;
  1435                           
  1436                           
  1437                           ;psect for function _main
  1438  0388                     _main:	
  1439                           
  1440                           ;main.c: 80: init_env();
  1441                           
  1442                           ;incstack = 0
  1443                           ; Regs used in _main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  1444  0388  3181  21D0  3183   	fcall	_init_env
  1445  038B                     l90:	
  1446                           ;main.c: 83: while(1);
  1447                           
  1448  038B  2B8B               	goto	l90
  1449  038C                     __end_of_main:	
  1450                           ;main.c: 85: return;
  1451                           
  1452                           
  1453                           	psect	text1
  1454  01D0                     __ptext1:	
  1455 ;; *************** function _init_env *****************
  1456 ;; Defined at:
  1457 ;;		line 90 in file "main.c"
  1458 ;; Parameters:    Size  Location     Type
  1459 ;;		None
  1460 ;; Auto vars:     Size  Location     Type
  1461 ;;  i               2    9[BANK0 ] int 
  1462 ;; Return value:  Size  Location     Type
  1463 ;;                  1    wreg      void 
  1464 ;; Registers used:
  1465 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  1466 ;; Tracked objects:
  1467 ;;		On entry : 0/0
  1468 ;;		On exit  : 0/0
  1469 ;;		Unchanged: 0/0
  1470 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1471 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1472 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1473 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1474 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1475 ;;Total ram usage:        3 bytes
  1476 ;; Hardware stack levels used:    1
  1477 ;; Hardware stack levels required when called:    5
  1478 ;; This function calls:
  1479 ;;		Nothing
  1480 ;; This function is called by:
  1481 ;;		_main
  1482 ;; This function uses a non-reentrant model
  1483 ;;
  1484                           
  1485                           
  1486                           ;psect for function _init_env
  1487  01D0                     _init_env:	
  1488                           
  1489                           ;main.c: 95: INTCONbits.GIE = 0b1;
  1490                           
  1491                           ;incstack = 0
  1492                           ; Regs used in _init_env: [wreg+fsr1l+fsr1h+status,2+status,0]
  1493  01D0  178B               	bsf	11,7	;volatile
  1494                           
  1495                           ;main.c: 97: INTCONbits.IOCIE = 0b1;
  1496  01D1  158B               	bsf	11,3	;volatile
  1497                           
  1498                           ;main.c: 101: INTCONbits.TMR0IE = 0b1;
  1499  01D2  168B               	bsf	11,5	;volatile
  1500                           
  1501                           ;main.c: 106: OSCCONbits.SCS = 0b10;
  1502  01D3  0021               	movlb	1	; select bank1
  1503  01D4  0819               	movf	25,w	;volatile
  1504  01D5  39FC               	andlw	-4
  1505  01D6  3802               	iorlw	2
  1506  01D7  0099               	movwf	25	;volatile
  1507                           
  1508                           ;main.c: 107: OSCCONbits.IRCF = 0b1010;
  1509  01D8  0819               	movf	25,w	;volatile
  1510  01D9  3987               	andlw	-121
  1511  01DA  3850               	iorlw	80
  1512  01DB  0099               	movwf	25	;volatile
  1513                           
  1514                           ;main.c: 115: OPTION_REGbits.PSA = 0;
  1515  01DC  1195               	bcf	21,3	;volatile
  1516                           
  1517                           ;main.c: 116: OPTION_REGbits.TMR0CS = 0;
  1518  01DD  1295               	bcf	21,5	;volatile
  1519                           
  1520                           ;main.c: 117: OPTION_REGbits.PS = 4;
  1521  01DE  0815               	movf	21,w	;volatile
  1522  01DF  39F8               	andlw	-8
  1523  01E0  3804               	iorlw	4
  1524  01E1  0095               	movwf	21	;volatile
  1525                           
  1526                           ;main.c: 118: TMR0 = (217 + 14);
  1527  01E2  30E7               	movlw	231
  1528  01E3  0020               	movlb	0	; select bank0
  1529  01E4  0095               	movwf	21	;volatile
  1530                           
  1531                           ;main.c: 126: OPTION_REGbits.nWPUEN = 0;
  1532  01E5  0021               	movlb	1	; select bank1
  1533  01E6  1395               	bcf	21,7	;volatile
  1534                           
  1535                           ;main.c: 128: TRISA = 0;
  1536  01E7  018C               	clrf	12	;volatile
  1537                           
  1538                           ;main.c: 129: LATA = 0;
  1539  01E8  0022               	movlb	2	; select bank2
  1540  01E9  018C               	clrf	12	;volatile
  1541                           
  1542                           ;main.c: 130: WPUA = 0;
  1543  01EA  0024               	movlb	4	; select bank4
  1544  01EB  018C               	clrf	12	;volatile
  1545                           
  1546                           ;main.c: 131: IOCAP = 0;
  1547  01EC  0027               	movlb	7	; select bank7
  1548  01ED  0191               	clrf	17	;volatile
  1549                           
  1550                           ;main.c: 132: IOCAN = 0;
  1551  01EE  0192               	clrf	18	;volatile
  1552                           
  1553                           ;main.c: 134: TRISB = 0;
  1554  01EF  0021               	movlb	1	; select bank1
  1555  01F0  018D               	clrf	13	;volatile
  1556                           
  1557                           ;main.c: 135: LATB = 0;
  1558  01F1  0022               	movlb	2	; select bank2
  1559  01F2  018D               	clrf	13	;volatile
  1560                           
  1561                           ;main.c: 136: WPUB = 0;
  1562  01F3  0024               	movlb	4	; select bank4
  1563  01F4  018D               	clrf	13	;volatile
  1564                           
  1565                           ;main.c: 137: IOCBP = 0;
  1566  01F5  0027               	movlb	7	; select bank7
  1567  01F6  0194               	clrf	20	;volatile
  1568                           
  1569                           ;main.c: 138: IOCBN = 0;
  1570  01F7  0195               	clrf	21	;volatile
  1571                           
  1572                           ;main.c: 140: TRISC = 0;
  1573  01F8  0021               	movlb	1	; select bank1
  1574  01F9  018E               	clrf	14	;volatile
  1575                           
  1576                           ;main.c: 141: LATC = 0;
  1577  01FA  0022               	movlb	2	; select bank2
  1578  01FB  018E               	clrf	14	;volatile
  1579                           
  1580                           ;main.c: 142: WPUC = 0;
  1581  01FC  0024               	movlb	4	; select bank4
  1582  01FD  018E               	clrf	14	;volatile
  1583                           
  1584                           ;main.c: 143: IOCCP = 0;
  1585  01FE  0027               	movlb	7	; select bank7
  1586  01FF  0197               	clrf	23	;volatile
  1587                           
  1588                           ;main.c: 144: IOCCN = 0;
  1589  0200  0198               	clrf	24	;volatile
  1590                           
  1591                           ;main.c: 149: TRISCbits.TRISC7 = 1;
  1592  0201  0021               	movlb	1	; select bank1
  1593  0202  178E               	bsf	14,7	;volatile
  1594                           
  1595                           ;main.c: 150: WPUCbits.WPUC7 = 1;
  1596  0203  0024               	movlb	4	; select bank4
  1597  0204  178E               	bsf	14,7	;volatile
  1598                           
  1599                           ;main.c: 152: TRISCbits.TRISC2 = 1;
  1600  0205  0021               	movlb	1	; select bank1
  1601  0206  150E               	bsf	14,2	;volatile
  1602                           
  1603                           ;main.c: 153: WPUCbits.WPUC2 = 1;
  1604  0207  0024               	movlb	4	; select bank4
  1605  0208  150E               	bsf	14,2	;volatile
  1606                           
  1607                           ;main.c: 154: IOCCPbits.IOCCP2 = 1;
  1608  0209  0027               	movlb	7	; select bank7
  1609  020A  1517               	bsf	23,2	;volatile
  1610                           
  1611                           ;main.c: 159: g_time_h = 0;
  1612  020B  0020               	movlb	0	; select bank0
  1613  020C  01D4               	clrf	_g_time_h
  1614  020D  01D5               	clrf	_g_time_h+1
  1615                           
  1616                           ;main.c: 160: g_time_m = 0;
  1617  020E  01D6               	clrf	_g_time_m
  1618  020F  01D7               	clrf	_g_time_m+1
  1619                           
  1620                           ;main.c: 161: g_time_s = 0;
  1621  0210  01D8               	clrf	_g_time_s
  1622  0211  01D9               	clrf	_g_time_s+1
  1623                           
  1624                           ;main.c: 162: g_time_u = 0;
  1625  0212  01DA               	clrf	_g_time_u
  1626  0213  01DB               	clrf	_g_time_u+1
  1627                           
  1628                           ;main.c: 165: g_start_read_switch = 0;
  1629  0214  01D2               	clrf	_g_start_read_switch
  1630  0215  01D3               	clrf	_g_start_read_switch+1
  1631                           
  1632                           ;main.c: 166: g_start_read_data = 0;
  1633  0216  01D0               	clrf	_g_start_read_data
  1634  0217  01D1               	clrf	_g_start_read_data+1
  1635                           
  1636                           ;main.c: 167: g_find_recv_start = 0;
  1637  0218  01CA               	clrf	_g_find_recv_start
  1638  0219  01CB               	clrf	_g_find_recv_start+1
  1639                           
  1640                           ;main.c: 170: g_high_level_times = 0;
  1641  021A  01CC               	clrf	_g_high_level_times
  1642  021B  01CD               	clrf	_g_high_level_times+1
  1643                           
  1644                           ;main.c: 171: g_all_level_times = 0;
  1645  021C  01C8               	clrf	_g_all_level_times
  1646  021D  01C9               	clrf	_g_all_level_times+1
  1647                           
  1648                           ;main.c: 172: g_recv_count = 0;
  1649  021E  01CE               	clrf	_g_recv_count
  1650  021F  01CF               	clrf	_g_recv_count+1
  1651                           
  1652                           ;main.c: 173: for(int i = 0;i < 20; i++){
  1653  0220  01E5               	clrf	init_env@i
  1654  0221  01E6               	clrf	init_env@i+1
  1655  0222  0866               	movf	init_env@i+1,w
  1656  0223  3A80               	xorlw	128
  1657  0224  00E4               	movwf	??_init_env
  1658  0225  3080               	movlw	128
  1659  0226  0264               	subwf	??_init_env,w
  1660  0227  1D03               	skipz
  1661  0228  2A2B               	goto	u1085
  1662  0229  3014               	movlw	20
  1663  022A  0265               	subwf	init_env@i,w
  1664  022B                     u1085:	
  1665  022B  1803               	btfsc	3,0
  1666  022C  2A45               	goto	l97
  1667  022D                     l1429:	
  1668                           
  1669                           ;main.c: 174: g_recv_buf[i] = 5;
  1670  022D  0020               	movlb	0	; select bank0
  1671  022E  3565               	lslf	init_env@i,w
  1672  022F  3E20               	addlw	(low (_g_recv_buf| 0))& (0+255)
  1673  0230  0086               	movwf	6
  1674  0231  0187               	clrf	7
  1675  0232  3005               	movlw	5
  1676  0233  3FC0               	movwi [0]fsr1
  1677  0234  3000               	movlw	0
  1678  0235  3FC1               	movwi [1]fsr1
  1679  0236  3001               	movlw	1
  1680  0237  07E5               	addwf	init_env@i,f
  1681  0238  3000               	movlw	0
  1682  0239  3DE6               	addwfc	init_env@i+1,f
  1683  023A  0866               	movf	init_env@i+1,w
  1684  023B  3A80               	xorlw	128
  1685  023C  00E4               	movwf	??_init_env
  1686  023D  3080               	movlw	128
  1687  023E  0264               	subwf	??_init_env,w
  1688  023F  1D03               	skipz
  1689  0240  2A43               	goto	u1095
  1690  0241  3014               	movlw	20
  1691  0242  0265               	subwf	init_env@i,w
  1692  0243                     u1095:	
  1693  0243  1C03               	skipc
  1694  0244  2A2D               	goto	l1429
  1695  0245                     l97:	
  1696                           
  1697                           ;main.c: 175: }
  1698                           ;main.c: 180: PORTCbits.RC6 = 1;
  1699  0245  0020               	movlb	0	; select bank0
  1700  0246  170E               	bsf	14,6	;volatile
  1701  0247  0008               	return
  1702  0248                     __end_of_init_env:	
  1703                           
  1704                           	psect	intentry
  1705  0004                     __pintentry:	
  1706 ;; *************** function _ISR *****************
  1707 ;; Defined at:
  1708 ;;		line 42 in file "main.c"
  1709 ;; Parameters:    Size  Location     Type
  1710 ;;		None
  1711 ;; Auto vars:     Size  Location     Type
  1712 ;;		None
  1713 ;; Return value:  Size  Location     Type
  1714 ;;                  1    wreg      void 
  1715 ;; Registers used:
  1716 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1717 ;; Tracked objects:
  1718 ;;		On entry : 0/0
  1719 ;;		On exit  : 0/0
  1720 ;;		Unchanged: 0/0
  1721 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1722 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1723 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1724 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1725 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1726 ;;Total ram usage:        1 bytes
  1727 ;; Hardware stack levels used:    1
  1728 ;; Hardware stack levels required when called:    4
  1729 ;; This function calls:
  1730 ;;		_receive_decode
  1731 ;;		_update_time
  1732 ;; This function is called by:
  1733 ;;		Interrupt level 1
  1734 ;; This function uses a non-reentrant model
  1735 ;;
  1736                           
  1737  0004                     _ISR:	
  1738                           
  1739                           ;incstack = 0
  1740  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  1741                           
  1742                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1743  0005  3180               	pagesel	$
  1744  0006  0020               	movlb	0	; select bank0
  1745  0007  087F               	movf	127,w
  1746  0008  00FD               	movwf	??_ISR
  1747                           
  1748                           ;main.c: 44: if(IOCCFbits.IOCCF2 == 1 && g_start_read_data == 0 && g_start_read_switch =
      +                          = 1){
  1749  0009  0027               	movlb	7	; select bank7
  1750  000A  1D19               	btfss	25,2	;volatile
  1751  000B  281F               	goto	i1l79
  1752  000C  0020               	movlb	0	; select bank0
  1753  000D  0850               	movf	_g_start_read_data,w
  1754  000E  0451               	iorwf	_g_start_read_data+1,w
  1755  000F  1D03               	btfss	3,2
  1756  0010  281F               	goto	i1l79
  1757  0011  0352               	decf	_g_start_read_switch,w
  1758  0012  0453               	iorwf	_g_start_read_switch+1,w
  1759  0013  1D03               	btfss	3,2
  1760  0014  281F               	goto	i1l79
  1761                           
  1762                           ;main.c: 45: g_start_read_data = 1;
  1763  0015  3001               	movlw	1
  1764  0016  00D0               	movwf	_g_start_read_data
  1765  0017  3000               	movlw	0
  1766  0018  00D1               	movwf	_g_start_read_data+1
  1767                           
  1768                           ;main.c: 46: g_start_read_switch = 0;
  1769  0019  01D2               	clrf	_g_start_read_switch
  1770  001A  01D3               	clrf	_g_start_read_switch+1
  1771                           
  1772                           ;main.c: 47: INTCONbits.IOCIF = 0;
  1773  001B  100B               	bcf	11,0	;volatile
  1774                           
  1775                           ;main.c: 48: IOCCFbits.IOCCF2 == 0;
  1776  001C  0027               	movlb	7	; select bank7
  1777  001D  0819               	movf	25,w	;volatile
  1778                           
  1779                           ;main.c: 49: return;
  1780  001E  2847               	goto	i1l80
  1781  001F                     i1l79:	
  1782                           ;main.c: 50: }else if(INTCONbits.IOCIF || IOCCFbits.IOCCF2){
  1783                           
  1784  001F  180B               	btfsc	11,0	;volatile
  1785  0020  2824               	goto	i1l84
  1786  0021  0027               	movlb	7	; select bank7
  1787  0022  1D19               	btfss	25,2	;volatile
  1788  0023  2827               	goto	i1l1457
  1789  0024                     i1l84:	
  1790                           
  1791                           ;main.c: 51: INTCONbits.IOCIF = 0;
  1792  0024  100B               	bcf	11,0	;volatile
  1793                           
  1794                           ;main.c: 52: IOCCFbits.IOCCF2 == 0;
  1795  0025  0027               	movlb	7	; select bank7
  1796  0026  0819               	movf	25,w	;volatile
  1797  0027                     i1l1457:	
  1798                           
  1799                           ;main.c: 53: }
  1800                           ;main.c: 56: if(g_start_read_data == 1 && INTCONbits.TMR0IF){
  1801  0027  0020               	movlb	0	; select bank0
  1802  0028  0350               	decf	_g_start_read_data,w
  1803  0029  0451               	iorwf	_g_start_read_data+1,w
  1804  002A  1903               	btfsc	3,2
  1805  002B  1D0B               	btfss	11,2	;volatile
  1806  002C  2838               	goto	i1l85
  1807                           
  1808                           ;main.c: 57: update_time();
  1809  002D  3182  2248  3180   	fcall	_update_time
  1810                           
  1811                           ;main.c: 58: receive_decode();
  1812  0030  3180  2065  3180   	fcall	_receive_decode
  1813                           
  1814                           ;main.c: 59: INTCONbits.TMR0IF = 0;
  1815  0033  110B               	bcf	11,2	;volatile
  1816                           
  1817                           ;main.c: 60: TMR0 = (217 + 14);
  1818  0034  30E7               	movlw	231
  1819  0035  0020               	movlb	0	; select bank0
  1820  0036  0095               	movwf	21	;volatile
  1821                           
  1822                           ;main.c: 61: return;
  1823  0037  2847               	goto	i1l80
  1824  0038                     i1l85:	
  1825                           
  1826                           ;main.c: 62: }
  1827                           ;main.c: 65: if(INTCONbits.TMR0IF){
  1828  0038  1D0B               	btfss	11,2	;volatile
  1829  0039  2847               	goto	i1l80
  1830                           
  1831                           ;main.c: 66: update_time();
  1832  003A  3182  2248  3180   	fcall	_update_time
  1833                           
  1834                           ;main.c: 67: INTCONbits.TMR0IF = 0;
  1835  003D  110B               	bcf	11,2	;volatile
  1836                           
  1837                           ;main.c: 68: TMR0 = (217 + 14);
  1838  003E  30E7               	movlw	231
  1839  003F  0020               	movlb	0	; select bank0
  1840  0040  0095               	movwf	21	;volatile
  1841                           
  1842                           ;main.c: 70: if(PORTCbits.RC7 == 1){
  1843  0041  1F8E               	btfss	14,7	;volatile
  1844  0042  2847               	goto	i1l80
  1845                           
  1846                           ;main.c: 71: g_start_read_switch = 1;
  1847  0043  3001               	movlw	1
  1848  0044  00D2               	movwf	_g_start_read_switch
  1849  0045  3000               	movlw	0
  1850  0046  00D3               	movwf	_g_start_read_switch+1
  1851  0047                     i1l80:	
  1852                           ;main.c: 74: }
  1853                           ;main.c: 75: return;
  1854                           
  1855                           ;main.c: 72: }
  1856                           ;main.c: 73: return;
  1857                           
  1858  0047  087D               	movf	??_ISR,w
  1859  0048  0020               	movlb	0	; select bank0
  1860  0049  00FF               	movwf	127
  1861  004A  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  1862  004B  0009               	retfie
  1863  004C                     __end_of_ISR:	
  1864                           
  1865                           	psect	text3
  1866  0248                     __ptext3:	
  1867 ;; *************** function _update_time *****************
  1868 ;; Defined at:
  1869 ;;		line 12 in file "update_time.c"
  1870 ;; Parameters:    Size  Location     Type
  1871 ;;		None
  1872 ;; Auto vars:     Size  Location     Type
  1873 ;;		None
  1874 ;; Return value:  Size  Location     Type
  1875 ;;                  1    wreg      void 
  1876 ;; Registers used:
  1877 ;;		wreg, status,2, status,0, pclath, cstack
  1878 ;; Tracked objects:
  1879 ;;		On entry : 0/0
  1880 ;;		On exit  : 0/0
  1881 ;;		Unchanged: 0/0
  1882 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1883 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1884 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1885 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1886 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1887 ;;Total ram usage:        0 bytes
  1888 ;; Hardware stack levels used:    1
  1889 ;; Hardware stack levels required when called:    3
  1890 ;; This function calls:
  1891 ;;		___awmod
  1892 ;;		_update_display
  1893 ;; This function is called by:
  1894 ;;		_ISR
  1895 ;; This function uses a non-reentrant model
  1896 ;;
  1897                           
  1898                           
  1899                           ;psect for function _update_time
  1900  0248                     _update_time:	
  1901                           
  1902                           ;update_time.c: 13: g_time_u++;
  1903                           
  1904                           ;incstack = 0
  1905                           ; Regs used in _update_time: [wreg+status,2+status,0+pclath+cstack]
  1906  0248  3001               	movlw	1
  1907  0249  0020               	movlb	0	; select bank0
  1908  024A  07DA               	addwf	_g_time_u,f
  1909  024B  3000               	movlw	0
  1910  024C  3DDB               	addwfc	_g_time_u+1,f
  1911                           
  1912                           ;update_time.c: 14: if(g_time_u % 50 == 0){
  1913  024D  3032               	movlw	50
  1914  024E  00F0               	movwf	___awmod@divisor
  1915  024F  3000               	movlw	0
  1916  0250  00F1               	movwf	___awmod@divisor+1
  1917  0251  085B               	movf	_g_time_u+1,w
  1918  0252  00F3               	movwf	___awmod@dividend+1
  1919  0253  085A               	movf	_g_time_u,w
  1920  0254  00F2               	movwf	___awmod@dividend
  1921  0255  3182  2293  3182   	fcall	___awmod
  1922  0258  0870               	movf	?___awmod,w
  1923  0259  0471               	iorwf	?___awmod+1,w
  1924  025A  1D03               	btfss	3,2
  1925  025B  2A67               	goto	i1l1251
  1926                           
  1927                           ;update_time.c: 15: LATAbits.LATA0 = !LATAbits.LATA0;
  1928  025C  1003               	clrc
  1929  025D  0022               	movlb	2	; select bank2
  1930  025E  1C0C               	btfss	12,0	;volatile
  1931  025F  1403               	setc
  1932  0260  1C03               	btfss	3,0
  1933  0261  2A65               	goto	u89_20
  1934  0262  0022               	movlb	2	; select bank2
  1935  0263  140C               	bsf	12,0	;volatile
  1936  0264  2A67               	goto	i1l1251
  1937  0265                     u89_20:	
  1938  0265  0022               	movlb	2	; select bank2
  1939  0266  100C               	bcf	12,0	;volatile
  1940  0267                     i1l1251:	
  1941                           
  1942                           ;update_time.c: 16: }
  1943                           ;update_time.c: 17: if(g_time_u == 100){
  1944  0267  3064               	movlw	100
  1945  0268  0020               	movlb	0	; select bank0
  1946  0269  065A               	xorwf	_g_time_u,w
  1947  026A  045B               	iorwf	_g_time_u+1,w
  1948  026B  1D03               	btfss	3,2
  1949  026C  0008               	return
  1950                           
  1951                           ;update_time.c: 18: g_time_u = 0;
  1952  026D  01DA               	clrf	_g_time_u
  1953  026E  01DB               	clrf	_g_time_u+1
  1954                           
  1955                           ;update_time.c: 19: g_time_s++;
  1956  026F  3001               	movlw	1
  1957  0270  07D8               	addwf	_g_time_s,f
  1958  0271  3000               	movlw	0
  1959  0272  3DD9               	addwfc	_g_time_s+1,f
  1960                           
  1961                           ;update_time.c: 20: if(g_time_s == 60){
  1962  0273  303C               	movlw	60
  1963  0274  0658               	xorwf	_g_time_s,w
  1964  0275  0459               	iorwf	_g_time_s+1,w
  1965  0276  1D03               	btfss	3,2
  1966  0277  0008               	return
  1967                           
  1968                           ;update_time.c: 21: g_time_m++;
  1969  0278  3001               	movlw	1
  1970  0279  07D6               	addwf	_g_time_m,f
  1971  027A  3000               	movlw	0
  1972  027B  3DD7               	addwfc	_g_time_m+1,f
  1973                           
  1974                           ;update_time.c: 22: g_time_s = 0;
  1975  027C  01D8               	clrf	_g_time_s
  1976  027D  01D9               	clrf	_g_time_s+1
  1977                           
  1978                           ;update_time.c: 23: if(g_time_m == 60){
  1979  027E  303C               	movlw	60
  1980  027F  0656               	xorwf	_g_time_m,w
  1981  0280  0457               	iorwf	_g_time_m+1,w
  1982  0281  1D03               	btfss	3,2
  1983  0282  2A90               	goto	i1l1273
  1984                           
  1985                           ;update_time.c: 24: g_time_h++;
  1986  0283  3001               	movlw	1
  1987  0284  07D4               	addwf	_g_time_h,f
  1988  0285  3000               	movlw	0
  1989  0286  3DD5               	addwfc	_g_time_h+1,f
  1990                           
  1991                           ;update_time.c: 25: g_time_m = 0;
  1992  0287  01D6               	clrf	_g_time_m
  1993  0288  01D7               	clrf	_g_time_m+1
  1994                           
  1995                           ;update_time.c: 26: if(g_time_h == 24){
  1996  0289  3018               	movlw	24
  1997  028A  0654               	xorwf	_g_time_h,w
  1998  028B  0455               	iorwf	_g_time_h+1,w
  1999  028C  1D03               	btfss	3,2
  2000  028D  2A90               	goto	i1l1273
  2001                           
  2002                           ;update_time.c: 27: g_time_h = 0;
  2003  028E  01D4               	clrf	_g_time_h
  2004  028F  01D5               	clrf	_g_time_h+1
  2005  0290                     i1l1273:	
  2006                           
  2007                           ;update_time.c: 28: }
  2008                           ;update_time.c: 29: }
  2009                           ;update_time.c: 30: update_display();
  2010  0290  3183  2340         	fcall	_update_display
  2011  0292  0008               	return
  2012  0293                     __end_of_update_time:	
  2013                           ;update_time.c: 31: }
  2014                           ;update_time.c: 32: }
  2015                           ;update_time.c: 33: return;
  2016                           
  2017                           
  2018                           	psect	text4
  2019  0293                     __ptext4:	
  2020 ;; *************** function ___awmod *****************
  2021 ;; Defined at:
  2022 ;;		line 6 in file "E:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awmod.c"
  2023 ;; Parameters:    Size  Location     Type
  2024 ;;  divisor         2    0[COMMON] int 
  2025 ;;  dividend        2    2[COMMON] int 
  2026 ;; Auto vars:     Size  Location     Type
  2027 ;;  sign            1    6[COMMON] unsigned char 
  2028 ;;  counter         1    5[COMMON] unsigned char 
  2029 ;; Return value:  Size  Location     Type
  2030 ;;                  2    0[COMMON] int 
  2031 ;; Registers used:
  2032 ;;		wreg, status,2, status,0
  2033 ;; Tracked objects:
  2034 ;;		On entry : 0/0
  2035 ;;		On exit  : 0/0
  2036 ;;		Unchanged: 0/0
  2037 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2038 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2039 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2040 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2041 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2042 ;;Total ram usage:        7 bytes
  2043 ;; Hardware stack levels used:    1
  2044 ;; This function calls:
  2045 ;;		Nothing
  2046 ;; This function is called by:
  2047 ;;		_update_time
  2048 ;; This function uses a non-reentrant model
  2049 ;;
  2050                           
  2051                           
  2052                           ;psect for function ___awmod
  2053  0293                     ___awmod:	
  2054                           
  2055                           ;incstack = 0
  2056                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  2057  0293  01F6               	clrf	___awmod@sign
  2058  0294  1FF3               	btfss	___awmod@dividend+1,7
  2059  0295  2A9D               	goto	i1l1215
  2060  0296  09F2               	comf	___awmod@dividend,f
  2061  0297  09F3               	comf	___awmod@dividend+1,f
  2062  0298  0AF2               	incf	___awmod@dividend,f
  2063  0299  1903               	skipnz
  2064  029A  0AF3               	incf	___awmod@dividend+1,f
  2065  029B  01F6               	clrf	___awmod@sign
  2066  029C  0AF6               	incf	___awmod@sign,f
  2067  029D                     i1l1215:	
  2068  029D  1FF1               	btfss	___awmod@divisor+1,7
  2069  029E  2AA4               	goto	i1l1219
  2070  029F  09F0               	comf	___awmod@divisor,f
  2071  02A0  09F1               	comf	___awmod@divisor+1,f
  2072  02A1  0AF0               	incf	___awmod@divisor,f
  2073  02A2  1903               	skipnz
  2074  02A3  0AF1               	incf	___awmod@divisor+1,f
  2075  02A4                     i1l1219:	
  2076  02A4  0870               	movf	___awmod@divisor,w
  2077  02A5  0471               	iorwf	___awmod@divisor+1,w
  2078  02A6  1903               	btfsc	3,2
  2079  02A7  2ACB               	goto	i1l1237
  2080  02A8  01F5               	clrf	___awmod@counter
  2081  02A9  0AF5               	incf	___awmod@counter,f
  2082  02AA                     i1l1227:	
  2083  02AA  1BF1               	btfsc	___awmod@divisor+1,7
  2084  02AB  2AB6               	goto	i1l1229
  2085  02AC  3001               	movlw	1
  2086  02AD                     u82_25:	
  2087  02AD  35F0               	lslf	___awmod@divisor,f
  2088  02AE  0DF1               	rlf	___awmod@divisor+1,f
  2089  02AF  0B89               	decfsz	9,f
  2090  02B0  2AAD               	goto	u82_25
  2091  02B1  3001               	movlw	1
  2092  02B2  00F4               	movwf	??___awmod
  2093  02B3  0874               	movf	??___awmod,w
  2094  02B4  07F5               	addwf	___awmod@counter,f
  2095  02B5  2AAA               	goto	i1l1227
  2096  02B6                     i1l1229:	
  2097  02B6  0871               	movf	___awmod@divisor+1,w
  2098  02B7  0273               	subwf	___awmod@dividend+1,w
  2099  02B8  1D03               	skipz
  2100  02B9  2ABC               	goto	u84_25
  2101  02BA  0870               	movf	___awmod@divisor,w
  2102  02BB  0272               	subwf	___awmod@dividend,w
  2103  02BC                     u84_25:	
  2104  02BC  1C03               	skipc
  2105  02BD  2AC2               	goto	i1l1233
  2106  02BE  0870               	movf	___awmod@divisor,w
  2107  02BF  02F2               	subwf	___awmod@dividend,f
  2108  02C0  0871               	movf	___awmod@divisor+1,w
  2109  02C1  3BF3               	subwfb	___awmod@dividend+1,f
  2110  02C2                     i1l1233:	
  2111  02C2  3001               	movlw	1
  2112  02C3                     u85_25:	
  2113  02C3  36F1               	lsrf	___awmod@divisor+1,f
  2114  02C4  0CF0               	rrf	___awmod@divisor,f
  2115  02C5  0B89               	decfsz	9,f
  2116  02C6  2AC3               	goto	u85_25
  2117  02C7  3001               	movlw	1
  2118  02C8  02F5               	subwf	___awmod@counter,f
  2119  02C9  1D03               	btfss	3,2
  2120  02CA  2AB6               	goto	i1l1229
  2121  02CB                     i1l1237:	
  2122  02CB  0876               	movf	___awmod@sign,w
  2123  02CC  1903               	btfsc	3,2
  2124  02CD  2AD3               	goto	i1l1241
  2125  02CE  09F2               	comf	___awmod@dividend,f
  2126  02CF  09F3               	comf	___awmod@dividend+1,f
  2127  02D0  0AF2               	incf	___awmod@dividend,f
  2128  02D1  1903               	skipnz
  2129  02D2  0AF3               	incf	___awmod@dividend+1,f
  2130  02D3                     i1l1241:	
  2131  02D3  0873               	movf	___awmod@dividend+1,w
  2132  02D4  00F1               	movwf	?___awmod+1
  2133  02D5  0872               	movf	___awmod@dividend,w
  2134  02D6  00F0               	movwf	?___awmod
  2135  02D7  0008               	return
  2136  02D8                     __end_of___awmod:	
  2137                           
  2138                           	psect	text5
  2139  0065                     __ptext5:	
  2140 ;; *************** function _receive_decode *****************
  2141 ;; Defined at:
  2142 ;;		line 62 in file "receive_decode.c"
  2143 ;; Parameters:    Size  Location     Type
  2144 ;;		None
  2145 ;; Auto vars:     Size  Location     Type
  2146 ;;  i               2    4[BANK0 ] int 
  2147 ;;  read_value      2    6[BANK0 ] int 
  2148 ;;  old_time_m      2    2[BANK0 ] int 
  2149 ;;  old_time_h      2    0[BANK0 ] int 
  2150 ;; Return value:  Size  Location     Type
  2151 ;;                  1    wreg      void 
  2152 ;; Registers used:
  2153 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2154 ;; Tracked objects:
  2155 ;;		On entry : 0/0
  2156 ;;		On exit  : 0/0
  2157 ;;		Unchanged: 0/0
  2158 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2159 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2160 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2161 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2162 ;;      Totals:         6       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2163 ;;Total ram usage:       14 bytes
  2164 ;; Hardware stack levels used:    1
  2165 ;; Hardware stack levels required when called:    3
  2166 ;; This function calls:
  2167 ;;		_test_value
  2168 ;;		_times2number
  2169 ;;		_update_display
  2170 ;; This function is called by:
  2171 ;;		_ISR
  2172 ;; This function uses a non-reentrant model
  2173 ;;
  2174                           
  2175                           
  2176                           ;psect for function _receive_decode
  2177  0065                     _receive_decode:	
  2178                           
  2179                           ;receive_decode.c: 64: if(PORTCbits.RC2 == 1){
  2180                           
  2181                           ;incstack = 0
  2182                           ; Regs used in _receive_decode: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2183  0065  0020               	movlb	0	; select bank0
  2184  0066  1D0E               	btfss	14,2	;volatile
  2185  0067  286C               	goto	i1l156
  2186                           
  2187                           ;receive_decode.c: 65: g_high_level_times++;
  2188  0068  3001               	movlw	1
  2189  0069  07CC               	addwf	_g_high_level_times,f
  2190  006A  3000               	movlw	0
  2191  006B  3DCD               	addwfc	_g_high_level_times+1,f
  2192  006C                     i1l156:	
  2193                           
  2194                           ;receive_decode.c: 66: }
  2195                           ;receive_decode.c: 68: g_all_level_times++;
  2196  006C  3001               	movlw	1
  2197  006D  07C8               	addwf	_g_all_level_times,f
  2198  006E  3000               	movlw	0
  2199  006F  3DC9               	addwfc	_g_all_level_times+1,f
  2200                           
  2201                           ;receive_decode.c: 71: if(g_all_level_times < 100){
  2202  0070  0849               	movf	_g_all_level_times+1,w
  2203  0071  3A80               	xorlw	128
  2204  0072  00F7               	movwf	??_receive_decode
  2205  0073  3080               	movlw	128
  2206  0074  0277               	subwf	??_receive_decode,w
  2207  0075  1D03               	skipz
  2208  0076  2879               	goto	u96_25
  2209  0077  3064               	movlw	100
  2210  0078  0248               	subwf	_g_all_level_times,w
  2211  0079                     u96_25:	
  2212  0079  1C03               	btfss	3,0
  2213  007A  0008               	return
  2214                           
  2215                           ;receive_decode.c: 73: }
  2216                           ;receive_decode.c: 75: int read_value = times2number(g_high_level_times);
  2217                           
  2218                           ;receive_decode.c: 72: return;
  2219  007B  0020               	movlb	0	; select bank0
  2220  007C  084D               	movf	_g_high_level_times+1,w
  2221  007D  00F1               	movwf	times2number@high_level_times+1
  2222  007E  084C               	movf	_g_high_level_times,w
  2223  007F  00F0               	movwf	times2number@high_level_times
  2224  0080  3181  2151  3180   	fcall	_times2number
  2225  0083  0871               	movf	?_times2number+1,w
  2226  0084  0020               	movlb	0	; select bank0
  2227  0085  00E3               	movwf	receive_decode@read_value+1
  2228  0086  0870               	movf	?_times2number,w
  2229  0087  00E2               	movwf	receive_decode@read_value
  2230                           
  2231                           ;receive_decode.c: 76: test_value(read_value);
  2232  0088  0863               	movf	receive_decode@read_value+1,w
  2233  0089  00F1               	movwf	test_value@value+1
  2234  008A  0862               	movf	receive_decode@read_value,w
  2235  008B  00F0               	movwf	test_value@value
  2236  008C  3182  22D8  3180   	fcall	_test_value
  2237                           
  2238                           ;receive_decode.c: 77: g_all_level_times = 0;
  2239  008F  0020               	movlb	0	; select bank0
  2240  0090  01C8               	clrf	_g_all_level_times
  2241  0091  01C9               	clrf	_g_all_level_times+1
  2242                           
  2243                           ;receive_decode.c: 78: g_high_level_times = 0;
  2244  0092  01CC               	clrf	_g_high_level_times
  2245  0093  01CD               	clrf	_g_high_level_times+1
  2246                           
  2247                           ;receive_decode.c: 80: if(read_value == 5){
  2248  0094  3005               	movlw	5
  2249  0095  0662               	xorwf	receive_decode@read_value,w
  2250  0096  0463               	iorwf	receive_decode@read_value+1,w
  2251  0097  1D03               	btfss	3,2
  2252  0098  28A0               	goto	i1l1301
  2253                           
  2254                           ;receive_decode.c: 82: g_find_recv_start = 1;
  2255  0099  3001               	movlw	1
  2256  009A  00CA               	movwf	_g_find_recv_start
  2257  009B  3000               	movlw	0
  2258  009C  00CB               	movwf	_g_find_recv_start+1
  2259                           
  2260                           ;receive_decode.c: 83: g_recv_count = 0;
  2261  009D  01CE               	clrf	_g_recv_count
  2262  009E  01CF               	clrf	_g_recv_count+1
  2263                           
  2264                           ;receive_decode.c: 84: return;
  2265  009F  0008               	return
  2266  00A0                     i1l1301:	
  2267                           ;receive_decode.c: 85: }else if(read_value == 4){
  2268                           
  2269  00A0  3004               	movlw	4
  2270  00A1  0662               	xorwf	receive_decode@read_value,w
  2271  00A2  0463               	iorwf	receive_decode@read_value+1,w
  2272  00A3  1903               	btfsc	3,2
  2273  00A4  0008               	return
  2274                           
  2275                           ;receive_decode.c: 87: }
  2276                           ;receive_decode.c: 89: if(g_find_recv_start == 0 || read_value == 5){
  2277                           
  2278                           ;receive_decode.c: 86: return;
  2279  00A5  084A               	movf	_g_find_recv_start,w
  2280  00A6  044B               	iorwf	_g_find_recv_start+1,w
  2281  00A7  1903               	btfsc	3,2
  2282  00A8  0008               	return
  2283  00A9  3005               	movlw	5
  2284  00AA  0662               	xorwf	receive_decode@read_value,w
  2285  00AB  0463               	iorwf	receive_decode@read_value+1,w
  2286  00AC  1903               	btfsc	3,2
  2287  00AD  0008               	return
  2288                           
  2289                           ;receive_decode.c: 91: }
  2290                           ;receive_decode.c: 93: g_recv_buf[g_recv_count] = read_value;
  2291                           
  2292                           ;receive_decode.c: 90: return;
  2293  00AE  354E               	lslf	_g_recv_count,w
  2294  00AF  3E20               	addlw	(low (_g_recv_buf| 0))& (0+255)
  2295  00B0  0086               	movwf	6
  2296  00B1  0187               	clrf	7
  2297  00B2  0862               	movf	receive_decode@read_value,w
  2298  00B3  3FC0               	movwi [0]fsr1
  2299  00B4  0863               	movf	receive_decode@read_value+1,w
  2300  00B5  3FC1               	movwi [1]fsr1
  2301                           
  2302                           ;receive_decode.c: 94: g_recv_count++;
  2303  00B6  3001               	movlw	1
  2304  00B7  07CE               	addwf	_g_recv_count,f
  2305  00B8  3000               	movlw	0
  2306  00B9  3DCF               	addwfc	_g_recv_count+1,f
  2307                           
  2308                           ;receive_decode.c: 95: if(g_recv_count < 6){
  2309  00BA  084F               	movf	_g_recv_count+1,w
  2310  00BB  3A80               	xorlw	128
  2311  00BC  00F7               	movwf	??_receive_decode
  2312  00BD  3080               	movlw	128
  2313  00BE  0277               	subwf	??_receive_decode,w
  2314  00BF  1D03               	skipz
  2315  00C0  28C3               	goto	u101_25
  2316  00C1  3006               	movlw	6
  2317  00C2  024E               	subwf	_g_recv_count,w
  2318  00C3                     u101_25:	
  2319  00C3  1C03               	btfss	3,0
  2320  00C4  0008               	return
  2321                           
  2322                           ;receive_decode.c: 97: }
  2323                           ;receive_decode.c: 99: if(g_recv_buf[0] != 0 && g_recv_buf[1] != 0){
  2324                           
  2325                           ;receive_decode.c: 96: return;
  2326  00C5  0020               	movlb	0	; select bank0
  2327  00C6  0820               	movf	_g_recv_buf,w
  2328  00C7  0421               	iorwf	_g_recv_buf+1,w
  2329  00C8  1903               	btfsc	3,2
  2330  00C9  28D3               	goto	i1l1325
  2331  00CA  0822               	movf	_g_recv_buf+2,w
  2332  00CB  0423               	iorwf	_g_recv_buf+3,w
  2333  00CC  1903               	btfsc	3,2
  2334  00CD  28D3               	goto	i1l1325
  2335                           
  2336                           ;receive_decode.c: 101: g_start_read_data = 0;
  2337  00CE  01D0               	clrf	_g_start_read_data
  2338  00CF  01D1               	clrf	_g_start_read_data+1
  2339                           
  2340                           ;receive_decode.c: 102: g_recv_count = 0;
  2341  00D0  01CE               	clrf	_g_recv_count
  2342  00D1  01CF               	clrf	_g_recv_count+1
  2343                           
  2344                           ;receive_decode.c: 103: return;
  2345  00D2  0008               	return
  2346  00D3                     i1l1325:	
  2347                           
  2348                           ;receive_decode.c: 104: }
  2349                           ;receive_decode.c: 106: int old_time_h = g_time_h;
  2350  00D3  0855               	movf	_g_time_h+1,w
  2351  00D4  00DD               	movwf	receive_decode@old_time_h+1
  2352  00D5  0854               	movf	_g_time_h,w
  2353  00D6  00DC               	movwf	receive_decode@old_time_h
  2354                           
  2355                           ;receive_decode.c: 107: int old_time_m = g_time_m;
  2356  00D7  0857               	movf	_g_time_m+1,w
  2357  00D8  00DF               	movwf	receive_decode@old_time_m+1
  2358  00D9  0856               	movf	_g_time_m,w
  2359  00DA  00DE               	movwf	receive_decode@old_time_m
  2360                           
  2361                           ;receive_decode.c: 108: g_time_h = g_recv_buf[2] * 4 + g_recv_buf[3];
  2362  00DB  3006               	movlw	6
  2363  00DC  3E20               	addlw	(low (_g_recv_buf| 0))& (0+255)
  2364  00DD  0086               	movwf	6
  2365  00DE  0187               	clrf	7
  2366  00DF  3004               	movlw	4
  2367  00E0  3E20               	addlw	(low (_g_recv_buf| 0))& (0+255)
  2368  00E1  0084               	movwf	4
  2369  00E2  0185               	clrf	5
  2370  00E3  3F00               	moviw [0]fsr0
  2371  00E4  00F7               	movwf	??_receive_decode
  2372  00E5  3F01               	moviw [1]fsr0
  2373  00E6  00F8               	movwf	??_receive_decode+1
  2374  00E7  35F7               	lslf	??_receive_decode,f
  2375  00E8  0DF8               	rlf	??_receive_decode+1,f
  2376  00E9  35F7               	lslf	??_receive_decode,f
  2377  00EA  0DF8               	rlf	??_receive_decode+1,f
  2378  00EB  3F40               	moviw [0]fsr1
  2379  00EC  0777               	addwf	??_receive_decode,w
  2380  00ED  00D4               	movwf	_g_time_h
  2381  00EE  3F41               	moviw [1]fsr1
  2382  00EF  3D78               	addwfc	??_receive_decode+1,w
  2383  00F0  00D5               	movwf	_g_time_h+1
  2384                           
  2385                           ;receive_decode.c: 109: g_time_m = g_recv_buf[4] * 16 + g_recv_buf[5] * 4 + g_recv_buf[6
      +                          ];
  2386  00F1  300C               	movlw	12
  2387  00F2  3E20               	addlw	(low (_g_recv_buf| 0))& (0+255)
  2388  00F3  0086               	movwf	6
  2389  00F4  0187               	clrf	7
  2390  00F5  300A               	movlw	10
  2391  00F6  3E20               	addlw	(low (_g_recv_buf| 0))& (0+255)
  2392  00F7  0084               	movwf	4
  2393  00F8  0185               	clrf	5
  2394  00F9  3F00               	moviw [0]fsr0
  2395  00FA  00F7               	movwf	??_receive_decode
  2396  00FB  3F01               	moviw [1]fsr0
  2397  00FC  00F8               	movwf	??_receive_decode+1
  2398  00FD  35F7               	lslf	??_receive_decode,f
  2399  00FE  0DF8               	rlf	??_receive_decode+1,f
  2400  00FF  35F7               	lslf	??_receive_decode,f
  2401  0100  0DF8               	rlf	??_receive_decode+1,f
  2402  0101  3008               	movlw	8
  2403  0102  3E20               	addlw	(low (_g_recv_buf| 0))& (0+255)
  2404  0103  0084               	movwf	4
  2405  0104  0185               	clrf	5
  2406  0105  3F00               	moviw [0]fsr0
  2407  0106  00F9               	movwf	??_receive_decode+2
  2408  0107  3F01               	moviw [1]fsr0
  2409  0108  00FA               	movwf	??_receive_decode+3
  2410  0109  0EF9               	swapf	??_receive_decode+2,f
  2411  010A  0EFA               	swapf	??_receive_decode+3,f
  2412  010B  30F0               	movlw	240
  2413  010C  05FA               	andwf	??_receive_decode+3,f
  2414  010D  0879               	movf	??_receive_decode+2,w
  2415  010E  390F               	andlw	15
  2416  010F  04FA               	iorwf	??_receive_decode+3,f
  2417  0110  30F0               	movlw	240
  2418  0111  05F9               	andwf	??_receive_decode+2,f
  2419  0112  0877               	movf	??_receive_decode,w
  2420  0113  0779               	addwf	??_receive_decode+2,w
  2421  0114  00FB               	movwf	??_receive_decode+4
  2422  0115  0878               	movf	??_receive_decode+1,w
  2423  0116  3D7A               	addwfc	??_receive_decode+3,w
  2424  0117  00FC               	movwf	??_receive_decode+5
  2425  0118  3F40               	moviw [0]fsr1
  2426  0119  077B               	addwf	??_receive_decode+4,w
  2427  011A  00D6               	movwf	_g_time_m
  2428  011B  3F41               	moviw [1]fsr1
  2429  011C  3D7C               	addwfc	??_receive_decode+5,w
  2430  011D  00D7               	movwf	_g_time_m+1
  2431                           
  2432                           ;receive_decode.c: 111: if(old_time_h != g_time_h || old_time_m != g_time_m){
  2433  011E  0855               	movf	_g_time_h+1,w
  2434  011F  065D               	xorwf	receive_decode@old_time_h+1,w
  2435  0120  1D03               	skipz
  2436  0121  2924               	goto	u104_25
  2437  0122  0854               	movf	_g_time_h,w
  2438  0123  065C               	xorwf	receive_decode@old_time_h,w
  2439  0124                     u104_25:	
  2440  0124  1D03               	skipz
  2441  0125  292E               	goto	i1l1333
  2442  0126  0857               	movf	_g_time_m+1,w
  2443  0127  065F               	xorwf	receive_decode@old_time_m+1,w
  2444  0128  1D03               	skipz
  2445  0129  292C               	goto	u105_25
  2446  012A  0856               	movf	_g_time_m,w
  2447  012B  065E               	xorwf	receive_decode@old_time_m,w
  2448  012C                     u105_25:	
  2449  012C  1903               	skipnz
  2450  012D  2931               	goto	i1l1335
  2451  012E                     i1l1333:	
  2452                           
  2453                           ;receive_decode.c: 112: update_display();
  2454  012E  3183  2340  3180   	fcall	_update_display
  2455  0131                     i1l1335:	
  2456                           
  2457                           ;receive_decode.c: 117: g_start_read_data = 0;
  2458  0131  0020               	movlb	0	; select bank0
  2459  0132  01D0               	clrf	_g_start_read_data
  2460  0133  01D1               	clrf	_g_start_read_data+1
  2461                           
  2462                           ;receive_decode.c: 118: g_recv_count = 0;
  2463  0134  01CE               	clrf	_g_recv_count
  2464  0135  01CF               	clrf	_g_recv_count+1
  2465                           
  2466                           ;receive_decode.c: 119: for(int i = 0;i < 20; i++){
  2467  0136  01E0               	clrf	receive_decode@i
  2468  0137  01E1               	clrf	receive_decode@i+1
  2469  0138                     L1:	
  2470  0138  0861               	movf	receive_decode@i+1,w
  2471  0139  3A80               	xorlw	128
  2472  013A  00F7               	movwf	??_receive_decode
  2473  013B  3080               	movlw	128
  2474  013C  0277               	subwf	??_receive_decode,w
  2475  013D  1D03               	skipz
  2476  013E  2941               	goto	u106_25
  2477  013F  3014               	movlw	20
  2478  0140  0260               	subwf	receive_decode@i,w
  2479  0141                     u106_25:	
  2480  0141  1803               	btfsc	3,0
  2481  0142  0008               	return
  2482                           
  2483                           ;receive_decode.c: 120: g_recv_buf[i] = 5;
  2484  0143  0020               	movlb	0	; select bank0
  2485  0144  3560               	lslf	receive_decode@i,w
  2486  0145  3E20               	addlw	(low (_g_recv_buf| 0))& (0+255)
  2487  0146  0086               	movwf	6
  2488  0147  0187               	clrf	7
  2489  0148  3005               	movlw	5
  2490  0149  3FC0               	movwi [0]fsr1
  2491  014A  3000               	movlw	0
  2492  014B  3FC1               	movwi [1]fsr1
  2493  014C  3001               	movlw	1
  2494  014D  07E0               	addwf	receive_decode@i,f
  2495  014E  3000               	movlw	0
  2496  014F  3DE1               	addwfc	receive_decode@i+1,f
  2497  0150  2938               	goto	L1
  2498  0151                     __end_of_receive_decode:	
  2499                           ;receive_decode.c: 121: }
  2500                           ;receive_decode.c: 122: return;
  2501                           
  2502                           
  2503                           	psect	text6
  2504  0340                     __ptext6:	
  2505 ;; *************** function _update_display *****************
  2506 ;; Defined at:
  2507 ;;		line 36 in file "update_display.c"
  2508 ;; Parameters:    Size  Location     Type
  2509 ;;		None
  2510 ;; Auto vars:     Size  Location     Type
  2511 ;;		None
  2512 ;; Return value:  Size  Location     Type
  2513 ;;                  1    wreg      void 
  2514 ;; Registers used:
  2515 ;;		wreg, status,2, status,0, pclath, cstack
  2516 ;; Tracked objects:
  2517 ;;		On entry : 0/0
  2518 ;;		On exit  : 0/0
  2519 ;;		Unchanged: 0/0
  2520 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2521 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2522 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2523 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2524 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2525 ;;Total ram usage:        0 bytes
  2526 ;; Hardware stack levels used:    1
  2527 ;; Hardware stack levels required when called:    2
  2528 ;; This function calls:
  2529 ;;		_control595_delay
  2530 ;;		_write_char
  2531 ;; This function is called by:
  2532 ;;		_receive_decode
  2533 ;;		_update_time
  2534 ;; This function uses a non-reentrant model
  2535 ;;
  2536                           
  2537                           
  2538                           ;psect for function _update_display
  2539  0340                     _update_display:	
  2540                           
  2541                           ;update_display.c: 37: write_char(0xff);
  2542                           
  2543                           ;incstack = 0
  2544                           ; Regs used in _update_display: [wreg+status,2+status,0+pclath+cstack]
  2545  0340  30FF               	movlw	255
  2546  0341  3183  2318  3183   	fcall	_write_char
  2547                           
  2548                           ;update_display.c: 38: write_char(0x00);
  2549  0344  3000               	movlw	0
  2550  0345  3183  2318  3183   	fcall	_write_char
  2551                           
  2552                           ;update_display.c: 39: write_char(0xf0);
  2553  0348  30F0               	movlw	240
  2554  0349  3183  2318  3183   	fcall	_write_char
  2555                           
  2556                           ;update_display.c: 40: write_char(0x0f);
  2557  034C  300F               	movlw	15
  2558  034D  3183  2318  3183   	fcall	_write_char
  2559                           
  2560                           ;update_display.c: 51: PORTCbits.RC5 = 1;
  2561  0350  0020               	movlb	0	; select bank0
  2562  0351  168E               	bsf	14,5	;volatile
  2563                           
  2564                           ;update_display.c: 52: control595_delay();
  2565  0352  3183  2357         	fcall	_control595_delay
  2566                           
  2567                           ;update_display.c: 53: PORTCbits.RC5 = 0;
  2568  0354  0020               	movlb	0	; select bank0
  2569  0355  128E               	bcf	14,5	;volatile
  2570  0356  0008               	return
  2571  0357                     __end_of_update_display:	
  2572                           ;update_display.c: 54: return;
  2573                           
  2574                           
  2575                           	psect	text7
  2576  0318                     __ptext7:	
  2577 ;; *************** function _write_char *****************
  2578 ;; Defined at:
  2579 ;;		line 23 in file "update_display.c"
  2580 ;; Parameters:    Size  Location     Type
  2581 ;;  dat             1    wreg     unsigned char 
  2582 ;; Auto vars:     Size  Location     Type
  2583 ;;  dat             1    5[COMMON] unsigned char 
  2584 ;;  i               1    6[COMMON] unsigned char 
  2585 ;; Return value:  Size  Location     Type
  2586 ;;                  1    wreg      void 
  2587 ;; Registers used:
  2588 ;;		wreg, status,2, status,0, pclath, cstack
  2589 ;; Tracked objects:
  2590 ;;		On entry : 0/0
  2591 ;;		On exit  : 0/0
  2592 ;;		Unchanged: 0/0
  2593 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2594 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2595 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2596 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2597 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2598 ;;Total ram usage:        4 bytes
  2599 ;; Hardware stack levels used:    1
  2600 ;; Hardware stack levels required when called:    1
  2601 ;; This function calls:
  2602 ;;		_control595_delay
  2603 ;; This function is called by:
  2604 ;;		_update_display
  2605 ;; This function uses a non-reentrant model
  2606 ;;
  2607                           
  2608                           
  2609                           ;psect for function _write_char
  2610  0318                     _write_char:	
  2611                           
  2612                           ;incstack = 0
  2613                           ; Regs used in _write_char: [wreg+status,2+status,0+pclath+cstack]
  2614                           ;write_char@dat stored from wreg
  2615  0318  00F5               	movwf	write_char@dat
  2616                           
  2617                           ;update_display.c: 24: unsigned char i;
  2618                           ;update_display.c: 25: for(i = 0; i < 8; i++){
  2619  0319  01F6               	clrf	write_char@i
  2620  031A                     L2:	
  2621  031A  3008               	movlw	8
  2622  031B  0276               	subwf	write_char@i,w
  2623  031C  1803               	btfsc	3,0
  2624  031D  0008               	return
  2625                           
  2626                           ;update_display.c: 26: PORTBbits.RB3 = (dat & 0x80) >> 7;
  2627  031E  0875               	movf	write_char@dat,w
  2628  031F  00F3               	movwf	??_write_char
  2629  0320  3007               	movlw	7
  2630  0321                     u62_25:	
  2631  0321  36F3               	lsrf	??_write_char,f
  2632  0322  0B89               	decfsz	9,f
  2633  0323  2B21               	goto	u62_25
  2634  0324  0873               	movf	??_write_char,w
  2635  0325  3901               	andlw	1
  2636  0326  00F4               	movwf	??_write_char+1
  2637  0327  0DF4               	rlf	??_write_char+1,f
  2638  0328  0DF4               	rlf	??_write_char+1,f
  2639  0329  0DF4               	rlf	??_write_char+1,f
  2640  032A  0020               	movlb	0	; select bank0
  2641  032B  080D               	movf	13,w	;volatile
  2642  032C  0674               	xorwf	??_write_char+1,w
  2643  032D  39F7               	andlw	-9
  2644  032E  0674               	xorwf	??_write_char+1,w
  2645  032F  008D               	movwf	13	;volatile
  2646                           
  2647                           ;update_display.c: 27: PORTCbits.RC4 = 0;
  2648  0330  120E               	bcf	14,4	;volatile
  2649                           
  2650                           ;update_display.c: 28: control595_delay();
  2651  0331  3183  2357  3183   	fcall	_control595_delay
  2652                           
  2653                           ;update_display.c: 29: PORTCbits.RC4 = 1;
  2654  0334  0020               	movlb	0	; select bank0
  2655  0335  160E               	bsf	14,4	;volatile
  2656                           
  2657                           ;update_display.c: 30: control595_delay();
  2658  0336  3183  2357  3183   	fcall	_control595_delay
  2659                           
  2660                           ;update_display.c: 32: dat <<= 1;
  2661  0339  1003               	clrc
  2662  033A  0DF5               	rlf	write_char@dat,f
  2663  033B  3001               	movlw	1
  2664  033C  00F3               	movwf	??_write_char
  2665  033D  0873               	movf	??_write_char,w
  2666  033E  07F6               	addwf	write_char@i,f
  2667  033F  2B1A               	goto	L2
  2668  0340                     __end_of_write_char:	
  2669                           
  2670                           	psect	text8
  2671  0357                     __ptext8:	
  2672 ;; *************** function _control595_delay *****************
  2673 ;; Defined at:
  2674 ;;		line 15 in file "update_display.c"
  2675 ;; Parameters:    Size  Location     Type
  2676 ;;		None
  2677 ;; Auto vars:     Size  Location     Type
  2678 ;;  times           2    1[COMMON] int 
  2679 ;; Return value:  Size  Location     Type
  2680 ;;                  1    wreg      void 
  2681 ;; Registers used:
  2682 ;;		wreg
  2683 ;; Tracked objects:
  2684 ;;		On entry : 0/0
  2685 ;;		On exit  : 0/0
  2686 ;;		Unchanged: 0/0
  2687 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2688 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2689 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2690 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2691 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2692 ;;Total ram usage:        3 bytes
  2693 ;; Hardware stack levels used:    1
  2694 ;; This function calls:
  2695 ;;		Nothing
  2696 ;; This function is called by:
  2697 ;;		_write_char
  2698 ;;		_update_display
  2699 ;; This function uses a non-reentrant model
  2700 ;;
  2701                           
  2702                           
  2703                           ;psect for function _control595_delay
  2704  0357                     _control595_delay:	
  2705                           
  2706                           ;update_display.c: 16: int times = 10;
  2707                           
  2708                           ;incstack = 0
  2709                           ; Regs used in _control595_delay: [wreg]
  2710  0357  300A               	movlw	10
  2711  0358  00F1               	movwf	control595_delay@times
  2712  0359  3000               	movlw	0
  2713  035A  00F2               	movwf	control595_delay@times+1
  2714  035B                     i1l238:	
  2715                           ;update_display.c: 17: while(times > 0){
  2716                           
  2717  035B  0872               	movf	control595_delay@times+1,w
  2718  035C  3A80               	xorlw	128
  2719  035D  00F0               	movwf	??_control595_delay
  2720  035E  3080               	movlw	128
  2721  035F  0270               	subwf	??_control595_delay,w
  2722  0360  1D03               	skipz
  2723  0361  2B64               	goto	u60_25
  2724  0362  3001               	movlw	1
  2725  0363  0271               	subwf	control595_delay@times,w
  2726  0364                     u60_25:	
  2727  0364  1C03               	btfss	3,0
  2728  0365  0008               	return
  2729                           
  2730                           ;update_display.c: 18: __nop();
  2731  0366  0000               	nop
  2732                           
  2733                           ;update_display.c: 19: times--;
  2734  0367  30FF               	movlw	255
  2735  0368  07F1               	addwf	control595_delay@times,f
  2736  0369  30FF               	movlw	255
  2737  036A  3DF2               	addwfc	control595_delay@times+1,f
  2738  036B  2B5B               	goto	i1l238
  2739  036C                     __end_of_control595_delay:	
  2740                           
  2741                           	psect	text9
  2742  0151                     __ptext9:	
  2743 ;; *************** function _times2number *****************
  2744 ;; Defined at:
  2745 ;;		line 12 in file "receive_decode.c"
  2746 ;; Parameters:    Size  Location     Type
  2747 ;;  high_level_t    2    0[COMMON] int 
  2748 ;; Auto vars:     Size  Location     Type
  2749 ;;		None
  2750 ;; Return value:  Size  Location     Type
  2751 ;;                  2    0[COMMON] int 
  2752 ;; Registers used:
  2753 ;;		wreg, status,2
  2754 ;; Tracked objects:
  2755 ;;		On entry : 0/0
  2756 ;;		On exit  : 0/0
  2757 ;;		Unchanged: 0/0
  2758 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2759 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2760 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2761 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2762 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2763 ;;Total ram usage:        3 bytes
  2764 ;; Hardware stack levels used:    1
  2765 ;; This function calls:
  2766 ;;		Nothing
  2767 ;; This function is called by:
  2768 ;;		_receive_decode
  2769 ;; This function uses a non-reentrant model
  2770 ;;
  2771                           
  2772                           
  2773                           ;psect for function _times2number
  2774  0151                     _times2number:	
  2775                           
  2776                           ;receive_decode.c: 13: if(high_level_times >= 10 - 5 && high_level_times < 10 + 5){
  2777                           
  2778                           ;incstack = 0
  2779                           ; Regs used in _times2number: [wreg+status,2]
  2780  0151  0871               	movf	times2number@high_level_times+1,w
  2781  0152  3A80               	xorlw	128
  2782  0153  00F2               	movwf	??_times2number
  2783  0154  3080               	movlw	128
  2784  0155  0272               	subwf	??_times2number,w
  2785  0156  1D03               	skipz
  2786  0157  295A               	goto	u64_25
  2787  0158  3005               	movlw	5
  2788  0159  0270               	subwf	times2number@high_level_times,w
  2789  015A                     u64_25:	
  2790  015A  1C03               	skipc
  2791  015B  296A               	goto	i1l1133
  2792  015C  0871               	movf	times2number@high_level_times+1,w
  2793  015D  3A80               	xorlw	128
  2794  015E  00F2               	movwf	??_times2number
  2795  015F  3080               	movlw	128
  2796  0160  0272               	subwf	??_times2number,w
  2797  0161  1D03               	skipz
  2798  0162  2965               	goto	u65_25
  2799  0163  300F               	movlw	15
  2800  0164  0270               	subwf	times2number@high_level_times,w
  2801  0165                     u65_25:	
  2802  0165  1803               	skipnc
  2803  0166  296A               	goto	i1l1133
  2804                           
  2805                           ;receive_decode.c: 14: return 0;
  2806  0167  01F0               	clrf	?_times2number
  2807  0168  01F1               	clrf	?_times2number+1
  2808                           
  2809                           ;receive_decode.c: 15: }else if(high_level_times >= 20 - 5 && high_level_times < 20 + 5)
      +                          {
  2810  0169  0008               	return
  2811  016A                     i1l1133:	
  2812  016A  0871               	movf	times2number@high_level_times+1,w
  2813  016B  3A80               	xorlw	128
  2814  016C  00F2               	movwf	??_times2number
  2815  016D  3080               	movlw	128
  2816  016E  0272               	subwf	??_times2number,w
  2817  016F  1D03               	skipz
  2818  0170  2973               	goto	u66_25
  2819  0171  300F               	movlw	15
  2820  0172  0270               	subwf	times2number@high_level_times,w
  2821  0173                     u66_25:	
  2822  0173  1C03               	skipc
  2823  0174  2985               	goto	i1l1143
  2824  0175  0871               	movf	times2number@high_level_times+1,w
  2825  0176  3A80               	xorlw	128
  2826  0177  00F2               	movwf	??_times2number
  2827  0178  3080               	movlw	128
  2828  0179  0272               	subwf	??_times2number,w
  2829  017A  1D03               	skipz
  2830  017B  297E               	goto	u67_25
  2831  017C  3019               	movlw	25
  2832  017D  0270               	subwf	times2number@high_level_times,w
  2833  017E                     u67_25:	
  2834  017E  1803               	skipnc
  2835  017F  2985               	goto	i1l1143
  2836                           
  2837                           ;receive_decode.c: 16: return 1;
  2838  0180  3001               	movlw	1
  2839  0181  00F0               	movwf	?_times2number
  2840  0182  3000               	movlw	0
  2841  0183  00F1               	movwf	?_times2number+1
  2842                           
  2843                           ;receive_decode.c: 17: }else if(high_level_times >= 30 - 5 && high_level_times < 30 + 5)
      +                          {
  2844  0184  0008               	return
  2845  0185                     i1l1143:	
  2846  0185  0871               	movf	times2number@high_level_times+1,w
  2847  0186  3A80               	xorlw	128
  2848  0187  00F2               	movwf	??_times2number
  2849  0188  3080               	movlw	128
  2850  0189  0272               	subwf	??_times2number,w
  2851  018A  1D03               	skipz
  2852  018B  298E               	goto	u68_25
  2853  018C  3019               	movlw	25
  2854  018D  0270               	subwf	times2number@high_level_times,w
  2855  018E                     u68_25:	
  2856  018E  1C03               	skipc
  2857  018F  29A0               	goto	i1l1153
  2858  0190  0871               	movf	times2number@high_level_times+1,w
  2859  0191  3A80               	xorlw	128
  2860  0192  00F2               	movwf	??_times2number
  2861  0193  3080               	movlw	128
  2862  0194  0272               	subwf	??_times2number,w
  2863  0195  1D03               	skipz
  2864  0196  2999               	goto	u69_25
  2865  0197  3023               	movlw	35
  2866  0198  0270               	subwf	times2number@high_level_times,w
  2867  0199                     u69_25:	
  2868  0199  1803               	skipnc
  2869  019A  29A0               	goto	i1l1153
  2870                           
  2871                           ;receive_decode.c: 18: return 2;
  2872  019B  3002               	movlw	2
  2873  019C  00F0               	movwf	?_times2number
  2874  019D  3000               	movlw	0
  2875  019E  00F1               	movwf	?_times2number+1
  2876                           
  2877                           ;receive_decode.c: 19: }else if(high_level_times >= 40 - 5 && high_level_times < 40 + 5)
      +                          {
  2878  019F  0008               	return
  2879  01A0                     i1l1153:	
  2880  01A0  0871               	movf	times2number@high_level_times+1,w
  2881  01A1  3A80               	xorlw	128
  2882  01A2  00F2               	movwf	??_times2number
  2883  01A3  3080               	movlw	128
  2884  01A4  0272               	subwf	??_times2number,w
  2885  01A5  1D03               	skipz
  2886  01A6  29A9               	goto	u70_25
  2887  01A7  3023               	movlw	35
  2888  01A8  0270               	subwf	times2number@high_level_times,w
  2889  01A9                     u70_25:	
  2890  01A9  1C03               	skipc
  2891  01AA  29BB               	goto	i1l1163
  2892  01AB  0871               	movf	times2number@high_level_times+1,w
  2893  01AC  3A80               	xorlw	128
  2894  01AD  00F2               	movwf	??_times2number
  2895  01AE  3080               	movlw	128
  2896  01AF  0272               	subwf	??_times2number,w
  2897  01B0  1D03               	skipz
  2898  01B1  29B4               	goto	u71_25
  2899  01B2  302D               	movlw	45
  2900  01B3  0270               	subwf	times2number@high_level_times,w
  2901  01B4                     u71_25:	
  2902  01B4  1803               	skipnc
  2903  01B5  29BB               	goto	i1l1163
  2904                           
  2905                           ;receive_decode.c: 20: return 3;
  2906  01B6  3003               	movlw	3
  2907  01B7  00F0               	movwf	?_times2number
  2908  01B8  3000               	movlw	0
  2909  01B9  00F1               	movwf	?_times2number+1
  2910                           
  2911                           ;receive_decode.c: 21: }else if(high_level_times >= 40 + 5){
  2912  01BA  0008               	return
  2913  01BB                     i1l1163:	
  2914  01BB  0871               	movf	times2number@high_level_times+1,w
  2915  01BC  3A80               	xorlw	128
  2916  01BD  00F2               	movwf	??_times2number
  2917  01BE  3080               	movlw	128
  2918  01BF  0272               	subwf	??_times2number,w
  2919  01C0  1D03               	skipz
  2920  01C1  29C4               	goto	u72_25
  2921  01C2  302D               	movlw	45
  2922  01C3  0270               	subwf	times2number@high_level_times,w
  2923  01C4                     u72_25:	
  2924  01C4  1C03               	skipc
  2925  01C5  29CB               	goto	i1l1171
  2926                           
  2927                           ;receive_decode.c: 22: return 4;
  2928  01C6  3004               	movlw	4
  2929  01C7  00F0               	movwf	?_times2number
  2930  01C8  3000               	movlw	0
  2931  01C9  00F1               	movwf	?_times2number+1
  2932                           
  2933                           ;receive_decode.c: 23: }else{
  2934  01CA  0008               	return
  2935  01CB                     i1l1171:	
  2936                           
  2937                           ;receive_decode.c: 24: return 5;
  2938  01CB  3005               	movlw	5
  2939  01CC  00F0               	movwf	?_times2number
  2940  01CD  3000               	movlw	0
  2941  01CE  00F1               	movwf	?_times2number+1
  2942  01CF  0008               	return
  2943  01D0                     __end_of_times2number:	
  2944                           
  2945                           	psect	text10
  2946  02D8                     __ptext10:	
  2947 ;; *************** function _test_value *****************
  2948 ;; Defined at:
  2949 ;;		line 28 in file "receive_decode.c"
  2950 ;; Parameters:    Size  Location     Type
  2951 ;;  value           2    0[COMMON] int 
  2952 ;; Auto vars:     Size  Location     Type
  2953 ;;		None
  2954 ;; Return value:  Size  Location     Type
  2955 ;;                  1    wreg      void 
  2956 ;; Registers used:
  2957 ;;		wreg, status,2, status,0
  2958 ;; Tracked objects:
  2959 ;;		On entry : 0/0
  2960 ;;		On exit  : 0/0
  2961 ;;		Unchanged: 0/0
  2962 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2963 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2964 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2965 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2966 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2967 ;;Total ram usage:        2 bytes
  2968 ;; Hardware stack levels used:    1
  2969 ;; This function calls:
  2970 ;;		Nothing
  2971 ;; This function is called by:
  2972 ;;		_receive_decode
  2973 ;; This function uses a non-reentrant model
  2974 ;;
  2975                           
  2976                           
  2977                           ;psect for function _test_value
  2978  02D8                     _test_value:	
  2979                           
  2980                           ;receive_decode.c: 29: if(value == 0){
  2981                           
  2982                           ;incstack = 0
  2983                           ; Regs used in _test_value: [wreg+status,2+status,0]
  2984  02D8  0870               	movf	test_value@value,w
  2985  02D9  0471               	iorwf	test_value@value+1,w
  2986  02DA  1D03               	btfss	3,2
  2987  02DB  2AE2               	goto	i1l1179
  2988                           
  2989                           ;receive_decode.c: 30: LATAbits.LATA2 = 1;
  2990  02DC  0022               	movlb	2	; select bank2
  2991  02DD  150C               	bsf	12,2	;volatile
  2992                           
  2993                           ;receive_decode.c: 31: LATAbits.LATA3 = 0;
  2994  02DE  118C               	bcf	12,3	;volatile
  2995                           
  2996                           ;receive_decode.c: 32: LATAbits.LATA4 = 0;
  2997  02DF  120C               	bcf	12,4	;volatile
  2998                           
  2999                           ;receive_decode.c: 33: LATAbits.LATA5 = 0;
  3000  02E0  128C               	bcf	12,5	;volatile
  3001                           
  3002                           ;receive_decode.c: 34: }else if(value == 1){
  3003  02E1  0008               	return
  3004  02E2                     i1l1179:	
  3005  02E2  0370               	decf	test_value@value,w
  3006  02E3  0471               	iorwf	test_value@value+1,w
  3007  02E4  1D03               	btfss	3,2
  3008  02E5  2AEC               	goto	i1l1183
  3009                           
  3010                           ;receive_decode.c: 35: LATAbits.LATA2 = 0;
  3011  02E6  0022               	movlb	2	; select bank2
  3012  02E7  110C               	bcf	12,2	;volatile
  3013                           
  3014                           ;receive_decode.c: 36: LATAbits.LATA3 = 1;
  3015  02E8  158C               	bsf	12,3	;volatile
  3016                           
  3017                           ;receive_decode.c: 37: LATAbits.LATA4 = 0;
  3018  02E9  120C               	bcf	12,4	;volatile
  3019                           
  3020                           ;receive_decode.c: 38: LATAbits.LATA5 = 0;
  3021  02EA  128C               	bcf	12,5	;volatile
  3022                           
  3023                           ;receive_decode.c: 39: }else if(value == 2){
  3024  02EB  0008               	return
  3025  02EC                     i1l1183:	
  3026  02EC  3002               	movlw	2
  3027  02ED  0670               	xorwf	test_value@value,w
  3028  02EE  0471               	iorwf	test_value@value+1,w
  3029  02EF  1D03               	btfss	3,2
  3030  02F0  2AF7               	goto	i1l1187
  3031                           
  3032                           ;receive_decode.c: 40: LATAbits.LATA2 = 0;
  3033  02F1  0022               	movlb	2	; select bank2
  3034  02F2  110C               	bcf	12,2	;volatile
  3035                           
  3036                           ;receive_decode.c: 41: LATAbits.LATA3 = 0;
  3037  02F3  118C               	bcf	12,3	;volatile
  3038                           
  3039                           ;receive_decode.c: 42: LATAbits.LATA4 = 1;
  3040  02F4  160C               	bsf	12,4	;volatile
  3041                           
  3042                           ;receive_decode.c: 43: LATAbits.LATA5 = 0;
  3043  02F5  128C               	bcf	12,5	;volatile
  3044                           
  3045                           ;receive_decode.c: 44: }else if(value == 3){
  3046  02F6  0008               	return
  3047  02F7                     i1l1187:	
  3048  02F7  3003               	movlw	3
  3049  02F8  0670               	xorwf	test_value@value,w
  3050  02F9  0471               	iorwf	test_value@value+1,w
  3051  02FA  1D03               	btfss	3,2
  3052  02FB  2B02               	goto	i1l1191
  3053                           
  3054                           ;receive_decode.c: 45: LATAbits.LATA2 = 0;
  3055  02FC  0022               	movlb	2	; select bank2
  3056  02FD  110C               	bcf	12,2	;volatile
  3057                           
  3058                           ;receive_decode.c: 46: LATAbits.LATA3 = 0;
  3059  02FE  118C               	bcf	12,3	;volatile
  3060                           
  3061                           ;receive_decode.c: 47: LATAbits.LATA4 = 0;
  3062  02FF  120C               	bcf	12,4	;volatile
  3063                           
  3064                           ;receive_decode.c: 48: LATAbits.LATA5 = 1;
  3065  0300  168C               	bsf	12,5	;volatile
  3066                           
  3067                           ;receive_decode.c: 49: }else if(value == 4){
  3068  0301  0008               	return
  3069  0302                     i1l1191:	
  3070  0302  3004               	movlw	4
  3071  0303  0670               	xorwf	test_value@value,w
  3072  0304  0471               	iorwf	test_value@value+1,w
  3073  0305  1D03               	btfss	3,2
  3074  0306  2B0D               	goto	i1l1195
  3075                           
  3076                           ;receive_decode.c: 50: LATAbits.LATA2 = 1;
  3077  0307  0022               	movlb	2	; select bank2
  3078  0308  150C               	bsf	12,2	;volatile
  3079                           
  3080                           ;receive_decode.c: 51: LATAbits.LATA3 = 1;
  3081  0309  158C               	bsf	12,3	;volatile
  3082                           
  3083                           ;receive_decode.c: 52: LATAbits.LATA4 = 1;
  3084  030A  160C               	bsf	12,4	;volatile
  3085                           
  3086                           ;receive_decode.c: 53: LATAbits.LATA5 = 1;
  3087  030B  168C               	bsf	12,5	;volatile
  3088                           
  3089                           ;receive_decode.c: 54: }else if(value == 5){
  3090  030C  0008               	return
  3091  030D                     i1l1195:	
  3092  030D  3005               	movlw	5
  3093  030E  0670               	xorwf	test_value@value,w
  3094  030F  0471               	iorwf	test_value@value+1,w
  3095  0310  1D03               	btfss	3,2
  3096  0311  0008               	return
  3097                           
  3098                           ;receive_decode.c: 55: LATAbits.LATA2 = 0;
  3099  0312  0022               	movlb	2	; select bank2
  3100  0313  110C               	bcf	12,2	;volatile
  3101                           
  3102                           ;receive_decode.c: 56: LATAbits.LATA3 = 0;
  3103  0314  118C               	bcf	12,3	;volatile
  3104                           
  3105                           ;receive_decode.c: 57: LATAbits.LATA4 = 0;
  3106  0315  120C               	bcf	12,4	;volatile
  3107                           
  3108                           ;receive_decode.c: 58: LATAbits.LATA5 = 0;
  3109  0316  128C               	bcf	12,5	;volatile
  3110  0317  0008               	return
  3111  0318                     __end_of_test_value:	
  3112  007E                     btemp	set	126	;btemp
  3113  007E                     int$flags	set	126
  3114  007E                     wtemp	set	126
  3115  007E                     wtemp0	set	126
  3116  0080                     wtemp1	set	128
  3117  0082                     wtemp2	set	130
  3118  0084                     wtemp3	set	132
  3119  0086                     wtemp4	set	134
  3120  0088                     wtemp5	set	136
  3121  007F                     wtemp6	set	127
  3122  007E                     ttemp	set	126
  3123  007E                     ttemp0	set	126
  3124  0081                     ttemp1	set	129
  3125  0084                     ttemp2	set	132
  3126  0087                     ttemp3	set	135
  3127  007F                     ttemp4	set	127
  3128  007E                     ltemp	set	126
  3129  007E                     ltemp0	set	126
  3130  0082                     ltemp1	set	130
  3131  0086                     ltemp2	set	134
  3132  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        16
    BSS         60
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     11      71
    BANK1            80      0      16
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_receive_decode
    _update_time->___awmod
    _update_display->_write_char
    _write_char->_control595_delay

Critical Paths under _main in BANK0

    _main->_init_env

Critical Paths under _ISR in BANK0

    _ISR->_receive_decode

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0      68
                           _init_env
 ---------------------------------------------------------------------------------
 (1) _init_env                                             3     3      0      68
                                              8 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _ISR                                                  1     1      0    1341
                                             13 COMMON     1     1      0
                     _receive_decode
                        _update_time
 ---------------------------------------------------------------------------------
 (3) _update_time                                          0     0      0     541
                            ___awmod
                     _update_display
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              7     3      4     424
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (3) _receive_decode                                      14    14      0     800
                                              7 COMMON     6     6      0
                                              0 BANK0      8     8      0
                         _test_value
                       _times2number
                     _update_display
 ---------------------------------------------------------------------------------
 (4) _update_display                                       0     0      0     117
                   _control595_delay
                         _write_char
 ---------------------------------------------------------------------------------
 (5) _write_char                                           4     4      0      93
                                              3 COMMON     4     4      0
                   _control595_delay
 ---------------------------------------------------------------------------------
 (6) _control595_delay                                     3     3      0      24
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (4) _times2number                                         3     1      2     262
                                              0 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (4) _test_value                                           2     0      2     196
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _init_env

 _ISR (ROOT)
   _receive_decode
     _test_value
     _times2number
     _update_display
       _control595_delay
       _write_char
         _control595_delay
   _update_time
     ___awmod
     _update_display
       _control595_delay
       _write_char
         _control595_delay

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      B      47       5       88.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      10       7       20.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      65      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      65      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Sun Mar 17 22:28:39 2019

             ?_receive_decode 0070                   _update_time 0248             _g_find_recv_start 004A  
                 __CFG_CP$OFF 0000                            l90 038B                            l97 0245  
              _update_display 0340                   __CFG_LVP$ON 0000             ?_control595_delay 0070  
                __CFG_CPD$OFF 0000                           _ISR 0004                  ___awmod@sign 0076  
                __CFG_BORV$LO 0000            ??_control595_delay 0070                           wreg 0009  
                __CFG_IESO$ON 0000                  __CFG_FOSC$HS 0000                 write_char@dat 0075  
                        ?_ISR 0070                          l1429 022D                          u1085 022B  
                        _LATA 010C                          _LATB 010D                          u1095 0243  
                        _LATC 010E                          i1l80 0047                          i1l84 0024  
                        i1l85 0038                          i1l79 001F                          _TMR0 0015  
                        _WPUA 020C                          _WPUB 020D                          _WPUC 020E  
                __CFG_WRT$OFF 0000                 __CFG_FCMEN$ON 0000                          _main 0388  
                        fsr0h 0005                          fsr1h 0007                          fsr0l 0004  
                        indf0 0000                          fsr1l 0006                          btemp 007E  
               __CFG_BOREN$ON 0000                          ltemp 007E                          start 004C  
                        ttemp 007E                          wtemp 007E                 __CFG_MCLRE$ON 0000  
                       ??_ISR 007D        __end_of_update_display 0357                 __CFG_PLLEN$ON 0000  
                       ?_main 0070                 __CFG_WDTE$OFF 0000               __end_of___awmod 02D8  
                       _IOCAN 0392                         _IOCBN 0395                         _IOCAP 0391  
                       _IOCCN 0398                         _IOCBP 0394                         _IOCCP 0397  
                       i1l156 006C                         i1l238 035B                         u60_25 0364  
                       u70_25 01A9                         u62_25 0321                         u71_25 01B4  
                       u72_25 01C4                         u64_25 015A                         _TRISA 008C  
                       _TRISB 008D                         u65_25 0165                         _TRISC 008E  
                       u66_25 0173                         u82_25 02AD                         u67_25 017E  
                       u68_25 018E                         u84_25 02BC                         u69_25 0199  
                       u85_25 02C3                         u96_25 0079                         u89_20 0265  
                       ltemp0 007E                         ltemp1 0082                         ltemp2 0086  
                       ltemp3 0080                         ttemp0 007E                         ttemp1 0081  
                       ttemp2 0084                         ttemp3 0087                         ttemp4 007F  
                       status 0003                         wtemp0 007E                         wtemp1 0080  
                       wtemp2 0082                         wtemp3 0084                         wtemp4 0086  
                       wtemp5 0088                         wtemp6 007F               __initialization 004E  
                __end_of_main 038C               ?_update_display 0070                __CFG_LPBOR$OFF 0000  
                      ??_main 0067                        u101_25 00C3                        i1l1133 016A  
                      i1l1301 00A0                        i1l1143 0185                        i1l1215 029D  
                      i1l1153 01A0                        i1l1241 02D3                        i1l1233 02C2  
                      i1l1171 01CB                        i1l1163 01BB                        i1l1227 02AA  
                      i1l1219 02A4                        i1l1251 0267                        i1l1333 012E  
                      i1l1325 00D3                        i1l1229 02B6                        i1l1237 02CB  
                      i1l1191 0302                        i1l1183 02EC                        i1l1335 0131  
                      i1l1273 0290                        i1l1195 030D                        i1l1187 02F7  
                      i1l1179 02E2                        u104_25 0124                        i1l1457 0027  
                      u105_25 012C                        u106_25 0141                __CFG_PWRTE$OFF 0000  
              __CFG_STVREN$ON 0000                     ??___awmod 0074              __end_of_init_env 0248  
             ___awmod@divisor 0070               ___awmod@counter 0075  times2number@high_level_times 0070  
     __end_of__initialization 0061              ??_receive_decode 0077                __pcstackCOMMON 0070  
                ?_update_time 0070         control595_delay@times 0071                  __pidataBANK1 036C  
              _OPTION_REGbits 0095                    __pbssBANK0 0020     __size_of_control595_delay 0015  
             __CFG_VCAPEN$OFF 0000                    __pmaintext 0388                    _g_recv_buf 0020  
                  __pintentry 0004                  _g_recv_count 004E            _g_high_level_times 004C  
         _g_start_read_switch 0052                     ?_init_env 0070              ??_update_display 0077  
                     ___awmod 0293                       __ptext1 01D0                       __ptext3 0248  
                     __ptext4 0293                       __ptext5 0065                       __ptext6 0340  
                     __ptext7 0318                       __ptext8 0357                       __ptext9 0151  
                __size_of_ISR 0048              ___awmod@dividend 0072                 ?_times2number 0070  
                   _IOCCFbits 0399                     _IOCCPbits 0397                       clrloop0 0383  
        end_of_initialization 0061                       init_ram 037C                    ??_init_env 0064  
                     initloop 037D          __size_of_update_time 004B                     _PORTBbits 000D  
                   _PORTCbits 000E                    _test_value 02D8                ??_times2number 0072  
                   _TRISCbits 008E              _control595_delay 0357                    _write_char 0318  
    receive_decode@read_value 0062               test_value@value 0070           start_initialization 004E  
    receive_decode@old_time_h 005C      receive_decode@old_time_m 005E                   __end_of_ISR 004C  
             receive_decode@i 0060                   __pdataBANK1 00A0                   ?_test_value 0070  
                   ___latbits 0002                 __pcstackBANK0 005C             __size_of_init_env 0078  
        __end_of_times2number 01D0                      ?___awmod 0070       __size_of_receive_decode 00EC  
                 ?_write_char 0070                      _LATAbits 010C                     clear_ram0 0382  
         __size_of_test_value 0040      __end_of_control595_delay 036C                   write_char@i 0076  
                    _WPUCbits 020E           __size_of_write_char 0028                 ??_update_time 0077  
                   init_env@i 0065              __size_of___awmod 0045       __size_of_update_display 0017  
                    __ptext10 02D8                      _g_time_h 0054                      _g_time_m 0056  
                    _g_time_s 0058                      _g_time_u 005A             _g_start_read_data 0050  
       __size_of_times2number 007F                      _init_env 01D0                 __size_of_main 0004  
                    _segmcode 00A0                      int$flags 007E                _receive_decode 0065  
         __end_of_update_time 0293                  ??_test_value 0072                    _INTCONbits 000B  
                _times2number 0151                      intlevel1 0000             __CFG_CLKOUTEN$OFF 0000  
                  _OSCCONbits 0099             _g_all_level_times 0048            __end_of_test_value 0318  
      __end_of_receive_decode 0151                  ??_write_char 0073            __end_of_write_char 0340  
